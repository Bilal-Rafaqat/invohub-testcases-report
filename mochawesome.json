{
  "stats": {
    "suites": 21,
    "tests": 564,
    "passes": 393,
    "pending": 109,
    "failures": 62,
    "start": "2024-03-15T09:03:49.793Z",
    "end": "2024-03-15T10:33:18.085Z",
    "duration": 5368292,
    "testsRegistered": 564,
    "passPercent": 86.37362637362638,
    "pendingPercent": 19.326241134751772,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b9542514-78de-404e-8906-2d66f618453b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3716888a-2d8d-4387-94ad-2e4bf6f25826",
          "title": "Pending Evaluations",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_1_pendings.js",
          "file": "/test/e2e/evaluation/spec_1_pendings.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pending Evaluations\"",
              "fullTitle": "Pending Evaluations \"before all\" hook in \"Pending Evaluations\"",
              "timedOut": false,
              "duration": 48686,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE departments SET \"hodId\" = 9474 WHERE id = 9;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.login(email, password);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query1 =[\n    `UPDATE employee_evaluations SET \"incrementType\" = 'annual' WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n    `DELETE FROM employee_evaluations WHERE \"employeeId\" = 9742 AND \"incrementType\" = 'designation';`,\n    ];\n    await utilFun.udpateDatabase(query1);",
              "err": {},
              "uuid": "1a69aab8-83ca-4371-83d4-ce4b15707b2f",
              "parentUUID": "3716888a-2d8d-4387-94ad-2e4bf6f25826",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Pending Evaluations\"",
              "fullTitle": "Pending Evaluations \"before each\" hook in \"Pending Evaluations\"",
              "timedOut": false,
              "duration": 3500,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.wait(3000);",
              "err": {},
              "uuid": "3a0e2806-22e9-46aa-b6f1-a68ca2c4f1b3",
              "parentUUID": "3716888a-2d8d-4387-94ad-2e4bf6f25826",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if pending evaluations are showing",
              "fullTitle": "Pending Evaluations should check if pending evaluations are showing",
              "timedOut": false,
              "duration": 39,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "a5c77bde-1a72-4693-af94-2389d020c419",
              "parentUUID": "3716888a-2d8d-4387-94ad-2e4bf6f25826",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Pending Evaluations should able to filter resoures by name",
              "timedOut": false,
              "duration": 2028,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "db3586f3-bc2b-4290-8d73-462b055d0ad6",
              "parentUUID": "3716888a-2d8d-4387-94ad-2e4bf6f25826",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Review Type",
              "fullTitle": "Pending Evaluations should able to filter resoures by Review Type",
              "timedOut": false,
              "duration": 1571,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "5e128c02-f4ad-48c7-a661-40b567862c22",
              "parentUUID": "3716888a-2d8d-4387-94ad-2e4bf6f25826",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Pending Evaluations should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 1562,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "fde9182d-b4a9-4483-965c-9d2eebd879db",
              "parentUUID": "3716888a-2d8d-4387-94ad-2e4bf6f25826",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Pending Evaluations should able to  copy email from options",
              "timedOut": false,
              "duration": 6358,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nawait utilFun.wait(3000);\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "fc3d64c3-227a-4ecb-912f-938d0f97a261",
              "parentUUID": "3716888a-2d8d-4387-94ad-2e4bf6f25826",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Pending Evaluations should able to Send Email from options",
              "timedOut": false,
              "duration": 11717,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "a5cbbff4-6321-41a7-bb27-02e53b53cefb",
              "parentUUID": "3716888a-2d8d-4387-94ad-2e4bf6f25826",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Pending Evaluations should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 7372,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "1dd36f12-c1fb-43af-954f-cd399135a893",
              "parentUUID": "3716888a-2d8d-4387-94ad-2e4bf6f25826",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Pending Evaluations should able to see Email from options",
              "timedOut": false,
              "duration": 6342,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(3000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "7bd550d7-6beb-4366-9463-de44f0f96775",
              "parentUUID": "3716888a-2d8d-4387-94ad-2e4bf6f25826",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Pending Evaluations should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 6728,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "5883edf0-62f8-4a25-8afd-86b118cd7e47",
              "parentUUID": "3716888a-2d8d-4387-94ad-2e4bf6f25826",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Pending Evaluations should able to see Resource Details from options",
              "timedOut": false,
              "duration": 4348,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'http://localhost:3000/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "13f4b1ed-9c17-4f4b-a0da-80578868fe39",
              "parentUUID": "3716888a-2d8d-4387-94ad-2e4bf6f25826",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Pending Evaluations should able to see employee history",
              "timedOut": false,
              "duration": 3166,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "3622f285-20f3-4d2e-8af1-3df88dfbb14b",
              "parentUUID": "3716888a-2d8d-4387-94ad-2e4bf6f25826",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to request a review",
              "fullTitle": "Pending Evaluations should able to request a review",
              "timedOut": false,
              "duration": 7328,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait evaluation.clickReqReviewBtn();\nawait utilFun.wait(1000);\nawait evaluation.clickHod('Muhammad Bilal Rafaqat');\nawait evaluation.clickSendReqBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Request is send successfully.');",
              "err": {},
              "uuid": "97bb59fd-63b4-4a2f-8f7d-c1ed57ac7e95",
              "parentUUID": "3716888a-2d8d-4387-94ad-2e4bf6f25826",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to give a review",
              "fullTitle": "Pending Evaluations should able to give a review",
              "timedOut": false,
              "duration": 15909,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait utilFun.wait(1000);\nawait evaluation.clickAddFeedback();\n// await feedbackForm.enterDate('03092023');\nawait feedbackForm.selectFeedbackDuration('6 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.selectRevisedDesignationCategory('Automation');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('testingggg');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "0703c293-c052-466f-93df-60f2adb0ac40",
              "parentUUID": "3716888a-2d8d-4387-94ad-2e4bf6f25826",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit review form",
              "fullTitle": "Pending Evaluations should able to edit review form",
              "timedOut": false,
              "duration": 9520,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickEditForm();\nawait utilFun.wait(1000);\n// await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('updated');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "5c0cc3a4-2ff8-4398-94e3-b3f023812941",
              "parentUUID": "3716888a-2d8d-4387-94ad-2e4bf6f25826",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to defer review",
              "fullTitle": "Pending Evaluations should able to defer review",
              "timedOut": false,
              "duration": 6283,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickDefer();\nawait evaluation.clickDeferType();\nawait utilFun.wait(1000);\nawait evaluation.selectDeferType('2 Weeks');\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "51d1d9de-907f-450a-9763-a03ce94287fd",
              "parentUUID": "3716888a-2d8d-4387-94ad-2e4bf6f25826",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to complete review",
              "fullTitle": "Pending Evaluations should able to complete review",
              "timedOut": false,
              "duration": 11198,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickComplete();\n// await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "098d7fd6-c593-4425-ae50-7c37c95c4d51",
              "parentUUID": "3716888a-2d8d-4387-94ad-2e4bf6f25826",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a5c77bde-1a72-4693-af94-2389d020c419",
            "db3586f3-bc2b-4290-8d73-462b055d0ad6",
            "5e128c02-f4ad-48c7-a661-40b567862c22",
            "fde9182d-b4a9-4483-965c-9d2eebd879db",
            "fc3d64c3-227a-4ecb-912f-938d0f97a261",
            "a5cbbff4-6321-41a7-bb27-02e53b53cefb",
            "1dd36f12-c1fb-43af-954f-cd399135a893",
            "7bd550d7-6beb-4366-9463-de44f0f96775",
            "5883edf0-62f8-4a25-8afd-86b118cd7e47",
            "13f4b1ed-9c17-4f4b-a0da-80578868fe39",
            "3622f285-20f3-4d2e-8af1-3df88dfbb14b",
            "97bb59fd-63b4-4a2f-8f7d-c1ed57ac7e95",
            "0703c293-c052-466f-93df-60f2adb0ac40",
            "5c0cc3a4-2ff8-4398-94e3-b3f023812941",
            "51d1d9de-907f-450a-9763-a03ce94287fd",
            "098d7fd6-c593-4425-ae50-7c37c95c4d51"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 101469,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "3b62cd89-8670-4071-90f8-3e9d64ef7ce5",
          "title": "Performance Base Evaluations",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_2_performance.js",
          "file": "/test/e2e/evaluation/spec_2_performance.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Performance Base Evaluations\"",
              "fullTitle": "Performance Base Evaluations \"before all\" hook in \"Performance Base Evaluations\"",
              "timedOut": false,
              "duration": 9804,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'performance' WHERE id = 26;`,\n  `UPDATE employees SET \"designation\" = 'Software Engineer' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 138 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "622c8360-3c3b-49e2-b6ce-27324eff4a17",
              "parentUUID": "3b62cd89-8670-4071-90f8-3e9d64ef7ce5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Performance Base Evaluations\"",
              "fullTitle": "Performance Base Evaluations \"before each\" hook in \"Performance Base Evaluations\"",
              "timedOut": false,
              "duration": 4414,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation-performance');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "098e3454-90bc-4a4e-a831-320356dc572b",
              "parentUUID": "3b62cd89-8670-4071-90f8-3e9d64ef7ce5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if performance evaluations are showing",
              "fullTitle": "Performance Base Evaluations should check if performance evaluations are showing",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "46929f1f-a690-4571-8f93-3fac2ceb623c",
              "parentUUID": "3b62cd89-8670-4071-90f8-3e9d64ef7ce5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Performance Base Evaluations should able to filter resoures by name",
              "timedOut": false,
              "duration": 2049,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "9c457387-4603-4291-95f4-9d07b30f3272",
              "parentUUID": "3b62cd89-8670-4071-90f8-3e9d64ef7ce5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Performance Base Evaluations should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 1606,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "cf9743b0-2cca-4f9d-9f8d-32136bfb5c5c",
              "parentUUID": "3b62cd89-8670-4071-90f8-3e9d64ef7ce5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Performance Base Evaluations should able to  copy email from options",
              "timedOut": false,
              "duration": 4039,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "f5f58896-958f-41a9-9d75-a93ae2320f68",
              "parentUUID": "3b62cd89-8670-4071-90f8-3e9d64ef7ce5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Performance Base Evaluations should able to Send Email from options",
              "timedOut": false,
              "duration": 7705,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "2037077d-3e13-464a-8961-3966e67b508f",
              "parentUUID": "3b62cd89-8670-4071-90f8-3e9d64ef7ce5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Performance Base Evaluations should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 8372,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "d7aa1d58-f17e-4a73-8a9e-24f0c54b316a",
              "parentUUID": "3b62cd89-8670-4071-90f8-3e9d64ef7ce5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Performance Base Evaluations should able to see Email from options",
              "timedOut": false,
              "duration": 7298,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(4000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "f41a4b77-3bf9-471f-864f-4bc417540fc1",
              "parentUUID": "3b62cd89-8670-4071-90f8-3e9d64ef7ce5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Performance Base Evaluations should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 6793,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "06243536-b452-4a14-a257-5ab7e1c529b5",
              "parentUUID": "3b62cd89-8670-4071-90f8-3e9d64ef7ce5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Performance Base Evaluations should able to see Resource Details from options",
              "timedOut": false,
              "duration": 4463,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "533d1269-aead-4ad5-816d-2cb2e68c9678",
              "parentUUID": "3b62cd89-8670-4071-90f8-3e9d64ef7ce5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Performance Base Evaluations should able to see employee history",
              "timedOut": false,
              "duration": 3127,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "548b4891-7c9a-46bd-b875-0d0a620f2993",
              "parentUUID": "3b62cd89-8670-4071-90f8-3e9d64ef7ce5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to request a review",
              "fullTitle": "Performance Base Evaluations should able to request a review",
              "timedOut": false,
              "duration": 7363,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();4\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait evaluation.clickReqReviewBtn();\nawait utilFun.wait(1000);\nawait evaluation.clickHod('Muhammad Bilal Rafaqat');\nawait evaluation.clickSendReqBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Request is send successfully.');",
              "err": {},
              "uuid": "e301f40a-04c2-4f73-ab5d-e87811d18fe3",
              "parentUUID": "3b62cd89-8670-4071-90f8-3e9d64ef7ce5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to give a review",
              "fullTitle": "Performance Base Evaluations should able to give a review",
              "timedOut": false,
              "duration": 13221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait utilFun.wait(1000);\nawait evaluation.clickAddFeedback();\nawait feedbackForm.enterDate('03092023');\nawait feedbackForm.selectFeedbackDuration('6 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('testingggg');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "66f5b78c-0c74-4165-b3f7-9c6320f965df",
              "parentUUID": "3b62cd89-8670-4071-90f8-3e9d64ef7ce5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit review form",
              "fullTitle": "Performance Base Evaluations should able to edit review form",
              "timedOut": false,
              "duration": 9197,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickEditForm();\nawait utilFun.wait(1000);\n// await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('updated');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "0789aebb-c223-4645-bc84-59e7032474a5",
              "parentUUID": "3b62cd89-8670-4071-90f8-3e9d64ef7ce5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to defer review",
              "fullTitle": "Performance Base Evaluations should able to defer review",
              "timedOut": false,
              "duration": 6727,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickDefer();\nawait evaluation.clickDeferType();\nawait utilFun.wait(1000);\nawait evaluation.selectDeferType('2 Weeks');\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "5ea17d96-b2a9-4c31-82f7-2378927eadc3",
              "parentUUID": "3b62cd89-8670-4071-90f8-3e9d64ef7ce5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to complete review",
              "fullTitle": "Performance Base Evaluations should able to complete review",
              "timedOut": false,
              "duration": 10210,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickComplete();\n// await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "a0cb1881-ffcd-44ad-8c8d-d8a7d671b19b",
              "parentUUID": "3b62cd89-8670-4071-90f8-3e9d64ef7ce5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "46929f1f-a690-4571-8f93-3fac2ceb623c",
            "9c457387-4603-4291-95f4-9d07b30f3272",
            "cf9743b0-2cca-4f9d-9f8d-32136bfb5c5c",
            "f5f58896-958f-41a9-9d75-a93ae2320f68",
            "2037077d-3e13-464a-8961-3966e67b508f",
            "d7aa1d58-f17e-4a73-8a9e-24f0c54b316a",
            "f41a4b77-3bf9-471f-864f-4bc417540fc1",
            "06243536-b452-4a14-a257-5ab7e1c529b5",
            "533d1269-aead-4ad5-816d-2cb2e68c9678",
            "548b4891-7c9a-46bd-b875-0d0a620f2993",
            "e301f40a-04c2-4f73-ab5d-e87811d18fe3",
            "66f5b78c-0c74-4165-b3f7-9c6320f965df",
            "0789aebb-c223-4645-bc84-59e7032474a5",
            "5ea17d96-b2a9-4c31-82f7-2378927eadc3",
            "a0cb1881-ffcd-44ad-8c8d-d8a7d671b19b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 92207,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "ca3baffd-e67b-46eb-ad54-daadc2391b98",
          "title": "Retention Base Evaluations",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_3_retention.js",
          "file": "/test/e2e/evaluation/spec_3_retention.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Retention Base Evaluations\"",
              "fullTitle": "Retention Base Evaluations \"before all\" hook in \"Retention Base Evaluations\"",
              "timedOut": false,
              "duration": 10095,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'retention' WHERE id = 26;`,\n  `UPDATE employees SET \"designation\" = 'Software Engineer' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 138 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "7990293e-f0fd-41cf-9f21-1d4f744686f8",
              "parentUUID": "ca3baffd-e67b-46eb-ad54-daadc2391b98",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Retention Base Evaluations\"",
              "fullTitle": "Retention Base Evaluations \"before each\" hook in \"Retention Base Evaluations\"",
              "timedOut": false,
              "duration": 4391,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation-retention');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "3174512b-c3af-4989-800c-64ed3b6e81bf",
              "parentUUID": "ca3baffd-e67b-46eb-ad54-daadc2391b98",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if retention evaluations are showing",
              "fullTitle": "Retention Base Evaluations should check if retention evaluations are showing",
              "timedOut": false,
              "duration": 40,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "c96203d6-e7d3-46c2-9aca-d0076f0810e8",
              "parentUUID": "ca3baffd-e67b-46eb-ad54-daadc2391b98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Retention Base Evaluations should able to filter resoures by name",
              "timedOut": false,
              "duration": 1927,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "523b6529-9814-4017-b13b-4853b67fb841",
              "parentUUID": "ca3baffd-e67b-46eb-ad54-daadc2391b98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Retention Base Evaluations should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 1597,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "abc62af0-4367-4dca-b57f-f3bd4ac29bef",
              "parentUUID": "ca3baffd-e67b-46eb-ad54-daadc2391b98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Retention Base Evaluations should able to  copy email from options",
              "timedOut": false,
              "duration": 4077,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "8611103f-2ea4-4eb0-8ca4-64a4e7cff184",
              "parentUUID": "ca3baffd-e67b-46eb-ad54-daadc2391b98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Retention Base Evaluations should able to Send Email from options",
              "timedOut": false,
              "duration": 8360,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "2d057ce7-a545-44d4-b561-5a494d8e8404",
              "parentUUID": "ca3baffd-e67b-46eb-ad54-daadc2391b98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Retention Base Evaluations should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 7603,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "76295c38-3b6d-48cc-bb96-a58b443623d2",
              "parentUUID": "ca3baffd-e67b-46eb-ad54-daadc2391b98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Retention Base Evaluations should able to see Email from options",
              "timedOut": false,
              "duration": 7277,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(4000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "7c7fb488-ffa7-4462-9ed0-40db71d6a1ff",
              "parentUUID": "ca3baffd-e67b-46eb-ad54-daadc2391b98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Retention Base Evaluations should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 6739,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "a4a8c936-cdee-4049-a43d-c485e152d282",
              "parentUUID": "ca3baffd-e67b-46eb-ad54-daadc2391b98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Retention Base Evaluations should able to see Resource Details from options",
              "timedOut": false,
              "duration": 4362,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "f397898e-0494-4b4c-8c8c-9f17b0dd72c2",
              "parentUUID": "ca3baffd-e67b-46eb-ad54-daadc2391b98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Retention Base Evaluations should able to see employee history",
              "timedOut": false,
              "duration": 3090,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "dff0b428-989b-491b-8cd4-d03d3098219f",
              "parentUUID": "ca3baffd-e67b-46eb-ad54-daadc2391b98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to request a review",
              "fullTitle": "Retention Base Evaluations should able to request a review",
              "timedOut": false,
              "duration": 7177,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait evaluation.clickReqReviewBtn();\nawait utilFun.wait(1000);\nawait evaluation.clickHod('Muhammad Bilal Rafaqat');\nawait evaluation.clickSendReqBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Request is send successfully.');",
              "err": {},
              "uuid": "ed9d21bf-eea8-4895-ad6f-26ab31e43b76",
              "parentUUID": "ca3baffd-e67b-46eb-ad54-daadc2391b98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to give a review",
              "fullTitle": "Retention Base Evaluations should able to give a review",
              "timedOut": false,
              "duration": 13455,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait utilFun.wait(1000);\nawait evaluation.clickAddFeedback();\n// await feedbackForm.enterDate('03092023');\nawait feedbackForm.selectFeedbackDuration('6 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('testingggg');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "7baa660e-3742-447b-a611-4d4e3b18c5fa",
              "parentUUID": "ca3baffd-e67b-46eb-ad54-daadc2391b98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit review form",
              "fullTitle": "Retention Base Evaluations should able to edit review form",
              "timedOut": false,
              "duration": 9152,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickEditForm();\nawait utilFun.wait(1000);\n// await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('updated');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "fa39bab3-ac6b-4b5f-b135-10ec6eb2493e",
              "parentUUID": "ca3baffd-e67b-46eb-ad54-daadc2391b98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to defer review",
              "fullTitle": "Retention Base Evaluations should able to defer review",
              "timedOut": false,
              "duration": 6981,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickDefer();\nawait evaluation.clickDeferType();\nawait utilFun.wait(1000);\nawait evaluation.selectDeferType('2 Weeks');\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "5d82d702-c7fe-442f-a9ee-ebe3fb488603",
              "parentUUID": "ca3baffd-e67b-46eb-ad54-daadc2391b98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to complete review",
              "fullTitle": "Retention Base Evaluations should able to complete review",
              "timedOut": false,
              "duration": 10043,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickComplete();\n// await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "6f319c28-e1c4-467a-b35d-2de21628808c",
              "parentUUID": "ca3baffd-e67b-46eb-ad54-daadc2391b98",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c96203d6-e7d3-46c2-9aca-d0076f0810e8",
            "523b6529-9814-4017-b13b-4853b67fb841",
            "abc62af0-4367-4dca-b57f-f3bd4ac29bef",
            "8611103f-2ea4-4eb0-8ca4-64a4e7cff184",
            "2d057ce7-a545-44d4-b561-5a494d8e8404",
            "76295c38-3b6d-48cc-bb96-a58b443623d2",
            "7c7fb488-ffa7-4462-9ed0-40db71d6a1ff",
            "a4a8c936-cdee-4049-a43d-c485e152d282",
            "f397898e-0494-4b4c-8c8c-9f17b0dd72c2",
            "dff0b428-989b-491b-8cd4-d03d3098219f",
            "ed9d21bf-eea8-4895-ad6f-26ab31e43b76",
            "7baa660e-3742-447b-a611-4d4e3b18c5fa",
            "fa39bab3-ac6b-4b5f-b135-10ec6eb2493e",
            "5d82d702-c7fe-442f-a9ee-ebe3fb488603",
            "6f319c28-e1c4-467a-b35d-2de21628808c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 91880,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "f9b9fe7a-f13c-4af2-8d13-3b9aa68b992e",
          "title": "Evaluations History",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_4_history.js",
          "file": "/test/e2e/evaluation/spec_4_history.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Evaluations History\"",
              "fullTitle": "Evaluations History \"before all\" hook in \"Evaluations History\"",
              "timedOut": false,
              "duration": 9820,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query = [\n  `UPDATE employee_evaluations SET \"processType\" = 'COMPLETE' WHERE id = 26;`,\n  `DELETE FROM employee_evaluations WHERE \"employeeId\" = 9742 AND \"incrementType\" = 'designation';`,\n  `UPDATE employee_evaluations SET \"processDate\" = '2023-03-28 17:32:33.501+05' WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "719ecdbf-ecbf-4319-946e-8ddae447203d",
              "parentUUID": "f9b9fe7a-f13c-4af2-8d13-3b9aa68b992e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Evaluations History\"",
              "fullTitle": "Evaluations History \"before each\" hook in \"Evaluations History\"",
              "timedOut": false,
              "duration": 4671,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation-history');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "95ba3e8e-1870-4ad3-99ab-a5c5129fd2cd",
              "parentUUID": "f9b9fe7a-f13c-4af2-8d13-3b9aa68b992e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if evaluations history is showing",
              "fullTitle": "Evaluations History should check if evaluations history is showing",
              "timedOut": false,
              "duration": 42,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "90504a85-93d8-41e9-bb37-e8abd8618644",
              "parentUUID": "f9b9fe7a-f13c-4af2-8d13-3b9aa68b992e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Evaluations History should able to filter resoures by name",
              "timedOut": false,
              "duration": 2288,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "29f48341-7f67-42cf-863c-4a88ebeda065",
              "parentUUID": "f9b9fe7a-f13c-4af2-8d13-3b9aa68b992e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check review is completed",
              "fullTitle": "Evaluations History should able to check review is completed",
              "timedOut": false,
              "duration": 2389,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.checkProcessState()\nutilFun.assertEql(name, 'Complete');",
              "err": {},
              "uuid": "91d47856-6669-475d-8c72-0ed226abbe37",
              "parentUUID": "f9b9fe7a-f13c-4af2-8d13-3b9aa68b992e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Review Type",
              "fullTitle": "Evaluations History should able to filter resoures by Review Type",
              "timedOut": false,
              "duration": 1948,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "64cba75e-313e-48a3-a80d-bf435beb429f",
              "parentUUID": "f9b9fe7a-f13c-4af2-8d13-3b9aa68b992e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Evaluations History should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 1783,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "beab3ec4-56b3-498d-b5c8-306a64ef8b28",
              "parentUUID": "f9b9fe7a-f13c-4af2-8d13-3b9aa68b992e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Evaluations History should able to  copy email from options",
              "timedOut": false,
              "duration": 4346,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "73a8a95e-5e6a-4e12-a1a7-0adc80c6fcca",
              "parentUUID": "f9b9fe7a-f13c-4af2-8d13-3b9aa68b992e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Evaluations History should able to Send Email from options",
              "timedOut": false,
              "duration": 8631,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "da10a744-41de-4219-a0d9-99bb9593c2d5",
              "parentUUID": "f9b9fe7a-f13c-4af2-8d13-3b9aa68b992e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Evaluations History should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 7590,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "e116f407-d234-4fee-86f1-ec9fe60ff60c",
              "parentUUID": "f9b9fe7a-f13c-4af2-8d13-3b9aa68b992e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Evaluations History should able to see Email from options",
              "timedOut": false,
              "duration": 7589,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(4000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "35f67ee5-80ac-47f8-a4fd-36596dbb1c09",
              "parentUUID": "f9b9fe7a-f13c-4af2-8d13-3b9aa68b992e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Evaluations History should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 7113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "33aaf86a-c7e6-4c00-aac2-5e124ab9c898",
              "parentUUID": "f9b9fe7a-f13c-4af2-8d13-3b9aa68b992e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Evaluations History should able to see Resource Details from options",
              "timedOut": false,
              "duration": 5679,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "09834c65-ae2c-4cd3-8a6d-b03d7dcef65b",
              "parentUUID": "f9b9fe7a-f13c-4af2-8d13-3b9aa68b992e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Evaluations History should able to see employee history",
              "timedOut": false,
              "duration": 3468,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "dc60e254-cc12-4865-9939-9de391447123",
              "parentUUID": "f9b9fe7a-f13c-4af2-8d13-3b9aa68b992e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Initiate a Revised Designation",
              "fullTitle": "Evaluations History should able to Initiate a Revised Designation",
              "timedOut": false,
              "duration": 6560,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Initiate a Revised Designation');\nawait utilFun.wait(3000);\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Review is initiated successfully.');",
              "err": {},
              "uuid": "bcbd47ed-563c-42ec-8e82-8a5720b3758d",
              "parentUUID": "f9b9fe7a-f13c-4af2-8d13-3b9aa68b992e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able check if revised Designation evaluation is showing",
              "fullTitle": "Evaluations History should able check if revised Designation evaluation is showing",
              "timedOut": false,
              "duration": 7198,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nawait evaluation.selectReviewType('Rev. Designation');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "e4987685-7af9-45c8-a9f6-70cd985f8a57",
              "parentUUID": "f9b9fe7a-f13c-4af2-8d13-3b9aa68b992e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "90504a85-93d8-41e9-bb37-e8abd8618644",
            "29f48341-7f67-42cf-863c-4a88ebeda065",
            "91d47856-6669-475d-8c72-0ed226abbe37",
            "64cba75e-313e-48a3-a80d-bf435beb429f",
            "beab3ec4-56b3-498d-b5c8-306a64ef8b28",
            "73a8a95e-5e6a-4e12-a1a7-0adc80c6fcca",
            "da10a744-41de-4219-a0d9-99bb9593c2d5",
            "e116f407-d234-4fee-86f1-ec9fe60ff60c",
            "35f67ee5-80ac-47f8-a4fd-36596dbb1c09",
            "33aaf86a-c7e6-4c00-aac2-5e124ab9c898",
            "09834c65-ae2c-4cd3-8a6d-b03d7dcef65b",
            "dc60e254-cc12-4865-9939-9de391447123",
            "bcbd47ed-563c-42ec-8e82-8a5720b3758d",
            "e4987685-7af9-45c8-a9f6-70cd985f8a57"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 66624,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "831df8c1-78ab-41a4-b7a2-0506161e65dd",
          "title": "Evaluations Review Types",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_5_reviewTypes.js",
          "file": "/test/e2e/evaluation/spec_5_reviewTypes.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Evaluations Review Types\"",
              "fullTitle": "Evaluations Review Types \"before all\" hook in \"Evaluations Review Types\"",
              "timedOut": false,
              "duration": 10213,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "198d45e5-2043-4c6e-baba-e4cdb4d158c0",
              "parentUUID": "831df8c1-78ab-41a4-b7a2-0506161e65dd",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Evaluations Review Types\"",
              "fullTitle": "Evaluations Review Types \"before each\" hook in \"Evaluations Review Types\"",
              "timedOut": false,
              "duration": 3453,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.wait(3000);",
              "err": {},
              "uuid": "9f862ef6-8ef2-46c1-8ef6-9dc7af0b382f",
              "parentUUID": "831df8c1-78ab-41a4-b7a2-0506161e65dd",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if annual evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if annual evaluations are showing",
              "timedOut": false,
              "duration": 5019,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'annual' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Annual'), `Expected text not found.`);",
              "err": {},
              "uuid": "27c1d154-a333-4a9d-91d0-7fa42f0349d0",
              "parentUUID": "831df8c1-78ab-41a4-b7a2-0506161e65dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 6038,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Annual'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "28002a12-6c16-4a3c-8ea7-f07eb92af17a",
              "parentUUID": "831df8c1-78ab-41a4-b7a2-0506161e65dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Bi Annual evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if Bi Annual evaluations are showing",
              "timedOut": false,
              "duration": 4809,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'bi-annual' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Bi Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Bi Annual'), `Expected text not found.`);",
              "err": {},
              "uuid": "5d9b3841-2e39-4930-b6d4-23c5fef53c5d",
              "parentUUID": "831df8c1-78ab-41a4-b7a2-0506161e65dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 6017,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Bi Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Bi Annual'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "4ca83b2a-2d86-4f7b-b016-a8117fe01302",
              "parentUUID": "831df8c1-78ab-41a4-b7a2-0506161e65dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Internship evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if Internship evaluations are showing",
              "timedOut": false,
              "duration": 4948,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'internship' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Internship');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Internship'), `Expected text not found.`);",
              "err": {},
              "uuid": "483bb280-2936-4be8-9e4e-ac486479d217",
              "parentUUID": "831df8c1-78ab-41a4-b7a2-0506161e65dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 5877,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Internship');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Internship'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "68808fac-7513-4e43-8568-14ca5b2a4bd5",
              "parentUUID": "831df8c1-78ab-41a4-b7a2-0506161e65dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr have Access of extend Btn and can extend Evaluation",
              "fullTitle": "Evaluations Review Types should confirm Hr have Access of extend Btn and can extend Evaluation",
              "timedOut": false,
              "duration": 8567,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Internship');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Internship'), `Expected text not found.`);\nawait evaluation.checkIfExtenfBtnIsLocated()\nawait utilFun.wait(1000);\nawait evaluation.clickExtendBtn()\nawait utilFun.wait(1000);\nawait evaluation.clickDeferType()\nawait evaluation.selectDeferType('2 Weeks');\nawait utilFun.wait(1000);\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "8f6c4c4f-2b35-4150-9411-8bc11f6cd4fa",
              "parentUUID": "831df8c1-78ab-41a4-b7a2-0506161e65dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if End of Probation evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if End of Probation evaluations are showing",
              "timedOut": false,
              "duration": 5062,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'end_of_probation' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('End of Probation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('End of Probation'), `Expected text not found.`);",
              "err": {},
              "uuid": "cfcc9170-ad7e-4e23-baca-761ce8301a47",
              "parentUUID": "831df8c1-78ab-41a4-b7a2-0506161e65dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 5966,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('End of Probation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('End of Probation'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "3e374e2b-fa29-4d61-81a9-ea7f4d52ddbe",
              "parentUUID": "831df8c1-78ab-41a4-b7a2-0506161e65dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr have Access of extend Btn and can extend Evaluation",
              "fullTitle": "Evaluations Review Types should confirm Hr have Access of extend Btn and can extend Evaluation",
              "timedOut": false,
              "duration": 8512,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('End of Probation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('End of Probation'), `Expected text not found.`);\nawait evaluation.checkIfExtenfBtnIsLocated()\nawait utilFun.wait(1000);\nawait evaluation.clickExtendBtn()\nawait utilFun.wait(1000);\nawait evaluation.clickDeferType()\nawait evaluation.selectDeferType('2 Weeks');\nawait utilFun.wait(1000);\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "b38874f1-b3b3-48f8-9e4d-cecd0c69313a",
              "parentUUID": "831df8c1-78ab-41a4-b7a2-0506161e65dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Revised Designation evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if Revised Designation evaluations are showing",
              "timedOut": false,
              "duration": 5146,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'designation' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Rev. Designation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Rev. Designation'), `Expected text not found.`);",
              "err": {},
              "uuid": "c16fa467-2b99-45d4-b8ea-80bf4f5bb936",
              "parentUUID": "831df8c1-78ab-41a4-b7a2-0506161e65dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 6013,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Rev. Designation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Rev. Designation'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "68f8066e-8464-424f-acb4-cb45607e9c97",
              "parentUUID": "831df8c1-78ab-41a4-b7a2-0506161e65dd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "27c1d154-a333-4a9d-91d0-7fa42f0349d0",
            "28002a12-6c16-4a3c-8ea7-f07eb92af17a",
            "5d9b3841-2e39-4930-b6d4-23c5fef53c5d",
            "4ca83b2a-2d86-4f7b-b016-a8117fe01302",
            "483bb280-2936-4be8-9e4e-ac486479d217",
            "68808fac-7513-4e43-8568-14ca5b2a4bd5",
            "8f6c4c4f-2b35-4150-9411-8bc11f6cd4fa",
            "cfcc9170-ad7e-4e23-baca-761ce8301a47",
            "3e374e2b-fa29-4d61-81a9-ea7f4d52ddbe",
            "b38874f1-b3b3-48f8-9e4d-cecd0c69313a",
            "c16fa467-2b99-45d4-b8ea-80bf4f5bb936",
            "68f8066e-8464-424f-acb4-cb45607e9c97"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 71974,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
          "title": "My Leaves",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/leaves/spec_1_myleaves.js",
          "file": "/test/e2e/leaves/spec_1_myleaves.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"My Leaves\"",
              "fullTitle": "My Leaves \"before all\" hook in \"My Leaves\"",
              "timedOut": false,
              "duration": 10356,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\n// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query1 = [\n  `UPDATE employee_leaves_count SET \"carryForwardedLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesEarned\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalRemainingLeaves\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"availedUnPaidLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `DELETE FROM employee_leaves WHERE \"employeeId\" = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query1);",
              "err": {},
              "uuid": "58bccea3-5b85-4adb-bfd6-ae40c47c9942",
              "parentUUID": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"My Leaves\"",
              "fullTitle": "My Leaves \"before each\" hook in \"My Leaves\"",
              "timedOut": false,
              "duration": 3390,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);",
              "err": {},
              "uuid": "a342a6ca-5522-4465-aa17-2971c43dd364",
              "parentUUID": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should should able to view employee leave",
              "fullTitle": "My Leaves should should able to view employee leave",
              "timedOut": false,
              "duration": 4261,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_reporting_managers SET \"approvedLeaveStatus\" = 'PENDING' WHERE id = 45;`,\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE id = 32;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE id = 32;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE id = 32;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {},
              "uuid": "8b91600b-1a30-47c3-9fc0-9314c9b2787f",
              "parentUUID": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should should able to Approve employee leave",
              "fullTitle": "My Leaves should should able to Approve employee leave",
              "timedOut": false,
              "duration": 3627,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nawait myLeaves.clickApproveBtn()\nawait myLeaves.clickSubmitBtn()\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "2d39e9c7-3708-414a-ae61-aebb346c3dea",
              "parentUUID": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Approved Tab",
              "fullTitle": "My Leaves should able to view employee leave in Approved Tab",
              "timedOut": false,
              "duration": 2892,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Approved Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {},
              "uuid": "688546f9-3d37-4b90-99e1-3bc034d30ce9",
              "parentUUID": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Reject employee leave in Approved Tab",
              "fullTitle": "My Leaves should able to Reject employee leave in Approved Tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "10dc2472-7453-49d0-b110-9cdf1c83e38a",
              "parentUUID": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Reject Tab",
              "fullTitle": "My Leaves should able to view employee leave in Reject Tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "2873a0d9-2e2f-4a0e-a131-1dd11be98cff",
              "parentUUID": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should should able to Reject employee leave",
              "fullTitle": "My Leaves should should able to Reject employee leave",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "b8a4892b-1618-41f2-891a-c23c5e3caa80",
              "parentUUID": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Reject Tab",
              "fullTitle": "My Leaves should able to view employee leave in Reject Tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "de67bde7-c8b7-4fcb-9d7b-63ebe0304aa0",
              "parentUUID": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Approve employee leave in Reject Tab",
              "fullTitle": "My Leaves should able to Approve employee leave in Reject Tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "80a23d3c-ed48-43d0-9f95-923c60285f5d",
              "parentUUID": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Approved Tab",
              "fullTitle": "My Leaves should able to view employee leave in Approved Tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "0246b9a8-9483-4aae-87ab-fb1f8c2d1706",
              "parentUUID": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Leaves counts are showing Correct",
              "fullTitle": "My Leaves should check if Leaves counts are showing Correct",
              "timedOut": false,
              "duration": 245,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '10/');\nlet leaves1 = await myLeaves.getSickLeaves();\nassert.equal(leaves1, '10/');\nlet leaves2 = await myLeaves.getCarryForwardLeaves();\nassert.equal(leaves2, '0/');\nlet leaves3 = await myLeaves.getUnpaidLeaves();\nassert.equal(leaves3, '0');",
              "err": {},
              "uuid": "4220d068-a3b5-4b0a-b891-1461b69f21ee",
              "parentUUID": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Casual full leave",
              "fullTitle": "My Leaves should able to apply Casual full leave",
              "timedOut": false,
              "duration": 6389,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('05-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('05-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "ad5d718d-c6c2-4b80-a236-6043e225e06e",
              "parentUUID": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Casual First Half leave",
              "fullTitle": "My Leaves should able to apply Casual First Half leave",
              "timedOut": false,
              "duration": 7456,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('First Half');\nawait myLeaves.setStartDate('06-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('06-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "a9f57ee4-3a18-42ab-b007-748eb7a29854",
              "parentUUID": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Casual Second Half leave",
              "fullTitle": "My Leaves should able to apply Casual Second Half leave",
              "timedOut": false,
              "duration": 7523,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('Second Half');\nawait myLeaves.setStartDate('07-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('07-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "8c1cb7d2-ca3c-4647-bd12-453c9cdee074",
              "parentUUID": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Sick full leave",
              "fullTitle": "My Leaves should able to apply Sick full leave",
              "timedOut": false,
              "duration": 6327,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Sick Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('08-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('08-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "c599abff-829e-4e14-9d96-4c92b8b28070",
              "parentUUID": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Sick First Half leave",
              "fullTitle": "My Leaves should able to apply Sick First Half leave",
              "timedOut": false,
              "duration": 7802,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Sick Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('First Half');\nawait myLeaves.setStartDate('09-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('09-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "5f526ba5-a9cd-4df1-bc81-f02ccfaa0653",
              "parentUUID": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Sick Second Half leave",
              "fullTitle": "My Leaves should able to apply Sick Second Half leave",
              "timedOut": false,
              "duration": 7681,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Sick Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('Second Half');\nawait myLeaves.setStartDate('10-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('10-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "a90f6051-c417-4bd3-bce9-4bcdf3804d97",
              "parentUUID": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Un-Paid full leave",
              "fullTitle": "My Leaves should able to apply Un-Paid full leave",
              "timedOut": false,
              "duration": 6172,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Un-Paid Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('11-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('11-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "4324ec96-56dc-4a74-8b72-2dd5e82330ef",
              "parentUUID": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Un-Paid First Half leave",
              "fullTitle": "My Leaves should able to apply Un-Paid First Half leave",
              "timedOut": false,
              "duration": 7701,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Un-Paid Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('First Half');\nawait myLeaves.setStartDate('12-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('12-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "3e00af27-8eb5-43c2-835b-5d36744b366f",
              "parentUUID": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Un-Paid Second Half leave",
              "fullTitle": "My Leaves should able to apply Un-Paid Second Half leave",
              "timedOut": false,
              "duration": 7469,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Un-Paid Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('Second Half');\nawait myLeaves.setStartDate('13-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('13-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "b8905300-d456-4868-b378-5c2c38641b81",
              "parentUUID": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Leaves counts are showing Correct",
              "fullTitle": "My Leaves should check if Leaves counts are showing Correct",
              "timedOut": false,
              "duration": 224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '8/');\nlet leaves1 = await myLeaves.getSickLeaves();\nassert.equal(leaves1, '8/');\nlet leaves2 = await myLeaves.getCarryForwardLeaves();\nassert.equal(leaves2, '0/');\nlet leaves3 = await myLeaves.getUnpaidLeaves();\nassert.equal(leaves3, '2');",
              "err": {},
              "uuid": "6025845d-8370-4f01-97c2-702305899b1f",
              "parentUUID": "de7c7a18-b518-4f4e-a554-929ad3e715fc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8b91600b-1a30-47c3-9fc0-9314c9b2787f",
            "2d39e9c7-3708-414a-ae61-aebb346c3dea",
            "688546f9-3d37-4b90-99e1-3bc034d30ce9",
            "4220d068-a3b5-4b0a-b891-1461b69f21ee",
            "ad5d718d-c6c2-4b80-a236-6043e225e06e",
            "a9f57ee4-3a18-42ab-b007-748eb7a29854",
            "8c1cb7d2-ca3c-4647-bd12-453c9cdee074",
            "c599abff-829e-4e14-9d96-4c92b8b28070",
            "5f526ba5-a9cd-4df1-bc81-f02ccfaa0653",
            "a90f6051-c417-4bd3-bce9-4bcdf3804d97",
            "4324ec96-56dc-4a74-8b72-2dd5e82330ef",
            "3e00af27-8eb5-43c2-835b-5d36744b366f",
            "b8905300-d456-4868-b378-5c2c38641b81",
            "6025845d-8370-4f01-97c2-702305899b1f"
          ],
          "failures": [],
          "pending": [
            "10dc2472-7453-49d0-b110-9cdf1c83e38a",
            "2873a0d9-2e2f-4a0e-a131-1dd11be98cff",
            "b8a4892b-1618-41f2-891a-c23c5e3caa80",
            "de67bde7-c8b7-4fcb-9d7b-63ebe0304aa0",
            "80a23d3c-ed48-43d0-9f95-923c60285f5d",
            "0246b9a8-9483-4aae-87ab-fb1f8c2d1706"
          ],
          "skipped": [],
          "duration": 75769,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "3c21dad0-dff9-4e30-ac00-436451a22e38",
          "title": "hr dashboard",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/leaves/spec_2_hrLeavesDashboard.js",
          "file": "/test/e2e/leaves/spec_2_hrLeavesDashboard.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"hr dashboard\"",
              "fullTitle": "hr dashboard \"before all\" hook in \"hr dashboard\"",
              "timedOut": false,
              "duration": 9679,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "2cb51ec2-2d72-444f-a496-30f9bcf7a668",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"hr dashboard\"",
              "fullTitle": "hr dashboard \"after all\" hook in \"hr dashboard\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `DELETE FROM employee_leaves WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "30116e3e-df74-44ff-bb69-397b6aa91a66",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should check if Leaves counts are showing Correct",
              "fullTitle": "hr dashboard should check if Leaves counts are showing Correct",
              "timedOut": false,
              "duration": 3685,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_count SET \"carryForwardedLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesEarned\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalRemainingLeaves\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"availedUnPaidLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `DELETE FROM employee_leaves WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nlet leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '10/');\nlet leaves1 = await myLeaves.getSickLeaves();\nassert.equal(leaves1, '10/');\nlet leaves2 = await myLeaves.getCarryForwardLeaves();\nassert.equal(leaves2, '0/');\nlet leaves3 = await myLeaves.getUnpaidLeaves();\nassert.equal(leaves3, '0');",
              "err": {},
              "uuid": "49407929-9272-45f4-adae-f06129e2ba58",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Casual full leave",
              "fullTitle": "hr dashboard should able to apply Casual full leave",
              "timedOut": false,
              "duration": 10388,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nawait myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('05-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('05-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "f994aaef-05d1-46d0-8283-16ad1cef2172",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if leave is showing in Hr Dashboard",
              "fullTitle": "hr dashboard should able to check if leave is showing in Hr Dashboard",
              "timedOut": false,
              "duration": 5624,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "5e1e7990-292c-4199-a20d-98bade261e80",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Approve Leave",
              "fullTitle": "hr dashboard should able to Approve Leave",
              "timedOut": false,
              "duration": 7135,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.clickApproveBtn()\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.clickSubmitBtn()\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "a332b79d-5977-4c53-825b-4b2d99f94aa3",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Approved Tab",
              "fullTitle": "hr dashboard should able to view employee leave in Approved Tab",
              "timedOut": false,
              "duration": 5888,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickTab('Approved Leaves')\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "afef9c64-3a4d-4b5f-bbb2-48bba06d0b07",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Reject Leave",
              "fullTitle": "hr dashboard should able to Reject Leave",
              "timedOut": false,
              "duration": 6466,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickRejectBtn()\nawait hrLeaveDashboard.typeRejectReasonAndReject('testing')\nawait utilFun.wait(1000);\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "7aff0cf3-ad30-43bc-9ae0-e5db5329ff27",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Rejected Tab",
              "fullTitle": "hr dashboard should able to view employee leave in Rejected Tab",
              "timedOut": false,
              "duration": 5542,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickTab('Rejected Leaves')\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "076b984a-9075-41ea-b049-9574bd42690f",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to send leave notification to PMs",
              "fullTitle": "hr dashboard should able to send leave notification to PMs",
              "timedOut": false,
              "duration": 5641,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickSendNotificationBtn()\nawait utilFun.wait(1000);\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Notification sent to PMs from which leave is pending');",
              "err": {},
              "uuid": "2b7996c5-6803-476d-b2b0-c108d3783dc8",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to delete Employee leave",
              "fullTitle": "hr dashboard should able to delete Employee leave",
              "timedOut": false,
              "duration": 6257,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickDeleteBtn()\nawait hrLeaveDashboard.typeDeleteReason('testing')\nawait hrLeaveDashboard.clickSubmitDeleteBtn()\nawait utilFun.wait(1000);\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request deleted successfully.');",
              "err": {},
              "uuid": "551c1dd6-1593-4157-a529-2edc903501e4",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able check if delete leave is showing in Deleted Section",
              "fullTitle": "hr dashboard should able check if delete leave is showing in Deleted Section",
              "timedOut": false,
              "duration": 5245,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickSeeDeletedLeaves()\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "12fe45a6-1bce-4ff4-8ca0-3c41d6cec20f",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to add Compensatory leave to specific employee",
              "fullTitle": "hr dashboard should able to add Compensatory leave to specific employee",
              "timedOut": false,
              "duration": 12273,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `DELETE FROM employee_gift_leaves WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCompLeaveBtn()\nawait hrLeaveDashboard.selectResource('Muhammad Bilal Rafaqat')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('21-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('21-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Compensatory leave added successfully');",
              "err": {},
              "uuid": "191d7355-55f3-4711-9bf4-faa8a1d986a9",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Leave is Added",
              "fullTitle": "hr dashboard should check if Leave is Added",
              "timedOut": false,
              "duration": 3484,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nlet leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '11/');",
              "err": {},
              "uuid": "bd5a88e0-2fd0-40ec-940f-cf1384628d55",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to add Compensatory leave to all employee",
              "fullTitle": "hr dashboard should able to add Compensatory leave to all employee",
              "timedOut": false,
              "duration": 8783,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCompLeaveBtn()\nawait hrLeaveDashboard.clickSelectAllRadioBtn()\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('20-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('20-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Compensatory leave added successfully');",
              "err": {},
              "uuid": "5d100990-63ad-46e5-8f8a-fc215c4082cf",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Leave is Added",
              "fullTitle": "hr dashboard should check if Leave is Added",
              "timedOut": false,
              "duration": 3443,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nlet leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '11/');",
              "err": {},
              "uuid": "825ef123-7f02-4ca4-a8cf-3ccf44af0580",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Casual full leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Casual full leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12657,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Casual Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Full Leave')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('10-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('10-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "13507cf5-c2ed-40fd-9bda-c83b0450b98b",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Casual First Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Casual First Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12946,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Casual Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('First Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('11-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('11-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "74f0a13d-887d-4462-9304-f60e56cd72ff",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Casual Second Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Casual Second Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12326,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Casual Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('Second Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('12-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('12-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "8ccdd3ca-2197-4c65-97df-6aa8f46eeefb",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Sick full leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Sick full leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12494,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Sick Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Full Leave')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('13-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('13-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "a20e3777-2ba6-4911-a8c4-7f17a65a69a4",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Sick First Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Sick First Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12810,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Sick Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('First Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('14-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('14-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "d44eb29b-4c35-4b69-baa2-48a1203a07a4",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Sick Second Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Sick Second Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 13037,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Sick Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('Second Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('15-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('15-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "108f64ad-a971-4a9c-af6e-a9b5de18adb9",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Un-Paid full leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Un-Paid full leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12473,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Un-Paid Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Full Leave')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('16-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('16-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "04fe8072-8b42-40ed-8db1-06eca6b0ffbd",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Un-Paid First Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Un-Paid First Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12948,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Un-Paid Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('First Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('17-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('17-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "305117fd-56cf-474b-81ee-412872bb762d",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Un-Paid Second Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Un-Paid Second Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12692,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Un-Paid Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('Second Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('18-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('18-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "133088c0-aa82-43e4-81fa-f17ce42e9223",
              "parentUUID": "3c21dad0-dff9-4e30-ac00-436451a22e38",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "49407929-9272-45f4-adae-f06129e2ba58",
            "f994aaef-05d1-46d0-8283-16ad1cef2172",
            "5e1e7990-292c-4199-a20d-98bade261e80",
            "a332b79d-5977-4c53-825b-4b2d99f94aa3",
            "afef9c64-3a4d-4b5f-bbb2-48bba06d0b07",
            "7aff0cf3-ad30-43bc-9ae0-e5db5329ff27",
            "076b984a-9075-41ea-b049-9574bd42690f",
            "2b7996c5-6803-476d-b2b0-c108d3783dc8",
            "551c1dd6-1593-4157-a529-2edc903501e4",
            "12fe45a6-1bce-4ff4-8ca0-3c41d6cec20f",
            "191d7355-55f3-4711-9bf4-faa8a1d986a9",
            "bd5a88e0-2fd0-40ec-940f-cf1384628d55",
            "5d100990-63ad-46e5-8f8a-fc215c4082cf",
            "825ef123-7f02-4ca4-a8cf-3ccf44af0580",
            "13507cf5-c2ed-40fd-9bda-c83b0450b98b",
            "74f0a13d-887d-4462-9304-f60e56cd72ff",
            "8ccdd3ca-2197-4c65-97df-6aa8f46eeefb",
            "a20e3777-2ba6-4911-a8c4-7f17a65a69a4",
            "d44eb29b-4c35-4b69-baa2-48a1203a07a4",
            "108f64ad-a971-4a9c-af6e-a9b5de18adb9",
            "04fe8072-8b42-40ed-8db1-06eca6b0ffbd",
            "305117fd-56cf-474b-81ee-412872bb762d",
            "133088c0-aa82-43e4-81fa-f17ce42e9223"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 204237,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
          "title": "Monthly Claims -> Child Claims",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-child.js",
          "file": "/test/e2e/monthlyclaim/myclaims-child.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Monthly Claims -> Child Claims\"",
              "fullTitle": "Monthly Claims -> Child Claims \"before all\" hook in \"Monthly Claims -> Child Claims\"",
              "timedOut": false,
              "duration": 9368,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n    `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9429;`,\n    `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9474;`,\n  ];\n  await utilFun.udpateDatabase(query);\n  await utilFun.loginAccount()\n//   await utilFun.login(email, password)",
              "err": {},
              "uuid": "cf11c5a0-f087-48fc-9373-ec0262f50ad1",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Upload Photo and click Close Button",
              "timedOut": false,
              "duration": 11392,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "87873565-0e31-4d7f-a7bc-705e49233ab8",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Upload Photo and Delete Photos ",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Upload Photo and Delete Photos ",
              "timedOut": false,
              "duration": 14244,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(1);",
              "err": {},
              "uuid": "cb22008c-50b9-441e-9f74-d16cd3149956",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Add New Row and Delete Row ",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Add New Row and Delete Row ",
              "timedOut": false,
              "duration": 13087,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(1);",
              "err": {},
              "uuid": "c42f2f33-a1e2-4d6f-a1f7-f4c1f6ee7158",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Check Cancel Button",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Check Cancel Button",
              "timedOut": false,
              "duration": 7077,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "6cc1c363-1099-4e9a-a89c-56fe189217b9",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 15411,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {
                "message": "AssertionError: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully'",
                "estack": "AssertionError [ERR_ASSERTION]: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/monthlyclaim/myclaims-child.js:123:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- You are not able to claim as the claim time is over.\n+ Claim submitted successfully\n"
              },
              "uuid": "b02e6013-77ec-4562-80ba-b00ef4ee04fe",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Edit Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Edit Child Claim",
              "timedOut": false,
              "duration": 14541,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MyClaims_EditBtn();\nawait child_claims.MyClaims_AddClaim_Child_Name('ALI', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-06-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(1);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(2);\nawait utilFun.wait(3000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit();\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is updated successfully');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, span:nth-child(1) > .MuiButtonBase-root > svg)\nWait timed out after 10046ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, span:nth-child(1) > .MuiButtonBase-root > svg)\nWait timed out after 10046ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "5a5fc877-1a58-4079-a465-7361683bf992",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Show Attachment",
              "fullTitle": "Monthly Claims -> Child Claims should be able Show Attachment",
              "timedOut": false,
              "duration": 13795,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10100ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10100ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "fd4c2cf1-636f-4564-bc90-4fd39cf8d074",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Review Icon",
              "fullTitle": "Monthly Claims -> Child Claims should be able Review Icon",
              "timedOut": false,
              "duration": 14565,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell .icon)\nWait timed out after 10042ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell .icon)\nWait timed out after 10042ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "8aef96b3-1771-4538-99b5-923adfc223ec",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Delete Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Delete Child Claim",
              "timedOut": false,
              "duration": 13538,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_DeleteBtn();\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, span:nth-child(2) > .MuiButtonBase-root > svg)\nWait timed out after 10052ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, span:nth-child(2) > .MuiButtonBase-root > svg)\nWait timed out after 10052ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "24161ca7-d086-478a-8107-934a2d9bd65f",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 21738,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {
                "message": "AssertionError: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully'",
                "estack": "AssertionError [ERR_ASSERTION]: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/monthlyclaim/myclaims-child.js:190:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- You are not able to claim as the claim time is over.\n+ Claim submitted successfully\n"
              },
              "uuid": "5de0082a-d9f3-472e-96cc-1711b543856f",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment & Close Button",
              "fullTitle": "Monthly Claims -> Child Claims should be HR Role Show Attachment & Close Button",
              "timedOut": false,
              "duration": 14462,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(2000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10027ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10027ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "240c251c-d247-41aa-b1a5-f7861444088b",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Edit Amount in Show Attachment",
              "fullTitle": "Monthly Claims -> Child Claims should be Edit Amount in Show Attachment",
              "timedOut": false,
              "duration": 13486,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_ShowAttachment_EditAmount_Hover();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ShowAttachment_EditAmount();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ClaimsRequest_EditBtn_RecieptAmount('3500');\nawait claims.MyClaims_ClaimsRequest_EditBtn_Reason('Extra budget');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10027ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10027ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "61cc76ef-8306-4efa-b83e-c6291c266a86",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Child Claims should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 37493,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(4000);\nawait claims.MyClaims_FilterBtn();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\nawait claims.HRFilterSearchByClaimType('Personal Development Allowance');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Filter_HR_SearchByClaim_CrossIcon();\nawait claims.HRFilterSearchByClaimType('Fitness/Gym Allowance');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_HR_SearchByClaim_CrossIcon();\nawait claims.HRFilterSearchByClaimType('Child Education Support');\nawait utilFun.wait(4000);\n/// Start and End Date Filter\nawait claims.MyClaims_Filter_StartDate('2023-11-14');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2023-12-15')\nawait utilFun.wait(4000);\n/// Verify Results\nawait claims.Row_Assertion()\nawait claims.MyClaims_Filter_ClearBtn();",
              "err": {},
              "uuid": "c3128531-84c7-4668-8068-49a7f4c6b182",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be HR Role Review Flow",
              "timedOut": false,
              "duration": 10683,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet query =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10133ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10133ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "dd0eee1a-49db-4f12-91c9-68f9bf63d905",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit One Child Claim for Approve Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim for Approve Flow",
              "timedOut": false,
              "duration": 21905,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {
                "message": "AssertionError: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully'",
                "estack": "AssertionError [ERR_ASSERTION]: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/monthlyclaim/myclaims-child.js:297:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- You are not able to claim as the claim time is over.\n+ Claim submitted successfully\n"
              },
              "uuid": "036155f1-25e1-4ed4-a83f-f3fd0bb8caf5",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Approve One Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Approve One Child Claim by HR",
              "timedOut": false,
              "duration": 16604,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Receipt status updated successfully!');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10034ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10034ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "cd0dbc99-8c7c-41f1-b6ef-22bb607252f7",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit One Child Claim for Reject Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim for Reject Flow",
              "timedOut": false,
              "duration": 21810,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {
                "message": "AssertionError: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully'",
                "estack": "AssertionError [ERR_ASSERTION]: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/monthlyclaim/myclaims-child.js:362:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- You are not able to claim as the claim time is over.\n+ Claim submitted successfully\n"
              },
              "uuid": "c9e64d10-94fb-4d0b-82ab-531d89f3e8f3",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Reject Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Reject Child Claim by HR",
              "timedOut": false,
              "duration": 11689,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait utilFun.wait(3000)\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Receipt status updated successfully!');\nawait utilFun.wait(3000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10185ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10185ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3f9d0b81-d309-47ec-9785-ff431d602e17",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be  Verify Reject Tab and check Show Attachment ",
              "fullTitle": "Monthly Claims -> Child Claims should be  Verify Reject Tab and check Show Attachment ",
              "timedOut": false,
              "duration": 18753,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10067ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10067ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "6ebae4cd-0eef-4e83-9b97-80a56a7d56cb",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be  Verify Reject Tab and Check Review Icon  ",
              "fullTitle": "Monthly Claims -> Child Claims should be  Verify Reject Tab and Check Review Icon  ",
              "timedOut": false,
              "duration": 18758,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000);\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion();\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell .icon)\nWait timed out after 10063ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell .icon)\nWait timed out after 10063ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "afd87cbe-5d48-40f1-aa5a-0073b34e392c",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Child Claims should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 4607,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {
                "message": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".ant-table-cell > .MuiButtonBase-root\"}\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".ant-table-cell > .MuiButtonBase-root\"}\n  (Session info: headless chrome=119.0.6045.159)\n    at Object.throwDecodedError (node_modules/selenium-webdriver/lib/error.js:524:15)\n    at parseHttpResponse (node_modules/selenium-webdriver/lib/http.js:601:13)\n    at Executor.execute (node_modules/selenium-webdriver/lib/http.js:529:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async thenableWebDriverProxy.execute (node_modules/selenium-webdriver/lib/webdriver.js:745:17)\n    at async claims.MyClaims_CheckHRStatus_Scroll (test/support/pages/monthlyclaim/claims-pdf.js:270:28)\n    at async Context.<anonymous> (test/e2e/monthlyclaim/myclaims-child.js:422:9)",
                "diff": null
              },
              "uuid": "97328138-df9c-4c41-8e2c-537dffe5a5c2",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Two Child Claim for Review Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Two Child Claim for Review Flow",
              "timedOut": false,
              "duration": 31103,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {
                "message": "AssertionError: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully'",
                "estack": "AssertionError [ERR_ASSERTION]: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/monthlyclaim/myclaims-child.js:464:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- You are not able to claim as the claim time is over.\n+ Claim submitted successfully\n"
              },
              "uuid": "7dcf60bb-20a3-4f25-84d2-dbba457eebbb",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment & Close Button",
              "fullTitle": "Monthly Claims -> Child Claims should be HR Role Show Attachment & Close Button",
              "timedOut": false,
              "duration": 23566,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.wait(10000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10021ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10021ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "9d18cb26-8311-440e-83d6-ce4e6d2a378d",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Edit Amount in Show Attachment",
              "fullTitle": "Monthly Claims -> Child Claims should be Edit Amount in Show Attachment",
              "timedOut": false,
              "duration": 13512,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_ShowAttachment_EditAmount_Hover();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ShowAttachment_EditAmount();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ClaimsRequest_EditBtn_RecieptAmount('3500');\nawait claims.MyClaims_ClaimsRequest_EditBtn_Reason('Extra budget');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10014ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10014ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "47d344b7-2b5a-4efc-9e6f-2c06ede8d96b",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Review Flow for Two Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Review Flow for Two Child Claim by HR",
              "timedOut": false,
              "duration": 11619,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// const query = [\n//     `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n//     `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n//     `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n//     `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n// ];\n// await utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages1 = await claims.checkAlert();\nutilFun.assertEql(flashMessages1, 'Claim status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(1);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages2 = await claims.checkAlert();\nutilFun.assertEql(flashMessages2, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10146ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10146ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "55146e94-0d2e-4b53-9ece-7c9d1394cd33",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Two Child Claim for Approve Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Two Child Claim for Approve Flow",
              "timedOut": false,
              "duration": 31732,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {
                "message": "AssertionError: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully'",
                "estack": "AssertionError [ERR_ASSERTION]: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/monthlyclaim/myclaims-child.js:574:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- You are not able to claim as the claim time is over.\n+ Claim submitted successfully\n"
              },
              "uuid": "0807e21a-121c-4257-87f8-794a03cfc449",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Approve Two Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Approve Two Child Claim by HR",
              "timedOut": false,
              "duration": 16589,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10050ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10050ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "cb085e5b-b599-4bba-b799-193f9dd519be",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Two Child Claim for Reject Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Two Child Claim for Reject Flow",
              "timedOut": false,
              "duration": 31891,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {
                "message": "AssertionError: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully'",
                "estack": "AssertionError [ERR_ASSERTION]: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/monthlyclaim/myclaims-child.js:658:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- You are not able to claim as the claim time is over.\n+ Claim submitted successfully\n"
              },
              "uuid": "79b39be8-6af5-4cfc-bd02-95121095fb00",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Reject Two Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Reject Two Child Claim by HR",
              "timedOut": false,
              "duration": 11673,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(3000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim status updated successfully!');\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion();\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10202ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10202ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "f611985b-d6ec-4548-8733-3f1508c722e4",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Three Child Claim for Review Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Three Child Claim for Review Flow",
              "timedOut": false,
              "duration": 41213,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Noman', 2);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 2);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('6000', 2);\nconst validationMessage3 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage3, 'Max amount limit is 5000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 2);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {
                "message": "AssertionError: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully'",
                "estack": "AssertionError [ERR_ASSERTION]: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/monthlyclaim/myclaims-child.js:754:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- You are not able to claim as the claim time is over.\n+ Claim submitted successfully\n"
              },
              "uuid": "be172344-b48d-4a66-9728-e5decb192238",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Review Flow for Three Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Review Flow for Three Child Claim by HR",
              "timedOut": false,
              "duration": 11644,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages1 = await claims.checkAlert();\nutilFun.assertEql(flashMessages1, 'Claim status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(1);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages2 = await claims.checkAlert();\nutilFun.assertEql(flashMessages2, 'Claim status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(2);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages3 = await claims.checkAlert();\nutilFun.assertEql(flashMessages3, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10049ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10049ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d2c138f3-d4db-4587-9dd4-7b73e12999c0",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Three Child Claim for Approve Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Three Child Claim for Approve Flow",
              "timedOut": false,
              "duration": 41352,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Noman', 2);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 2);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('6000', 2);\nconst validationMessage3 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage3, 'Max amount limit is 5000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 2);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {
                "message": "AssertionError: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully'",
                "estack": "AssertionError [ERR_ASSERTION]: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/monthlyclaim/myclaims-child.js:850:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- You are not able to claim as the claim time is over.\n+ Claim submitted successfully\n"
              },
              "uuid": "2812a33e-0f05-4211-8d44-a3408e3e22ff",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Approve Three Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Approve Three Child Claim by HR",
              "timedOut": false,
              "duration": 16557,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage3 = await claims.checkAlert();\nutilFun.assertEql(flashMessage3, 'Receipt status updated successfully!');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10015ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10015ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "4f1770f3-f510-4815-9d17-a899f9736854",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Three Child Claim for Reject Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Three Child Claim for Reject Flow",
              "timedOut": false,
              "duration": 41312,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Noman', 2);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 2);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('6000', 2);\nconst validationMessage3 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage3, 'Max amount limit is 5000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 2);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {
                "message": "AssertionError: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully'",
                "estack": "AssertionError [ERR_ASSERTION]: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/monthlyclaim/myclaims-child.js:951:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- You are not able to claim as the claim time is over.\n+ Claim submitted successfully\n"
              },
              "uuid": "de6a9fbd-b76d-4332-a1af-cf4d15480021",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Reject Three Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Reject Three Child Claim by HR",
              "timedOut": false,
              "duration": 11574,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage3 = await claims.checkAlert();\nutilFun.assertEql(flashMessage3, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim status updated successfully!');\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion();\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10011ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10011ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "e4ff2d3e-e934-486d-abcc-0bdd0af5195d",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Child Claims should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 17776,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Deadline_Date('2023-02-05 22:40:20');\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "9d85333a-52aa-426e-947c-bfbf02325c08",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 17276,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'You are not able to claim as the claim time is over.');",
              "err": {},
              "uuid": "3d7b8502-76a6-4845-bc1b-111b0191e3f4",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Child Claims should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 17850,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        'DELETE FROM employee_claim_deadlines;',\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Deadline_Date('2024-12-05 22:40:20');\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "469afa81-8fde-4e4f-8fff-7f0c78e77956",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 17072,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');\nlet querys =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n        'DELETE FROM employee_claim_deadlines;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "98f0c4ed-4430-4604-87d9-9ed444c536ab",
              "parentUUID": "b77aaed9-0bea-4120-9069-b6d4275bb2fa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87873565-0e31-4d7f-a7bc-705e49233ab8",
            "cb22008c-50b9-441e-9f74-d16cd3149956",
            "c42f2f33-a1e2-4d6f-a1f7-f4c1f6ee7158",
            "6cc1c363-1099-4e9a-a89c-56fe189217b9",
            "c3128531-84c7-4668-8068-49a7f4c6b182",
            "9d85333a-52aa-426e-947c-bfbf02325c08",
            "3d7b8502-76a6-4845-bc1b-111b0191e3f4",
            "469afa81-8fde-4e4f-8fff-7f0c78e77956",
            "98f0c4ed-4430-4604-87d9-9ed444c536ab"
          ],
          "failures": [
            "b02e6013-77ec-4562-80ba-b00ef4ee04fe",
            "5a5fc877-1a58-4079-a465-7361683bf992",
            "fd4c2cf1-636f-4564-bc90-4fd39cf8d074",
            "8aef96b3-1771-4538-99b5-923adfc223ec",
            "24161ca7-d086-478a-8107-934a2d9bd65f",
            "5de0082a-d9f3-472e-96cc-1711b543856f",
            "240c251c-d247-41aa-b1a5-f7861444088b",
            "61cc76ef-8306-4efa-b83e-c6291c266a86",
            "dd0eee1a-49db-4f12-91c9-68f9bf63d905",
            "036155f1-25e1-4ed4-a83f-f3fd0bb8caf5",
            "cd0dbc99-8c7c-41f1-b6ef-22bb607252f7",
            "c9e64d10-94fb-4d0b-82ab-531d89f3e8f3",
            "3f9d0b81-d309-47ec-9785-ff431d602e17",
            "6ebae4cd-0eef-4e83-9b97-80a56a7d56cb",
            "afd87cbe-5d48-40f1-aa5a-0073b34e392c",
            "97328138-df9c-4c41-8e2c-537dffe5a5c2",
            "7dcf60bb-20a3-4f25-84d2-dbba457eebbb",
            "9d18cb26-8311-440e-83d6-ce4e6d2a378d",
            "47d344b7-2b5a-4efc-9e6f-2c06ede8d96b",
            "55146e94-0d2e-4b53-9ece-7c9d1394cd33",
            "0807e21a-121c-4257-87f8-794a03cfc449",
            "cb085e5b-b599-4bba-b799-193f9dd519be",
            "79b39be8-6af5-4cfc-bd02-95121095fb00",
            "f611985b-d6ec-4548-8733-3f1508c722e4",
            "be172344-b48d-4a66-9728-e5decb192238",
            "d2c138f3-d4db-4587-9dd4-7b73e12999c0",
            "2812a33e-0f05-4211-8d44-a3408e3e22ff",
            "4f1770f3-f510-4815-9d17-a899f9736854",
            "de6a9fbd-b76d-4332-a1af-cf4d15480021",
            "e4ff2d3e-e934-486d-abcc-0bdd0af5195d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 734949,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "a401eba4-93c1-498e-854b-884b6f77f3ae",
          "title": "Monthly Claims -> Gym Allowance",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-gym.js",
          "file": "/test/e2e/monthlyclaim/myclaims-gym.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button in Gym Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be able to Upload Photo and click Close Button in Gym Allowance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "3032d747-5188-4185-81cb-e91fad8ccfd0",
              "parentUUID": "a401eba4-93c1-498e-854b-884b6f77f3ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able multiple File Upload & Cancel Button in GYM Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be able multiple File Upload & Cancel Button in GYM Allowance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "b50a396e-31a0-4b55-994c-869c2d17a559",
              "parentUUID": "a401eba4-93c1-498e-854b-884b6f77f3ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Gym Allowance ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be add claim in Gym Allowance ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "81503243-0a4c-4511-b51c-dbd67239e5c8",
              "parentUUID": "a401eba4-93c1-498e-854b-884b6f77f3ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Delete Claim in Gym Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Delete Claim in Gym Allowance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "43263ff5-98b3-4c38-81a2-83a593a5ae9c",
              "parentUUID": "a401eba4-93c1-498e-854b-884b6f77f3ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit Gym Allowance ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Submit Gym Allowance ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "7dbbadef-6a42-467f-8a07-dc3ccb9e1b6f",
              "parentUUID": "a401eba4-93c1-498e-854b-884b6f77f3ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "f021745c-0285-4b7b-9c26-3f468e076c05",
              "parentUUID": "a401eba4-93c1-498e-854b-884b6f77f3ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Edit Claim of Gym Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Edit Claim of Gym Allowance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8f17d273-dfe3-4013-b2ad-5af6e15ac76a",
              "parentUUID": "a401eba4-93c1-498e-854b-884b6f77f3ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reviews Chart",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Reviews Chart",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "c08c9275-5c07-4740-8f47-3c3b3dad872f",
              "parentUUID": "a401eba4-93c1-498e-854b-884b6f77f3ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Add Reviews",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Add Reviews",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "7655783c-17fe-42ce-b1c6-e0fd999d545c",
              "parentUUID": "a401eba4-93c1-498e-854b-884b6f77f3ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Approve Button",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Approve Button",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "2d5bb2c6-2a61-4648-a411-94dbad800130",
              "parentUUID": "a401eba4-93c1-498e-854b-884b6f77f3ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review See Button in Approve Tab",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Review See Button in Approve Tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "027d9d67-8956-467e-bef5-3ec6bbd8eb53",
              "parentUUID": "a401eba4-93c1-498e-854b-884b6f77f3ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reject Button",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Reject Button",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "05ed4be8-fd7a-412c-b6c4-8c3652b1fbe1",
              "parentUUID": "a401eba4-93c1-498e-854b-884b6f77f3ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reason See in Reject Tab ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Reason See in Reject Tab ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8e89c0fc-fff2-42e6-bf44-d7d18e32b8e0",
              "parentUUID": "a401eba4-93c1-498e-854b-884b6f77f3ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e53c9122-c24f-430b-b2f2-52b4509bdfff",
              "parentUUID": "a401eba4-93c1-498e-854b-884b6f77f3ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "00742f50-9078-42a0-b3bd-76f6acb948bb",
              "parentUUID": "a401eba4-93c1-498e-854b-884b6f77f3ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Gym Allowance to Verify Incorrect Date ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be add claim in Gym Allowance to Verify Incorrect Date ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "996b5935-ed17-460a-9837-1ac81f6aa36b",
              "parentUUID": "a401eba4-93c1-498e-854b-884b6f77f3ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Gym Allowance should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "2fe26b86-68d4-4bc5-96d5-ef4a5b383f7d",
              "parentUUID": "a401eba4-93c1-498e-854b-884b6f77f3ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Gym Allowance to Verify Correct Date ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be add claim in Gym Allowance to Verify Correct Date ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "0f17819e-d4cd-4f4c-b865-0fef1002eb13",
              "parentUUID": "a401eba4-93c1-498e-854b-884b6f77f3ae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "3032d747-5188-4185-81cb-e91fad8ccfd0",
            "b50a396e-31a0-4b55-994c-869c2d17a559",
            "81503243-0a4c-4511-b51c-dbd67239e5c8",
            "43263ff5-98b3-4c38-81a2-83a593a5ae9c",
            "7dbbadef-6a42-467f-8a07-dc3ccb9e1b6f",
            "f021745c-0285-4b7b-9c26-3f468e076c05",
            "8f17d273-dfe3-4013-b2ad-5af6e15ac76a",
            "c08c9275-5c07-4740-8f47-3c3b3dad872f",
            "7655783c-17fe-42ce-b1c6-e0fd999d545c",
            "2d5bb2c6-2a61-4648-a411-94dbad800130",
            "027d9d67-8956-467e-bef5-3ec6bbd8eb53",
            "05ed4be8-fd7a-412c-b6c4-8c3652b1fbe1",
            "8e89c0fc-fff2-42e6-bf44-d7d18e32b8e0",
            "e53c9122-c24f-430b-b2f2-52b4509bdfff",
            "00742f50-9078-42a0-b3bd-76f6acb948bb",
            "996b5935-ed17-460a-9837-1ac81f6aa36b",
            "2fe26b86-68d4-4bc5-96d5-ef4a5b383f7d",
            "0f17819e-d4cd-4f4c-b865-0fef1002eb13"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "ebf980d9-3d79-4b02-8a39-29bd06009d98",
          "title": "Monthly Claims -> Marriage Bonus",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-marriage.js",
          "file": "/test/e2e/monthlyclaim/myclaims-marriage.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Upload Photo and click Close Button",
              "timedOut": false,
              "duration": 10587,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "54480280-6c6f-4882-8447-96bb999ab5fb",
              "parentUUID": "ebf980d9-3d79-4b02-8a39-29bd06009d98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Upload Mulitiple Photos and click Close Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Upload Mulitiple Photos and click Close Button",
              "timedOut": false,
              "duration": 11445,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "0526f0ea-4765-44f4-bba8-d314b6c7d37a",
              "parentUUID": "ebf980d9-3d79-4b02-8a39-29bd06009d98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus",
              "timedOut": false,
              "duration": 12387,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "d97148c7-b6d2-4267-83d7-c5680e662e0c",
              "parentUUID": "ebf980d9-3d79-4b02-8a39-29bd06009d98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Edit Medical Claims",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Edit Medical Claims",
              "timedOut": false,
              "duration": 10951,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_EditBtn();\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0)\nawait utilFun.wait(1000);\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is updated successfully');",
              "err": {},
              "uuid": "0fa7e361-e870-42f0-8c46-304c3df6ff5e",
              "parentUUID": "ebf980d9-3d79-4b02-8a39-29bd06009d98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 27691,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Employee_FilterBtn();\nawait utilFun.wait(2000);\nawait claims.FilterSearchByClaimType('Marriage Bonus');\nawait claims.FilterSearchByStatus('Approved');\nawait claims.FilterSearchByStatus('Review');\nawait claims.FilterSearchByStatus('Pending');\nawait marriage_claims.Row_Assertion()\nawait utilFun.wait(4000);\nawait claims.MyClaims_Filter_ClearBtn()",
              "err": {},
              "uuid": "0fd434ee-49bb-41c0-a590-dc78e37fa227",
              "parentUUID": "ebf980d9-3d79-4b02-8a39-29bd06009d98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Show Attachment",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Show Attachment",
              "timedOut": false,
              "duration": 6828,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "738dae67-6c62-4851-9dd0-aaafe6e690fd",
              "parentUUID": "ebf980d9-3d79-4b02-8a39-29bd06009d98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Review Icon",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Review Icon",
              "timedOut": false,
              "duration": 6820,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon()\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "88a29d62-0933-4774-9d42-632cbfe5b619",
              "parentUUID": "ebf980d9-3d79-4b02-8a39-29bd06009d98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Delete Marriage Claims",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Delete Marriage Claims",
              "timedOut": false,
              "duration": 7791,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_DeleteBtn();\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "5d458142-8b61-4f2d-a6d8-53b577838032",
              "parentUUID": "ebf980d9-3d79-4b02-8a39-29bd06009d98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus",
              "timedOut": false,
              "duration": 12433,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "3f1b1cfe-2c95-4847-adb7-d01ef1ffc427",
              "parentUUID": "ebf980d9-3d79-4b02-8a39-29bd06009d98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 5853,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "8f466da9-3d3e-4441-965d-f562c39e3309",
              "parentUUID": "ebf980d9-3d79-4b02-8a39-29bd06009d98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 27637,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(4000);\nawait claims.MyClaims_FilterBtn();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\n// await claims.MyClaims_Filter_HR_SearchByClaim_CrossIcon();\n// await utilFun.wait(2000);\nawait claims.HRFilterSearchByClaimType('Marriage Bonus');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Filter_StartDate('2023-11-08');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2025-11-11')\nawait utilFun.wait(4000);\n/// Verify Results\nawait claims.Row_Assertion()\nawait claims.MyClaims_Filter_ClearBtn();",
              "err": {},
              "uuid": "acf0e087-ccee-40d8-9e0c-695f2f1f99af",
              "parentUUID": "ebf980d9-3d79-4b02-8a39-29bd06009d98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Add Reviews",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role Add Reviews",
              "timedOut": false,
              "duration": 11246,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait marriage_claims.MyClaims_ClaimRequest_AddReview()\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim request is reviewed successfully!');\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "56be065f-8039-49fe-82c4-700176c42f00",
              "parentUUID": "ebf980d9-3d79-4b02-8a39-29bd06009d98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role in Approve Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role in Approve Button",
              "timedOut": false,
              "duration": 11167,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait marriage_claims.MyClaims_ClaimRequest_ApproveBtn();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Button for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is approved successfully!');\n///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "7ece359c-05c3-4783-818f-d60ddfb2916a",
              "parentUUID": "ebf980d9-3d79-4b02-8a39-29bd06009d98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Approve Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be Verify Approve Claim in Applicant Side",
              "timedOut": false,
              "duration": 7986,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_CheckHRStatus_Scroll();\nawait claims.MyClaims_CheckHRStatus();\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "8fd4d748-741f-473b-acb9-fe4f40a2d985",
              "parentUUID": "ebf980d9-3d79-4b02-8a39-29bd06009d98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role in Rejection Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role in Rejection Button",
              "timedOut": false,
              "duration": 15411,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait marriage_claims.MyClaims_ClaimRequest_RejectBtn();\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Button for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is rejected successfully!');\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "a4debc5b-bb61-4966-aab0-82d4cfcdfdf6",
              "parentUUID": "ebf980d9-3d79-4b02-8a39-29bd06009d98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Reject Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be Verify Reject Claim in Applicant Side",
              "timedOut": false,
              "duration": 10028,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "42efc7c7-5fff-416e-a8d1-d6fb1669cf7d",
              "parentUUID": "ebf980d9-3d79-4b02-8a39-29bd06009d98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 15960,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9474;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2023-02-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "a8e9f098-dcac-4f00-b8e7-9eb753fcef88",
              "parentUUID": "ebf980d9-3d79-4b02-8a39-29bd06009d98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus for Verify Incorrect Deadline",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus for Verify Incorrect Deadline",
              "timedOut": false,
              "duration": 12498,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'You are not able to claim as the claim time is over.');",
              "err": {},
              "uuid": "43240c14-a106-4723-8897-49d89a5a397e",
              "parentUUID": "ebf980d9-3d79-4b02-8a39-29bd06009d98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 16150,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n[\n    'DELETE FROM employee_claim_deadlines;',\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9474;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2024-12-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "e8704f8e-492b-4b57-b312-aa42006390ae",
              "parentUUID": "ebf980d9-3d79-4b02-8a39-29bd06009d98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus for Verify Correct Deadline",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus for Verify Correct Deadline",
              "timedOut": false,
              "duration": 12635,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');\nlet querys =\n[\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n    'DELETE FROM employee_claim_deadlines;'\n];\n    await utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "e0d0f078-cc37-4d60-8ae3-ac277485e857",
              "parentUUID": "ebf980d9-3d79-4b02-8a39-29bd06009d98",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "54480280-6c6f-4882-8447-96bb999ab5fb",
            "0526f0ea-4765-44f4-bba8-d314b6c7d37a",
            "d97148c7-b6d2-4267-83d7-c5680e662e0c",
            "0fa7e361-e870-42f0-8c46-304c3df6ff5e",
            "0fd434ee-49bb-41c0-a590-dc78e37fa227",
            "738dae67-6c62-4851-9dd0-aaafe6e690fd",
            "88a29d62-0933-4774-9d42-632cbfe5b619",
            "5d458142-8b61-4f2d-a6d8-53b577838032",
            "3f1b1cfe-2c95-4847-adb7-d01ef1ffc427",
            "8f466da9-3d3e-4441-965d-f562c39e3309",
            "acf0e087-ccee-40d8-9e0c-695f2f1f99af",
            "56be065f-8039-49fe-82c4-700176c42f00",
            "7ece359c-05c3-4783-818f-d60ddfb2916a",
            "8fd4d748-741f-473b-acb9-fe4f40a2d985",
            "a4debc5b-bb61-4966-aab0-82d4cfcdfdf6",
            "42efc7c7-5fff-416e-a8d1-d6fb1669cf7d",
            "a8e9f098-dcac-4f00-b8e7-9eb753fcef88",
            "43240c14-a106-4723-8897-49d89a5a397e",
            "e8704f8e-492b-4b57-b312-aa42006390ae",
            "e0d0f078-cc37-4d60-8ae3-ac277485e857"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 253504,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "7337883e-9cfd-4f55-be56-b525e64358e1",
          "title": "Monthly Claims -> Medicals",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-medical.js",
          "file": "/test/e2e/monthlyclaim/myclaims-medical.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button",
              "fullTitle": "Monthly Claims -> Medicals should be able to Upload Photo and click Close Button",
              "timedOut": false,
              "duration": 17038,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"medical-claim col-sm-4\"]/span/div/span/input)\nWait timed out after 10125ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"medical-claim col-sm-4\"]/span/div/span/input)\nWait timed out after 10125ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "14fb85ba-6e3b-4739-a5ef-10de54e71bff",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Upload Multiple Photos and click Close Button",
              "fullTitle": "Monthly Claims -> Medicals should be able to Upload Multiple Photos and click Close Button",
              "timedOut": false,
              "duration": 17020,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0);\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1500', 1);\nawait medical_claims.MyClaims_AddClaim_AddRow(1);\nawait medical_claims.MyClaims_AddClaim_AddRow(2);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_DeleteRow(1);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"medical-claim col-sm-4\"]/span/div/span/input)\nWait timed out after 10133ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"medical-claim col-sm-4\"]/span/div/span/input)\nWait timed out after 10133ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "adfe866e-76ac-4ee0-8b4a-6514eb91f873",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Add New Row and Delete Row",
              "fullTitle": "Monthly Claims -> Medicals should be able to Add New Row and Delete Row",
              "timedOut": false,
              "duration": 15436,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait utilFun.wait(5000);\nawait medical_claims.Row_Assertion();\nawait medical_claims.MyClaims_AddClaim_DeleteRow(1)",
              "err": {},
              "uuid": "c12ab380-3822-4e83-97d3-4d50a81f2a0d",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Add and Delete Attachments",
              "fullTitle": "Monthly Claims -> Medicals should be able to Add and Delete Attachments",
              "timedOut": false,
              "duration": 17129,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(5000);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0)",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"medical-claim col-sm-4\"]/span/div/span/input)\nWait timed out after 10120ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"medical-claim col-sm-4\"]/span/div/span/input)\nWait timed out after 10120ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "c9569e24-d0ce-42ad-a436-36e6cb4dffa8",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to click Cancel Button",
              "fullTitle": "Monthly Claims -> Medicals should be able to click Cancel Button",
              "timedOut": false,
              "duration": 17036,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(5000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"medical-claim col-sm-4\"]/span/div/span/input)\nWait timed out after 10090ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"medical-claim col-sm-4\"]/span/div/span/input)\nWait timed out after 10090ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "f87fc168-5a49-4737-96bf-5837212cba00",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims",
              "timedOut": false,
              "duration": 17015,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"medical-claim col-sm-4\"]/span/div/span/input)\nWait timed out after 10088ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"medical-claim col-sm-4\"]/span/div/span/input)\nWait timed out after 10088ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "9ce25b71-60b4-47fb-a838-4712c7079d07",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Edit Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Edit Medical Claims",
              "timedOut": false,
              "duration": 13562,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_EditBtn();\nawait medical_claims.MyClaims_AddClaim_DeleteRow(1)\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is updated successfully');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, span:nth-child(1) > .MuiButtonBase-root > svg)\nWait timed out after 10018ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, span:nth-child(1) > .MuiButtonBase-root > svg)\nWait timed out after 10018ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "688d90fb-6799-431d-8f71-3a49b338b84f",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Medicals should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 23032,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Employee_FilterBtn();\nawait utilFun.wait(4000);\nawait claims.FilterSearchByClaimType('Medical Coverage');\nawait claims.FilterSearchByStatus('Approved');\nawait claims.FilterSearchByStatus('Review');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Filter_ClearBtn()",
              "err": {},
              "uuid": "77955b69-ae52-44c3-afc0-67090d6854e4",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Delete Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Delete Medical Claims",
              "timedOut": false,
              "duration": 13479,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_DeleteBtn();\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, span:nth-child(2) > .MuiButtonBase-root > svg)\nWait timed out after 10058ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, span:nth-child(2) > .MuiButtonBase-root > svg)\nWait timed out after 10058ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "fbf1c544-2d6e-46d3-bdb6-4f5a458d0a81",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims",
              "timedOut": false,
              "duration": 17202,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"medical-claim col-sm-4\"]/span/div/span/input)\nWait timed out after 10118ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"medical-claim col-sm-4\"]/span/div/span/input)\nWait timed out after 10118ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "4afc155a-a743-4f8f-a40c-f5db48b02479",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 10680,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10174ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10174ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "60ffcc0b-6ff1-4476-afd4-4b656c3a6227",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review Flow",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Review Flow",
              "timedOut": false,
              "duration": 10571,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(1);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim request is reviewed successfully!');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet query =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10130ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10130ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3cf69a33-1cf9-42a7-bec3-f69b59054fc1",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims for Approve Flow",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims for Approve Flow",
              "timedOut": false,
              "duration": 17141,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"medical-claim col-sm-4\"]/span/div/span/input)\nWait timed out after 10091ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"medical-claim col-sm-4\"]/span/div/span/input)\nWait timed out after 10091ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d9bcc1d8-e48d-452a-ad43-d96a672968cf",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Edit Reciept Amount",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Show Edit Reciept Amount",
              "timedOut": false,
              "duration": 10678,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_FirstChildClaim_EditAmount_Hover()\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_EditAmount(0);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_RecieptAmount('2500')\nawait utilFun.wait(1000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_Reason('Reason for edit amount')\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'The receipt amount has been updated successfully!');\nawait utilFun.wait(3000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_SecondChildClaim_EditAmount_Hover();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_EditAmount(0);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_RecieptAmount('5000')\nawait utilFun.wait(1000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_Reason('Reason for edit amount')\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox()\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'The receipt amount has been updated successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10186ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10186ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "8f8931ab-0988-4820-b89b-ae8939b0ac11",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Approve Medicals",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Approve Medicals",
              "timedOut": false,
              "duration": 15529,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'The status has been updated successfully!');\nawait utilFun.wait(3000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'The status has been updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nawait utilFun.wait(3000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10016ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10016ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "912f8f00-0359-4672-9800-ece54a69a5cf",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims for Reject Flow",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims for Reject Flow",
              "timedOut": false,
              "duration": 17164,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"medical-claim col-sm-4\"]/span/div/span/input)\nWait timed out after 10134ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"medical-claim col-sm-4\"]/span/div/span/input)\nWait timed out after 10134ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d4558d45-a56c-486e-8154-b1fd14a59580",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reject Medicals",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Reject Medicals",
              "timedOut": false,
              "duration": 10661,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'The status has been updated successfully!');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'The status has been updated successfully!');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10161ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10161ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "be9eca6b-4ad2-4e27-b762-7d5193fe31e0",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be  Verify Reject Tab and check Show Attachment ",
              "fullTitle": "Monthly Claims -> Medicals should be  Verify Reject Tab and check Show Attachment ",
              "timedOut": false,
              "duration": 18695,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10086ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10086ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "188bb376-7a07-41c3-bbab-60b51189be6e",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be  Verify Reject Tab and Check Review Icon  ",
              "fullTitle": "Monthly Claims -> Medicals should be  Verify Reject Tab and Check Review Icon  ",
              "timedOut": false,
              "duration": 18729,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell .icon)\nWait timed out after 10060ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell .icon)\nWait timed out after 10060ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3f5e956c-9ece-44c5-96a2-73b20b8bd91e",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Medicals should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 4535,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {
                "message": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".ant-table-cell > .MuiButtonBase-root\"}\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".ant-table-cell > .MuiButtonBase-root\"}\n  (Session info: headless chrome=119.0.6045.159)\n    at Object.throwDecodedError (node_modules/selenium-webdriver/lib/error.js:524:15)\n    at parseHttpResponse (node_modules/selenium-webdriver/lib/http.js:601:13)\n    at Executor.execute (node_modules/selenium-webdriver/lib/http.js:529:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async thenableWebDriverProxy.execute (node_modules/selenium-webdriver/lib/webdriver.js:745:17)\n    at async claims.MyClaims_CheckHRStatus_Scroll (test/support/pages/monthlyclaim/claims-pdf.js:270:28)\n    at async Context.<anonymous> (test/e2e/monthlyclaim/myclaims-medical.js:375:9)",
                "diff": null
              },
              "uuid": "81df572f-a161-489d-b148-0fc415ba74a6",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Medicals should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 16089,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2023-02-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "cd3f2c6a-9569-43b3-a21c-f10f7eb379aa",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims Verify Incorrect Deadline",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims Verify Incorrect Deadline",
              "timedOut": false,
              "duration": 17048,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'You are not able to claim as the claim time is over.');",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"medical-claim col-sm-4\"]/span/div/span/input)\nWait timed out after 10099ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"medical-claim col-sm-4\"]/span/div/span/input)\nWait timed out after 10099ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "fb4dabdd-8495-45c2-9d3f-0c22fd09594e",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Medicals should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 16072,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        'DELETE FROM employee_claim_deadlines;',\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2024-12-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "dda201d0-325f-4909-b17d-205b12412b1d",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims Verify Correct Deadline",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims Verify Correct Deadline",
              "timedOut": false,
              "duration": 17252,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');\nlet querys =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n        'DELETE FROM employee_claim_deadlines;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"medical-claim col-sm-4\"]/span/div/span/input)\nWait timed out after 10191ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"medical-claim col-sm-4\"]/span/div/span/input)\nWait timed out after 10191ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "db0909b3-ced9-4921-89eb-795df67df5b3",
              "parentUUID": "7337883e-9cfd-4f55-be56-b525e64358e1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c12ab380-3822-4e83-97d3-4d50a81f2a0d",
            "77955b69-ae52-44c3-afc0-67090d6854e4",
            "cd3f2c6a-9569-43b3-a21c-f10f7eb379aa",
            "dda201d0-325f-4909-b17d-205b12412b1d"
          ],
          "failures": [
            "14fb85ba-6e3b-4739-a5ef-10de54e71bff",
            "adfe866e-76ac-4ee0-8b4a-6514eb91f873",
            "c9569e24-d0ce-42ad-a436-36e6cb4dffa8",
            "f87fc168-5a49-4737-96bf-5837212cba00",
            "9ce25b71-60b4-47fb-a838-4712c7079d07",
            "688d90fb-6799-431d-8f71-3a49b338b84f",
            "fbf1c544-2d6e-46d3-bdb6-4f5a458d0a81",
            "4afc155a-a743-4f8f-a40c-f5db48b02479",
            "60ffcc0b-6ff1-4476-afd4-4b656c3a6227",
            "3cf69a33-1cf9-42a7-bec3-f69b59054fc1",
            "d9bcc1d8-e48d-452a-ad43-d96a672968cf",
            "8f8931ab-0988-4820-b89b-ae8939b0ac11",
            "912f8f00-0359-4672-9800-ece54a69a5cf",
            "d4558d45-a56c-486e-8154-b1fd14a59580",
            "be9eca6b-4ad2-4e27-b762-7d5193fe31e0",
            "188bb376-7a07-41c3-bbab-60b51189be6e",
            "3f5e956c-9ece-44c5-96a2-73b20b8bd91e",
            "81df572f-a161-489d-b148-0fc415ba74a6",
            "fb4dabdd-8495-45c2-9d3f-0c22fd09594e",
            "db0909b3-ced9-4921-89eb-795df67df5b3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 368793,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "95e14632-d88b-4665-ac35-f34629e19ab7",
          "title": "Monthly Claims -> OverTime Claims",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-overtime.js",
          "file": "/test/e2e/monthlyclaim/myclaims-overtime.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Check Close Button ",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Check Close Button ",
              "timedOut": false,
              "duration": 11863,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn_Assertion()",
              "err": {},
              "uuid": "48f36b3c-656e-4e3f-a4dd-1a37321496b9",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Check Cancel Button ",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Check Cancel Button ",
              "timedOut": false,
              "duration": 11633,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-11' where id = 1;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 780 , \"date\" = '2023-09-12' where id = 2;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-13' where id = 3;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-14' where id = 4;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-15' where id = 5;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-15' where id = 6;`\n\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "20fde75c-7dab-4776-bd19-dd4379078397",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to submit Overtime",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to submit Overtime",
              "timedOut": false,
              "duration": 32289,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\nawait overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "9a04d0c1-3936-4ae2-bc99-d954bf4c8cf8",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details and Plus Icon",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details and Plus Icon",
              "timedOut": false,
              "duration": 10361,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "fe6b5299-a4f1-47e3-908e-40aa96941cf2",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Delete Button",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Delete Button",
              "timedOut": false,
              "duration": 7927,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_DeleteButton(0)\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "ad77f437-3772-4360-8aa2-3cef8632209d",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Overtime",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Submit Overtime",
              "timedOut": false,
              "duration": 32478,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\nawait overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "c087acbf-813a-4987-a65b-f009110ad4e3",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to click Show Details",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to click Show Details",
              "timedOut": false,
              "duration": 21535,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"managerId\" = 9429 WHERE \"employeeId\" = 9429;`,\n    `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'project_manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 118 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = 2 WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.wait(5000)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(8000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "93a41345-e618-46b1-a6d8-a3924e6f7126",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Filter Button",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Filter Button",
              "timedOut": false,
              "duration": 21196,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_PMSide_FilterButton();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\nawait claims.HRFilterSearchByClaimType('Overtime');\nawait utilFun.wait(1000);\n/// Start and End Date Filter\nawait claims.MyClaims_Filter_StartDate('2023-01-04');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2024-01-04')\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "1139bc1f-5606-484e-b9a8-45839f166402",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Review Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Review Flow",
              "timedOut": false,
              "duration": 16375,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Action_ReviewIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(5000)\n/// Verify Data in Review Tab\nawait overtime_claims.MyClaims_ReviewTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "46651bb1-571c-4bcf-947e-c638f8a39cf4",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Reject Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Reject Flow",
              "timedOut": false,
              "duration": 11587,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Action_RejectIcon()\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Data in Reject Tab\nawait overtime_claims.MyClaims_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "f2b2be27-44d7-444f-af4d-b6080b02d03b",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Approve Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Approve Flow",
              "timedOut": false,
              "duration": 13496,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(5000);\nawait overtime_claims.MyClaims_Action_ApproveIcon();\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n/// Verify Data in Approve Tab\nawait overtime_claims.MyClaims_ApproveTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "5a7889a6-b82c-4dba-b597-bec0cd9d3e74",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details",
              "timedOut": false,
              "duration": 12643,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "8f7dd2c9-0d88-4ed4-8f84-013b14438d8e",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be HR Role Review Flow",
              "timedOut": false,
              "duration": 16361,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\n        await utilFun.wait(2000)\n        await overtime_claims.MyClaims_Action_ReviewIcon(0);\n        await claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\n        await claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\n        const flashMessages = await claims.checkAlert();\n        utilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\n        await utilFun.wait(3000)\n        /// Verify Data in Review Tab\n        await claims.MyClaims_ClaimsRequest_ReviewTab();\n        await claims.Row_Assertion()\n        await utilFun.wait(3000)",
              "err": {},
              "uuid": "72b9f4de-14d2-4edc-8eff-493be9f49aab",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Approve Claim by HR",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Approve Claim by HR",
              "timedOut": false,
              "duration": 18399,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(5000);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_ApproveIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "4de7bba3-2685-4f7d-9e6c-d62890f8a9da",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Reject Claim by HR",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Reject Claim by HR",
              "timedOut": false,
              "duration": 16250,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_RejectIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait utilFun.wait(3000)\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "a26962f5-02ea-4fd6-b337-af946daa68b8",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Reject Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Verify Reject Claim in Applicant Side",
              "timedOut": false,
              "duration": 13950,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nconst flashMessages = await overtime_claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Reject for Test Automation');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\nlet query =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "186f524c-d00e-4091-bfa2-08b285c2b0d5",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit OverTime as a Project Manager (Employee)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Submit OverTime as a Project Manager (Employee)",
              "timedOut": false,
              "duration": 35280,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'project_manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 118 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = 2 WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Sumera Shaikh')\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\nawait overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "c5f3e906-c239-4bf3-84c4-5a4775135e2d",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details (HOD Side)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details (HOD Side)",
              "timedOut": false,
              "duration": 11600,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"managerId\" = 9429 WHERE \"employeeId\" = 9429;`,\n    `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'dev' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 83 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = 9429 WHERE id = 9;',\n    //// change manager id\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(5000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(3000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(2000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "c7e3a8d4-c296-40e8-b619-89fab25ae1ca",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Filter Button (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Filter Button (HOD Scenario)",
              "timedOut": false,
              "duration": 21262,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_PMSide_FilterButton();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\nawait claims.HRFilterSearchByClaimType('Overtime');\nawait utilFun.wait(1000);\n/// Start and End Date Filter\nawait claims.MyClaims_Filter_StartDate('2024-01-04');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2024-01-04')\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "04258df6-aed2-4838-b4c4-0035c868084c",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Review Flow (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Review Flow (HOD Scenario)",
              "timedOut": false,
              "duration": 20305,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(3000);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_Action_ReviewIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(5000)\n/// Verify Data in Review Tab\nawait overtime_claims.MyClaims_ReviewTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "76555b2e-84d8-4c3d-be17-d10ed27bc23d",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Reject Flow (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Reject Flow (HOD Scenario)",
              "timedOut": false,
              "duration": 11245,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Action_RejectIcon()\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Data in Reject Tab\nawait overtime_claims.MyClaims_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "f825067f-6d80-4f3a-bacb-640d502e030f",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Approve Flow (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Approve Flow (HOD Scenario)",
              "timedOut": false,
              "duration": 13468,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(5000);\nawait overtime_claims.MyClaims_Action_ApproveIcon();\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n/// Verify Data in Approve Tab\nawait overtime_claims.MyClaims_ApproveTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "fb04c97a-f32d-4f6d-b5d0-6fe98ca6ee46",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details (HR Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details (HR Scenario)",
              "timedOut": false,
              "duration": 9440,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "ab804d91-5036-4c1a-a454-755fabade587",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review Flow (HR Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be HR Role Review Flow (HR Scenario)",
              "timedOut": false,
              "duration": 16413,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait overtime_claims.MyClaims_Action_ReviewIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(3000)\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nawait utilFun.wait(3000)",
              "err": {},
              "uuid": "d9bdc6cb-d4bc-461b-9f1b-14f94efc51ea",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Approve Claim by HR (HR Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Approve Claim by HR (HR Scenario)",
              "timedOut": false,
              "duration": 18384,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(5000);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_ApproveIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "c0d08ad5-dd8e-463a-a1e3-f1698635b170",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Reject Claim by HR",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Reject Claim by HR",
              "timedOut": false,
              "duration": 16434,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_RejectIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait utilFun.wait(3000)\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "e6196f5b-fe33-4f1c-870c-07000a800838",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Reject Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Verify Reject Claim in Applicant Side",
              "timedOut": false,
              "duration": 14021,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'project_manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 118 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = 2 WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nconst flashMessages = await overtime_claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Reject for Test Automation');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "faeae65f-7d9b-46e0-8a28-827c951343c8",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Download CSV",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Download CSV",
              "timedOut": false,
              "duration": 21340,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_ClaimRequest_DownloadBtn()\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Filter_StartDate('2024-01-01');\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_Filter_EndDate('2024-01-15');\nawait claims.ClaimStatus('Pending');\nawait utilFun.wait(1000);\nawait claims.ClaimStatus('Rejected');\nawait claims.MyClaims_ClaimRequest_DownloadBtn_MainDownloadBtn()\nawait utilFun.wait(1000);\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "851c68a6-383d-49e9-908b-f60290a78865",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 17826,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineDate_ClearHover();\nawait overtime_claims.MyClaims_DeadlineDate_ClearBtn();\nawait overtime_claims.MyClaims_Deadline_Date('2023-03-12 20:48:11');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "81e1199b-a9c0-43e5-938f-93fdf3d0d6d4",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit OverTime with Wrong Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Submit OverTime with Wrong Deadline Date",
              "timedOut": false,
              "duration": 22580,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Furqan Aziz')\nawait utilFun.wait(1000);\n// await overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\n// await overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Overtime claim is only allow for current month');\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);",
              "err": {},
              "uuid": "4de149ac-a83c-454b-9737-37ba0ab4f09c",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Set Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Set Deadline Date",
              "timedOut": false,
              "duration": 17932,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        'DELETE FROM employee_claim_deadlines;',\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineDate_ClearHover();\nawait overtime_claims.MyClaims_DeadlineDate_ClearBtn();\nawait overtime_claims.MyClaims_Deadline_Date('2024-03-12 20:48:11');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "8a52f2c6-c808-41af-baf4-5fc16fdbff78",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit OverTime as a SQA Automation(Employee) to Verify with Correct Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Submit OverTime as a SQA Automation(Employee) to Verify with Correct Deadline Date",
              "timedOut": false,
              "duration": 30373,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Furqan Aziz')\n// await utilFun.wait(1000);\n// await overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\n// await overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');\n let querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n        'DELETE FROM employee_claim_deadlines;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {
                "message": "AssertionError: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully!'",
                "estack": "AssertionError [ERR_ASSERTION]: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully!'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/monthlyclaim/myclaims-overtime.js:691:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- You are not able to claim as the claim time is over.\n+ Claim submitted successfully!\n"
              },
              "uuid": "7605b1d0-e9a6-4247-93f7-c3db27cb7adc",
              "parentUUID": "95e14632-d88b-4665-ac35-f34629e19ab7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "48f36b3c-656e-4e3f-a4dd-1a37321496b9",
            "20fde75c-7dab-4776-bd19-dd4379078397",
            "9a04d0c1-3936-4ae2-bc99-d954bf4c8cf8",
            "fe6b5299-a4f1-47e3-908e-40aa96941cf2",
            "ad77f437-3772-4360-8aa2-3cef8632209d",
            "c087acbf-813a-4987-a65b-f009110ad4e3",
            "93a41345-e618-46b1-a6d8-a3924e6f7126",
            "1139bc1f-5606-484e-b9a8-45839f166402",
            "46651bb1-571c-4bcf-947e-c638f8a39cf4",
            "f2b2be27-44d7-444f-af4d-b6080b02d03b",
            "5a7889a6-b82c-4dba-b597-bec0cd9d3e74",
            "8f7dd2c9-0d88-4ed4-8f84-013b14438d8e",
            "72b9f4de-14d2-4edc-8eff-493be9f49aab",
            "4de7bba3-2685-4f7d-9e6c-d62890f8a9da",
            "a26962f5-02ea-4fd6-b337-af946daa68b8",
            "186f524c-d00e-4091-bfa2-08b285c2b0d5",
            "c5f3e906-c239-4bf3-84c4-5a4775135e2d",
            "c7e3a8d4-c296-40e8-b619-89fab25ae1ca",
            "04258df6-aed2-4838-b4c4-0035c868084c",
            "76555b2e-84d8-4c3d-be17-d10ed27bc23d",
            "f825067f-6d80-4f3a-bacb-640d502e030f",
            "fb04c97a-f32d-4f6d-b5d0-6fe98ca6ee46",
            "ab804d91-5036-4c1a-a454-755fabade587",
            "d9bdc6cb-d4bc-461b-9f1b-14f94efc51ea",
            "c0d08ad5-dd8e-463a-a1e3-f1698635b170",
            "e6196f5b-fe33-4f1c-870c-07000a800838",
            "faeae65f-7d9b-46e0-8a28-827c951343c8",
            "851c68a6-383d-49e9-908b-f60290a78865",
            "81e1199b-a9c0-43e5-938f-93fdf3d0d6d4",
            "4de149ac-a83c-454b-9737-37ba0ab4f09c",
            "8a52f2c6-c808-41af-baf4-5fc16fdbff78"
          ],
          "failures": [
            "7605b1d0-e9a6-4247-93f7-c3db27cb7adc"
          ],
          "pending": [],
          "skipped": [],
          "duration": 566246,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "0568cb29-53c9-474f-8bd9-491e78115964",
          "title": "Monthly Claims -> Personal Development Fund",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-pdf.js",
          "file": "/test/e2e/monthlyclaim/myclaims-pdf.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able one File Upload and close button in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be able one File Upload and close button in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "812aac7c-b925-48cb-b2c2-ca4c63a3b349",
              "parentUUID": "0568cb29-53c9-474f-8bd9-491e78115964",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able multiple File Upload & Cancel Button in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be able multiple File Upload & Cancel Button in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "12b28988-6a76-4e6f-bb12-6229f3b76611",
              "parentUUID": "0568cb29-53c9-474f-8bd9-491e78115964",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "cbb252d3-b192-4afa-981f-1bc989716a1a",
              "parentUUID": "0568cb29-53c9-474f-8bd9-491e78115964",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Delete Claim in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be Delete Claim in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "1e39e1fe-d3cc-4a9d-a99c-5ace6f233790",
              "parentUUID": "0568cb29-53c9-474f-8bd9-491e78115964",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "dbc05a2f-8539-43f7-8835-1f3ab552d8ea",
              "parentUUID": "0568cb29-53c9-474f-8bd9-491e78115964",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "737243f8-1b52-434c-8b5e-283b68424438",
              "parentUUID": "0568cb29-53c9-474f-8bd9-491e78115964",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Edit Claim of Personal Development Allowance",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Edit Claim of Personal Development Allowance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "100f43b2-c84e-40bf-abdb-ed069427553f",
              "parentUUID": "0568cb29-53c9-474f-8bd9-491e78115964",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reviews Chart",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Reviews Chart",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "53142008-2893-47e4-9533-91261291dc94",
              "parentUUID": "0568cb29-53c9-474f-8bd9-491e78115964",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Add Reviews",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Add Reviews",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "afaf0907-1f2a-40ac-8bfe-8bb1c748d03b",
              "parentUUID": "0568cb29-53c9-474f-8bd9-491e78115964",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Approve Button",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Approve Button",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "968620dc-9982-4008-9dc5-dec9e9b691a5",
              "parentUUID": "0568cb29-53c9-474f-8bd9-491e78115964",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review See Button in Approve Tab",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Review See Button in Approve Tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "26447991-bbd4-497e-9e8d-06f6af22d768",
              "parentUUID": "0568cb29-53c9-474f-8bd9-491e78115964",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reject Button",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Reject Button",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "f6439c8d-2f30-494a-9193-3d737fd33b33",
              "parentUUID": "0568cb29-53c9-474f-8bd9-491e78115964",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reason See in Reject Tab ",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Reason See in Reject Tab ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "f1418c14-3f34-4fab-96dd-39fb1fdd57d4",
              "parentUUID": "0568cb29-53c9-474f-8bd9-491e78115964",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "4fa776e2-6c95-49dc-ac1a-7f4dec40d59e",
              "parentUUID": "0568cb29-53c9-474f-8bd9-491e78115964",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8573f9b6-0123-47bb-ac89-9ff5602dc750",
              "parentUUID": "0568cb29-53c9-474f-8bd9-491e78115964",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund for Verify Incorrect Deadline",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund for Verify Incorrect Deadline",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "281b0ff4-db3a-4b16-abe3-ee111d5d5651",
              "parentUUID": "0568cb29-53c9-474f-8bd9-491e78115964",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "ae53c36d-b4ba-4429-b42d-7141c25e6dae",
              "parentUUID": "0568cb29-53c9-474f-8bd9-491e78115964",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund for Verify Correct Deadline",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund for Verify Correct Deadline",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "80a235d3-28da-4f97-a2a3-383826135490",
              "parentUUID": "0568cb29-53c9-474f-8bd9-491e78115964",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "812aac7c-b925-48cb-b2c2-ca4c63a3b349",
            "12b28988-6a76-4e6f-bb12-6229f3b76611",
            "cbb252d3-b192-4afa-981f-1bc989716a1a",
            "1e39e1fe-d3cc-4a9d-a99c-5ace6f233790",
            "dbc05a2f-8539-43f7-8835-1f3ab552d8ea",
            "737243f8-1b52-434c-8b5e-283b68424438",
            "100f43b2-c84e-40bf-abdb-ed069427553f",
            "53142008-2893-47e4-9533-91261291dc94",
            "afaf0907-1f2a-40ac-8bfe-8bb1c748d03b",
            "968620dc-9982-4008-9dc5-dec9e9b691a5",
            "26447991-bbd4-497e-9e8d-06f6af22d768",
            "f6439c8d-2f30-494a-9193-3d737fd33b33",
            "f1418c14-3f34-4fab-96dd-39fb1fdd57d4",
            "4fa776e2-6c95-49dc-ac1a-7f4dec40d59e",
            "8573f9b6-0123-47bb-ac89-9ff5602dc750",
            "281b0ff4-db3a-4b16-abe3-ee111d5d5651",
            "ae53c36d-b4ba-4429-b42d-7141c25e6dae",
            "80a235d3-28da-4f97-a2a3-383826135490"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
          "title": "Portfolio Module",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/portfolio/spec-1-portfolio.js",
          "file": "/test/e2e/portfolio/spec-1-portfolio.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Portfolio Module\"",
              "fullTitle": "Portfolio Module \"before all\" hook in \"Portfolio Module\"",
              "timedOut": false,
              "duration": 11030,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet portfolioId = await utilFun.getFromDatabase(`SELECT id FROM project_portfolios WHERE \"name\" = '${portfolioName}';`)\nif(portfolioId.rowCount !== 0){\nconst query = [\n  `DELETE FROM project_portfolio_attachments WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n  `DELETE FROM project_portfolio_skills WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n  `DELETE FROM project_portfolio_employees WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n  `DELETE FROM project_portfolios WHERE id = ${portfolioId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n  }",
              "err": {},
              "uuid": "e7261811-63e7-44b7-be7d-f97ea18ac39f",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Portfolio Module\"",
              "fullTitle": "Portfolio Module \"before each\" hook in \"Portfolio Module\"",
              "timedOut": false,
              "duration": 4531,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/portfolio');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "56a5a5a1-d5e5-4476-84aa-0b0296fbcd40",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if Portfolio is showing",
              "fullTitle": "Portfolio Module should check if Portfolio is showing",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/portfolio');",
              "err": {},
              "uuid": "9dda1e2e-768a-4d61-aa3a-17920889e19e",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add Portfolio",
              "fullTitle": "Portfolio Module should able to Add Portfolio",
              "timedOut": false,
              "duration": 24521,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickAddPorfolioBtn()\nawait portfolio.typeProjectName(portfolioName)\nawait portfolio.pasteLiveLink('http://google.com')\nawait portfolio.selectProjectStatus('Active')\nawait portfolio.selectPOC('Muhammad Bilal Rafaqat')\nawait portfolio.selectIndustry('Gaming')\nawait portfolio.selectProjectNature('Web App')\nawait portfolio.typeProjectDescription('testing')\nawait portfolio.clickYesCheckbox()\nawait portfolio.clickNotNowCheckbox()\nawait portfolio.clickFormNxtBtn()\nawait portfolio.clickFormNewNxtBtn()\nawait portfolio.selectEngagementModel('Fixed Term')\nawait portfolio.selectClientRegion('Germany')\nawait portfolio.selectDivision('InvoTeams')\nawait portfolio.selectTechStack('Node Js')\nawait portfolio.typeTag('testing')\nawait portfolio.selectResource('Hello')\nawait portfolio.selectRole('Lead Developer')\nawait portfolio.clickForm1NxtBtn()\nawait portfolio.selectDemoLinkUpdate('Web App')\nawait portfolio.typeDemoLinkLink('link')\nawait portfolio.typeDemoLinkDetails('testing')\nawait portfolio.selectAchievementsUpdate('Awards')\nawait portfolio.typeAchievementsLink('Link')\nawait portfolio.typeAchievementsDetails('testing')\nawait portfolio.typeGitUpdate('test')\nawait portfolio.typeGitLink('link')\nawait portfolio.typeGitDetails('testing')\nawait portfolio.clickForm2NxtBtn()\nawait portfolio.typeVideoTitle('Video Title')\nawait portfolio.uploadVideoFile()\nawait portfolio.typeDocTitle('Doc Title')\nawait portfolio.uploadDocFile()\nawait portfolio.typeProblemsOrChallenges('testing')\nawait portfolio.typeSolutions('testing')\nawait portfolio.clickForm3SubmitBtn()\nconst alertText = await portfolio.checkAlert();\nutilFun.assertEql(alertText, 'Portfolio has been saved successfully');",
              "err": {},
              "uuid": "5f94bf01-13bf-4407-acc1-9c92b1d1cb26",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if Portfolio is Added or Not",
              "fullTitle": "Portfolio Module should able to check if Portfolio is Added or Not",
              "timedOut": false,
              "duration": 1268,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.selectPortfolioName(portfolioName)\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {},
              "uuid": "9c126817-19b0-431a-b638-c01d3a9eb1bc",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Update Portfolio",
              "fullTitle": "Portfolio Module should able to Update Portfolio",
              "timedOut": false,
              "duration": 29122,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.selectPortfolioName(portfolioName)\nawait portfolio.clickEditButton()\nawait portfolio.pasteLiveLink('http://google2.com')\nawait portfolio.selectProjectStatus('Closing')\nawait portfolio.selectPOC('Muhammad Bilal Rafaqat')\nawait portfolio.selectIndustry('Education')\nawait portfolio.selectProjectNature('IOS App')\nawait portfolio.typeProjectDescription('testing updated')\nawait portfolio.clickYesCheckbox()\nawait portfolio.clickNotNowCheckbox()\nawait portfolio.clickFormNxtBtn()\nawait portfolio.clickFormNewNxtBtn()\nawait portfolio.selectEngagementModel('Fixed Term')\nawait portfolio.selectClientRegion('Pakistan')\nawait portfolio.selectDivision('Invogame')\nawait portfolio.selectTechStack('Frontend')\nawait portfolio.typeTag('Updated Tag')\nawait portfolio.selectResource('Hello')\nawait portfolio.selectRole('Lead Developer')\nawait portfolio.clickForm1NxtBtn()\nawait portfolio.selectDemoLinkUpdate('Desktop App')\nawait portfolio.typeDemoLinkLink('updated')\nawait portfolio.typeDemoLinkDetails('update')\nawait portfolio.selectAchievementsUpdate('Shoutouts')\nawait portfolio.typeAchievementsLink('Link updated')\nawait portfolio.typeAchievementsDetails('testing updated')\nawait portfolio.typeGitUpdate('test updated')\nawait portfolio.typeGitLink('link updated')\nawait portfolio.typeGitDetails('testing updated')\nawait portfolio.clickForm2NxtBtn()\nawait portfolio.typeVideoTitle('Video Title Updated')\nawait portfolio.uploadVideoFile()\nawait portfolio.typeDocTitle('Doc Title updated')\nawait portfolio.uploadDocFile()\nawait portfolio.typeProblemsOrChallenges('testing updated')\nawait portfolio.typeSolutions('testing updated')\nawait portfolio.clickForm3SubmitBtn()\nconst alertText = await portfolio.checkAlert();\nutilFun.assertEql(alertText, 'Portfolio has been updated successfully');",
              "err": {},
              "uuid": "321a9ebd-e70b-4829-980e-52375f1364b1",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Name",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Name",
              "timedOut": false,
              "duration": 1144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.selectPortfolioName(portfolioName)\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {},
              "uuid": "32b06456-dcb3-4743-88e1-7af272157223",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by POC",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by POC",
              "timedOut": false,
              "duration": 1330,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByPOC('Muhammad Bilal Rafaqat')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "bfc22944-5f75-4658-9ce4-6e83250122bd",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Industry",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Industry",
              "timedOut": false,
              "duration": 1335,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByIndustry('Gaming')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Gaming'), `Expected text not found.`);",
              "err": {},
              "uuid": "0f05a798-ed57-46fb-875e-23e92f013f0c",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Tech Stack",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Tech Stack",
              "timedOut": false,
              "duration": 1877,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByTechstack('Node Js')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Node Js'), `Expected text not found.`);",
              "err": {},
              "uuid": "4657d1b3-c516-4779-965e-becdd4f6f089",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Resource",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Resource",
              "timedOut": false,
              "duration": 4176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByResources('Hello')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {},
              "uuid": "3e17364e-506d-45b4-a821-4dce0c41babd",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Tags",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Tags",
              "timedOut": false,
              "duration": 1121,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByTags('testing')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('testing'), `Expected text not found.`);",
              "err": {},
              "uuid": "6e337b64-a9ae-45ae-b90b-93271edb1179",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Project Nature",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Project Nature",
              "timedOut": false,
              "duration": 1252,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByProjectNature('Web App')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Web App'), `Expected text not found.`);",
              "err": {},
              "uuid": "745441c6-58ee-4d44-b3d8-29a898d51ad8",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Region",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Region",
              "timedOut": false,
              "duration": 4369,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByRegion('Pakistan')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Pakistan'), `Expected text not found.`);",
              "err": {},
              "uuid": "d42b0473-5cc9-4c0d-903a-d38f1f3a5411",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Date",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Date",
              "timedOut": false,
              "duration": 1201,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByDate('Last 2 Weeks')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/portfolio/spec-1-portfolio.js:184:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "ff098a38-153a-4593-8ac9-6228d6364870",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Division Colum",
              "fullTitle": "Portfolio Module should able to Hide Division Colum",
              "timedOut": false,
              "duration": 1162,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Division')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 14, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Division'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "529004a4-8c81-4561-8576-0dccfb4f143e",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Project Nature Colum",
              "fullTitle": "Portfolio Module should able to Hide Project Nature Colum",
              "timedOut": false,
              "duration": 994,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Project Nature')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 13, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Project Nature'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "9ec4a0ff-1a92-4482-ade2-27b178446eb5",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Tech Stack Colum",
              "fullTitle": "Portfolio Module should able to Hide Tech Stack Colum",
              "timedOut": false,
              "duration": 893,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Tech Stack')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 12, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Tech Stack'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "cbde6d87-f27b-4d06-9f18-978c95933d39",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide POC Colum",
              "fullTitle": "Portfolio Module should able to Hide POC Colum",
              "timedOut": false,
              "duration": 902,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('POC')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 11, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('POC'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "e194d3af-9fce-434b-8733-2096fe54adc2",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Resources Colum",
              "fullTitle": "Portfolio Module should able to Hide Resources Colum",
              "timedOut": false,
              "duration": 873,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Resources')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 10, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Resources'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "f755b0d2-9373-4c02-b772-2e1b6193f65f",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Tags Colum",
              "fullTitle": "Portfolio Module should able to Hide Tags Colum",
              "timedOut": false,
              "duration": 785,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Tags')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 9, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Tags'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "2a718ba4-b8e9-43c7-9001-6ef98f85c46e",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Industry Colum",
              "fullTitle": "Portfolio Module should able to Hide Industry Colum",
              "timedOut": false,
              "duration": 749,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Industry')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 8, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Industry'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "b479fb7e-4271-4225-8a57-43096735ca2f",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Region Colum",
              "fullTitle": "Portfolio Module should able to Hide Region Colum",
              "timedOut": false,
              "duration": 718,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Region')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 7, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Region'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "830f5e33-908e-43a1-a2e6-9d61b6f3b51f",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Attachments Colum",
              "fullTitle": "Portfolio Module should able to Hide Attachments Colum",
              "timedOut": false,
              "duration": 718,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Attachments')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 6, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Attachments'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "f324c230-a3b9-4b40-b614-d65ab15facb5",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Achievements Colum",
              "fullTitle": "Portfolio Module should able to Hide Achievements Colum",
              "timedOut": false,
              "duration": 618,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Achievements')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 5, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Achievements'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "e78cb73f-6370-4654-961c-e0f6236131d1",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Git Access Colum",
              "fullTitle": "Portfolio Module should able to Hide Git Access Colum",
              "timedOut": false,
              "duration": 680,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Git Access')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 4, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Git Access'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "f36836df-33b8-4027-9cea-9ffd2fec0d08",
              "parentUUID": "e6251bcc-d5f6-449f-b342-b3f154c7db9d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9dda1e2e-768a-4d61-aa3a-17920889e19e",
            "5f94bf01-13bf-4407-acc1-9c92b1d1cb26",
            "9c126817-19b0-431a-b638-c01d3a9eb1bc",
            "321a9ebd-e70b-4829-980e-52375f1364b1",
            "32b06456-dcb3-4743-88e1-7af272157223",
            "bfc22944-5f75-4658-9ce4-6e83250122bd",
            "0f05a798-ed57-46fb-875e-23e92f013f0c",
            "4657d1b3-c516-4779-965e-becdd4f6f089",
            "3e17364e-506d-45b4-a821-4dce0c41babd",
            "6e337b64-a9ae-45ae-b90b-93271edb1179",
            "745441c6-58ee-4d44-b3d8-29a898d51ad8",
            "d42b0473-5cc9-4c0d-903a-d38f1f3a5411",
            "529004a4-8c81-4561-8576-0dccfb4f143e",
            "9ec4a0ff-1a92-4482-ade2-27b178446eb5",
            "cbde6d87-f27b-4d06-9f18-978c95933d39",
            "e194d3af-9fce-434b-8733-2096fe54adc2",
            "f755b0d2-9373-4c02-b772-2e1b6193f65f",
            "2a718ba4-b8e9-43c7-9001-6ef98f85c46e",
            "b479fb7e-4271-4225-8a57-43096735ca2f",
            "830f5e33-908e-43a1-a2e6-9d61b6f3b51f",
            "f324c230-a3b9-4b40-b614-d65ab15facb5",
            "e78cb73f-6370-4654-961c-e0f6236131d1",
            "f36836df-33b8-4027-9cea-9ffd2fec0d08"
          ],
          "failures": [
            "ff098a38-153a-4593-8ac9-6228d6364870"
          ],
          "pending": [],
          "skipped": [],
          "duration": 81819,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
          "title": "Projects -> All Projects",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/projects/spec-1-allprojects.js",
          "file": "/test/e2e/projects/spec-1-allprojects.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Projects -> All Projects\"",
              "fullTitle": "Projects -> All Projects \"before all\" hook in \"Projects -> All Projects\"",
              "timedOut": false,
              "duration": 25,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\n// await utilFun.login(email, password);",
              "err": {},
              "uuid": "ec016760-54d2-44d1-8b21-5fbd3faeb294",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to check Add Project Button Clickable ",
              "fullTitle": "Projects -> All Projects should able to check Add Project Button Clickable ",
              "timedOut": false,
              "duration": 4887,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9429;`,\n  `UPDATE employees SET \"workAs\" = 'dev' WHERE id = 9429;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9429;`,\n  `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n  `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n  'UPDATE departments SET \"hodId\" = 9429 WHERE id = 9;',\n  //// change manager id\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_AddProject_Btn();\nawait projects.checkModelIsVisible();",
              "err": {},
              "uuid": "94465ef5-e58a-4720-85b1-883993541bff",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Add Button is Disable ",
              "fullTitle": "Projects -> All Projects should able to Verify Add Button is Disable ",
              "timedOut": false,
              "duration": 5128,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_AddProject_Btn();\nawait utilFun.wait(1000);\nawait projects.Projects_AddProject_AddBtn_Disable();",
              "err": {},
              "uuid": "4ce1b494-ec37-4d57-b2df-9cd95a6d1d02",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add Project",
              "fullTitle": "Projects -> All Projects should able to Add Project",
              "timedOut": false,
              "duration": 11242,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM projects WHERE \"name\" = 'Appeo';`);\nlet portfolioId = await utilFun.getFromDatabase(`SELECT id FROM project_portfolios WHERE \"name\" = 'Appeo';`);\nif (resourceId.rowCount !== 0) {\n  let query = [\n    `DELETE FROM \"project_portfolio_skills\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n    `DELETE FROM \"project_timelines\" WHERE \"projectId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"project_portfolio_employees\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n    `DELETE FROM \"project_portfolios\" WHERE \"projectId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"projects\" WHERE \"id\" = ${resourceId.rows[0].id};`,\n  ];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_AddProject_Btn();\nawait projects.Projects_AddProject_ProjectName('Appeo');\nawait projects.Projects_AddProject_Divison('InvoLane');\nawait projects.Projects_AddProject_Status('Closing');\nawait projects.Projects_AddProject_AddBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project is created successfully.');",
              "err": {},
              "uuid": "b34d7e2b-659b-4399-b4c4-a626f0490585",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify if Project is added",
              "fullTitle": "Projects -> All Projects should able to Verify if Project is added",
              "timedOut": false,
              "duration": 7170,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Appeo'), `Expected text not found.`);",
              "err": {},
              "uuid": "9a0ebcf5-4b14-4c90-aefa-82030d0b0203",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Division",
              "fullTitle": "Projects -> All Projects should able to Edit Division",
              "timedOut": false,
              "duration": 11466,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditDivision_Hover();\nawait projects.Projects_ProjectDetail_EditDivision();\nawait projects.selectInput('Invogame');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "8a0f2bc0-e340-45cb-a158-324a179ec083",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Country",
              "fullTitle": "Projects -> All Projects should able to Edit Country",
              "timedOut": false,
              "duration": 11242,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditCountry_Hover();\nawait projects.Projects_ProjectDetail_EditCountryClick();\nawait projects.selectInput('Egypt');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "9003d1e9-4cbc-4713-8447-aa08dcd6dfb4",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Status",
              "fullTitle": "Projects -> All Projects should able to Edit Status",
              "timedOut": false,
              "duration": 10613,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditStatusHover();\nawait projects.Projects_ProjectDetail_EditStatusClick();\nawait projects.selectInput('Closing');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "619e1b71-555a-46fc-adca-39415553a696",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Project Manager",
              "fullTitle": "Projects -> All Projects should able to Edit Project Manager",
              "timedOut": false,
              "duration": 11459,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditProjectManagerHover();\nawait projects.Projects_ProjectDetail_EditProjectManagerClick();\nawait projects.selectInput('Muhammad Bilal Rafaqat');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "490e46a0-6337-4927-a050-309fb36df7f0",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Contract",
              "fullTitle": "Projects -> All Projects should able to Edit Contract",
              "timedOut": false,
              "duration": 11352,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditContractHover();\nawait projects.Projects_ProjectDetail_EditContractClick();\nawait projects.selectInput('Agency to Client');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "59953d81-b6c1-4460-8fea-c1e1d48d6729",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit PM Introduced",
              "fullTitle": "Projects -> All Projects should able to Edit PM Introduced",
              "timedOut": false,
              "duration": 10979,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditPMIntroHover();\nawait projects.Projects_ProjectDetail_EditPMIntroClick();\nawait projects.selectInput('No');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "e37c4070-7a44-424f-bb43-79cc7d20714f",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Dev Introduced",
              "fullTitle": "Projects -> All Projects should able to Edit Dev Introduced",
              "timedOut": false,
              "duration": 11087,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditDevIntroHover();\nawait projects.Projects_ProjectDetail_EditDevIntroClick();\nawait projects.selectInput('Yes');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "e831ad28-19d5-439f-a326-9c09bbb554b8",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Engagement",
              "fullTitle": "Projects -> All Projects should able to Edit Engagement",
              "timedOut": false,
              "duration": 11310,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditEngagementHover();\nawait projects.Projects_ProjectDetail_EditEngagementClick();\nawait projects.selectInput('Hourly');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "6cb055eb-a4b5-47c3-ae1a-f2c182c20f45",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Billing Cycle",
              "fullTitle": "Projects -> All Projects should able to Edit Billing Cycle",
              "timedOut": false,
              "duration": 11206,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditBillingCycleHover();\nawait projects.Projects_ProjectDetail_EditBillingCycleClick();\nawait projects.selectInput('Weekly');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "5207805a-4ca2-49a6-9709-106cfd2e70a1",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit BD Member",
              "fullTitle": "Projects -> All Projects should able to Edit BD Member",
              "timedOut": false,
              "duration": 11125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditBDMemberHover();\nawait projects.Projects_ProjectDetail_EditBDMember();\nawait projects.selectInput('Ahsan Butt');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "3b57eb5e-05ff-4b2f-95d7-aa5a13b582eb",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Communication Mode",
              "fullTitle": "Projects -> All Projects should able to Edit Communication Mode",
              "timedOut": false,
              "duration": 11201,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditCommunicationModeHover();\nawait projects.Projects_ProjectDetail_EditCommunicationModeClick();\nawait projects.selectInput('Email');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "93525287-fdf8-4bb4-bc51-454484eca7c7",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Billing Profile",
              "fullTitle": "Projects -> All Projects should able to Edit Billing Profile",
              "timedOut": false,
              "duration": 11109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditBillingProfileHover();\nawait projects.Projects_ProjectDetail_EditBillingProfile();\nawait projects.selectInput('Cash');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "cad4a77b-410d-46fe-9da6-087d80f4ba1c",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Billing Channel",
              "fullTitle": "Projects -> All Projects should able to Edit Billing Channel",
              "timedOut": false,
              "duration": 11296,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditBillingChannelHover();\nawait projects.Projects_ProjectDetail_EditBillingChannelClick();\nawait projects.selectInput('Upwork Profile');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');\n//'Billing profile is required for this billing channel!!');",
              "err": {},
              "uuid": "d807ca16-bad9-4c7a-8bbb-5825c33dd3f7",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document & Cancel Button",
              "fullTitle": "Projects -> All Projects should able to Upload Document & Cancel Button",
              "timedOut": false,
              "duration": 11381,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadPhoto(0);\nawait projects.Projects_ProjectDetail_UploadDocument_AddRow(0);\nawait projects.Projects_ProjectDetail_UploadDocument_RemoveRow(1);\nawait projects.Projects_CancelBtn();",
              "err": {},
              "uuid": "6bf17cfc-acd4-4941-90d7-35191f306b5f",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document  & Disable Submit Button ",
              "fullTitle": "Projects -> All Projects should able to Upload Document  & Disable Submit Button ",
              "timedOut": false,
              "duration": 10524,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_DisableSubmitBtn();",
              "err": {},
              "uuid": "67dfbf5e-56cf-4e7a-803e-be9bfe5e5f81",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document Photo & Submit Button ",
              "fullTitle": "Projects -> All Projects should able to Upload Document Photo & Submit Button ",
              "timedOut": false,
              "duration": 14749,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadPhoto(0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');",
              "err": {},
              "uuid": "17a68f3f-753c-4735-a1d4-669282f3ee49",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Download Documents ",
              "fullTitle": "Projects -> All Projects should able to Download Documents ",
              "timedOut": false,
              "duration": 7082,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_DownloadDocumentBtn(0);\nawait projects.Projects_DownloadDocumentBtn(1);",
              "err": {},
              "uuid": "58920e54-4f0d-464b-af54-97ac7934a713",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document Link & Cancel Button",
              "fullTitle": "Projects -> All Projects should able to Upload Document Link & Cancel Button",
              "timedOut": false,
              "duration": 11207,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('Link', 1);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_ProjectDetail_UploadDocument_Field('www.invohub.com', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_AddRow(0);\nawait projects.Projects_ProjectDetail_UploadDocument_RemoveRow(1);\nawait projects.Projects_CancelBtn();",
              "err": {},
              "uuid": "6c846361-9983-42ad-8a02-f52a1280d514",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document Link & Submit Button ",
              "fullTitle": "Projects -> All Projects should able to Upload Document Link & Submit Button ",
              "timedOut": false,
              "duration": 14751,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('Link', 1);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_ProjectDetail_UploadDocument_Field('www.invohub.com', 0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');",
              "err": {},
              "uuid": "c592d91b-15f2-491c-8977-c20e67f021a5",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete Documents & Cancel Button ",
              "fullTitle": "Projects -> All Projects should able to Delete Documents & Cancel Button ",
              "timedOut": false,
              "duration": 7106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_CancelBtn();",
              "err": {},
              "uuid": "e6ba21f0-44b2-4094-9dea-c4714b5d1589",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete Documents & Ok Button ",
              "fullTitle": "Projects -> All Projects should able to Delete Documents & Ok Button ",
              "timedOut": false,
              "duration": 15570,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Document removed from project successfully.');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Document removed from project successfully.');",
              "err": {},
              "uuid": "c3618bd6-facc-4a55-a607-ee31d5d566f9",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document PDF & Submit Button & Delete PDF ",
              "fullTitle": "Projects -> All Projects should able to Upload Document PDF & Submit Button & Delete PDF ",
              "timedOut": false,
              "duration": 18633,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document PDF Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadPDF(0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Document removed from project successfully.');",
              "err": {},
              "uuid": "adf3fb83-e8e5-43cd-9b20-923be9648587",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document Doc & Submit Button & Delete Doc ",
              "fullTitle": "Projects -> All Projects should able to Upload Document Doc & Submit Button & Delete Doc ",
              "timedOut": false,
              "duration": 19052,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Doc Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadDoc(0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Document removed from project successfully.');",
              "err": {},
              "uuid": "1468d0f2-b4a1-4604-85bb-2bf870600ecb",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document xlsx & Submit Button & Delete xlsx ",
              "fullTitle": "Projects -> All Projects should able to Upload Document xlsx & Submit Button & Delete xlsx ",
              "timedOut": false,
              "duration": 18511,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Xlsx Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadXlsx(0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Document removed from project successfully.');",
              "err": {},
              "uuid": "38eb41ce-8d36-423b-bea2-4071a172fee7",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add Resource in Project ",
              "fullTitle": "Projects -> All Projects should able to Add Resource in Project ",
              "timedOut": false,
              "duration": 28465,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(1);\nawait projects.RoleProject('Lead SQA');\nawait projects.ResourceName('Ahmed Ali');\nawait projects.EngagementCapicity('5~6 hours');\nawait projects.EngagementMode('Parked');\nawait projects.Projects_ProjectDetail_AddResource_Alias('Input Alias');\nawait projects.Projects_SubmitBtns();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Resource added successfully.');",
              "err": {},
              "uuid": "e1359fdb-bc49-4fc4-98c5-f723e5c601e3",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Resource Engagement Mode ",
              "fullTitle": "Projects -> All Projects should able to Edit Resource Engagement Mode ",
              "timedOut": false,
              "duration": 11400,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_Resource_EngagementModeHover();\nawait projects.Projects_Resource_EngagementModeEdit();\nawait projects.ResourceEngagementMode('Training');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "0674927c-e013-4bab-973f-7a94eb93a2d1",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Resource Engagement Capicity ",
              "fullTitle": "Projects -> All Projects should able to Edit Resource Engagement Capicity ",
              "timedOut": false,
              "duration": 11263,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.ResourceEngagementCapicity('Fully Occupied');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "f0c64357-a8f6-4407-88d7-d3f9518468ab",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Alias",
              "fullTitle": "Projects -> All Projects should able to Edit Alias",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "ee563d7d-74c8-4798-8696-bacf69c0bf33",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete Resource",
              "fullTitle": "Projects -> All Projects should able to Delete Resource",
              "timedOut": false,
              "duration": 11095,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Resource removed from project successfully.');",
              "err": {},
              "uuid": "688a2135-0002-4c0e-bb2f-cefbe636c1f8",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Project",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Project",
              "timedOut": false,
              "duration": 7101,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Appeo'), `Expected text not found.`);",
              "err": {},
              "uuid": "9576a0e5-e600-4acf-b708-f5bfac04dacf",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Manager ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Manager ",
              "timedOut": false,
              "duration": 6875,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Manager', 'Muhammad Bilal Rafaqat');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "89be6ba9-9d42-4784-97dd-1ec6fb79d9c7",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Division ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Division ",
              "timedOut": false,
              "duration": 7124,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Division', 'InvoTeams');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('InvoTeams'), `Expected text not found.`);",
              "err": {},
              "uuid": "ee1afd48-a738-4650-b3a5-7126dbc44108",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Status ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Status ",
              "timedOut": false,
              "duration": 7002,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Status', 'Active');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Active'), `Expected text not found.`);",
              "err": {},
              "uuid": "0f8ccf2b-c95b-4c0d-95cf-762656255e13",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by BD Team ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by BD Team ",
              "timedOut": false,
              "duration": 7285,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by BD Team', 'Bd F');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Bd F'), `Expected text not found.`);",
              "err": {},
              "uuid": "f4d71270-95c3-45cb-aced-0b7a750f382b",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by BD Member ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by BD Member ",
              "timedOut": false,
              "duration": 6976,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by BD Member', 'Ahsan Butt');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Ahsan Butt'), `Expected text not found.`);",
              "err": {},
              "uuid": "092e17b6-d882-4999-bf02-85e3e2fcf37f",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Contract ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Contract ",
              "timedOut": false,
              "duration": 7257,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Contract', 'Agency to Client');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Agency to Client'), `Expected text not found.`);",
              "err": {},
              "uuid": "3d0345cf-f795-45fa-96d2-c6c7a9888f1f",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Country ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Country ",
              "timedOut": false,
              "duration": 7099,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Country', 'Egypt');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Egypt'), `Expected text not found.`);",
              "err": {},
              "uuid": "9fc3f8cb-c2fe-47a9-87fe-74da6ed5e5d8",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Billing Channel ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Billing Channel ",
              "timedOut": false,
              "duration": 7081,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Billing Channel', 'Upwork Profile');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Upwork Profile'), `Expected text not found.`);",
              "err": {},
              "uuid": "e16af170-4634-43cf-a7f1-463b11c9f5ad",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Click Clear Button ",
              "fullTitle": "Projects -> All Projects should able Click Clear Button ",
              "timedOut": false,
              "duration": 7597,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Billing Channel', 'InvoZone Pvt. Ltd. Meezan');\nawait projects.selectFilter_ProjectDetail_Assert('InvoZone Pvt. Ltd. Meezan');\nawait projects.Projects_Filter_ClearBtn();",
              "err": {},
              "uuid": "28b7550c-6692-4a99-aed0-0853137543b9",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Filter Fields ",
              "fullTitle": "Projects -> All Projects should able to Verify Filter Fields ",
              "timedOut": false,
              "duration": 28396,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.selectFilter('Search by Manager', 'Muhammad Bilal Rafaqat');\nawait projects.selectFilter('Search by Division', 'InvoTeams');\nawait projects.selectFilter('Search by Status', 'Active');\nawait projects.selectFilter('Search by BD Team', 'BD F');\nawait projects.selectFilter('Search by BD Member', 'Ahmed Irtza');\nawait projects.selectFilter('Search by Contract', 'Individual to Client');\nawait projects.selectFilter('Search by Country', 'Egypt');\nawait projects.selectFilter('Search by Billing Channel', 'InvoZone Pvt. Ltd. Meezan');\nawait projects.Projects_Filter_ClearBtn();",
              "err": {},
              "uuid": "6d090c51-371a-4ea9-9a91-4b8b5d73e586",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Apply Multiple Searches ",
              "fullTitle": "Projects -> All Projects should able to Verify Apply Multiple Searches ",
              "timedOut": false,
              "duration": 50250,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.selectFilter('Search by Manager', 'Muhammad Bilal Rafaqat');\nawait projects.selectFilter('Search by Manager', 'Ali Ahmad');\nawait projects.selectFilter('Search by Division', 'InvoTeams');\nawait projects.selectFilter('Search by Division', 'Invogame');\nawait projects.selectFilter('Search by Status', 'Active');\nawait projects.selectFilter('Search by Status', 'Paused');\nawait projects.selectFilter('Search by BD Team', 'BD F');\nawait projects.selectFilter('Search by BD Team', 'N/A');\nawait projects.selectFilter('Search by BD Member', 'Ahmed Irtza');\nawait projects.selectFilter('Search by BD Member', 'Ahsan Butt');\nawait projects.selectFilter('Search by CSM', 'Areeba Tariq');\nawait projects.selectFilter('Search by CSM', 'Fiza Murad');\nawait projects.selectFilter('Search by Contract', 'Individual to Client');\nawait projects.selectFilter('Search by Contract', 'Agency to Client');\nawait projects.selectFilter('Search by Country', 'Egypt');\nawait projects.selectFilter('Search by Country', 'Pakistan');\nawait projects.selectFilter('Search by Billing Channel', 'InvoZone Pvt. Ltd. Meezan');\nawait projects.selectFilter('Search by Billing Channel', 'N/A');",
              "err": {},
              "uuid": "c160533e-0161-4ecf-be0a-fd7141adba1a",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Click Project Detail",
              "fullTitle": "Projects -> All Projects should able Click Project Detail",
              "timedOut": false,
              "duration": 7065,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "6b63630f-e305-4ebe-877d-324e084dad0f",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Edit Project Name",
              "fullTitle": "Projects -> All Projects should able Edit Project Name",
              "timedOut": false,
              "duration": 26283,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait utilFun.wait(3000)\nawait projects.clickToggleIcon()\nawait projects.Projects_ProjectsDetail_EditProject();\nawait projects.Projects_ProjectsDetail_InputName('test');\nawait projects.Projects_ProjectsDetail_UpdateButton();\nlet flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');\nawait utilFun.wait(2000)\nawait projects.Projects_ProjectsDetail_EditProject();\nawait projects.Projects_ProjectsDetail_InputName_Clear();\nawait projects.Projects_ProjectsDetail_InputName('Appeo');\nawait projects.Projects_ProjectsDetail_UpdateButton();\nflashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "0abbd056-1976-44fd-b825-92e4d6ac449e",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify if Project is added",
              "fullTitle": "Projects -> All Projects should able to Verify if Project is added",
              "timedOut": false,
              "duration": 5989,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Appeo'), `Expected text not found.`);",
              "err": {},
              "uuid": "fd2dcc2a-1cb1-442f-bad5-2557da3709a4",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Click Cancel Btn in Project Detail",
              "fullTitle": "Projects -> All Projects should able Click Cancel Btn in Project Detail",
              "timedOut": false,
              "duration": 11395,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectsDetail_EditProject();\nawait projects.Projects_ProjectsDetail_InputName('test');\nawait projects.Projects_ProjectsDetail_CancelBtn();\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "e90892c7-2c3e-4acf-b044-3d6abda3f8f6",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Add Description in Project Detail",
              "fullTitle": "Projects -> All Projects should able Add Description in Project Detail",
              "timedOut": false,
              "duration": 16760,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectsDetail_Description('Add New Description');\nawait projects.Projects_ProjectsDetail_UpdateBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "6d6f9931-ba1c-4164-92e2-74d77eaf2cb7",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Search Stack in Project Detail",
              "fullTitle": "Projects -> All Projects should able Search Stack in Project Detail",
              "timedOut": false,
              "duration": 8939,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectDetail_Search('Admin');\nawait projects.ProjectDetail_TextAssertion();",
              "err": {},
              "uuid": "a0701d0e-ef6f-409c-8524-b87e9a8a4094",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Add Stack in Project Detail",
              "fullTitle": "Projects -> All Projects should able Add Stack in Project Detail",
              "timedOut": false,
              "duration": 4504,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// await projects.Projects_ProjectDetail_Search('Admin');\nawait projects.Projects_ProjectDetail_AddStack();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Skills are updated successfully.');",
              "err": {},
              "uuid": "20da74db-e4bb-4ba8-b8a0-c2c4247775f4",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Delete Stack and Click No Btutton",
              "fullTitle": "Projects -> All Projects should able Delete Stack and Click No Btutton",
              "timedOut": false,
              "duration": 353,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await projects.Projects_ProjectDetail_DeleteStack();\nawait projects.Projects_NoBtn();",
              "err": {},
              "uuid": "0294d874-b04f-4c6e-85be-5a6cf2247be3",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Delete Stack in Project Detail",
              "fullTitle": "Projects -> All Projects should able Delete Stack in Project Detail",
              "timedOut": false,
              "duration": 4569,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await projects.Projects_ProjectDetail_DeleteStack();\nawait projects.Projects_ProjectDetail_YesBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Tech Stack is deleted successfully.');\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "cadc4a8d-9f35-4d3c-8ca8-9f3c48c97ca9",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Check Filter Btn in Timeline",
              "fullTitle": "Projects -> All Projects should able to Check Filter Btn in Timeline",
              "timedOut": false,
              "duration": 13779,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectDetail_TimelineTab();\nawait projects.Projects_ProjectDetail_TimelineStartDate('28-11-2023');\nawait projects.Projects_ProjectDetail_TimelineEndDate('28-12-2024');\nawait projects.Projects_ProjectDetail_ApplyFilterBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Filtered successfully.');\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "5d877dbf-93a9-4ba1-b6a0-b61b51bb7e55",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Clear Button in Project Timeline",
              "fullTitle": "Projects -> All Projects should able Clear Button in Project Timeline",
              "timedOut": false,
              "duration": 15092,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectDetail_TimelineTab();\nawait projects.Projects_ProjectDetail_TimelineStartDate('28-11-2023');\nawait projects.Projects_ProjectDetail_TimelineEndDate('28-12-2024');\nawait projects.Projects_ProjectDetail_ApplyFilterBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Filtered successfully.');\nawait projects.Projects_ProjectDetail_Timeline_ClearBtn();\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "949cca85-7771-4bdc-97af-b901815d8a23",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Verify Status in Timeline",
              "fullTitle": "Projects -> All Projects should able Verify Status in Timeline",
              "timedOut": false,
              "duration": 10856,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectDetail_TimelineTab();\nawait utilFun.wait(2000)\nconst name = await projects.Projects_ProjectDetail_Timeline_StatusAssert();\nassert.ok(name.includes('Removed'), `Expected text not found.`);\nconst names = await projects.Projects_ProjectDetail_Timeline_StatusAssert();\nassert.ok(names.includes('Muhammad Zeeshan Ullah'), `Expected text not found.`);",
              "err": {},
              "uuid": "9d266f02-88e6-4d22-9872-7fda9dc258f0",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click History Tab",
              "fullTitle": "Projects -> All Projects should able to Click History Tab",
              "timedOut": false,
              "duration": 3216,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.wait(3000);\nawait projects.Projects_ProjectDetail_HistoryBtn();",
              "err": {},
              "uuid": "e3c1bc03-39e5-44ae-ac6a-76097322575e",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify notification History Tab",
              "fullTitle": "Projects -> All Projects should able to Verify notification History Tab",
              "timedOut": false,
              "duration": 151,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = await projects.Projects_ProjectDetail_History_Assert();\nassert.ok(\n  name.includes('bilal.rafaqat@invozone.dev has updated the Project Tech Stack by removing the technology named Admin.'),\n  `Expected text not found.`,\n);\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "73c1f650-781a-4325-972a-6b0179886393",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Division in Hide Columns ",
              "fullTitle": "Projects -> All Projects should able to Click Division in Hide Columns ",
              "timedOut": false,
              "duration": 6309,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await login.switchWindow(0);\nawait utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Division');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 18, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Division');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "3f669d34-f50b-4d54-948f-d0cee311b052",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Tech Stack in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Tech Stack in Hide Columns",
              "timedOut": false,
              "duration": 6240,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Tech Stack');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 17, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Tech Stack');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "70e6c0fe-64a1-49fe-9a45-ae0f62416362",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Country in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Country in Hide Columns",
              "timedOut": false,
              "duration": 6271,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Country');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 16, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Country');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "1390da3a-e1da-4ec3-9584-5054b656963e",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Status in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Status in Hide Columns",
              "timedOut": false,
              "duration": 6266,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Status');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 15, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Status');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "11b928e0-077c-4042-90aa-7fc69af2005f",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Project Manager in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Project Manager in Hide Columns",
              "timedOut": false,
              "duration": 5908,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Project Manager');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 14, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Project Manager');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "ba79849b-e74f-471d-9db4-90d8bc5d92b8",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Contract in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Contract in Hide Columns",
              "timedOut": false,
              "duration": 5933,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Contract');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 13, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Contract');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "6b5657f2-19b3-47ae-9043-86ffd4f9543e",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click PM Introduced in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click PM Introduced in Hide Columns",
              "timedOut": false,
              "duration": 6030,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('PM Introduced');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 12, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('PM Introduced');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "f79878f4-dbe6-4b97-ad95-80c6d6982fae",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Dev Introduced in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Dev Introduced in Hide Columns",
              "timedOut": false,
              "duration": 5840,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Dev Introduced');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 11, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Dev Introduced');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "aa4db0ce-1761-4b80-85ee-6e717d74f9a9",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Engagement in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Engagement in Hide Columns",
              "timedOut": false,
              "duration": 6036,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Engagement');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 10, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Engagement');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "f23d191a-0dee-4143-9cab-47c3fdc12217",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Billing Cycle in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Billing Cycle in Hide Columns",
              "timedOut": false,
              "duration": 5778,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Billing Cycle');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 9, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Billing Cycle');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "a3a7f4ce-f482-4d1f-beb1-16f69c121965",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click BD Member in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click BD Member in Hide Columns",
              "timedOut": false,
              "duration": 6020,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('BD Member');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 8, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('BD Member');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "7bf02d3d-f298-4bdd-9458-c57fd29c21ae",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click BD Team in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click BD Team in Hide Columns",
              "timedOut": false,
              "duration": 5734,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('BD Team');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 7, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('BD Team');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "e8c791a1-eaa8-4be3-b962-9bed1586b1b7",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Communication in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Communication in Hide Columns",
              "timedOut": false,
              "duration": 5647,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Communication');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 6, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Communication');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "4034d430-31cf-4a1e-b325-7f58f898b4af",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Billing Profile in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Billing Profile in Hide Columns",
              "timedOut": false,
              "duration": 5697,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Billing Profile');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 5, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Billing Profile');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "73769996-320a-45f3-8041-5f971823c247",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Billing Channel in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Billing Channel in Hide Columns",
              "timedOut": false,
              "duration": 5865,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Billing Channel');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 4, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Billing Channel');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "f8932bd6-63e3-4a04-bc65-a48c9df6bd1c",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Engineers in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Engineers in Hide Columns",
              "timedOut": false,
              "duration": 5832,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Engineers');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 3, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Engineers');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "df72ce53-7098-432a-8fef-4a67642ff8e0",
              "parentUUID": "133d8a7e-1a8e-4164-a6f4-b7f68dc68245",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "94465ef5-e58a-4720-85b1-883993541bff",
            "4ce1b494-ec37-4d57-b2df-9cd95a6d1d02",
            "b34d7e2b-659b-4399-b4c4-a626f0490585",
            "9a0ebcf5-4b14-4c90-aefa-82030d0b0203",
            "8a0f2bc0-e340-45cb-a158-324a179ec083",
            "9003d1e9-4cbc-4713-8447-aa08dcd6dfb4",
            "619e1b71-555a-46fc-adca-39415553a696",
            "490e46a0-6337-4927-a050-309fb36df7f0",
            "59953d81-b6c1-4460-8fea-c1e1d48d6729",
            "e37c4070-7a44-424f-bb43-79cc7d20714f",
            "e831ad28-19d5-439f-a326-9c09bbb554b8",
            "6cb055eb-a4b5-47c3-ae1a-f2c182c20f45",
            "5207805a-4ca2-49a6-9709-106cfd2e70a1",
            "3b57eb5e-05ff-4b2f-95d7-aa5a13b582eb",
            "93525287-fdf8-4bb4-bc51-454484eca7c7",
            "cad4a77b-410d-46fe-9da6-087d80f4ba1c",
            "d807ca16-bad9-4c7a-8bbb-5825c33dd3f7",
            "6bf17cfc-acd4-4941-90d7-35191f306b5f",
            "67dfbf5e-56cf-4e7a-803e-be9bfe5e5f81",
            "17a68f3f-753c-4735-a1d4-669282f3ee49",
            "58920e54-4f0d-464b-af54-97ac7934a713",
            "6c846361-9983-42ad-8a02-f52a1280d514",
            "c592d91b-15f2-491c-8977-c20e67f021a5",
            "e6ba21f0-44b2-4094-9dea-c4714b5d1589",
            "c3618bd6-facc-4a55-a607-ee31d5d566f9",
            "adf3fb83-e8e5-43cd-9b20-923be9648587",
            "1468d0f2-b4a1-4604-85bb-2bf870600ecb",
            "38eb41ce-8d36-423b-bea2-4071a172fee7",
            "e1359fdb-bc49-4fc4-98c5-f723e5c601e3",
            "0674927c-e013-4bab-973f-7a94eb93a2d1",
            "f0c64357-a8f6-4407-88d7-d3f9518468ab",
            "688a2135-0002-4c0e-bb2f-cefbe636c1f8",
            "9576a0e5-e600-4acf-b708-f5bfac04dacf",
            "89be6ba9-9d42-4784-97dd-1ec6fb79d9c7",
            "ee1afd48-a738-4650-b3a5-7126dbc44108",
            "0f8ccf2b-c95b-4c0d-95cf-762656255e13",
            "f4d71270-95c3-45cb-aced-0b7a750f382b",
            "092e17b6-d882-4999-bf02-85e3e2fcf37f",
            "3d0345cf-f795-45fa-96d2-c6c7a9888f1f",
            "9fc3f8cb-c2fe-47a9-87fe-74da6ed5e5d8",
            "e16af170-4634-43cf-a7f1-463b11c9f5ad",
            "28b7550c-6692-4a99-aed0-0853137543b9",
            "6d090c51-371a-4ea9-9a91-4b8b5d73e586",
            "c160533e-0161-4ecf-be0a-fd7141adba1a",
            "6b63630f-e305-4ebe-877d-324e084dad0f",
            "0abbd056-1976-44fd-b825-92e4d6ac449e",
            "fd2dcc2a-1cb1-442f-bad5-2557da3709a4",
            "e90892c7-2c3e-4acf-b044-3d6abda3f8f6",
            "6d6f9931-ba1c-4164-92e2-74d77eaf2cb7",
            "a0701d0e-ef6f-409c-8524-b87e9a8a4094",
            "20da74db-e4bb-4ba8-b8a0-c2c4247775f4",
            "0294d874-b04f-4c6e-85be-5a6cf2247be3",
            "cadc4a8d-9f35-4d3c-8ca8-9f3c48c97ca9",
            "5d877dbf-93a9-4ba1-b6a0-b61b51bb7e55",
            "949cca85-7771-4bdc-97af-b901815d8a23",
            "9d266f02-88e6-4d22-9872-7fda9dc258f0",
            "e3c1bc03-39e5-44ae-ac6a-76097322575e",
            "73c1f650-781a-4325-972a-6b0179886393",
            "3f669d34-f50b-4d54-948f-d0cee311b052",
            "70e6c0fe-64a1-49fe-9a45-ae0f62416362",
            "1390da3a-e1da-4ec3-9584-5054b656963e",
            "11b928e0-077c-4042-90aa-7fc69af2005f",
            "ba79849b-e74f-471d-9db4-90d8bc5d92b8",
            "6b5657f2-19b3-47ae-9043-86ffd4f9543e",
            "f79878f4-dbe6-4b97-ad95-80c6d6982fae",
            "aa4db0ce-1761-4b80-85ee-6e717d74f9a9",
            "f23d191a-0dee-4143-9cab-47c3fdc12217",
            "a3a7f4ce-f482-4d1f-beb1-16f69c121965",
            "7bf02d3d-f298-4bdd-9458-c57fd29c21ae",
            "e8c791a1-eaa8-4be3-b962-9bed1586b1b7",
            "4034d430-31cf-4a1e-b325-7f58f898b4af",
            "73769996-320a-45f3-8041-5f971823c247",
            "f8932bd6-63e3-4a04-bc65-a48c9df6bd1c",
            "df72ce53-7098-432a-8fef-4a67642ff8e0"
          ],
          "failures": [],
          "pending": [
            "ee563d7d-74c8-4798-8696-bacf69c0bf33"
          ],
          "skipped": [],
          "duration": 759061,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "f244679b-a62f-4797-a0df-d279b00a5c3c",
          "title": "Projects -> OnBoarding",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/projects/spec-2-actualProejct.js",
          "file": "/test/e2e/projects/spec-2-actualProejct.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to check Actual Prject Form is Showing by clicking Add btn  ",
              "fullTitle": "Projects -> OnBoarding should able to check Actual Prject Form is Showing by clicking Add btn  ",
              "timedOut": false,
              "duration": 4383,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'BD F' WHERE id = 9429;`,\n  `UPDATE employees SET \"workAs\" = 'dev' WHERE id = 9429;`,\n  `UPDATE employees SET \"departmentId\" = 3 WHERE id = 9429;`,\n  `UPDATE employees SET \"designationId\" = 13 WHERE id = 9429;`,\n  `UPDATE employees SET \"subDepartmentId\" = 13 WHERE id = 9429;`,\n  `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n  'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n  'UPDATE departments SET \"hodId\" = NULL WHERE id = 3;',\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProject();\nawait projectOnBoarding.checkActualProjectModel();",
              "err": {},
              "uuid": "543a84ef-3c6c-4c41-8cb8-38666fea0003",
              "parentUUID": "f244679b-a62f-4797-a0df-d279b00a5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check Cross Button ",
              "fullTitle": "Projects -> OnBoarding should able to check Cross Button ",
              "timedOut": false,
              "duration": 4255,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProject();\nawait projectOnBoarding.checkActualProjectModel();\nawait projectOnBoarding.ProjectOnBoarding_CrossBtn();\nawait projectOnBoarding.checkActualProjectModelNotVisible();",
              "err": {},
              "uuid": "dc89e821-af28-495e-a185-60cef58938d9",
              "parentUUID": "f244679b-a62f-4797-a0df-d279b00a5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Add Actual Project  ",
              "fullTitle": "Projects -> OnBoarding should able Add Actual Project  ",
              "timedOut": false,
              "duration": 53760,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM projects WHERE \"name\" = 'InvoChain';`);\nlet portfolioId = await utilFun.getFromDatabase(`SELECT id FROM project_portfolios WHERE \"name\" = 'InvoChain';`);\nif (resourceId.rowCount !== 0) {\n  let query = [\n    `DELETE FROM \"project_portfolio_skills\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n    `DELETE FROM \"project_timelines\" WHERE \"projectId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"project_portfolio_employees\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n    `DELETE FROM \"project_portfolios\" WHERE \"projectId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"projects\" WHERE \"id\" = ${resourceId.rows[0].id};`,\n  ];\n  await utilFun.udpateDatabase(query);\n}\nlet query = [`DELETE FROM \"project_onboardings\" WHERE \"name\" = 'InvoChain'`,`DELETE FROM \"project_onboardings\" WHERE \"name\" = 'InvoBlog'`, `DELETE FROM \"project_onboardings\" WHERE \"name\" = 'InvoBlogUpdated'`,];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait utilFun.wait(3000);\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProject();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectName('InvoBlog');\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectReferenceNo('12344321');\nawait projectOnBoarding.OnBoarding_AddActualProject_StartDate('02-01-2024');\nawait projectOnBoarding.OnBoarding_AddActualProject_TentavieDuration('2 year');\nawait projectOnBoarding.selectValue('Select Division', 'Dtest');\nawait projectOnBoarding.selectValue('Select Source', 'International Event');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactName('Alia');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactPersonEmail('abc@info.com');\nawait projectOnBoarding.clickNextBtnPage1();\nawait projectOnBoarding.selectField('BD Member *\\nSelect resource', 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField('Actual Resource(s)\\nSelect resources', 'Abdul Wakeel');\nawait projectOnBoarding.selectField('Resource Name (Shared with Client)', 'Tariq');\nawait projectOnBoarding.selectField('Tech Stack *\\nSelect Tech Stack', 'Admin');\nawait projectOnBoarding.selectField('Communication Mode\\nSelect mode', 'Email');\nawait projectOnBoarding.selectField('Project Manager\\nSelect Project Manager', 'amna hussain');\nawait projectOnBoarding.selectField('Service Mode*\\nSelect service mode', 'Yet To Be Decided');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.selectField('Company Name', 'InvoZone USA');\nawait projectOnBoarding.selectField('Company Address', 'Lahore');\nawait projectOnBoarding.selectField('Client Side Billing Representative Name*', 'Abdul Wakeel');\nawait projectOnBoarding.selectField('Client Side Billing Representative Email', '123@invozone.com');\nawait projectOnBoarding.selectField('Billing Cycle*\\nSelect billing cycle', 'Monthly');\nawait projectOnBoarding.selectField('Billing Start Date *', '01-01-2024');\nawait projectOnBoarding.selectField('Currency *\\nUnited States Dollar', 'United States Dollar');\nawait projectOnBoarding.selectField('Billing Rates/ Total Project Cost*', '20024');\nawait projectOnBoarding.selectField('Billing Platform *', 'Cash');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn3();\nawait projectOnBoarding.selectField('Reference thread\\nNo', 'No');\nawait projectOnBoarding.selectField('Are we introduced as Agency or Individual?*\\nSelect introduction', 'Individual to Client');\nawait projectOnBoarding.selectField('Rate Concluded*', '15');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration', 'No Trial');\nawait projectOnBoarding.selectField(\n  'Any Future Upsells which client gave a heads up for near future?*\\n' + 'Select option',\n  'Nothing at the moment',\n);\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_AddActualProject_AddRequest();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project onboarding request is completed successfuly!');",
              "err": {},
              "uuid": "c0cd4be9-3fa7-47a1-a70f-e8fd5f4f9d14",
              "parentUUID": "f244679b-a62f-4797-a0df-d279b00a5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Actual project is created or not",
              "fullTitle": "Projects -> OnBoarding should check if Actual project is created or not",
              "timedOut": false,
              "duration": 4343,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoBlog');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoBlog');",
              "err": {},
              "uuid": "1d11582a-8b0b-41e4-8271-d75510a60d3c",
              "parentUUID": "f244679b-a62f-4797-a0df-d279b00a5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Actual project",
              "fullTitle": "Projects -> OnBoarding should able to Edit Actual project",
              "timedOut": false,
              "duration": 64356,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.OnBoarding_AddActualProject_EditHover();\nawait projectOnBoarding.OnBoarding_AddActualProject_Edit();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectName('Updated');\nawait utilFun.wait(1000);\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectReferenceNo('12344321');\nawait projectOnBoarding.OnBoarding_AddActualProject_StartDate('03-01-2024');\nawait projectOnBoarding.OnBoarding_AddActualProject_TentavieDuration('3 year');\nawait projectOnBoarding.selectValue('Select Division', 'Atest');\nawait projectOnBoarding.selectValue('Select Source', 'Upwork');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactName('Ali');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactPersonEmail('abcd@info.com');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn1();\nawait projectOnBoarding.selectField('BD Member *\\nSelect resource', 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField('Actual Resource(s)\\nAbdul Wakeel', 'Abid Ali');\nawait projectOnBoarding.selectField('Resource Name (Shared with Client)', 'Ahmed');\nawait projectOnBoarding.selectField('Tech Stack *\\nAdmin', 'BA');\nawait projectOnBoarding.selectField('Communication Mode\\nEmail', 'InvoChat');\nawait projectOnBoarding.selectField('Project Manager\\nSelect Project Manager', 'amna hussain');\nawait projectOnBoarding.selectField('Service Mode*\\nYet To Be Decided', 'Augmentation / Dedicated Resource');\nawait projectOnBoarding.selectField('Augmentation*\\nSelect augmentation', 'Monthly');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.selectField('Company Name', 'InvoZone PAK');\nawait projectOnBoarding.selectField('Company Address', 'Faisalabad');\nawait projectOnBoarding.selectField('Client Side Billing Representative Name*', 'Uzair Arbab');\nawait projectOnBoarding.selectField('Client Side Billing Representative Email', '1234@invozone.com');\nawait projectOnBoarding.selectField('Billing Cycle*\\nSelect billing cycle', 'Weekly');\nawait projectOnBoarding.selectField('Billing Start Date *', '02-01-2024');\nawait projectOnBoarding.selectField('Currency *\\nUnited States Dollar', 'Pounds');\nawait projectOnBoarding.selectField('Billing Rates/ Total Project Cost*', '20025');\nawait projectOnBoarding.selectField('Billing Platform *', 'Check');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn3();\nawait projectOnBoarding.selectField('Reference thread\\nNo', 'Yes');\nawait projectOnBoarding.selectField('BA Names - Created/ Approved the estimation Doc *\\nSelect option', 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField(\"PM's Names - Created/ Approved the estimation Doc*\\nSelect option\", 'Muhammad Bilal Rafaqat');\nawait projectOnBoarding.selectField('Reference Internal Thread Link*', 'www.invo-zone.com');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration', 'Free Trial');\nawait projectOnBoarding.selectField('Trial Duration*', '2 Weeks');\nawait projectOnBoarding.selectField('Are we introduced as Agency or Individual?*\\nSelect introduction', 'Individual to Client');\nawait projectOnBoarding.selectField('Rate Concluded*', '15');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration', 'No Trial');\nawait projectOnBoarding.selectField(\n  'Any Future Upsells which client gave a heads up for near future?*\\n' + 'Select option',\n  'Nothing at the moment',\n);\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_AddActualProject_AddRequest();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project is updated Successfully!');",
              "err": {},
              "uuid": "f6010923-b049-4266-9b4c-c9f31a4b99d3",
              "parentUUID": "f244679b-a62f-4797-a0df-d279b00a5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if actual project is updated or not",
              "fullTitle": "Projects -> OnBoarding should check if actual project is updated or not",
              "timedOut": false,
              "duration": 4506,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoBlogUpdated');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoBlogUpdated');",
              "err": {},
              "uuid": "9e45e3dd-5eea-4a51-9daf-76bffa937e3f",
              "parentUUID": "f244679b-a62f-4797-a0df-d279b00a5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete Project",
              "fullTitle": "Projects -> OnBoarding should able to Delete Project",
              "timedOut": false,
              "duration": 12165,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.filterField('Search by Project', 'InvoBlogUpdated');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoBlogUpdated');\nawait projectOnBoarding.OnBoarding_AddActualProject_DeleteBtn();\nawait projectOnBoarding.OnBoarding_AddActualProject_Delete_YesBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project is archived successfully.');",
              "err": {},
              "uuid": "ec4383e6-ab05-4ac7-bec5-142aa713639a",
              "parentUUID": "f244679b-a62f-4797-a0df-d279b00a5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if deleted project is showing in Archived Project",
              "fullTitle": "Projects -> OnBoarding should check if deleted project is showing in Archived Project",
              "timedOut": false,
              "duration": 6078,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickArchiveBtn();\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoBlogUpdated');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoBlogUpdated');",
              "err": {},
              "uuid": "b79e9ef5-3bf1-45d5-98d6-0dfae117820c",
              "parentUUID": "f244679b-a62f-4797-a0df-d279b00a5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Add Actual Project  ",
              "fullTitle": "Projects -> OnBoarding should able Add Actual Project  ",
              "timedOut": false,
              "duration": 54288,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [`DELETE FROM \"project_onboardings\" WHERE \"name\" = 'InvoChain'`];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait utilFun.wait(3000);\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProject();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectName('InvoChain');\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectReferenceNo('12344321');\nawait projectOnBoarding.OnBoarding_AddActualProject_StartDate('02-01-2024');\nawait projectOnBoarding.OnBoarding_AddActualProject_TentavieDuration('2 year');\nawait projectOnBoarding.selectValue('Select Division', 'Dtest');\nawait projectOnBoarding.selectValue('Select Source', 'International Event');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactName('Alia');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactPersonEmail('abc@info.com');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn1();\nawait projectOnBoarding.selectField('BD Member *\\nSelect resource', 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField('Actual Resource(s)\\nSelect resources', 'Abdul Wakeel');\nawait projectOnBoarding.selectField('Resource Name (Shared with Client)', 'Tariq');\nawait projectOnBoarding.selectField('Tech Stack *\\nSelect Tech Stack', 'Admin');\nawait projectOnBoarding.selectField('Communication Mode\\nSelect mode', 'Email');\nawait projectOnBoarding.selectField('Project Manager\\nSelect Project Manager', 'amna hussain');\nawait projectOnBoarding.selectField('Service Mode*\\nSelect service mode', 'Yet To Be Decided');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.selectField('Company Name', 'InvoZone USA');\nawait projectOnBoarding.selectField('Company Address', 'Lahore');\nawait projectOnBoarding.selectField('Client Side Billing Representative Name*', 'Abdul Wakeel');\nawait projectOnBoarding.selectField('Client Side Billing Representative Email', '123@invozone.com');\nawait projectOnBoarding.selectField('Billing Cycle*\\nSelect billing cycle', 'Monthly');\nawait projectOnBoarding.selectField('Billing Start Date *', '01-01-2024');\nawait projectOnBoarding.selectField('Currency *\\nUnited States Dollar', 'United States Dollar');\nawait projectOnBoarding.selectField('Billing Rates/ Total Project Cost*', '20024');\nawait projectOnBoarding.selectField('Billing Platform *', 'Cash');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn3();\nawait projectOnBoarding.selectField('Reference thread\\nNo', 'No');\nawait projectOnBoarding.selectField('Are we introduced as Agency or Individual?*\\nSelect introduction', 'Individual to Client');\nawait projectOnBoarding.selectField('Rate Concluded*', '15');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration', 'No Trial');\nawait projectOnBoarding.selectField(\n  'Any Future Upsells which client gave a heads up for near future?*\\n' + 'Select option',\n  'Nothing at the moment',\n);\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_AddActualProject_AddRequest();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project onboarding request is completed successfuly!');",
              "err": {},
              "uuid": "0fb49d97-9f3f-4c1c-8710-2ce2c08d7161",
              "parentUUID": "f244679b-a62f-4797-a0df-d279b00a5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Actual project is created or not",
              "fullTitle": "Projects -> OnBoarding should check if Actual project is created or not",
              "timedOut": false,
              "duration": 4191,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoChain');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoChain');",
              "err": {},
              "uuid": "e72c14e5-5c0b-4af4-87e0-fcd0284e2a08",
              "parentUUID": "f244679b-a62f-4797-a0df-d279b00a5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check OnBoard Icon is Clickable",
              "fullTitle": "Projects -> OnBoarding should able to check OnBoard Icon is Clickable",
              "timedOut": false,
              "duration": 6133,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = ['UPDATE departments SET \"hodId\" = 9429 WHERE id = 3;'];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoChain');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoChain');\nawait projectOnBoarding.OnBoarding_AddActualProject_OnBoardIcon();\nawait projectOnBoarding.checkActualProjectModel();",
              "err": {},
              "uuid": "d100491b-609a-418e-a679-aca09e57c521",
              "parentUUID": "f244679b-a62f-4797-a0df-d279b00a5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check Cancel Btn is Clickable ",
              "fullTitle": "Projects -> OnBoarding should able to check Cancel Btn is Clickable ",
              "timedOut": false,
              "duration": 9684,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoChain');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoChain');\nawait projectOnBoarding.OnBoarding_AddActualProject_OnBoardIcon();\nawait projectOnBoarding.checkActualProjectModel();\nawait projectOnBoarding.OnBoarding_AddActualProject_CancelBtn();\nawait projectOnBoarding.checkActualProjectModelNotVisible();",
              "err": {
                "message": "Error: Model is visible -> error message =stale element reference: stale element not found\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "Error: Model is visible -> error message =stale element reference: stale element not found\n  (Session info: headless chrome=119.0.6045.159)\n    at projectOnBoarding.checkActualProjectModelNotVisible (test/support/pages/projects/onboarding.js:247:19)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/projects/spec-2-actualProejct.js:264:5)",
                "diff": null
              },
              "uuid": "7991b0ad-d743-407c-a10d-42b2314653a7",
              "parentUUID": "f244679b-a62f-4797-a0df-d279b00a5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to onboard project",
              "fullTitle": "Projects -> OnBoarding should able to onboard project",
              "timedOut": false,
              "duration": 11892,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoChain');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoChain');\nawait projectOnBoarding.OnBoarding_AddActualProject_OnBoardIcon();\nawait projectOnBoarding.OnBoarding_AddActualProject_OnBoardBtn();\nconst alert = await projects.checkAlert();\nutilFun.assertEql(alert, 'Project is onboarded successfully.');",
              "err": {},
              "uuid": "1ea56a32-ccfd-48f8-b84e-626c773b165a",
              "parentUUID": "f244679b-a62f-4797-a0df-d279b00a5c3c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify if Project is added",
              "fullTitle": "Projects -> OnBoarding should able to Verify if Project is added",
              "timedOut": false,
              "duration": 5398,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'InvoChain');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('InvoChain'), `Expected text not found.`);",
              "err": {},
              "uuid": "77b78a28-969b-4737-8f28-3a1287f52d91",
              "parentUUID": "f244679b-a62f-4797-a0df-d279b00a5c3c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "543a84ef-3c6c-4c41-8cb8-38666fea0003",
            "dc89e821-af28-495e-a185-60cef58938d9",
            "c0cd4be9-3fa7-47a1-a70f-e8fd5f4f9d14",
            "1d11582a-8b0b-41e4-8271-d75510a60d3c",
            "f6010923-b049-4266-9b4c-c9f31a4b99d3",
            "9e45e3dd-5eea-4a51-9daf-76bffa937e3f",
            "ec4383e6-ab05-4ac7-bec5-142aa713639a",
            "b79e9ef5-3bf1-45d5-98d6-0dfae117820c",
            "0fb49d97-9f3f-4c1c-8710-2ce2c08d7161",
            "e72c14e5-5c0b-4af4-87e0-fcd0284e2a08",
            "d100491b-609a-418e-a679-aca09e57c521",
            "1ea56a32-ccfd-48f8-b84e-626c773b165a",
            "77b78a28-969b-4737-8f28-3a1287f52d91"
          ],
          "failures": [
            "7991b0ad-d743-407c-a10d-42b2314653a7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 245432,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "a2345fa1-299e-4478-b070-7bea532829ea",
          "title": "Per-Sale Project Onboarding",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/projects/spec-3-presale.js",
          "file": "/test/e2e/projects/spec-3-presale.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to Add Pre-Sale project onboarding request",
              "fullTitle": "Per-Sale Project Onboarding should able to Add Pre-Sale project onboarding request",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "3015e60f-1736-4fb4-8a2e-d8a496229d97",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if pre-sale project is created or not",
              "fullTitle": "Per-Sale Project Onboarding should check if pre-sale project is created or not",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "5a620ffc-8acb-4bbd-b61b-334613181742",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shold able to archive project",
              "fullTitle": "Per-Sale Project Onboarding shold able to archive project",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "d62952b0-5b93-47cf-96bf-699ff9a356d3",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if project is showing in Archived Project",
              "fullTitle": "Per-Sale Project Onboarding should check if project is showing in Archived Project",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "7c860fcf-ee0d-41c5-bca1-e7bbbd8ef6f0",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add Pre-Sale project onboarding request",
              "fullTitle": "Per-Sale Project Onboarding should able to Add Pre-Sale project onboarding request",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "84827d2f-34d0-4466-b40c-eb7013fd84c4",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if pre-sale project is created or not",
              "fullTitle": "Per-Sale Project Onboarding should check if pre-sale project is created or not",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "71662bf7-4fc6-4247-8a92-a96be59d6625",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit pre-sale project",
              "fullTitle": "Per-Sale Project Onboarding should able to edit pre-sale project",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8a43ae2f-3a92-498c-aa3a-6e0c79c9b47a",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if pre-sale project is updated or not",
              "fullTitle": "Per-Sale Project Onboarding should check if pre-sale project is updated or not",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "76b8ea33-b410-4b9f-8edb-10483e04059e",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to add billing details by clicking manage channel button",
              "fullTitle": "Per-Sale Project Onboarding should able to add billing details by clicking manage channel button",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8acbac6a-e738-4406-aebe-139d30edcaf2",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create a channel",
              "fullTitle": "Per-Sale Project Onboarding should able to create a channel",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "fb334143-1240-44bc-9613-ab5714ddf9ce",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shold check if project is showing in mark as channel created",
              "fullTitle": "Per-Sale Project Onboarding shold check if project is showing in mark as channel created",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "b7b7b90b-e330-4f30-9a28-1def1c9f352a",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should should able to onboard project",
              "fullTitle": "Per-Sale Project Onboarding should should able to onboard project",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e1b3433a-793a-43b5-95eb-f276b35d9636",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check is pre-sale project is showing in all Projects",
              "fullTitle": "Per-Sale Project Onboarding should check is pre-sale project is showing in all Projects",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "42f40942-343b-4adc-bcaf-e44584f989f7",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide submitted at column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide submitted at column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8f15c8e8-24fd-4d74-9a41-40df67a3ffa7",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide type column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide type column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "782ceb1a-97d6-4833-8cb3-58df5fb91ea0",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Lead Reference column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Lead Reference column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8ee96122-cdd0-4c8f-8ade-1d7ebcea6045",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Reason for Pre-sale column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Reason for Pre-sale column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "22084fe5-b531-4f7f-8cf3-cdd4ca0adb66",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Division column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Division column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "70e62e38-cf51-465b-b719-0e4b4a7de1f4",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Source column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Source column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e44d2828-59e2-4164-895c-8dd91b479ded",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Profile Name column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Profile Name column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "717c9286-88ec-4caf-851a-0ac3fbd12e2d",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Lead Upwork Reference Link column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Lead Upwork Reference Link column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "93d1f420-9316-40ae-a02c-7a4fcbad584d",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Offer Received on Upwork? column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Offer Received on Upwork? column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8d4f78bc-70df-4382-9863-ec7fb70b3903",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Offer Accepted on Upwork? column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Offer Accepted on Upwork? column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "3ac40deb-bd96-419c-a38b-f50dede75148",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Tech Stack column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Tech Stack column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "76eeedfd-546d-4b14-8ff2-e79cd47ae0d0",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Client Side Contact Person Name(s) column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Client Side Contact Person Name(s) column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "1f5184fb-af9b-495b-bc9a-440d97f2dfe1",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Client Side Point of Contact Email(s) column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Client Side Point of Contact Email(s) column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "19264a18-c1ae-4adc-98c5-585180b35af0",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Tentative Duration column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Tentative Duration column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "b45fd2d4-9a81-49b2-b116-f9a34e0a62a0",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Start Date column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Start Date column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "3a8a741e-45eb-4841-8e0e-a8c1b3815d28",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide BD Member column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide BD Member column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "1fd1e068-cfdc-4832-a176-3f0d92ca7e1b",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Service Mode column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Service Mode column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e48fca39-d50e-4b89-b395-e67588eeb09a",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Trial Period column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Trial Period column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "1cba49c9-2203-4124-ac99-1c75c483d15a",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Resource Name (Shared with Client) column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Resource Name (Shared with Client) column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "cc134717-c485-4fe7-af23-05a7b1d1a86f",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Actual Resource(s) column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Actual Resource(s) column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "efabcf3a-f712-4c88-81bb-0513de5c17d9",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Communication Mode column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Communication Mode column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "5094f542-9c6e-4ac2-a10c-ffc190d5a77f",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Company Name column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Company Name column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "f411eeb4-04fd-42f5-90dd-a78f836bf5d0",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Company Address column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Company Address column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "19bf02f6-0679-411c-b93a-2b8dc192ecbc",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Client Side Billing Representative Name column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Client Side Billing Representative Name column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "5a4b6a37-9f18-4092-86f5-0f8aea585906",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Client Side Billing Representative Email column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Client Side Billing Representative Email column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "0387a0d7-c4ca-4ac1-b443-60f9a14dc0dc",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Billing Cycle column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Billing Cycle column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "c7d927bd-9571-4043-8458-ed5bb8b6d579",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Billing Start Date column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Billing Start Date column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "016a3dd8-6d87-4c00-acb5-cc35bf1cadee",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Billing Rates/ Total Project Cost column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Billing Rates/ Total Project Cost column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "0a0b73fc-0334-4f7d-a1bd-ae6fb53ea282",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Currency column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Currency column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "63f0db41-2124-4849-81d3-776796e48730",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Reference BO Placement Link column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Reference BO Placement Link column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "7a219f42-b767-402c-9c9a-40c84a899b8a",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Introduced As column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Introduced As column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "831c5834-2b07-4a08-894f-27577dbdd6da",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Offer Expiry Date column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Offer Expiry Date column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "6a7c72e1-3a3d-4f58-96c3-adecdf5a6224",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Business Analyst column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Business Analyst column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "016c9989-6e7b-441c-98bb-0f70936e8f9d",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Project Manager column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Project Manager column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "19b2e8a2-6841-4e92-879d-4d04152c443a",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Future Upsells column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Future Upsells column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "785c5fe9-7dd0-4e3e-87af-517dc2458808",
              "parentUUID": "a2345fa1-299e-4478-b070-7bea532829ea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "3015e60f-1736-4fb4-8a2e-d8a496229d97",
            "5a620ffc-8acb-4bbd-b61b-334613181742",
            "d62952b0-5b93-47cf-96bf-699ff9a356d3",
            "7c860fcf-ee0d-41c5-bca1-e7bbbd8ef6f0",
            "84827d2f-34d0-4466-b40c-eb7013fd84c4",
            "71662bf7-4fc6-4247-8a92-a96be59d6625",
            "8a43ae2f-3a92-498c-aa3a-6e0c79c9b47a",
            "76b8ea33-b410-4b9f-8edb-10483e04059e",
            "8acbac6a-e738-4406-aebe-139d30edcaf2",
            "fb334143-1240-44bc-9613-ab5714ddf9ce",
            "b7b7b90b-e330-4f30-9a28-1def1c9f352a",
            "e1b3433a-793a-43b5-95eb-f276b35d9636",
            "42f40942-343b-4adc-bcaf-e44584f989f7",
            "8f15c8e8-24fd-4d74-9a41-40df67a3ffa7",
            "782ceb1a-97d6-4833-8cb3-58df5fb91ea0",
            "8ee96122-cdd0-4c8f-8ade-1d7ebcea6045",
            "22084fe5-b531-4f7f-8cf3-cdd4ca0adb66",
            "70e62e38-cf51-465b-b719-0e4b4a7de1f4",
            "e44d2828-59e2-4164-895c-8dd91b479ded",
            "717c9286-88ec-4caf-851a-0ac3fbd12e2d",
            "93d1f420-9316-40ae-a02c-7a4fcbad584d",
            "8d4f78bc-70df-4382-9863-ec7fb70b3903",
            "3ac40deb-bd96-419c-a38b-f50dede75148",
            "76eeedfd-546d-4b14-8ff2-e79cd47ae0d0",
            "1f5184fb-af9b-495b-bc9a-440d97f2dfe1",
            "19264a18-c1ae-4adc-98c5-585180b35af0",
            "b45fd2d4-9a81-49b2-b116-f9a34e0a62a0",
            "3a8a741e-45eb-4841-8e0e-a8c1b3815d28",
            "1fd1e068-cfdc-4832-a176-3f0d92ca7e1b",
            "e48fca39-d50e-4b89-b395-e67588eeb09a",
            "1cba49c9-2203-4124-ac99-1c75c483d15a",
            "cc134717-c485-4fe7-af23-05a7b1d1a86f",
            "efabcf3a-f712-4c88-81bb-0513de5c17d9",
            "5094f542-9c6e-4ac2-a10c-ffc190d5a77f",
            "f411eeb4-04fd-42f5-90dd-a78f836bf5d0",
            "19bf02f6-0679-411c-b93a-2b8dc192ecbc",
            "5a4b6a37-9f18-4092-86f5-0f8aea585906",
            "0387a0d7-c4ca-4ac1-b443-60f9a14dc0dc",
            "c7d927bd-9571-4043-8458-ed5bb8b6d579",
            "016a3dd8-6d87-4c00-acb5-cc35bf1cadee",
            "0a0b73fc-0334-4f7d-a1bd-ae6fb53ea282",
            "63f0db41-2124-4849-81d3-776796e48730",
            "7a219f42-b767-402c-9c9a-40c84a899b8a",
            "831c5834-2b07-4a08-894f-27577dbdd6da",
            "6a7c72e1-3a3d-4f58-96c3-adecdf5a6224",
            "016c9989-6e7b-441c-98bb-0f70936e8f9d",
            "19b2e8a2-6841-4e92-879d-4d04152c443a",
            "785c5fe9-7dd0-4e3e-87af-517dc2458808"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "2798b308-e14d-45af-90f9-e732c5ff863e",
          "title": "All Resources",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/resources/spec-1-all-resources.js",
          "file": "/test/e2e/resources/spec-1-all-resources.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"All Resources\"",
              "fullTitle": "All Resources \"before all\" hook in \"All Resources\"",
              "timedOut": false,
              "duration": 10725,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE departments SET \"hodId\" = 9474 WHERE id = 9;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\n// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "739d7a34-1914-4d68-83e9-8fb827feb678",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"All Resources\"",
              "fullTitle": "All Resources \"before each\" hook in \"All Resources\"",
              "timedOut": false,
              "duration": 4103,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resources');\nawait utilFun.wait(3000);\nawait utilFun.waitForPageLoad();",
              "err": {},
              "uuid": "1815af7e-fb24-4aac-9899-1557bdf748b8",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if all-resources tab is click-able",
              "fullTitle": "All Resources should check if all-resources tab is click-able",
              "timedOut": false,
              "duration": 4287,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/home');\nawait utilFun.waitForPageLoad();\nawait resources.clickResourcesTab();\nawait resources.clickResourcesSubTab('All Resources');\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resources');",
              "err": {},
              "uuid": "50bf3f6c-4675-45ad-82f2-ddbeefd1398f",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by name.",
              "fullTitle": "All Resources should able to search resources by name.",
              "timedOut": false,
              "duration": 5026,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('James Salinas');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "3fa3d08b-821a-4c6d-8d9b-ef4abb4c620e",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by their allocated Project.",
              "fullTitle": "All Resources should able to search resources by their allocated Project.",
              "timedOut": false,
              "duration": 3109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Project');\nawait resources.selectFilterValue('automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "305e947d-8f41-4683-80d5-52fa14e285da",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by their Job status.",
              "fullTitle": "All Resources should able to search resources by their Job status.",
              "timedOut": false,
              "duration": 3156,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Job Status');\nawait resources.selectFilterValue('Permanent');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "96bf583e-9ea5-429f-9660-185b3a64a790",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Job status filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Job status filter.",
              "timedOut": false,
              "duration": 6739,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Project');\nawait resources.selectFilterValue('automation');\nawait resources.selectFilter('Search by Job Status');\nawait resources.selectFilterValue('Permanent');\nawait resources.selectFilter('Permanent');\nawait resources.selectFilterValue('Internship');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "30e1f75f-3216-4d9d-8440-30be49e5eb10",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by their Availability.",
              "fullTitle": "All Resources should able to search resources by their Availability.",
              "timedOut": false,
              "duration": 4825,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Project');\nawait resources.selectFilterValue('automation');\nawait resources.selectFilter('Search by Availability');\nawait resources.selectFilterValue('Fully Available');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "aafe0a86-05ae-4cfd-a846-a010ce170615",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by this month.",
              "fullTitle": "All Resources should able to search resources by this month.",
              "timedOut": false,
              "duration": 12628,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by this Month');\nawait resources.selectFilterValue('Increments');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10064ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10064ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "c3fae830-b03e-4c2d-9a37-7f867adf1a15",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on this month filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on this month filter.",
              "timedOut": false,
              "duration": 14024,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by this Month');\nawait resources.selectFilterValue('Probations');\nawait resources.selectFilter('Probations');\nawait resources.selectFilterValue('Increments');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10020ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10020ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "6b72e0bf-b3e0-4d39-a7e0-2c3729a7f7ba",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Location.",
              "fullTitle": "All Resources should able to search resources by Location.",
              "timedOut": false,
              "duration": 3167,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Location');\nawait resources.selectFilterValue('Remote');\nawait utilFun.waitForPageLoad();\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "13d3f7b6-94d8-40b6-be76-ece28e4b40ec",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Location filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Location filter.",
              "timedOut": false,
              "duration": 4851,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Location');\nawait resources.selectFilterValue('Remote');\nawait resources.selectFilter('Remote');\nawait resources.selectFilterValue('Karachi');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "d5fa30fe-8e15-4956-b8c2-ef982385918a",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Skill.",
              "fullTitle": "All Resources should able to search resources by Skill.",
              "timedOut": false,
              "duration": 3447,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Skills\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "5f02942d-10f0-4c75-80ce-c127da3add92",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Skills filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Skills filter.",
              "timedOut": false,
              "duration": 5959,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Skills\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation');\nawait resources.selectFilter('Automation\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation1');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "feb41d10-d707-48ca-a9a2-fb9809b4c425",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Show resources with all selected skills.",
              "fullTitle": "All Resources should able to Show resources with all selected skills.",
              "timedOut": false,
              "duration": 6369,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Skills\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation');\nawait resources.selectFilter('Automation\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation1');\nawait resources.clickAllSelectedSkillsCheckbox();\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "84948a55-853f-4f05-b6a4-209be223b744",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Department.",
              "fullTitle": "All Resources should able to search resources by Department.",
              "timedOut": false,
              "duration": 3271,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {},
              "uuid": "27567f7f-52a6-4b8e-861a-c57726aabd54",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Department filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Department filter.",
              "timedOut": false,
              "duration": 4917,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nawait resources.selectFilter('Engineering');\nawait resources.selectFilterValue('Automation1');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {},
              "uuid": "dc5b39c9-35a1-432a-ac3f-7afc360b50dd",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Sub-Department.",
              "fullTitle": "All Resources should able to search resources by Sub-Department.",
              "timedOut": false,
              "duration": 5173,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nawait resources.clickSubDepartment();\nawait resources.selectFilterValue('SQA Ib Support');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "9ef72051-0a8b-4ed2-8986-b24fa25891e2",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Sub-Department filter..",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Sub-Department filter..",
              "timedOut": false,
              "duration": 7035,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nawait resources.clickSubDepartment();\nawait resources.selectFilterValue('SQA Ib Support');\nawait resources.clickSubDepartment();\nawait resources.selectFilterValue('DevOps Support');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "874d4bf2-5441-40a8-ac06-7f55d1ce8245",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Designation.",
              "fullTitle": "All Resources should able to search resources by Designation.",
              "timedOut": false,
              "duration": 5501,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation');\nawait resources.selectDesignation('Software Engineer');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "ddf1f811-058d-48a2-8dcf-f28ccc69768b",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Designation filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Designation filter.",
              "timedOut": false,
              "duration": 9261,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation');\nawait resources.selectDesignation('Software Engineer');\nawait resources.selectFilter('Software Engineer');\nawait resources.selectDesignation('HR');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "38f1181f-7e31-4ff9-a15f-b3a712fc5a0d",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Designation Category.",
              "fullTitle": "All Resources should able to search resources by Designation Category.",
              "timedOut": false,
              "duration": 3063,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation Category');\nawait resources.selectDesignationCategory('Automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "16839d67-acef-440a-a902-7d8955cb8aa2",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that when user click on clear button then all his search should be clear.",
              "fullTitle": "All Resources should able to Verify that when user click on clear button then all his search should be clear.",
              "timedOut": false,
              "duration": 3760,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation Category');\nawait resources.selectDesignationCategory('Automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.length == 4, `Expected length not found.`);\nawait resources.clickClearButton();\nconst names1 = await resources.getResourceNameTag();\nassert.ok(names1.length > 4, `Expected length not found.`);",
              "err": {},
              "uuid": "beb28fc3-5b0a-4275-8734-1f6269da15ce",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add new resource",
              "fullTitle": "All Resources should able to Add new resource",
              "timedOut": false,
              "duration": 30048,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_skills\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `UPDATE employee_assets SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_resumes\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_timeLines\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"project_portfolio_employees\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM employees WHERE id = ${resourceId.rows[0].id};`,\n  ];\n  await utilFun.udpateDatabase(query);\n}\nawait addResources.clickAddResourceBtn();\n//   Form 1\nawait addResources.clickInputField('Employee Name *', 'Steve');\nawait addResources.clickInputField('Work Phone Number', '123456');\nawait addResources.clickInputField('Work Email *', 'steve@email.com');\nawait addResources.clickInputField('Work Shift\\nSelect Work Shift', 'morning');\nawait addResources.clickOption();\nawait addResources.clickInputField('Work Location\\nSelect Work Location', 'remote');\nawait addResources.clickOption();\nawait addResources.clickInputField('Primary Manager\\nPrimary Manager', 'bilal rafaqat');\nawait addResources.clickOption();\nawait addResources.clickInputField('Attendance Mode\\nSelect Attendance Mode', 'invodesk');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation *\\nSelect Designation', 'automation');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation Category*\\nSelect Designation Category', 'automation');\nawait addResources.clickOption();\nawait addResources.clickNextButton();\n//   Form 2\nawait addResources.clickInputField2('Father Name', 'James');\nawait addResources.clickInputField2('Personal Email', 'personal@email.com');\nawait addResources.clickInputField2('Personal Phone', '12345');\nawait addResources.clickInputField2('Address', 'xyz');\nawait addResources.clickInputField2('National ID Number', '1122');\nawait addResources.setDOB('01-01-2000');\nawait addResources.clickInputField2('Gender\\nSelect Gender', 'other');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Marital Status\\nSelect Marital Status', 'single');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Emergency Contact Name', 'James');\nawait addResources.clickInputField2('Emergency Contact Number', '54321');\nawait addResources.clickInputField2('Emergency Contact Relation', 'Father');\nawait addResources.clickNextButton2();\n//   Form 3\nawait addResources.clickInputField3('Bank Name', 'MyBank');\nawait addResources.clickInputField3('Account Title', 'current');\nawait addResources.clickInputField3('IBAN Number', '3344');\nawait addResources.clickInputField3('Bank Address', 'qwerty');\nawait addResources.clickNextButton3();\n//   Form 4\nawait addResources.clickInputField4('Certification Level\\nSelect Certification Level', 'graduation');\nawait addResources.clickOption4();\nawait addResources.clickInputField4('Field of Study', 'SE');\nawait addResources.clickInputField4('School/University', 'MIT');\nawait addResources.clickInputField4('Score/Percentage', '70');\nawait addResources.clickInputField4('Passing Year\\nSelect Degree Passing Year', '2020');\nawait addResources.clickOption4();\nawait addResources.clickNextButton4();\n//   Form 5\nawait addResources.clickInputFieldForm5('Department\\nDepartment', 'Engineering');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Sub Department\\nSub Department', 'DevOps Support');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Contract Type*\\nSelect Contract Type', 'Full Time');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Date of Joining*', '01-11-2023');\nawait addResources.selectJobStatus('Probation');\nawait addResources.selectEndOfProbation('2 Months');\nawait addResources.clickInputFieldForm5('Total Working Hours*\\nSelect Total Working Hours', '4 Hrs');\nawait addResources.clickOptionForm5();\nawait addResources.clickNextButton5();\n//   Form 6\nawait addResources.clickInputFieldForm6('Current Salary (PKR)', '50000');\nawait addResources.clickInputFieldForm6('Last Salary (PKR)', '30000');\nawait addResources.clickInputFieldForm6('Last Increment Date', '01-01-2023');\nawait addResources.clickSubmitButton();\nconst alertText = await addResources.checkAlert();\nassert.equal(alertText, 'Resource Created Successfully!');",
              "err": {},
              "uuid": "fb3d5a39-8749-46b3-9caf-3b5c9a205e3b",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if Resource is added.",
              "fullTitle": "All Resources should able to check if Resource is added.",
              "timedOut": false,
              "duration": 4479,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);",
              "err": {},
              "uuid": "48ea43f1-31e7-4b30-9792-4ee030cc87d0",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "All Resources should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "2a55e606-61d1-4e3e-9a37-e1307106ffa6",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "All Resources should able to  copy email from options",
              "timedOut": false,
              "duration": 5549,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Copy Email');\nconst alertText = await utilFun.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "9adb7e56-39e7-4957-8024-e6d6c6469a7d",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "All Resources should able to Send Email from options",
              "timedOut": false,
              "duration": 11069,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=steve@email.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "dc43ccf2-3864-4263-848f-b3e7add26225",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "All Resources should able to see Email from options",
              "timedOut": false,
              "duration": 5813,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('See Email');\nconst email = await resources.copyEmail();\nassert.equal(email, 'Email: steve@email.com');",
              "err": {},
              "uuid": "f1ad25ad-9179-4806-8163-4ddf294e1aa5",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "All Resources should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 6273,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Phone Number');\nconst phnNo = await resources.copyEmail();\nassert.equal(phnNo, 'Phone: 12345');\nawait resources.copyPhoneNumber();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "0938fa91-931b-4582-bdad-21443cfea1cf",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to update Resource from options",
              "fullTitle": "All Resources should able to update Resource from options",
              "timedOut": false,
              "duration": 11963,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Update Resource');\nawait addResources.clickInputField('Work Phone Number', '8');\nawait addResources.clickNextButton();\nawait addResources.clickNextButton2();\nawait addResources.clickNextButton3();\nawait addResources.clickNextButton4();\nawait addResources.clickNextButton5();\nawait addResources.clickSubmitButton();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource Job Status is updated Successfully!');",
              "err": {},
              "uuid": "d9906fb4-cbc8-4b82-8d4e-ff9e3e7ea4cd",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to initiate a Performance Review from options",
              "fullTitle": "All Resources should able to initiate a Performance Review from options",
              "timedOut": false,
              "duration": 5519,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [`DELETE FROM employee_evaluations WHERE \"employeeId\" = ${resourceId.rows[0].id};`];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Initiate a Performance Review');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Review is initiated successfully.');",
              "err": {},
              "uuid": "4e3fc2bf-af7f-411d-83ca-727e736624b3",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if Performance review is initiated or not",
              "fullTitle": "All Resources should able to check if Performance review is initiated or not",
              "timedOut": false,
              "duration": 3076,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/evaluation-performance');\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);",
              "err": {},
              "uuid": "b8e4d03a-1d61-4e29-a1e2-6c21d0276b84",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Initiate a Revised Designation from options",
              "fullTitle": "All Resources should able to Initiate a Revised Designation from options",
              "timedOut": false,
              "duration": 5456,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [`DELETE FROM employee_evaluations WHERE \"employeeId\" = ${resourceId.rows[0].id};`];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Initiate a Revised Designation');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Review is initiated successfully.');",
              "err": {},
              "uuid": "145f95ff-13be-457d-ad1c-de7ec36c1557",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if Performance review is initiated or not",
              "fullTitle": "All Resources should able to check if Performance review is initiated or not",
              "timedOut": false,
              "duration": 3341,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);",
              "err": {},
              "uuid": "70c79d5a-f55e-4696-a121-5bd509ccdcfe",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to to add project from resource details",
              "fullTitle": "All Resources should able to to add project from resource details",
              "timedOut": false,
              "duration": 11681,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickAddproject();\nawait resources.selectAddProjectInputField('Projects', 'automation');\nawait resources.selectAddProjectInputField('Role in this project', 'Main Developer');\nawait resources.selectAddProjectInputField('Not Set', 'Fully Available');\nawait resources.selectAddProjectInputField('Engagement Mode', 'Billed');\nawait resources.selectAddProjectInputField('Add', '');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource added in project successfully.');",
              "err": {},
              "uuid": "eb698619-1352-4650-8b45-03cf972bb12f",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to to delete project from resource details",
              "fullTitle": "All Resources should able to to delete project from resource details",
              "timedOut": false,
              "duration": 4235,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickDeleteProject();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource removed from project successfully.');",
              "err": {},
              "uuid": "b3a4da22-b9bb-4a89-920f-f7ce618fad98",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Create Employee Resume",
              "fullTitle": "All Resources should able to Create Employee Resume",
              "timedOut": false,
              "duration": 25996,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [`DELETE FROM \"employee_resumes\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceResume.clickCreateResumeBtn();\nawait resourceResume.enterLable('Steve Resume');\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterSummary('testing');\nawait resourceResume.clickNextBtn();\nawait resourceResume.clickSkillDropdown();\nawait resourceResume.selectSkill('Automation');\nawait resourceResume.giveSkillRating(4);\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterTitle('Project1');\nawait resourceResume.enterDescription('Testing');\nawait resourceResume.enterResponsibilities('Testing');\nawait resourceResume.selectTechnologies('Automation1');\nawait resourceResume.selectTools('okokok');\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterDegree('BS Software Engineering');\nawait resourceResume.enterInstitution('UOL');\nawait resourceResume.clickCalendar();\nawait resourceResume.selectMonth('Sep');\nawait resourceResume.selectYear('2017');\nawait resourceResume.clickCalendar();\nawait resourceResume.selectMonth('Jan');\nawait resourceResume.selectYear('2022');\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterTitle('Js Developer');\nawait resourceResume.enterOrganization('Invozone');\nawait resourceResume.clickIssueDateCalendar();\nawait resourceResume.selectDate('22');\nawait resourceResume.selectMonth('Jan');\nawait resourceResume.selectYear('2022');\nawait resourceResume.clickNextBtn();\nawait resourceResume.clickNextBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resume is created successfully.');",
              "err": {},
              "uuid": "cd856f2c-c8d5-4df1-9e14-556599ccc8e4",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Department Colum",
              "fullTitle": "All Resources should able to Hide Department Colum",
              "timedOut": false,
              "duration": 2308,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Department');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 12, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Department');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "cd528b2f-237e-4e2b-856f-407b79620e91",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Sub-Department Colum",
              "fullTitle": "All Resources should able to Hide Sub-Department Colum",
              "timedOut": false,
              "duration": 2169,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Sub-Department');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 11, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Sub-Department');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "dbc5bd29-132c-4ab9-a1b9-ecb35924ce4e",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Skills Colum",
              "fullTitle": "All Resources should able to Hide Skills Colum",
              "timedOut": false,
              "duration": 2097,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Skills');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 10, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Skills');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "2ce0109b-48c3-4724-8eb2-a9fd265dc772",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Exp Years Colum",
              "fullTitle": "All Resources should able to Hide Exp Years Colum",
              "timedOut": false,
              "duration": 2130,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Exp Years');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 9, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Exp Years');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "a031ddea-bc56-4d0a-aa30-a9c2946ae1fe",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Location Colum",
              "fullTitle": "All Resources should able to Hide Location Colum",
              "timedOut": false,
              "duration": 2074,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Location');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 8, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Location');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "741f9a14-f57a-4400-8340-8614ef5e95e8",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Projects Colum",
              "fullTitle": "All Resources should able to Hide Projects Colum",
              "timedOut": false,
              "duration": 1986,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Projects');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 7, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Projects');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "ec3b6ee2-ccce-4a2d-a54e-89db3add3f0c",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Availablility Colum",
              "fullTitle": "All Resources should able to Hide Availablility Colum",
              "timedOut": false,
              "duration": 1891,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Availability');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 6, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Availablility');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "58579ca4-7fe0-41a8-ac80-67132ff3686a",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Resume Colum",
              "fullTitle": "All Resources should able to Hide Resume Colum",
              "timedOut": false,
              "duration": 1721,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Resume');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 5, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Resume');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "e8f74b64-7876-4241-8b89-82fb3aec75a5",
              "parentUUID": "2798b308-e14d-45af-90f9-e732c5ff863e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "50bf3f6c-4675-45ad-82f2-ddbeefd1398f",
            "3fa3d08b-821a-4c6d-8d9b-ef4abb4c620e",
            "305e947d-8f41-4683-80d5-52fa14e285da",
            "96bf583e-9ea5-429f-9660-185b3a64a790",
            "30e1f75f-3216-4d9d-8440-30be49e5eb10",
            "aafe0a86-05ae-4cfd-a846-a010ce170615",
            "13d3f7b6-94d8-40b6-be76-ece28e4b40ec",
            "d5fa30fe-8e15-4956-b8c2-ef982385918a",
            "5f02942d-10f0-4c75-80ce-c127da3add92",
            "feb41d10-d707-48ca-a9a2-fb9809b4c425",
            "84948a55-853f-4f05-b6a4-209be223b744",
            "27567f7f-52a6-4b8e-861a-c57726aabd54",
            "dc5b39c9-35a1-432a-ac3f-7afc360b50dd",
            "9ef72051-0a8b-4ed2-8986-b24fa25891e2",
            "874d4bf2-5441-40a8-ac06-7f55d1ce8245",
            "ddf1f811-058d-48a2-8dcf-f28ccc69768b",
            "38f1181f-7e31-4ff9-a15f-b3a712fc5a0d",
            "16839d67-acef-440a-a902-7d8955cb8aa2",
            "beb28fc3-5b0a-4275-8734-1f6269da15ce",
            "fb3d5a39-8749-46b3-9caf-3b5c9a205e3b",
            "48ea43f1-31e7-4b30-9792-4ee030cc87d0",
            "9adb7e56-39e7-4957-8024-e6d6c6469a7d",
            "dc43ccf2-3864-4263-848f-b3e7add26225",
            "f1ad25ad-9179-4806-8163-4ddf294e1aa5",
            "0938fa91-931b-4582-bdad-21443cfea1cf",
            "d9906fb4-cbc8-4b82-8d4e-ff9e3e7ea4cd",
            "4e3fc2bf-af7f-411d-83ca-727e736624b3",
            "b8e4d03a-1d61-4e29-a1e2-6c21d0276b84",
            "145f95ff-13be-457d-ad1c-de7ec36c1557",
            "70c79d5a-f55e-4696-a121-5bd509ccdcfe",
            "eb698619-1352-4650-8b45-03cf972bb12f",
            "b3a4da22-b9bb-4a89-920f-f7ce618fad98",
            "cd856f2c-c8d5-4df1-9e14-556599ccc8e4",
            "cd528b2f-237e-4e2b-856f-407b79620e91",
            "dbc5bd29-132c-4ab9-a1b9-ecb35924ce4e",
            "2ce0109b-48c3-4724-8eb2-a9fd265dc772",
            "a031ddea-bc56-4d0a-aa30-a9c2946ae1fe",
            "741f9a14-f57a-4400-8340-8614ef5e95e8",
            "ec3b6ee2-ccce-4a2d-a54e-89db3add3f0c",
            "58579ca4-7fe0-41a8-ac80-67132ff3686a",
            "e8f74b64-7876-4241-8b89-82fb3aec75a5"
          ],
          "failures": [
            "c3fae830-b03e-4c2d-9a37-7f867adf1a15",
            "6b72e0bf-b3e0-4d39-a7e0-2c3729a7f7ba"
          ],
          "pending": [
            "2a55e606-61d1-4e3e-9a37-e1307106ffa6"
          ],
          "skipped": [],
          "duration": 270442,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "d733c43b-998b-41d7-8f0d-707709c38b5d",
          "title": "Resource Offboarding",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/resources/spec-2-resource-offboarding.js",
          "file": "/test/e2e/resources/spec-2-resource-offboarding.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Resource Offboarding\"",
              "fullTitle": "Resource Offboarding \"before all\" hook in \"Resource Offboarding\"",
              "timedOut": false,
              "duration": 11312,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "16ab4644-edd6-40a9-a03e-fe163f1f41fc",
              "parentUUID": "d733c43b-998b-41d7-8f0d-707709c38b5d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Resource Offboarding\"",
              "fullTitle": "Resource Offboarding \"before each\" hook in \"Resource Offboarding\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad()",
              "err": {},
              "uuid": "3c03c6be-7b24-4645-aaeb-5019a8a4a114",
              "parentUUID": "d733c43b-998b-41d7-8f0d-707709c38b5d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to OffBoard Resource by Resignation without Pending Discussion",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by Resignation without Pending Discussion",
              "timedOut": false,
              "duration": 10377,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('Resignation')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.clickPendingCheckbox()\nawait resourceOffBoarding.setConntractEndDate('14122024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource job status is updated and email has been sent to PM & HOD!!');",
              "err": {},
              "uuid": "a81e6154-afe4-44bb-a7ca-3c6ba5b53246",
              "parentUUID": "d733c43b-998b-41d7-8f0d-707709c38b5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 3845,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);",
              "err": {},
              "uuid": "c8974336-7316-4019-8576-abe8cf3de24c",
              "parentUUID": "d733c43b-998b-41d7-8f0d-707709c38b5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to OffBoard Resource by Resignation Pending Discussion",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by Resignation Pending Discussion",
              "timedOut": false,
              "duration": 9876,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('Resignation')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource job status is updated and email has been sent to PM & HOD!!');",
              "err": {},
              "uuid": "18460709-82ad-4117-afc6-dfa238220d93",
              "parentUUID": "d733c43b-998b-41d7-8f0d-707709c38b5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 3502,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);",
              "err": {},
              "uuid": "d1b2ff95-6345-45ed-b0d8-316eb2e8d1b5",
              "parentUUID": "d733c43b-998b-41d7-8f0d-707709c38b5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should able to approve Pending resource offBoarding",
              "fullTitle": "Resource Offboarding Should able to approve Pending resource offBoarding",
              "timedOut": false,
              "duration": 5302,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);\nawait resourceOffBoarding.selectOffBoardingResponse('Approved')\nawait resourceOffBoarding.setLastDate('14122024')\nawait resourceOffBoarding.clickUpdateBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resignation request has been approved succesfully!');\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {},
              "uuid": "dfba4c99-3d60-40cb-8fae-583b27f8703a",
              "parentUUID": "d733c43b-998b-41d7-8f0d-707709c38b5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should able to Reject Pending resource offBoarding",
              "fullTitle": "Resource Offboarding Should able to Reject Pending resource offBoarding",
              "timedOut": false,
              "duration": 5037,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `UPDATE boarding_requests SET \"status\" = 'PENDING' WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE boarding_requests SET \"noticeEndDate\" = NULL WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE boarding_requests SET \"deletedAt\" = NULL WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);\nawait resourceOffBoarding.selectOffBoardingResponse('Rejected')\nawait resourceOffBoarding.enterReason('testing')\nawait resourceOffBoarding.clickUpdateBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resignation request has been rejected succesfully!');\nawait resourceOffBoarding.confirmRejectStatus()",
              "err": {},
              "uuid": "df125ada-9102-47ee-8fa2-e454e6985181",
              "parentUUID": "d733c43b-998b-41d7-8f0d-707709c38b5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to OffBoard Resource by Termination",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by Termination",
              "timedOut": false,
              "duration": 9927,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('Termination')\nawait resourceOffBoarding.enterReason('testing')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.setConntractEndDate('14122024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Termination request has been approved succesfully!');",
              "err": {},
              "uuid": "f9d99cb6-bd78-4fe2-bffb-a5aef47e2dea",
              "parentUUID": "d733c43b-998b-41d7-8f0d-707709c38b5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 3569,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Termination'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {},
              "uuid": "d1527d4e-0ce5-473d-a695-4f7ea80917a4",
              "parentUUID": "d733c43b-998b-41d7-8f0d-707709c38b5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource upcoming offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource upcoming offBoarding is showning or not",
              "timedOut": false,
              "duration": 3570,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Termination'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {},
              "uuid": "c6b25278-772f-4880-bcc5-18c5080f79a1",
              "parentUUID": "d733c43b-998b-41d7-8f0d-707709c38b5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to OffBoard Resource by End of Service",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by End of Service",
              "timedOut": false,
              "duration": 10618,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('End of Service')\nawait resourceOffBoarding.enterReason('testing')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.setConntractEndDate('14122024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'End of Service request has been approved succesfully!');",
              "err": {},
              "uuid": "7f8c3013-ed79-4904-826b-b715d42f2130",
              "parentUUID": "d733c43b-998b-41d7-8f0d-707709c38b5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 3691,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('End of Service'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {},
              "uuid": "e9f0609e-3acc-49ab-b1a5-f9c8643f3ea0",
              "parentUUID": "d733c43b-998b-41d7-8f0d-707709c38b5d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource upcoming offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource upcoming offBoarding is showning or not",
              "timedOut": false,
              "duration": 3597,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('End of Service'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {},
              "uuid": "873679b3-6c7b-47d5-80b9-468204e9c1c1",
              "parentUUID": "d733c43b-998b-41d7-8f0d-707709c38b5d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a81e6154-afe4-44bb-a7ca-3c6ba5b53246",
            "c8974336-7316-4019-8576-abe8cf3de24c",
            "18460709-82ad-4117-afc6-dfa238220d93",
            "d1b2ff95-6345-45ed-b0d8-316eb2e8d1b5",
            "dfba4c99-3d60-40cb-8fae-583b27f8703a",
            "df125ada-9102-47ee-8fa2-e454e6985181",
            "f9d99cb6-bd78-4fe2-bffb-a5aef47e2dea",
            "d1527d4e-0ce5-473d-a695-4f7ea80917a4",
            "c6b25278-772f-4880-bcc5-18c5080f79a1",
            "7f8c3013-ed79-4904-826b-b715d42f2130",
            "e9f0609e-3acc-49ab-b1a5-f9c8643f3ea0",
            "873679b3-6c7b-47d5-80b9-468204e9c1c1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 72911,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "782e46f0-888f-42d9-a95d-c0914828274a",
          "title": "Position Openings",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/resources/spec-3-position-opening.js",
          "file": "/test/e2e/resources/spec-3-position-opening.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to Apply Request For Position opening",
              "fullTitle": "Position Openings should able to Apply Request For Position opening",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "ca8b7765-4a22-4347-be6b-df65a45c158a",
              "parentUUID": "782e46f0-888f-42d9-a95d-c0914828274a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if request id Added",
              "fullTitle": "Position Openings should able to check if request id Added",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "3db946f8-9579-4f2a-b33e-6cb28136bee3",
              "parentUUID": "782e46f0-888f-42d9-a95d-c0914828274a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit request",
              "fullTitle": "Position Openings should able to edit request",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "df8cb6a0-5186-4fbd-947c-dc545ec05fbf",
              "parentUUID": "782e46f0-888f-42d9-a95d-c0914828274a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete request",
              "fullTitle": "Position Openings should able to Delete request",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "953b44fc-ca0c-4276-a1de-003876fd844d",
              "parentUUID": "782e46f0-888f-42d9-a95d-c0914828274a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if request is visible by HOD",
              "fullTitle": "Position Openings should check if request is visible by HOD",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "aaa6d03f-2864-4ba5-ac27-ab159628e424",
              "parentUUID": "782e46f0-888f-42d9-a95d-c0914828274a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if HOD can edit request",
              "fullTitle": "Position Openings should able to check if HOD can edit request",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "5e6fa00d-6744-440c-9a0c-382b03229a30",
              "parentUUID": "782e46f0-888f-42d9-a95d-c0914828274a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to reject request by hod",
              "fullTitle": "Position Openings should able to reject request by hod",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "d08497a9-5d90-43aa-9f29-9c0e5d64e920",
              "parentUUID": "782e46f0-888f-42d9-a95d-c0914828274a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in reject tab",
              "fullTitle": "Position Openings should verify the request is showing in reject tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "fc9f263b-1d84-434e-96b0-61cdc5ce0d23",
              "parentUUID": "782e46f0-888f-42d9-a95d-c0914828274a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to approve request by hod",
              "fullTitle": "Position Openings should able to approve request by hod",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "088ee048-025a-42b3-b29f-9d6fd847f468",
              "parentUUID": "782e46f0-888f-42d9-a95d-c0914828274a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in approve tab",
              "fullTitle": "Position Openings should verify the request is showing in approve tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "2383943e-42e7-416e-b77b-0041dbb33a8e",
              "parentUUID": "782e46f0-888f-42d9-a95d-c0914828274a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if request is visible by CEO",
              "fullTitle": "Position Openings should check if request is visible by CEO",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "fe4e74a7-35ef-4155-80f6-11fca23750ef",
              "parentUUID": "782e46f0-888f-42d9-a95d-c0914828274a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if CEO can edit request",
              "fullTitle": "Position Openings should able to check if CEO can edit request",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "1b5a1225-4a25-4252-9470-24064000462b",
              "parentUUID": "782e46f0-888f-42d9-a95d-c0914828274a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to reject request by hod",
              "fullTitle": "Position Openings should able to reject request by hod",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "6dd8d3a0-72cf-4811-8ab4-e26e0ac72e2b",
              "parentUUID": "782e46f0-888f-42d9-a95d-c0914828274a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in reject tab",
              "fullTitle": "Position Openings should verify the request is showing in reject tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "3ce26608-5f90-469c-b080-615f9ad09f7d",
              "parentUUID": "782e46f0-888f-42d9-a95d-c0914828274a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to approve request by hod",
              "fullTitle": "Position Openings should able to approve request by hod",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "ac1fce83-8331-4305-ae6a-7cf38ee0daf1",
              "parentUUID": "782e46f0-888f-42d9-a95d-c0914828274a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in approve tab",
              "fullTitle": "Position Openings should verify the request is showing in approve tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "cf0bc1ec-00ea-485e-9c9a-7484e9c74221",
              "parentUUID": "782e46f0-888f-42d9-a95d-c0914828274a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in approve tab for Applicant",
              "fullTitle": "Position Openings should verify the request is showing in approve tab for Applicant",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "61568b35-ecd9-4670-a5f4-6a92b9c773c7",
              "parentUUID": "782e46f0-888f-42d9-a95d-c0914828274a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "ca8b7765-4a22-4347-be6b-df65a45c158a",
            "3db946f8-9579-4f2a-b33e-6cb28136bee3",
            "df8cb6a0-5186-4fbd-947c-dc545ec05fbf",
            "953b44fc-ca0c-4276-a1de-003876fd844d",
            "aaa6d03f-2864-4ba5-ac27-ab159628e424",
            "5e6fa00d-6744-440c-9a0c-382b03229a30",
            "d08497a9-5d90-43aa-9f29-9c0e5d64e920",
            "fc9f263b-1d84-434e-96b0-61cdc5ce0d23",
            "088ee048-025a-42b3-b29f-9d6fd847f468",
            "2383943e-42e7-416e-b77b-0041dbb33a8e",
            "fe4e74a7-35ef-4155-80f6-11fca23750ef",
            "1b5a1225-4a25-4252-9470-24064000462b",
            "6dd8d3a0-72cf-4811-8ab4-e26e0ac72e2b",
            "3ce26608-5f90-469c-b080-615f9ad09f7d",
            "ac1fce83-8331-4305-ae6a-7cf38ee0daf1",
            "cf0bc1ec-00ea-485e-9c9a-7484e9c74221",
            "61568b35-ecd9-4670-a5f4-6a92b9c773c7"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
          "title": "Resource Details",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/resources/spec-4-resourse-details.js",
          "file": "/test/e2e/resources/spec-4-resourse-details.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Resource Details\"",
              "fullTitle": "Resource Details \"before all\" hook in \"Resource Details\"",
              "timedOut": false,
              "duration": 9786,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nlet resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  detailsPageUrl = `/resource-detail/${resourceId.rows[0].id}?tab=Basic_Information`;\n  attendanceTabUrl = `/resource-detail/${resourceId.rows[0].id}?tab=Attendance`;\n  oldId = resourceId.rows[0].id;\n  newId = resourceId.rows[0].id;\n}\n// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "1cd93152-632a-4a80-b3f7-8fb7f13c78f2",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to Add new resource",
              "fullTitle": "Resource Details should able to Add new resource",
              "timedOut": false,
              "duration": 31189,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_skills\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `UPDATE employee_assets SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_resumes\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_timeLines\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"project_portfolio_employees\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM employees WHERE id = ${resourceId.rows[0].id};`,\n  ];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.wait(3000);\nawait utilFun.waitForPageLoad();\nawait addResources.clickAddResourceBtn();\n//   Form 1\nawait addResources.clickInputField('Employee Name *', 'Stevee');\nawait addResources.clickInputField('Work Phone Number', '123456');\nawait addResources.clickInputField('Work Email *', 'steve@email.com');\nawait addResources.clickInputField('Work Shift\\nSelect Work Shift', 'morning');\nawait addResources.clickOption();\nawait addResources.clickInputField('Work Location\\nSelect Work Location', 'remote');\nawait addResources.clickOption();\nawait addResources.clickInputField('Primary Manager\\nPrimary Manager', 'bilal rafaqat');\nawait addResources.clickOption();\nawait addResources.clickInputField('Attendance Mode\\nSelect Attendance Mode', 'invodesk');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation *\\nSelect Designation', 'automation');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation Category*\\nSelect Designation Category', 'automation');\nawait addResources.clickOption();\nawait addResources.clickNextButton();\n//   Form 2\nawait addResources.clickInputField2('Father Name', 'James');\nawait addResources.clickInputField2('Personal Email', 'personal@email.com');\nawait addResources.clickInputField2('Personal Phone', '12345');\nawait addResources.clickInputField2('Address', 'xyz');\nawait addResources.clickInputField2('National ID Number', '1122');\nawait addResources.setDOB('01-01-2000');\nawait addResources.clickInputField2('Gender\\nSelect Gender', 'other');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Marital Status\\nSelect Marital Status', 'single');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Emergency Contact Name', 'James');\nawait addResources.clickInputField2('Emergency Contact Number', '54321');\nawait addResources.clickInputField2('Emergency Contact Relation', 'Father');\nawait addResources.clickNextButton2();\n//   Form 3\nawait addResources.clickInputField3('Bank Name', 'MyBank');\nawait addResources.clickInputField3('Account Title', 'current');\nawait addResources.clickInputField3('IBAN Number', '3344');\nawait addResources.clickInputField3('Bank Address', 'qwerty');\nawait addResources.clickNextButton3();\n//   Form 4\nawait addResources.clickInputField4('Certification Level\\nSelect Certification Level', 'graduation');\nawait addResources.clickOption4();\nawait addResources.clickInputField4('Field of Study', 'SE');\nawait addResources.clickInputField4('School/University', 'MIT');\nawait addResources.clickInputField4('Score/Percentage', '70');\nawait addResources.clickInputField4('Passing Year\\nSelect Degree Passing Year', '2020');\nawait addResources.clickOption4();\nawait addResources.clickNextButton4();\n//   Form 5\nawait addResources.clickInputFieldForm5('Department\\nDepartment', 'HR');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Sub Department\\nSub Department', 'DevOps Support');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Contract Type*\\nSelect Contract Type', 'Full Time');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Date of Joining*', '11-01-2023');\nawait addResources.selectJobStatus('Probation');\nawait addResources.selectEndOfProbation('2 Months');\nawait addResources.clickInputFieldForm5('Total Working Hours*\\nSelect Total Working Hours', '4 Hrs');\nawait addResources.clickOptionForm5();\nawait addResources.clickNextButton5();\n//   Form 6\nawait addResources.clickInputFieldForm6('Current Salary (PKR)', '50000');\nawait addResources.clickInputFieldForm6('Last Salary (PKR)', '30000');\nawait addResources.clickInputFieldForm6('Last Increment Date', '01-01-2024');\nawait addResources.clickSubmitButton();\nconst alertText = await addResources.checkAlert();\nassert.equal(alertText, 'Resource Created Successfully!');\nlet resourceId1 = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId1.rowCount !== 0) {\n  detailsPageUrl = `/resource-detail/${resourceId1.rows[0].id}?tab=Basic_Information`;\n  attendanceTabUrl = `/resource-detail/${resourceId1.rows[0].id}?tab=Attendance`;\n  newId = resourceId1.rows[0].id;\n}",
              "err": {},
              "uuid": "2d405642-c792-4d7f-97fe-2026ff7f5dd1",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to to add project from resource details",
              "fullTitle": "Resource Details should able to to add project from resource details",
              "timedOut": false,
              "duration": 15979,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resources');\nawait utilFun.wait(3000);\nawait resources.clickFilterBtn();\nawait resources.searchName('Stevee');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Stevee'), `Expected text not found.`);\nawait resources.clickAddproject();\nawait resources.selectAddProjectInputField('Projects', 'automation');\nawait resources.selectAddProjectInputField('Role in this project', 'Main Developer');\nawait resources.selectAddProjectInputField('Not Set', 'Fully Available');\nawait resources.selectAddProjectInputField('Engagement Mode', 'Billed');\nawait resources.selectAddProjectInputField('Add', '');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource added in project successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(xpath, //*[@id=\"resource_table\"]/div/div/div/div/div/div[2]/table/tbody/tr[2]/td[7]/span/div/button)\nWait timed out after 10019ms",
                "estack": "TimeoutError: Waiting for element to be located By(xpath, //*[@id=\"resource_table\"]/div/div/div/div/div/div[2]/table/tbody/tr[2]/td[7]/span/div/button)\nWait timed out after 10019ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "f7115a43-6952-4584-9680-f3db12da4423",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource is showing.",
              "fullTitle": "Resource Details should check if Resource is showing.",
              "timedOut": false,
              "duration": 5038,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/resources');\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Stevee'), `Expected text not found.`);",
              "err": {},
              "uuid": "f9ae3d7f-11f8-49de-93cf-9d7b47f15eb0",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if clicking on resource name redirecting to resoure details page.",
              "fullTitle": "Resource Details should check if clicking on resource name redirecting to resoure details page.",
              "timedOut": false,
              "duration": 5681,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/resources');\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Stevee'), `Expected text not found.`);\nawait resources.ClickResourceNameTag();\nawait utilFun.switchWindow(1);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);",
              "err": {},
              "uuid": "aea89718-816c-47c3-83bd-0c69c316479d",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource name is showing on Details page.",
              "fullTitle": "Resource Details should check if Resource name is showing on Details page.",
              "timedOut": false,
              "duration": 2901,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nconst name = await resourceDetails.getResourceNameTxt();\nassert.equal(name, 'Stevee', `Expected text not found.`);",
              "err": {},
              "uuid": "7638c03d-20ed-4178-b5e3-ad37a006a933",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Avatar is showing on Details page.",
              "fullTitle": "Resource Details should check if Resource Avatar is showing on Details page.",
              "timedOut": false,
              "duration": 2359,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nconst name = await resourceDetails.checkAvatarIcon();\nassert.equal(name, 'S', `Expected text not found.`);",
              "err": {},
              "uuid": "29e6f41e-4d5a-42fa-867e-f541ee27b23a",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Father Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Father Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 8796,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Father Name', 'James');\nawait resourceDetails.editValue('Father Name', 'James Salinas');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Father Name', 'James salinas');",
              "err": {},
              "uuid": "3fdb804d-8b95-4cfb-a1bb-2f661f1ac027",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Personal Email is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Personal Email is Shownig and is editable.",
              "timedOut": false,
              "duration": 8882,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Personal Email', 'personal@email.com');\nawait resourceDetails.editValue('Personal Email', 'personalUpdated@email.com');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Personal Email', 'personalUpdated@email.com');",
              "err": {},
              "uuid": "cbaa44a1-1431-4b06-a00d-79ffb03d49e1",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Address is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Address is Shownig and is editable.",
              "timedOut": false,
              "duration": 8973,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Address', 'xyz');\nawait resourceDetails.editValue('Address', 'xyzUpdated');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Address', 'xyzUpdated');",
              "err": {},
              "uuid": "d92976ae-8c87-4a3c-be92-cbc211073810",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Nationality is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Nationality is Shownig and is editable.",
              "timedOut": false,
              "duration": 9433,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Nationality', 'Pakistan');\nawait resourceDetails.editValue('Nationality', 'United arab emirates');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Nationality', 'United arab emirates');",
              "err": {},
              "uuid": "4a62abea-f2b9-4e55-9569-513ea236a945",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource National ID Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource National ID Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 8989,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('National ID Number', '1122');\nawait resourceDetails.editValue('National ID Number', '2233');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('National ID Number', '2233');",
              "err": {},
              "uuid": "503423c6-d2a0-4cd9-b759-35a468669c72",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Date of Birth is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Date of Birth is Shownig and is editable.",
              "timedOut": false,
              "duration": 9133,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Date of Birth', '01-01-2000');\nawait resourceDetails.editValue('Date of Birth', '01-01-2001');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Date of Birth', '01-01-2001');",
              "err": {},
              "uuid": "e74eb2ec-66e0-4f06-88b6-d1f5d022e5d2",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Gender is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Gender is Shownig and is editable.",
              "timedOut": false,
              "duration": 9187,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Gender', 'Other');\nawait resourceDetails.editValue('Gender', 'Female');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Gender', 'Female');",
              "err": {},
              "uuid": "58b4e1dd-9ffe-4f3e-832f-1fd711616bca",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Marital Status is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Marital Status is Shownig and is editable.",
              "timedOut": false,
              "duration": 8991,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Marital Status', 'Single');\nawait resourceDetails.editValue('Marital Status', 'Married');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Marital Status', 'Married');",
              "err": {},
              "uuid": "2917f86a-fab3-4fa2-b94d-c3082ce702a4",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Emergency Contact Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Emergency Contact Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 8732,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Emergency Contact Name', 'James');\nawait resourceDetails.editValue('Emergency Contact Name', 'James Salinas');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Emergency Contact Name', 'James Salinas');",
              "err": {},
              "uuid": "432f21b2-32c5-4215-9e77-2ad919f9339c",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Emergency Contact Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Emergency Contact Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 8890,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Emergency Contact Number', '54321');\nawait resourceDetails.editValue('Emergency Contact Number', '654321');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Emergency Contact Number', '654321');",
              "err": {},
              "uuid": "3fc4705a-dc27-4068-aae9-9214a9bb95cb",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Emergency Contact Relation is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Emergency Contact Relation is Shownig and is editable.",
              "timedOut": false,
              "duration": 4361,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Emergency Contact Relation', 'Father');\nawait resourceDetails.editValue('Emergency Contact Relation', 'Brother');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Emergency Contact Relation', 'Brother');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at ResourceDetails.checkValue (test/support/pages/resources/resourceDetails.js:87:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:299:5)",
                "diff": "- N/A\n+ Father\n"
              },
              "uuid": "c507dac6-681a-428f-b01d-caee3caf0e62",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Bank Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Bank Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 8850,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Bank Name', 'Mybank');\nawait resourceDetails.editValue('Bank Name', 'Bankname');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Bank Name', 'Bankname');",
              "err": {},
              "uuid": "96354532-b617-4bad-a07e-8db618dd7e86",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Account Title is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Account Title is Shownig and is editable.",
              "timedOut": false,
              "duration": 8989,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Account Title', 'Current');\nawait resourceDetails.editValue('Account Title', 'Saving');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Account Title', 'Saving');",
              "err": {},
              "uuid": "1d98870b-c1d7-45a7-a2fa-bcd4c69636ef",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource IBAN Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource IBAN Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 25631,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('IBAN Number', '3344');\nawait resourceDetails.editValue('IBAN Number', '4455');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('IBAN Number', '4455');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[role=\"alert\"])\nWait timed out after 20209ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[role=\"alert\"])\nWait timed out after 20209ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d22a0fbc-fa73-47a3-8e09-ef7c31cd5ed3",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Bank Address is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Bank Address is Shownig and is editable.",
              "timedOut": false,
              "duration": 9686,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Bank Address', 'qwerty');\nawait resourceDetails.editValue('Bank Address', 'street14');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Bank Address', 'street14');",
              "err": {},
              "uuid": "16e38873-d999-408f-9041-c0d828242a43",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Certification Level is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Certification Level is Shownig and is editable.",
              "timedOut": false,
              "duration": 9436,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Certification Level', 'Graduation');\nawait resourceDetails.editValue('Certification Level', 'Master');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Certification Level', 'Master');",
              "err": {},
              "uuid": "e24586de-4fdc-49f2-a836-114c3b3613d3",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Field of Study is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Field of Study is Shownig and is editable.",
              "timedOut": false,
              "duration": 9271,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Field of Study', 'SE');\nawait resourceDetails.editValue('Field of Study', 'CS');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Field of Study', 'CS');",
              "err": {},
              "uuid": "1bda5b6a-edb8-4d8e-9423-726230d6c629",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource School/University is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource School/University is Shownig and is editable.",
              "timedOut": false,
              "duration": 9157,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('School/University', 'Mit');\nawait resourceDetails.editValue('School/University', 'Uol');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('School/University', 'Uol');",
              "err": {},
              "uuid": "6e20332e-94ae-4092-9158-5b93542101f3",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Score/Percentage is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Score/Percentage is Shownig and is editable.",
              "timedOut": false,
              "duration": 8668,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Score/Percentage', '70');\nawait resourceDetails.editValue('Score/Percentage', '80');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Score/Percentage', '80');",
              "err": {},
              "uuid": "2c262cf4-387b-4770-940a-117fec603491",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Passing Year is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Passing Year is Shownig and is editable.",
              "timedOut": false,
              "duration": 9023,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Passing Year', '2020');\nawait resourceDetails.editValue('Passing Year', '2022');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Passing Year', '2022');",
              "err": {},
              "uuid": "6a734759-9d5d-4981-a93b-a6a68d6929f5",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 8692,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Employee Name', 'Stevee');\nawait resourceDetails.editValue('Employee Name', 'Steve');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Employee Name', 'Steve');",
              "err": {},
              "uuid": "b0fa0b0f-76ce-4528-bb78-3afd0d6027ea",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Work Phone Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Work Phone Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 8710,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Work Phone Number', '123456');\nawait resourceDetails.editValue('Work Phone Number', '1234');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Work Phone Number', '1234');",
              "err": {},
              "uuid": "2b3ad807-5ee8-4e81-9836-fc9fd3cdb842",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Designation is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Designation is Shownig and is editable.",
              "timedOut": false,
              "duration": 9411,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Designation', 'Automation Associate SQA Automation');\nawait resourceDetails.editValue('Designation', 'Associate Software Engineer');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Designation', 'Automation Software Engineer');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at ResourceDetails.checkValue (test/support/pages/resources/resourceDetails.js:87:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:437:5)",
                "diff": "- Automation Associate Software Engineer\n+ Automation Software Engineer\n"
              },
              "uuid": "579a7584-3899-4ed4-b7c3-3d497b27153a",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Work Shift is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Work Shift is Shownig and is editable.",
              "timedOut": false,
              "duration": 9152,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Work Shift', 'Morning (9am-6pm)');\nawait resourceDetails.editValue('Work Shift', 'Evening (3pm-12pm)');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Work Shift', 'Evening (3pm-12pm)');",
              "err": {},
              "uuid": "de3d92e1-032c-4175-8231-e4725786e99b",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Work Location is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Work Location is Shownig and is editable.",
              "timedOut": false,
              "duration": 9187,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Work Location', 'Remote');\nawait resourceDetails.editValue('Work Location', 'Lahore');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Work Location', 'Lahore');",
              "err": {},
              "uuid": "5430b401-e481-4910-b987-87a8a0cbb931",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Attendance Mode is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Attendance Mode is Shownig and is editable.",
              "timedOut": false,
              "duration": 9145,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Attendance Mode', 'Invodesk');\nawait resourceDetails.editValue('Attendance Mode', 'Tahometer');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Attendance Mode', 'Tahometer');",
              "err": {},
              "uuid": "1a74c186-fbb3-4df7-bcac-65f41303943e",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Employee Id is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Employee Id is Shownig and is editable.",
              "timedOut": false,
              "duration": 4468,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Employee ID', 'IZ-2023-11-01');",
              "err": {},
              "uuid": "4b8e7bb0-3193-46b9-b922-d474decbcfa7",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Experience is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Experience is Shownig and is editable.",
              "timedOut": false,
              "duration": 4469,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Experience', '0');",
              "err": {},
              "uuid": "046e2250-0c5e-4acb-9241-edba4b423078",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availability is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availability is Shownig and is editable.",
              "timedOut": false,
              "duration": 4232,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Availability', 'Fully Available');",
              "err": {},
              "uuid": "eaf4e594-8033-4d60-994a-2209ba5622e9",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Current Salary (PKR) is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Current Salary (PKR) is Shownig and is editable.",
              "timedOut": false,
              "duration": 9089,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Current Salary (PKR)', '50000');\nawait resourceDetails.editValue('Current Salary (PKR)', '60000');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Current Salary (PKR)', '60000');",
              "err": {},
              "uuid": "f6c6a327-10a0-4ef5-baa6-98371b305e9e",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Last Salary is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Last Salary is Shownig and is editable.",
              "timedOut": false,
              "duration": 8712,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Last Salary', '30000');\nawait resourceDetails.editValue('Last Salary', '35000');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Last Salary', '35000');",
              "err": {},
              "uuid": "d96972cb-c04b-4aac-a209-823547636dbb",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Last Increment Date is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Last Increment Date is Shownig and is editable.",
              "timedOut": false,
              "duration": 8965,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Last Increment Date', 'Jan 01, 2024');\nawait resourceDetails.editValue('Last Increment Date', '01-10-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Last Increment Date', 'Jan 10, 2024');",
              "err": {},
              "uuid": "164cc54a-4bd5-44ac-96c3-acde74fb0909",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Department is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Department is Shownig and is editable.",
              "timedOut": false,
              "duration": 9310,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Department', 'HR');\nawait resourceDetails.editValue('Department', 'Engineering');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Department', 'Engineering');",
              "err": {},
              "uuid": "3d19d2f4-43f7-4e29-8be9-50bc195ba11f",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Sub Department is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Sub Department is Shownig and is editable.",
              "timedOut": false,
              "duration": 9475,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Sub Department', 'N/A');\nawait resourceDetails.editValue('Sub Department', 'DevOps Support');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Sub Department', 'DevOps Support');",
              "err": {},
              "uuid": "044e23cd-7806-4c3f-9101-16df886b1307",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Contract Type is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Contract Type is Shownig and is editable.",
              "timedOut": false,
              "duration": 4231,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Contract Type', 'Full Time');",
              "err": {},
              "uuid": "f72cfd6b-e09a-4ddb-8f67-fc06a27e372f",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Job Status is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Job Status is Shownig and is editable.",
              "timedOut": false,
              "duration": 9695,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Job Status', 'Probation');\nawait resourceDetails.editValue('Job Status', 'Permanent');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Job Status', 'Permanent');",
              "err": {},
              "uuid": "9719ae57-993b-4a27-9d70-620958967e6d",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Date of Joining is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Date of Joining is Shownig and is editable.",
              "timedOut": false,
              "duration": 9138,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Date of Joining', 'Nov 01, 2023');\nawait resourceDetails.editValue('Date of Joining', '11-10-2023');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Date of Joining', 'Nov 10, 2023');",
              "err": {},
              "uuid": "8ec822a2-0456-4c87-881f-9cd883de462f",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Expected End of Probation Date is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Expected End of Probation Date is Shownig and is editable.",
              "timedOut": false,
              "duration": 7257,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.editValue('Expected End of Probation Date', '01-10-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Expected End of Probation Date', 'Jan 10, 2024');",
              "err": {},
              "uuid": "9f285b13-40bb-461f-a7ae-355f3d57403c",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Probation Completed is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Probation Completed is Shownig and is editable.",
              "timedOut": false,
              "duration": 7113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.editValue('Probation Completed', '01-10-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Probation Completed', 'Jan 10, 2024');",
              "err": {},
              "uuid": "e087b4bc-9ff4-4373-b101-0067f1448756",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Permanent Date is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Permanent Date is Shownig and is editable.",
              "timedOut": false,
              "duration": 7123,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.editValue('Permanent Date', '01-11-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Permanent Date', 'Jan 11, 2024');",
              "err": {},
              "uuid": "0f7635d0-c2c6-4aff-92ca-c17058107b7d",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Total Working Hours is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Working Hours is Shownig and is editable.",
              "timedOut": false,
              "duration": 9512,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Working Hours', '4');\nawait resourceDetails.editValue('Total Working Hours', '6');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Total Working Hours', '6');",
              "err": {},
              "uuid": "74753aa0-1320-4ee1-9349-346c0103a09e",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Earned Casual Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Earned Casual Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 4466,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Earned Casual Leaves', '13');\nawait resourceDetails.editValue('Earned Casual Leaves', '12');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Leave quota updated successfully');\nawait resourceDetails.checkValue('Earned Casual Leaves', '12');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at ResourceDetails.checkValue (test/support/pages/resources/resourceDetails.js:87:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:625:5)",
                "diff": "- 12\n+ 13\n"
              },
              "uuid": "849376c5-89c1-4243-b5d3-93a97a3f8601",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Earned Sick Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Earned Sick Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 9182,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Earned Sick Leaves', '5');\nawait resourceDetails.editValue('Earned Sick Leaves', '4');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Leave quota updated successfully');\nawait resourceDetails.checkValue('Earned Sick Leaves', '4');",
              "err": {},
              "uuid": "220ad809-7b90-4950-899f-8a96c1125b6d",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Total Leaves Earned (Casual/Sick) is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Leaves Earned (Casual/Sick) is Shownig and is editable.",
              "timedOut": false,
              "duration": 4257,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Leaves Earned (Casual/Sick)', '16');",
              "err": {},
              "uuid": "17ea74d4-a730-43fc-b3b3-c4b20b23cad5",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availed Casual Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Casual Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 4507,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Availed Casual Leaves', '0');",
              "err": {},
              "uuid": "17cf53e1-1546-4d50-84b8-4b9eae4cb879",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availed Sick Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Sick Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 4528,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Availed Sick Leaves', '0');",
              "err": {},
              "uuid": "b7dffa1f-7b56-432f-b762-d2a469136db1",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Total Leaves Availed (Casual/Sick) is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Leaves Availed (Casual/Sick) is Shownig and is editable.",
              "timedOut": false,
              "duration": 4944,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Leaves Availed (Casual/Sick)', '0');",
              "err": {},
              "uuid": "912446a3-0411-46e9-b682-00c56eb4186d",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Total Remaining Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Remaining Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 4366,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Remaining Leaves', '16');",
              "err": {},
              "uuid": "a7dae0d1-d5cc-4db1-b9c7-4caf620dfaf5",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availed Paid Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Paid Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 3658,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkOtherLeaves('Availed Paid Leaves', '0');",
              "err": {},
              "uuid": "74a695af-e98d-4f80-a9eb-91f05998c85f",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availed Unpaid Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Unpaid Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 4026,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkOtherLeaves('Availed Unpaid Leaves', '0');",
              "err": {},
              "uuid": "d0702775-51d2-4b4d-bf4c-b4a5dbcddd83",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Carry Forward Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Carry Forward Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 3567,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkOtherLeaves('Carry Forward Leaves', '0');",
              "err": {},
              "uuid": "e71ab097-8f81-409a-af3b-40318e9c362e",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Project is Showing.",
              "fullTitle": "Resource Details should check if Resource Project is Showing.",
              "timedOut": false,
              "duration": 2203,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nconst projectData = await resourceDetails.checkProjectDetails();\nassert.ok(projectData.includes('automation'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:706:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "8fe3ccf8-a3c2-49a1-b411-b962f9641ea9",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to delete project from details page.",
              "fullTitle": "Resource Details should able to delete project from details page.",
              "timedOut": false,
              "duration": 12831,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickDelProjectBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource removed from project successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, [aria-label=\"delete\"])\nWait timed out after 10163ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, [aria-label=\"delete\"])\nWait timed out after 10163ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "15e4100a-2997-4cac-a34a-3ed4b5507177",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Hardware records are showing correctly.",
              "fullTitle": "Resource Details should check if Hardware records are showing correctly.",
              "timedOut": false,
              "duration": 2632,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [`UPDATE employee_assets SET \"employeeId\" = ${newId} WHERE \"employeeId\" = 9429;`];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nlet records = await resourceDetails.getAssetRecords();\nassert.ok(records.includes('Steve'), `Expected text not found.`);",
              "err": {},
              "uuid": "cd259ada-7614-43a6-9ac3-f89d628a10b9",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add skills from Resource details page.",
              "fullTitle": "Resource Details should add skills from Resource details page.",
              "timedOut": false,
              "duration": 6181,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickEditSkillBtn()\nawait resourceDetails.searchSkill('automation')\nawait resourceDetails.clickAddIcon()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Skills updated successfully.');\nawait resourceDetails.clickDoneBtn()",
              "err": {},
              "uuid": "bc4992bd-c2cb-41cc-80cb-adfeed0f0fe6",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if skills records are showing correctly.",
              "fullTitle": "Resource Details should check if skills records are showing correctly.",
              "timedOut": false,
              "duration": 2262,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nlet records = await resourceDetails.getSkillRecords();\nassert.ok(records.includes('Automation'), `Expected text not found.`);",
              "err": {},
              "uuid": "fe6a3978-a42a-4562-b658-2801c4cb1a47",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to remove skill by editing.",
              "fullTitle": "Resource Details should able to remove skill by editing.",
              "timedOut": false,
              "duration": 5920,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickEditSkillBtn()\nawait resourceDetails.clickRemoveSkillBtn()\nawait resourceDetails.clickYesBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Skill is deleted successfully');\nawait resourceDetails.clickDoneBtn()\nlet records = await resourceDetails.getSkillRecordsEmpty();\nconsole.log(records);\nassert.equal(records, 'No Data');",
              "err": {},
              "uuid": "cc8fd2bf-da98-4af0-ac08-7e0dbddc1bd3",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if attendence is showing correctly.",
              "fullTitle": "Resource Details should check if attendence is showing correctly.",
              "timedOut": false,
              "duration": 6416,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [`UPDATE employee_attendances SET \"employeeId\" = ${newId} WHERE \"employeeId\" = 9429;`];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickAttendanceTab();\nconst url1 = await utilFun.getUrl();\nassert.equal(url1, baseUrl + attendanceTabUrl);\nawait resourceDetails.selectAttendanceYear(2024);\nawait resourceDetails.selectAttendanceMonth('Jan');\nawait utilFun.wait(2000)\nlet time = await resourceDetails.getTimeByDate('2024-01-22');\nassert.equal(time, '08:00');\ntime = await resourceDetails.getTimeByDate('2024-01-23');\nassert.equal(time, '08:00');\ntime = await resourceDetails.getTimeByDate('2024-01-24');\nassert.equal(time, '08:20');\ntime = await resourceDetails.getTimeByDate('2024-01-25');\nassert.equal(time, '07:30');\ntime = await resourceDetails.getTimeByDate('2024-01-26');\nassert.equal(time, '06:40');\nlet weekTime = await resourceDetails.getWeekTime(4);\nassert.equal(weekTime, '38:30');",
              "err": {},
              "uuid": "b4761fc9-f577-4685-8a28-d5c99c1ead02",
              "parentUUID": "1f0d29d9-ea54-4d3c-9459-e232032b925f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2d405642-c792-4d7f-97fe-2026ff7f5dd1",
            "f9ae3d7f-11f8-49de-93cf-9d7b47f15eb0",
            "aea89718-816c-47c3-83bd-0c69c316479d",
            "7638c03d-20ed-4178-b5e3-ad37a006a933",
            "29e6f41e-4d5a-42fa-867e-f541ee27b23a",
            "3fdb804d-8b95-4cfb-a1bb-2f661f1ac027",
            "cbaa44a1-1431-4b06-a00d-79ffb03d49e1",
            "d92976ae-8c87-4a3c-be92-cbc211073810",
            "4a62abea-f2b9-4e55-9569-513ea236a945",
            "503423c6-d2a0-4cd9-b759-35a468669c72",
            "e74eb2ec-66e0-4f06-88b6-d1f5d022e5d2",
            "58b4e1dd-9ffe-4f3e-832f-1fd711616bca",
            "2917f86a-fab3-4fa2-b94d-c3082ce702a4",
            "432f21b2-32c5-4215-9e77-2ad919f9339c",
            "3fc4705a-dc27-4068-aae9-9214a9bb95cb",
            "96354532-b617-4bad-a07e-8db618dd7e86",
            "1d98870b-c1d7-45a7-a2fa-bcd4c69636ef",
            "16e38873-d999-408f-9041-c0d828242a43",
            "e24586de-4fdc-49f2-a836-114c3b3613d3",
            "1bda5b6a-edb8-4d8e-9423-726230d6c629",
            "6e20332e-94ae-4092-9158-5b93542101f3",
            "2c262cf4-387b-4770-940a-117fec603491",
            "6a734759-9d5d-4981-a93b-a6a68d6929f5",
            "b0fa0b0f-76ce-4528-bb78-3afd0d6027ea",
            "2b3ad807-5ee8-4e81-9836-fc9fd3cdb842",
            "de3d92e1-032c-4175-8231-e4725786e99b",
            "5430b401-e481-4910-b987-87a8a0cbb931",
            "1a74c186-fbb3-4df7-bcac-65f41303943e",
            "4b8e7bb0-3193-46b9-b922-d474decbcfa7",
            "046e2250-0c5e-4acb-9241-edba4b423078",
            "eaf4e594-8033-4d60-994a-2209ba5622e9",
            "f6c6a327-10a0-4ef5-baa6-98371b305e9e",
            "d96972cb-c04b-4aac-a209-823547636dbb",
            "164cc54a-4bd5-44ac-96c3-acde74fb0909",
            "3d19d2f4-43f7-4e29-8be9-50bc195ba11f",
            "044e23cd-7806-4c3f-9101-16df886b1307",
            "f72cfd6b-e09a-4ddb-8f67-fc06a27e372f",
            "9719ae57-993b-4a27-9d70-620958967e6d",
            "8ec822a2-0456-4c87-881f-9cd883de462f",
            "9f285b13-40bb-461f-a7ae-355f3d57403c",
            "e087b4bc-9ff4-4373-b101-0067f1448756",
            "0f7635d0-c2c6-4aff-92ca-c17058107b7d",
            "74753aa0-1320-4ee1-9349-346c0103a09e",
            "220ad809-7b90-4950-899f-8a96c1125b6d",
            "17ea74d4-a730-43fc-b3b3-c4b20b23cad5",
            "17cf53e1-1546-4d50-84b8-4b9eae4cb879",
            "b7dffa1f-7b56-432f-b762-d2a469136db1",
            "912446a3-0411-46e9-b682-00c56eb4186d",
            "a7dae0d1-d5cc-4db1-b9c7-4caf620dfaf5",
            "74a695af-e98d-4f80-a9eb-91f05998c85f",
            "d0702775-51d2-4b4d-bf4c-b4a5dbcddd83",
            "e71ab097-8f81-409a-af3b-40318e9c362e",
            "cd259ada-7614-43a6-9ac3-f89d628a10b9",
            "bc4992bd-c2cb-41cc-80cb-adfeed0f0fe6",
            "fe6a3978-a42a-4562-b658-2801c4cb1a47",
            "cc8fd2bf-da98-4af0-ac08-7e0dbddc1bd3",
            "b4761fc9-f577-4685-8a28-d5c99c1ead02"
          ],
          "failures": [
            "f7115a43-6952-4584-9680-f3db12da4423",
            "c507dac6-681a-428f-b01d-caee3caf0e62",
            "d22a0fbc-fa73-47a3-8e09-ef7c31cd5ed3",
            "579a7584-3899-4ed4-b7c3-3d497b27153a",
            "849376c5-89c1-4243-b5d3-93a97a3f8601",
            "8fe3ccf8-a3c2-49a1-b411-b962f9641ea9",
            "15e4100a-2997-4cac-a34a-3ed4b5507177"
          ],
          "pending": [],
          "skipped": [],
          "duration": 509257,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 100000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "test/report"
      },
      "version": "6.2.0"
    }
  }
}