{
  "stats": {
    "suites": 18,
    "tests": 427,
    "passes": 385,
    "pending": 19,
    "failures": 23,
    "start": "2024-02-03T06:00:45.993Z",
    "end": "2024-02-03T07:22:28.653Z",
    "duration": 4902660,
    "testsRegistered": 427,
    "passPercent": 94.36274509803921,
    "pendingPercent": 4.449648711943794,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cec98274-593d-448d-9111-b97af34f9df8",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c28e904b-4a64-4d77-b1b4-ac7583c26464",
          "title": "Pending Evaluations",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_1_pendings.js",
          "file": "/test/e2e/evaluation/spec_1_pendings.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pending Evaluations\"",
              "fullTitle": "Pending Evaluations \"before all\" hook in \"Pending Evaluations\"",
              "timedOut": false,
              "duration": 26749,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE departments SET \"hodId\" = 9474 WHERE id = 9;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.login(email, password);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query1 =[\n    `UPDATE employee_evaluations SET \"incrementType\" = 'annual' WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n    `DELETE FROM employee_evaluations WHERE \"employeeId\" = 9742 AND \"incrementType\" = 'designation';`,\n    ];\n    await utilFun.udpateDatabase(query1);",
              "err": {},
              "uuid": "6c7c4944-77fe-4848-8fa0-cdb2724cccb6",
              "parentUUID": "c28e904b-4a64-4d77-b1b4-ac7583c26464",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Pending Evaluations\"",
              "fullTitle": "Pending Evaluations \"before each\" hook in \"Pending Evaluations\"",
              "timedOut": false,
              "duration": 3554,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.wait(3000);",
              "err": {},
              "uuid": "165a4962-85f6-4740-a6fc-d91687307215",
              "parentUUID": "c28e904b-4a64-4d77-b1b4-ac7583c26464",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if pending evaluations are showing",
              "fullTitle": "Pending Evaluations should check if pending evaluations are showing",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "5b788c56-4ab8-4352-be25-47ce44cd9bee",
              "parentUUID": "c28e904b-4a64-4d77-b1b4-ac7583c26464",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Pending Evaluations should able to filter resoures by name",
              "timedOut": false,
              "duration": 2177,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "67313cf7-91ba-4d7b-8e4d-a6ec37a698fa",
              "parentUUID": "c28e904b-4a64-4d77-b1b4-ac7583c26464",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Review Type",
              "fullTitle": "Pending Evaluations should able to filter resoures by Review Type",
              "timedOut": false,
              "duration": 1662,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "d72b32d6-6a9a-4408-bbcb-b8c853b77204",
              "parentUUID": "c28e904b-4a64-4d77-b1b4-ac7583c26464",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Pending Evaluations should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 1595,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "ec2ccccf-08b5-4fef-9d22-69a7f92fc118",
              "parentUUID": "c28e904b-4a64-4d77-b1b4-ac7583c26464",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Pending Evaluations should able to  copy email from options",
              "timedOut": false,
              "duration": 6528,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nawait utilFun.wait(3000);\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "4a642060-94be-4cf6-bc31-83cfb3a9e94a",
              "parentUUID": "c28e904b-4a64-4d77-b1b4-ac7583c26464",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Pending Evaluations should able to Send Email from options",
              "timedOut": false,
              "duration": 9656,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "d5fa24a4-be4f-4621-ba33-c604ef05f882",
              "parentUUID": "c28e904b-4a64-4d77-b1b4-ac7583c26464",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Pending Evaluations should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 7355,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "f1fbcc7e-1426-4468-99a8-f9bd1bd357c0",
              "parentUUID": "c28e904b-4a64-4d77-b1b4-ac7583c26464",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Pending Evaluations should able to see Email from options",
              "timedOut": false,
              "duration": 6469,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(3000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "19cbc47a-aef8-49fa-a925-d97c9368ed6b",
              "parentUUID": "c28e904b-4a64-4d77-b1b4-ac7583c26464",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Pending Evaluations should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 6838,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "92e45434-fac5-4ad5-906a-881ad369dcf7",
              "parentUUID": "c28e904b-4a64-4d77-b1b4-ac7583c26464",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Pending Evaluations should able to see Resource Details from options",
              "timedOut": false,
              "duration": 4852,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'http://localhost:3000/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "28f79806-462f-4462-a0bc-39b01b74a9d3",
              "parentUUID": "c28e904b-4a64-4d77-b1b4-ac7583c26464",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Pending Evaluations should able to see employee history",
              "timedOut": false,
              "duration": 3499,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "4890b4e1-34f8-4432-9d7f-8244bf0a5d17",
              "parentUUID": "c28e904b-4a64-4d77-b1b4-ac7583c26464",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to request a review",
              "fullTitle": "Pending Evaluations should able to request a review",
              "timedOut": false,
              "duration": 7646,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait evaluation.clickReqReviewBtn();\nawait utilFun.wait(1000);\nawait evaluation.clickHod('Muhammad Bilal Rafaqat');\nawait evaluation.clickSendReqBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Request is send successfully.');",
              "err": {},
              "uuid": "2cd86c89-e0e7-4472-a319-8b6c987dc9ee",
              "parentUUID": "c28e904b-4a64-4d77-b1b4-ac7583c26464",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to give a review",
              "fullTitle": "Pending Evaluations should able to give a review",
              "timedOut": false,
              "duration": 13596,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait utilFun.wait(1000);\nawait evaluation.clickAddFeedback();\n// await feedbackForm.enterDate('03092023');\nawait feedbackForm.selectFeedbackDuration('6 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.selectRevisedDesignationCategory('Automation');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('testingggg');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "65461bfc-1754-4147-8a27-fc01c560a1fa",
              "parentUUID": "c28e904b-4a64-4d77-b1b4-ac7583c26464",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit review form",
              "fullTitle": "Pending Evaluations should able to edit review form",
              "timedOut": false,
              "duration": 10098,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickEditForm();\nawait utilFun.wait(1000);\n// await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('updated');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "5c049dce-5c79-46b3-bfeb-d37343d2debd",
              "parentUUID": "c28e904b-4a64-4d77-b1b4-ac7583c26464",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to defer review",
              "fullTitle": "Pending Evaluations should able to defer review",
              "timedOut": false,
              "duration": 7418,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickDefer();\nawait evaluation.clickDeferType();\nawait utilFun.wait(1000);\nawait evaluation.selectDeferType('2 Weeks');\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "b5207c94-962c-4658-acb3-ac3e3ee1aaa1",
              "parentUUID": "c28e904b-4a64-4d77-b1b4-ac7583c26464",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to complete review",
              "fullTitle": "Pending Evaluations should able to complete review",
              "timedOut": false,
              "duration": 11282,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickComplete();\nawait feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "84fe5958-9fea-48c7-81ed-a4ccb56b63bb",
              "parentUUID": "c28e904b-4a64-4d77-b1b4-ac7583c26464",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5b788c56-4ab8-4352-be25-47ce44cd9bee",
            "67313cf7-91ba-4d7b-8e4d-a6ec37a698fa",
            "d72b32d6-6a9a-4408-bbcb-b8c853b77204",
            "ec2ccccf-08b5-4fef-9d22-69a7f92fc118",
            "4a642060-94be-4cf6-bc31-83cfb3a9e94a",
            "d5fa24a4-be4f-4621-ba33-c604ef05f882",
            "f1fbcc7e-1426-4468-99a8-f9bd1bd357c0",
            "19cbc47a-aef8-49fa-a925-d97c9368ed6b",
            "92e45434-fac5-4ad5-906a-881ad369dcf7",
            "28f79806-462f-4462-a0bc-39b01b74a9d3",
            "4890b4e1-34f8-4432-9d7f-8244bf0a5d17",
            "2cd86c89-e0e7-4472-a319-8b6c987dc9ee",
            "65461bfc-1754-4147-8a27-fc01c560a1fa",
            "5c049dce-5c79-46b3-bfeb-d37343d2debd",
            "b5207c94-962c-4658-acb3-ac3e3ee1aaa1",
            "84fe5958-9fea-48c7-81ed-a4ccb56b63bb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 100716,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "de4c0f3c-1a50-487c-9bd1-c7c091bc90a0",
          "title": "Performance Base Evaluations",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_2_performance.js",
          "file": "/test/e2e/evaluation/spec_2_performance.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Performance Base Evaluations\"",
              "fullTitle": "Performance Base Evaluations \"before all\" hook in \"Performance Base Evaluations\"",
              "timedOut": false,
              "duration": 10360,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'performance' WHERE id = 26;`,\n  `UPDATE employees SET \"designation\" = 'Software Engineer' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 138 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "759f68e7-280a-4d7c-980f-26a74133e257",
              "parentUUID": "de4c0f3c-1a50-487c-9bd1-c7c091bc90a0",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Performance Base Evaluations\"",
              "fullTitle": "Performance Base Evaluations \"before each\" hook in \"Performance Base Evaluations\"",
              "timedOut": false,
              "duration": 4359,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation-performance');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "2c7df29a-657f-4857-826a-73bcabe77599",
              "parentUUID": "de4c0f3c-1a50-487c-9bd1-c7c091bc90a0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if performance evaluations are showing",
              "fullTitle": "Performance Base Evaluations should check if performance evaluations are showing",
              "timedOut": false,
              "duration": 43,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "af2c646e-f234-4a9d-9786-67b69608183b",
              "parentUUID": "de4c0f3c-1a50-487c-9bd1-c7c091bc90a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Performance Base Evaluations should able to filter resoures by name",
              "timedOut": false,
              "duration": 2124,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "be4d85a7-fcad-4d3f-86da-a3fd4ad51d5e",
              "parentUUID": "de4c0f3c-1a50-487c-9bd1-c7c091bc90a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Performance Base Evaluations should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 1613,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "e49360cc-efb5-4fec-b657-74fc8fdc1538",
              "parentUUID": "de4c0f3c-1a50-487c-9bd1-c7c091bc90a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Performance Base Evaluations should able to  copy email from options",
              "timedOut": false,
              "duration": 4133,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "c271b7bf-d92d-49cc-8855-94c53931fb17",
              "parentUUID": "de4c0f3c-1a50-487c-9bd1-c7c091bc90a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Performance Base Evaluations should able to Send Email from options",
              "timedOut": false,
              "duration": 7862,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "f3551c41-0179-479b-bc10-97727b87086a",
              "parentUUID": "de4c0f3c-1a50-487c-9bd1-c7c091bc90a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Performance Base Evaluations should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 8616,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "19ca5348-c810-4385-b877-7bd17d5e2744",
              "parentUUID": "de4c0f3c-1a50-487c-9bd1-c7c091bc90a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Performance Base Evaluations should able to see Email from options",
              "timedOut": false,
              "duration": 7356,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(4000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "eb3f0eb7-5c37-4cb1-9fa8-d0d352e651b1",
              "parentUUID": "de4c0f3c-1a50-487c-9bd1-c7c091bc90a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Performance Base Evaluations should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 6809,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "18507049-e1ae-40e4-b229-090ae934e31f",
              "parentUUID": "de4c0f3c-1a50-487c-9bd1-c7c091bc90a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Performance Base Evaluations should able to see Resource Details from options",
              "timedOut": false,
              "duration": 4490,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "45d3c3f5-9aa1-4e05-992a-b8ef741d2d70",
              "parentUUID": "de4c0f3c-1a50-487c-9bd1-c7c091bc90a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Performance Base Evaluations should able to see employee history",
              "timedOut": false,
              "duration": 3377,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "116e45df-b133-4827-9966-faff99168d42",
              "parentUUID": "de4c0f3c-1a50-487c-9bd1-c7c091bc90a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to request a review",
              "fullTitle": "Performance Base Evaluations should able to request a review",
              "timedOut": false,
              "duration": 7395,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();4\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait evaluation.clickReqReviewBtn();\nawait utilFun.wait(1000);\nawait evaluation.clickHod('Muhammad Bilal Rafaqat');\nawait evaluation.clickSendReqBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Request is send successfully.');",
              "err": {},
              "uuid": "ccd42def-b276-4050-973d-77eb1ae96edd",
              "parentUUID": "de4c0f3c-1a50-487c-9bd1-c7c091bc90a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to give a review",
              "fullTitle": "Performance Base Evaluations should able to give a review",
              "timedOut": false,
              "duration": 13797,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait utilFun.wait(1000);\nawait evaluation.clickAddFeedback();\nawait feedbackForm.enterDate('03092023');\nawait feedbackForm.selectFeedbackDuration('6 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('testingggg');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "e31e1cfd-38c9-412d-9c0e-dcc5bd232a5c",
              "parentUUID": "de4c0f3c-1a50-487c-9bd1-c7c091bc90a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit review form",
              "fullTitle": "Performance Base Evaluations should able to edit review form",
              "timedOut": false,
              "duration": 10150,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickEditForm();\nawait utilFun.wait(1000);\nawait feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('updated');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "5729664a-046d-401c-8de2-c70d10c8b5e6",
              "parentUUID": "de4c0f3c-1a50-487c-9bd1-c7c091bc90a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to defer review",
              "fullTitle": "Performance Base Evaluations should able to defer review",
              "timedOut": false,
              "duration": 7094,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickDefer();\nawait evaluation.clickDeferType();\nawait utilFun.wait(1000);\nawait evaluation.selectDeferType('2 Weeks');\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "5f5d45ae-857a-42c3-a60a-443d9196b26a",
              "parentUUID": "de4c0f3c-1a50-487c-9bd1-c7c091bc90a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to complete review",
              "fullTitle": "Performance Base Evaluations should able to complete review",
              "timedOut": false,
              "duration": 11315,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickComplete();\nawait feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "945851c2-41a0-481c-829f-dee6d7b064c0",
              "parentUUID": "de4c0f3c-1a50-487c-9bd1-c7c091bc90a0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "af2c646e-f234-4a9d-9786-67b69608183b",
            "be4d85a7-fcad-4d3f-86da-a3fd4ad51d5e",
            "e49360cc-efb5-4fec-b657-74fc8fdc1538",
            "c271b7bf-d92d-49cc-8855-94c53931fb17",
            "f3551c41-0179-479b-bc10-97727b87086a",
            "19ca5348-c810-4385-b877-7bd17d5e2744",
            "eb3f0eb7-5c37-4cb1-9fa8-d0d352e651b1",
            "18507049-e1ae-40e4-b229-090ae934e31f",
            "45d3c3f5-9aa1-4e05-992a-b8ef741d2d70",
            "116e45df-b133-4827-9966-faff99168d42",
            "ccd42def-b276-4050-973d-77eb1ae96edd",
            "e31e1cfd-38c9-412d-9c0e-dcc5bd232a5c",
            "5729664a-046d-401c-8de2-c70d10c8b5e6",
            "5f5d45ae-857a-42c3-a60a-443d9196b26a",
            "945851c2-41a0-481c-829f-dee6d7b064c0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 96174,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "5af3daf4-22b2-4e74-a619-34fd7ddf5e0a",
          "title": "Retention Base Evaluations",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_3_retention.js",
          "file": "/test/e2e/evaluation/spec_3_retention.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Retention Base Evaluations\"",
              "fullTitle": "Retention Base Evaluations \"before all\" hook in \"Retention Base Evaluations\"",
              "timedOut": false,
              "duration": 9796,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'retention' WHERE id = 26;`,\n  `UPDATE employees SET \"designation\" = 'Software Engineer' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 138 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "2c01b5f1-be17-47b5-9581-26bca6f298bd",
              "parentUUID": "5af3daf4-22b2-4e74-a619-34fd7ddf5e0a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Retention Base Evaluations\"",
              "fullTitle": "Retention Base Evaluations \"before each\" hook in \"Retention Base Evaluations\"",
              "timedOut": false,
              "duration": 4700,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation-retention');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "91cb4544-bb1c-4240-a65d-af637a512bda",
              "parentUUID": "5af3daf4-22b2-4e74-a619-34fd7ddf5e0a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if retention evaluations are showing",
              "fullTitle": "Retention Base Evaluations should check if retention evaluations are showing",
              "timedOut": false,
              "duration": 42,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "13ab350d-844b-4b64-a7a2-4adafd9c6f8b",
              "parentUUID": "5af3daf4-22b2-4e74-a619-34fd7ddf5e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Retention Base Evaluations should able to filter resoures by name",
              "timedOut": false,
              "duration": 1930,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "91beda9f-6d37-4f34-a4ff-d0b96e5a3c05",
              "parentUUID": "5af3daf4-22b2-4e74-a619-34fd7ddf5e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Retention Base Evaluations should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 1537,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "7ac17fe5-2ac2-4c97-8536-9c9d1bdd3129",
              "parentUUID": "5af3daf4-22b2-4e74-a619-34fd7ddf5e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Retention Base Evaluations should able to  copy email from options",
              "timedOut": false,
              "duration": 4126,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "cca224f0-26ba-43db-8a07-9334f8fc9783",
              "parentUUID": "5af3daf4-22b2-4e74-a619-34fd7ddf5e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Retention Base Evaluations should able to Send Email from options",
              "timedOut": false,
              "duration": 10406,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "4a98e9d1-4ac8-4e0e-a8a1-5e3e554ff4c1",
              "parentUUID": "5af3daf4-22b2-4e74-a619-34fd7ddf5e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Retention Base Evaluations should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 7604,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "6fd0f5e1-cfb1-472b-b6b6-9ae4e0d83c96",
              "parentUUID": "5af3daf4-22b2-4e74-a619-34fd7ddf5e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Retention Base Evaluations should able to see Email from options",
              "timedOut": false,
              "duration": 7362,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(4000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "8019fab3-9fef-4a53-a8fa-225e654c8e40",
              "parentUUID": "5af3daf4-22b2-4e74-a619-34fd7ddf5e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Retention Base Evaluations should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 6845,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "6e6be9c9-6a78-49bb-8b86-cd8282fdc857",
              "parentUUID": "5af3daf4-22b2-4e74-a619-34fd7ddf5e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Retention Base Evaluations should able to see Resource Details from options",
              "timedOut": false,
              "duration": 4706,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "8722b4b6-df3f-469e-a212-1839169a8224",
              "parentUUID": "5af3daf4-22b2-4e74-a619-34fd7ddf5e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Retention Base Evaluations should able to see employee history",
              "timedOut": false,
              "duration": 3310,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "a49d2a31-2b58-4d1d-b63d-f83df5c4c147",
              "parentUUID": "5af3daf4-22b2-4e74-a619-34fd7ddf5e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to request a review",
              "fullTitle": "Retention Base Evaluations should able to request a review",
              "timedOut": false,
              "duration": 7415,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait evaluation.clickReqReviewBtn();\nawait utilFun.wait(1000);\nawait evaluation.clickHod('Muhammad Bilal Rafaqat');\nawait evaluation.clickSendReqBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Request is send successfully.');",
              "err": {},
              "uuid": "cc0f79bc-b8ed-417d-a4d8-a3fe9d10f5a7",
              "parentUUID": "5af3daf4-22b2-4e74-a619-34fd7ddf5e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to give a review",
              "fullTitle": "Retention Base Evaluations should able to give a review",
              "timedOut": false,
              "duration": 13221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait utilFun.wait(1000);\nawait evaluation.clickAddFeedback();\n// await feedbackForm.enterDate('03092023');\nawait feedbackForm.selectFeedbackDuration('6 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('testingggg');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "2ae9ea33-0b45-493a-8e50-456ace5a6cb3",
              "parentUUID": "5af3daf4-22b2-4e74-a619-34fd7ddf5e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit review form",
              "fullTitle": "Retention Base Evaluations should able to edit review form",
              "timedOut": false,
              "duration": 9817,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickEditForm();\nawait utilFun.wait(1000);\n// await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('updated');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "50a62402-7c2a-4258-b465-68b422f6e1ee",
              "parentUUID": "5af3daf4-22b2-4e74-a619-34fd7ddf5e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to defer review",
              "fullTitle": "Retention Base Evaluations should able to defer review",
              "timedOut": false,
              "duration": 7074,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickDefer();\nawait evaluation.clickDeferType();\nawait utilFun.wait(1000);\nawait evaluation.selectDeferType('2 Weeks');\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "7cc0619c-3423-4978-8a9d-fd9ef9ed9a85",
              "parentUUID": "5af3daf4-22b2-4e74-a619-34fd7ddf5e0a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to complete review",
              "fullTitle": "Retention Base Evaluations should able to complete review",
              "timedOut": false,
              "duration": 11207,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickComplete();\nawait feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "c216a2d2-294b-49a6-9150-684ea54a1a49",
              "parentUUID": "5af3daf4-22b2-4e74-a619-34fd7ddf5e0a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "13ab350d-844b-4b64-a7a2-4adafd9c6f8b",
            "91beda9f-6d37-4f34-a4ff-d0b96e5a3c05",
            "7ac17fe5-2ac2-4c97-8536-9c9d1bdd3129",
            "cca224f0-26ba-43db-8a07-9334f8fc9783",
            "4a98e9d1-4ac8-4e0e-a8a1-5e3e554ff4c1",
            "6fd0f5e1-cfb1-472b-b6b6-9ae4e0d83c96",
            "8019fab3-9fef-4a53-a8fa-225e654c8e40",
            "6e6be9c9-6a78-49bb-8b86-cd8282fdc857",
            "8722b4b6-df3f-469e-a212-1839169a8224",
            "a49d2a31-2b58-4d1d-b63d-f83df5c4c147",
            "cc0f79bc-b8ed-417d-a4d8-a3fe9d10f5a7",
            "2ae9ea33-0b45-493a-8e50-456ace5a6cb3",
            "50a62402-7c2a-4258-b465-68b422f6e1ee",
            "7cc0619c-3423-4978-8a9d-fd9ef9ed9a85",
            "c216a2d2-294b-49a6-9150-684ea54a1a49"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 96602,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "1dd83104-7e6c-4529-9d1a-93a1155b887a",
          "title": "Evaluations History",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_4_history.js",
          "file": "/test/e2e/evaluation/spec_4_history.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Evaluations History\"",
              "fullTitle": "Evaluations History \"before all\" hook in \"Evaluations History\"",
              "timedOut": false,
              "duration": 10402,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query = [\n  `UPDATE employee_evaluations SET \"processType\" = 'COMPLETE' WHERE id = 26;`,\n  `DELETE FROM employee_evaluations WHERE \"employeeId\" = 9742 AND \"incrementType\" = 'designation';`,\n  `UPDATE employee_evaluations SET \"processDate\" = '2023-03-28 17:32:33.501+05' WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "71759715-7999-4927-a9df-eee628511973",
              "parentUUID": "1dd83104-7e6c-4529-9d1a-93a1155b887a",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Evaluations History\"",
              "fullTitle": "Evaluations History \"before each\" hook in \"Evaluations History\"",
              "timedOut": false,
              "duration": 4523,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation-history');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "aea9e145-4041-4f66-85ec-69dd500fd1c6",
              "parentUUID": "1dd83104-7e6c-4529-9d1a-93a1155b887a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if evaluations history is showing",
              "fullTitle": "Evaluations History should check if evaluations history is showing",
              "timedOut": false,
              "duration": 44,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "09d03534-304e-4d80-86c8-91f8943b989c",
              "parentUUID": "1dd83104-7e6c-4529-9d1a-93a1155b887a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Evaluations History should able to filter resoures by name",
              "timedOut": false,
              "duration": 2365,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "8c78d6d0-1316-4e73-b4d4-e147ba8e3400",
              "parentUUID": "1dd83104-7e6c-4529-9d1a-93a1155b887a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check review is completed",
              "fullTitle": "Evaluations History should able to check review is completed",
              "timedOut": false,
              "duration": 2488,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.checkProcessState()\nutilFun.assertEql(name, 'Complete');",
              "err": {},
              "uuid": "ad2c4130-b0e8-4758-a60c-47465c120409",
              "parentUUID": "1dd83104-7e6c-4529-9d1a-93a1155b887a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Review Type",
              "fullTitle": "Evaluations History should able to filter resoures by Review Type",
              "timedOut": false,
              "duration": 1790,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "3a1e7cb5-70d0-48a9-97dd-efc5503650e0",
              "parentUUID": "1dd83104-7e6c-4529-9d1a-93a1155b887a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Evaluations History should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 1737,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "524eee26-d25b-463a-b5dc-19d2ffafad14",
              "parentUUID": "1dd83104-7e6c-4529-9d1a-93a1155b887a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Evaluations History should able to  copy email from options",
              "timedOut": false,
              "duration": 4280,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "671eeb25-0b85-407e-b6cd-7d3486b5e6b5",
              "parentUUID": "1dd83104-7e6c-4529-9d1a-93a1155b887a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Evaluations History should able to Send Email from options",
              "timedOut": false,
              "duration": 7881,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "a20039cd-6f44-4e63-8b2e-80e0ef48a70a",
              "parentUUID": "1dd83104-7e6c-4529-9d1a-93a1155b887a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Evaluations History should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 7595,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "3bb76ed9-9e93-40a6-ad4b-5899e2fba7db",
              "parentUUID": "1dd83104-7e6c-4529-9d1a-93a1155b887a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Evaluations History should able to see Email from options",
              "timedOut": false,
              "duration": 7803,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(4000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "52a804a8-d910-4382-855e-69dbaca9fcfe",
              "parentUUID": "1dd83104-7e6c-4529-9d1a-93a1155b887a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Evaluations History should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 7239,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "176ae155-1de5-4596-aac9-086264ab7b76",
              "parentUUID": "1dd83104-7e6c-4529-9d1a-93a1155b887a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Evaluations History should able to see Resource Details from options",
              "timedOut": false,
              "duration": 4713,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "0781f8a7-e567-4b59-bbe2-b67068ef165c",
              "parentUUID": "1dd83104-7e6c-4529-9d1a-93a1155b887a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Evaluations History should able to see employee history",
              "timedOut": false,
              "duration": 3433,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "9589a77d-a438-4efb-9263-013d06ce9167",
              "parentUUID": "1dd83104-7e6c-4529-9d1a-93a1155b887a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Initiate a Revised Designation",
              "fullTitle": "Evaluations History should able to Initiate a Revised Designation",
              "timedOut": false,
              "duration": 6610,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Initiate a Revised Designation');\nawait utilFun.wait(3000);\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Review is initiated successfully.');",
              "err": {},
              "uuid": "9f1a79bd-83ba-4983-a603-5e0e2737f0df",
              "parentUUID": "1dd83104-7e6c-4529-9d1a-93a1155b887a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able check if revised Designation evaluation is showing",
              "fullTitle": "Evaluations History should able check if revised Designation evaluation is showing",
              "timedOut": false,
              "duration": 7480,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nawait evaluation.selectReviewType('Rev. Designation');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "672ea3f1-4a36-4c4a-9562-6ddca24ee6b9",
              "parentUUID": "1dd83104-7e6c-4529-9d1a-93a1155b887a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "09d03534-304e-4d80-86c8-91f8943b989c",
            "8c78d6d0-1316-4e73-b4d4-e147ba8e3400",
            "ad2c4130-b0e8-4758-a60c-47465c120409",
            "3a1e7cb5-70d0-48a9-97dd-efc5503650e0",
            "524eee26-d25b-463a-b5dc-19d2ffafad14",
            "671eeb25-0b85-407e-b6cd-7d3486b5e6b5",
            "a20039cd-6f44-4e63-8b2e-80e0ef48a70a",
            "3bb76ed9-9e93-40a6-ad4b-5899e2fba7db",
            "52a804a8-d910-4382-855e-69dbaca9fcfe",
            "176ae155-1de5-4596-aac9-086264ab7b76",
            "0781f8a7-e567-4b59-bbe2-b67068ef165c",
            "9589a77d-a438-4efb-9263-013d06ce9167",
            "9f1a79bd-83ba-4983-a603-5e0e2737f0df",
            "672ea3f1-4a36-4c4a-9562-6ddca24ee6b9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 65458,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "7d0a3d61-eb66-43d0-8966-cbfdfd81997c",
          "title": "Evaluations Review Types",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_5_reviewTypes.js",
          "file": "/test/e2e/evaluation/spec_5_reviewTypes.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Evaluations Review Types\"",
              "fullTitle": "Evaluations Review Types \"before all\" hook in \"Evaluations Review Types\"",
              "timedOut": false,
              "duration": 10174,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "2856e389-e740-4ed1-9a6b-5bdd73f68280",
              "parentUUID": "7d0a3d61-eb66-43d0-8966-cbfdfd81997c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Evaluations Review Types\"",
              "fullTitle": "Evaluations Review Types \"before each\" hook in \"Evaluations Review Types\"",
              "timedOut": false,
              "duration": 3783,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.wait(3000);",
              "err": {},
              "uuid": "4d965ec5-935b-4c90-8a9f-16d826ee97fc",
              "parentUUID": "7d0a3d61-eb66-43d0-8966-cbfdfd81997c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if annual evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if annual evaluations are showing",
              "timedOut": false,
              "duration": 4985,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'annual' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Annual'), `Expected text not found.`);",
              "err": {},
              "uuid": "2dfda08b-370f-4f89-9b62-3e0657027fbe",
              "parentUUID": "7d0a3d61-eb66-43d0-8966-cbfdfd81997c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 6085,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Annual'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "a2e8a4c6-d174-45d8-9913-d8a97d127ec7",
              "parentUUID": "7d0a3d61-eb66-43d0-8966-cbfdfd81997c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Bi Annual evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if Bi Annual evaluations are showing",
              "timedOut": false,
              "duration": 5011,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'bi-annual' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Bi Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Bi Annual'), `Expected text not found.`);",
              "err": {},
              "uuid": "3874b848-cad9-47f9-a615-92745a4e3e08",
              "parentUUID": "7d0a3d61-eb66-43d0-8966-cbfdfd81997c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 6199,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Bi Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Bi Annual'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "264d743f-5492-49dc-83e1-61a70e769cca",
              "parentUUID": "7d0a3d61-eb66-43d0-8966-cbfdfd81997c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Internship evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if Internship evaluations are showing",
              "timedOut": false,
              "duration": 5114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'internship' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Internship');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Internship'), `Expected text not found.`);",
              "err": {},
              "uuid": "196eb54d-17ee-43b3-a62a-586757f78cc0",
              "parentUUID": "7d0a3d61-eb66-43d0-8966-cbfdfd81997c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 6405,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Internship');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Internship'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "c9ed1556-2df4-4eb4-bda7-96f0f92ec38c",
              "parentUUID": "7d0a3d61-eb66-43d0-8966-cbfdfd81997c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr have Access of extend Btn and can extend Evaluation",
              "fullTitle": "Evaluations Review Types should confirm Hr have Access of extend Btn and can extend Evaluation",
              "timedOut": false,
              "duration": 9179,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Internship');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Internship'), `Expected text not found.`);\nawait evaluation.checkIfExtenfBtnIsLocated()\nawait utilFun.wait(1000);\nawait evaluation.clickExtendBtn()\nawait utilFun.wait(1000);\nawait evaluation.clickDeferType()\nawait evaluation.selectDeferType('2 Weeks');\nawait utilFun.wait(1000);\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "a7a9b385-5872-4daf-a6d4-c65513b9dadf",
              "parentUUID": "7d0a3d61-eb66-43d0-8966-cbfdfd81997c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if End of Probation evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if End of Probation evaluations are showing",
              "timedOut": false,
              "duration": 5062,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'end_of_probation' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('End of Probation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('End of Probation'), `Expected text not found.`);",
              "err": {},
              "uuid": "7f452c83-d679-4ac3-b8bd-71fd7587c12f",
              "parentUUID": "7d0a3d61-eb66-43d0-8966-cbfdfd81997c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 6206,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('End of Probation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('End of Probation'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "a7989ca7-5bd9-43ca-a964-71e051896bf1",
              "parentUUID": "7d0a3d61-eb66-43d0-8966-cbfdfd81997c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr have Access of extend Btn and can extend Evaluation",
              "fullTitle": "Evaluations Review Types should confirm Hr have Access of extend Btn and can extend Evaluation",
              "timedOut": false,
              "duration": 8848,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('End of Probation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('End of Probation'), `Expected text not found.`);\nawait evaluation.checkIfExtenfBtnIsLocated()\nawait utilFun.wait(1000);\nawait evaluation.clickExtendBtn()\nawait utilFun.wait(1000);\nawait evaluation.clickDeferType()\nawait evaluation.selectDeferType('2 Weeks');\nawait utilFun.wait(1000);\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "4a1d295b-3ef2-4b83-8f43-f15c3318c778",
              "parentUUID": "7d0a3d61-eb66-43d0-8966-cbfdfd81997c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Revised Designation evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if Revised Designation evaluations are showing",
              "timedOut": false,
              "duration": 5003,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'designation' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Rev. Designation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Rev. Designation'), `Expected text not found.`);",
              "err": {},
              "uuid": "9d9339be-3995-4d83-a933-37de56afa332",
              "parentUUID": "7d0a3d61-eb66-43d0-8966-cbfdfd81997c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 6408,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Rev. Designation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Rev. Designation'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "eb01be5a-916d-4929-a7b6-23b654b87d28",
              "parentUUID": "7d0a3d61-eb66-43d0-8966-cbfdfd81997c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2dfda08b-370f-4f89-9b62-3e0657027fbe",
            "a2e8a4c6-d174-45d8-9913-d8a97d127ec7",
            "3874b848-cad9-47f9-a615-92745a4e3e08",
            "264d743f-5492-49dc-83e1-61a70e769cca",
            "196eb54d-17ee-43b3-a62a-586757f78cc0",
            "c9ed1556-2df4-4eb4-bda7-96f0f92ec38c",
            "a7a9b385-5872-4daf-a6d4-c65513b9dadf",
            "7f452c83-d679-4ac3-b8bd-71fd7587c12f",
            "a7989ca7-5bd9-43ca-a964-71e051896bf1",
            "4a1d295b-3ef2-4b83-8f43-f15c3318c778",
            "9d9339be-3995-4d83-a933-37de56afa332",
            "eb01be5a-916d-4929-a7b6-23b654b87d28"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 74505,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
          "title": "My Leaves",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/leaves/spec_1_myleaves.js",
          "file": "/test/e2e/leaves/spec_1_myleaves.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"My Leaves\"",
              "fullTitle": "My Leaves \"before all\" hook in \"My Leaves\"",
              "timedOut": false,
              "duration": 10297,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\n// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query1 = [\n  `UPDATE employee_leaves_count SET \"carryForwardedLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesEarned\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalRemainingLeaves\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"availedUnPaidLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `DELETE FROM employee_leaves WHERE \"employeeId\" = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query1);",
              "err": {},
              "uuid": "0eb42532-814a-4a5d-b6ad-5a0e875f549f",
              "parentUUID": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"My Leaves\"",
              "fullTitle": "My Leaves \"before each\" hook in \"My Leaves\"",
              "timedOut": false,
              "duration": 3441,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);",
              "err": {},
              "uuid": "5149ddb2-2389-4831-9971-26a88a155816",
              "parentUUID": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should should able to view employee leave",
              "fullTitle": "My Leaves should should able to view employee leave",
              "timedOut": false,
              "duration": 4259,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_reporting_managers SET \"approvedLeaveStatus\" = 'PENDING' WHERE id = 45;`,\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE id = 32;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE id = 32;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE id = 32;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {},
              "uuid": "55c5e1c3-b7de-4a50-b3c8-f95bc3ce49b1",
              "parentUUID": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should should able to Approve employee leave",
              "fullTitle": "My Leaves should should able to Approve employee leave",
              "timedOut": false,
              "duration": 3704,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nawait myLeaves.clickApproveBtn()\nawait myLeaves.clickSubmitBtn()\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "1615a870-42a0-4164-8274-19888cb4e3c4",
              "parentUUID": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Approved Tab",
              "fullTitle": "My Leaves should able to view employee leave in Approved Tab",
              "timedOut": false,
              "duration": 2961,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Approved Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {},
              "uuid": "94a2355b-4ddf-4f35-9a90-ca1577a2f1d1",
              "parentUUID": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Reject employee leave in Approved Tab",
              "fullTitle": "My Leaves should able to Reject employee leave in Approved Tab",
              "timedOut": false,
              "duration": 23886,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Approved Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);\nawait myLeaves.clickRejectBtn()\nawait myLeaves.typeRejectReasonAndReject('testing')\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[role=\"alert\"])\nWait timed out after 20044ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[role=\"alert\"])\nWait timed out after 20044ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "82df5410-905d-4818-8182-e2fe3387fd92",
              "parentUUID": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Reject Tab",
              "fullTitle": "My Leaves should able to view employee leave in Reject Tab",
              "timedOut": false,
              "duration": 2901,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Rejected Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/leaves/spec_1_myleaves.js:90:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "fd796994-9e71-4d26-bf1a-58fa7db1bc93",
              "parentUUID": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should should able to Reject employee leave",
              "fullTitle": "My Leaves should should able to Reject employee leave",
              "timedOut": false,
              "duration": 25271,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_reporting_managers SET \"approvedLeaveStatus\" = 'PENDING' WHERE id = 45;`,\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE id = 32;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE id = 32;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE id = 32;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nawait myLeaves.clickRejectBtn()\nawait myLeaves.typeRejectReasonAndReject('testing')\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[role=\"alert\"])\nWait timed out after 20075ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[role=\"alert\"])\nWait timed out after 20075ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3f90f8df-9d67-4d58-9af6-7b930be70969",
              "parentUUID": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Reject Tab",
              "fullTitle": "My Leaves should able to view employee leave in Reject Tab",
              "timedOut": false,
              "duration": 2997,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Rejected Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/leaves/spec_1_myleaves.js:113:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "ae14c542-876b-43e7-b7b0-008683fad983",
              "parentUUID": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Approve employee leave in Reject Tab",
              "fullTitle": "My Leaves should able to Approve employee leave in Reject Tab",
              "timedOut": false,
              "duration": 2988,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Rejected Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);\nawait myLeaves.clickApproveBtn()\nawait myLeaves.clickSubmitBtn()\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/leaves/spec_1_myleaves.js:120:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "623efe5b-f39d-4a8a-95dd-875499a6b414",
              "parentUUID": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Approved Tab",
              "fullTitle": "My Leaves should able to view employee leave in Approved Tab",
              "timedOut": false,
              "duration": 2818,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Approved Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/leaves/spec_1_myleaves.js:131:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "a4fb1fe5-95d4-436e-966e-9a2564cf5031",
              "parentUUID": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Leaves counts are showing Correct",
              "fullTitle": "My Leaves should check if Leaves counts are showing Correct",
              "timedOut": false,
              "duration": 268,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '10/');\nlet leaves1 = await myLeaves.getSickLeaves();\nassert.equal(leaves1, '10/');\nlet leaves2 = await myLeaves.getCarryForwardLeaves();\nassert.equal(leaves2, '0/');\nlet leaves3 = await myLeaves.getUnpaidLeaves();\nassert.equal(leaves3, '0');",
              "err": {},
              "uuid": "c65872fb-6e6f-4329-85e1-41aee9f9b13d",
              "parentUUID": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Casual full leave",
              "fullTitle": "My Leaves should able to apply Casual full leave",
              "timedOut": false,
              "duration": 6488,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('05-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('05-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "3bfc5baa-c2ec-49b1-a5ec-b43837407e01",
              "parentUUID": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Casual First Half leave",
              "fullTitle": "My Leaves should able to apply Casual First Half leave",
              "timedOut": false,
              "duration": 7764,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('First Half');\nawait myLeaves.setStartDate('06-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('06-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "df8c70e3-5370-4d1c-9941-1e304a1e8f51",
              "parentUUID": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Casual Second Half leave",
              "fullTitle": "My Leaves should able to apply Casual Second Half leave",
              "timedOut": false,
              "duration": 8098,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('Second Half');\nawait myLeaves.setStartDate('07-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('07-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "4b60a957-019c-4112-a004-80f7caba9fbe",
              "parentUUID": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Sick full leave",
              "fullTitle": "My Leaves should able to apply Sick full leave",
              "timedOut": false,
              "duration": 6638,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Sick Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('08-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('08-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "51d156bb-15db-44ae-8855-7bf7c26c2e62",
              "parentUUID": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Sick First Half leave",
              "fullTitle": "My Leaves should able to apply Sick First Half leave",
              "timedOut": false,
              "duration": 7867,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Sick Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('First Half');\nawait myLeaves.setStartDate('09-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('09-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "0d82e193-e497-440c-a00b-fa4adc7614b4",
              "parentUUID": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Sick Second Half leave",
              "fullTitle": "My Leaves should able to apply Sick Second Half leave",
              "timedOut": false,
              "duration": 7804,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Sick Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('Second Half');\nawait myLeaves.setStartDate('10-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('10-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "4cd4ae79-e170-41c3-997c-090bd1ca5be1",
              "parentUUID": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Un-Paid full leave",
              "fullTitle": "My Leaves should able to apply Un-Paid full leave",
              "timedOut": false,
              "duration": 6688,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Un-Paid Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('11-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('11-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "cd6d6f9d-c8ed-472f-b1f1-a33fd784c380",
              "parentUUID": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Un-Paid First Half leave",
              "fullTitle": "My Leaves should able to apply Un-Paid First Half leave",
              "timedOut": false,
              "duration": 8218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Un-Paid Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('First Half');\nawait myLeaves.setStartDate('12-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('12-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "e5f58891-033d-4dda-aee5-719f9437503c",
              "parentUUID": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Un-Paid Second Half leave",
              "fullTitle": "My Leaves should able to apply Un-Paid Second Half leave",
              "timedOut": false,
              "duration": 8125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Un-Paid Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('Second Half');\nawait myLeaves.setStartDate('13-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('13-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "46565053-05d0-48c9-836e-e0631c379a47",
              "parentUUID": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Leaves counts are showing Correct",
              "fullTitle": "My Leaves should check if Leaves counts are showing Correct",
              "timedOut": false,
              "duration": 232,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '8/');\nlet leaves1 = await myLeaves.getSickLeaves();\nassert.equal(leaves1, '8/');\nlet leaves2 = await myLeaves.getCarryForwardLeaves();\nassert.equal(leaves2, '0/');\nlet leaves3 = await myLeaves.getUnpaidLeaves();\nassert.equal(leaves3, '2');",
              "err": {},
              "uuid": "333dd1de-3a0d-44fb-8241-327752b818e8",
              "parentUUID": "ac5d5d04-cc3d-4aa8-8f6a-037cdadea57d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "55c5e1c3-b7de-4a50-b3c8-f95bc3ce49b1",
            "1615a870-42a0-4164-8274-19888cb4e3c4",
            "94a2355b-4ddf-4f35-9a90-ca1577a2f1d1",
            "c65872fb-6e6f-4329-85e1-41aee9f9b13d",
            "3bfc5baa-c2ec-49b1-a5ec-b43837407e01",
            "df8c70e3-5370-4d1c-9941-1e304a1e8f51",
            "4b60a957-019c-4112-a004-80f7caba9fbe",
            "51d156bb-15db-44ae-8855-7bf7c26c2e62",
            "0d82e193-e497-440c-a00b-fa4adc7614b4",
            "4cd4ae79-e170-41c3-997c-090bd1ca5be1",
            "cd6d6f9d-c8ed-472f-b1f1-a33fd784c380",
            "e5f58891-033d-4dda-aee5-719f9437503c",
            "46565053-05d0-48c9-836e-e0631c379a47",
            "333dd1de-3a0d-44fb-8241-327752b818e8"
          ],
          "failures": [
            "82df5410-905d-4818-8182-e2fe3387fd92",
            "fd796994-9e71-4d26-bf1a-58fa7db1bc93",
            "3f90f8df-9d67-4d58-9af6-7b930be70969",
            "ae14c542-876b-43e7-b7b0-008683fad983",
            "623efe5b-f39d-4a8a-95dd-875499a6b414",
            "a4fb1fe5-95d4-436e-966e-9a2564cf5031"
          ],
          "pending": [],
          "skipped": [],
          "duration": 139975,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
          "title": "hr dashboard",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/leaves/spec_2_hrLeavesDashboard.js",
          "file": "/test/e2e/leaves/spec_2_hrLeavesDashboard.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"hr dashboard\"",
              "fullTitle": "hr dashboard \"before all\" hook in \"hr dashboard\"",
              "timedOut": false,
              "duration": 10089,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "f0348248-d3be-4017-9b92-c9a5babc31ad",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"hr dashboard\"",
              "fullTitle": "hr dashboard \"after all\" hook in \"hr dashboard\"",
              "timedOut": false,
              "duration": 21,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `DELETE FROM employee_leaves WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "079da2b5-5ce4-4c14-ae7c-d57c5f608e19",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should check if Leaves counts are showing Correct",
              "fullTitle": "hr dashboard should check if Leaves counts are showing Correct",
              "timedOut": false,
              "duration": 3675,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_count SET \"carryForwardedLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesEarned\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalRemainingLeaves\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"availedUnPaidLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `DELETE FROM employee_leaves WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nlet leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '10/');\nlet leaves1 = await myLeaves.getSickLeaves();\nassert.equal(leaves1, '10/');\nlet leaves2 = await myLeaves.getCarryForwardLeaves();\nassert.equal(leaves2, '0/');\nlet leaves3 = await myLeaves.getUnpaidLeaves();\nassert.equal(leaves3, '0');",
              "err": {},
              "uuid": "26398930-14d4-4256-8b28-16a0d8b87210",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Casual full leave",
              "fullTitle": "hr dashboard should able to apply Casual full leave",
              "timedOut": false,
              "duration": 10130,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nawait myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('05-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('05-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "811aa2a4-a8b7-4b34-aef4-b8427340eeac",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if leave is showing in Hr Dashboard",
              "fullTitle": "hr dashboard should able to check if leave is showing in Hr Dashboard",
              "timedOut": false,
              "duration": 5373,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "aba52891-099e-4e4b-a8e5-fd022665dfdd",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Approve Leave",
              "fullTitle": "hr dashboard should able to Approve Leave",
              "timedOut": false,
              "duration": 7267,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.clickApproveBtn()\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.clickSubmitBtn()\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "7d7feecf-335e-4712-af6a-4fc4a397f0b0",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Approved Tab",
              "fullTitle": "hr dashboard should able to view employee leave in Approved Tab",
              "timedOut": false,
              "duration": 5876,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickTab('Approved Leaves')\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "bdcf6d7f-4428-4fc3-b294-224515d05c8e",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Reject Leave",
              "fullTitle": "hr dashboard should able to Reject Leave",
              "timedOut": false,
              "duration": 6469,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickRejectBtn()\nawait hrLeaveDashboard.typeRejectReasonAndReject('testing')\nawait utilFun.wait(1000);\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "335d6853-fbdc-4bf5-9454-66de096eb094",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Rejected Tab",
              "fullTitle": "hr dashboard should able to view employee leave in Rejected Tab",
              "timedOut": false,
              "duration": 5973,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickTab('Rejected Leaves')\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "836fad44-4b4d-4cd7-bf09-0860de1edb17",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to send leave notification to PMs",
              "fullTitle": "hr dashboard should able to send leave notification to PMs",
              "timedOut": false,
              "duration": 6152,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickSendNotificationBtn()\nawait utilFun.wait(1000);\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Notification sent to PMs from which leave is pending');",
              "err": {},
              "uuid": "b8d46953-1aa3-459f-ba3e-412bd9ef33e2",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to delete Employee leave",
              "fullTitle": "hr dashboard should able to delete Employee leave",
              "timedOut": false,
              "duration": 6937,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickDeleteBtn()\nawait hrLeaveDashboard.typeDeleteReason('testing')\nawait hrLeaveDashboard.clickSubmitDeleteBtn()\nawait utilFun.wait(1000);\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request deleted successfully.');",
              "err": {},
              "uuid": "6b2b907c-dd4f-430a-9273-3bd4aec4a440",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able check if delete leave is showing in Deleted Section",
              "fullTitle": "hr dashboard should able check if delete leave is showing in Deleted Section",
              "timedOut": false,
              "duration": 5395,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickSeeDeletedLeaves()\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "81477777-d610-4152-b6a0-f9e0e42cf657",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to add Compensatory leave to specific employee",
              "fullTitle": "hr dashboard should able to add Compensatory leave to specific employee",
              "timedOut": false,
              "duration": 13371,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCompLeaveBtn()\nawait hrLeaveDashboard.selectResource('Muhammad Bilal Rafaqat')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('21-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('21-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Compensatory leave added successfully');",
              "err": {
                "message": "AssertionError: 'Compensatory leave with same date already exist!' == 'Compensatory leave added successfully'",
                "estack": "AssertionError [ERR_ASSERTION]: 'Compensatory leave with same date already exist!' == 'Compensatory leave added successfully'\n    at Context.<anonymous> (test/e2e/leaves/spec_2_hrLeavesDashboard.js:198:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Compensatory leave with same date already exist!\n+ Compensatory leave added successfully\n"
              },
              "uuid": "a6d20e95-6291-43a1-8880-d25cec6bda90",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Leave is Added",
              "fullTitle": "hr dashboard should check if Leave is Added",
              "timedOut": false,
              "duration": 3762,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nlet leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '11/');",
              "err": {
                "message": "AssertionError: '10/' == '11/'",
                "estack": "AssertionError [ERR_ASSERTION]: '10/' == '11/'\n    at Context.<anonymous> (test/e2e/leaves/spec_2_hrLeavesDashboard.js:204:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 10/\n+ 11/\n"
              },
              "uuid": "24522d28-9675-4987-8b8f-04fb42d6b822",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to add Compensatory leave to all employee",
              "fullTitle": "hr dashboard should able to add Compensatory leave to all employee",
              "timedOut": false,
              "duration": 8961,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCompLeaveBtn()\nawait hrLeaveDashboard.clickSelectAllRadioBtn()\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('20-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('20-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Compensatory leave added successfully');",
              "err": {},
              "uuid": "9df191d4-54e7-49c7-bf3e-804a156adcd9",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Leave is Added",
              "fullTitle": "hr dashboard should check if Leave is Added",
              "timedOut": false,
              "duration": 3421,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nlet leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '11/');",
              "err": {},
              "uuid": "0dba9fcd-7073-433d-a36e-6d27d1ce0e34",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Casual full leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Casual full leave from Hr Dashboard",
              "timedOut": false,
              "duration": 13617,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Casual Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Full Leave')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('10-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('10-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "7e558527-2b8d-422b-b121-9e484fa04b8e",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Casual First Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Casual First Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 13940,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Casual Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('First Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('11-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('11-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "f6decdc5-0e27-48dc-92ed-48e68a55a016",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Casual Second Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Casual Second Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 13452,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Casual Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('Second Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('12-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('12-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "7fda92cf-e795-49db-a981-3c609c54a1f1",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Sick full leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Sick full leave from Hr Dashboard",
              "timedOut": false,
              "duration": 13234,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Sick Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Full Leave')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('13-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('13-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "20446d4e-465d-4641-93bf-85b161bf576d",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Sick First Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Sick First Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 13314,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Sick Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('First Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('14-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('14-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "ce9cca48-9879-43f5-b825-6dd9098390f5",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Sick Second Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Sick Second Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 13558,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Sick Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('Second Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('15-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('15-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "754c56bc-f12c-4c5d-bf18-5f7c141ea730",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Un-Paid full leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Un-Paid full leave from Hr Dashboard",
              "timedOut": false,
              "duration": 13345,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Un-Paid Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Full Leave')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('16-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('16-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "f9d93097-dc8b-4bd2-a0ba-8946b5cf9604",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Un-Paid First Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Un-Paid First Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 13271,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Un-Paid Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('First Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('17-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('17-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "9f0ec792-bc75-4728-8d4e-4b7ff8e99571",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Un-Paid Second Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Un-Paid Second Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12851,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Un-Paid Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('Second Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('18-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('18-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "22fa42bb-1e0c-4bd2-9040-e71497682ab3",
              "parentUUID": "c35babcf-c9a2-4241-8a78-fcb53e190c9e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "26398930-14d4-4256-8b28-16a0d8b87210",
            "811aa2a4-a8b7-4b34-aef4-b8427340eeac",
            "aba52891-099e-4e4b-a8e5-fd022665dfdd",
            "7d7feecf-335e-4712-af6a-4fc4a397f0b0",
            "bdcf6d7f-4428-4fc3-b294-224515d05c8e",
            "335d6853-fbdc-4bf5-9454-66de096eb094",
            "836fad44-4b4d-4cd7-bf09-0860de1edb17",
            "b8d46953-1aa3-459f-ba3e-412bd9ef33e2",
            "6b2b907c-dd4f-430a-9273-3bd4aec4a440",
            "81477777-d610-4152-b6a0-f9e0e42cf657",
            "9df191d4-54e7-49c7-bf3e-804a156adcd9",
            "0dba9fcd-7073-433d-a36e-6d27d1ce0e34",
            "7e558527-2b8d-422b-b121-9e484fa04b8e",
            "f6decdc5-0e27-48dc-92ed-48e68a55a016",
            "7fda92cf-e795-49db-a981-3c609c54a1f1",
            "20446d4e-465d-4641-93bf-85b161bf576d",
            "ce9cca48-9879-43f5-b825-6dd9098390f5",
            "754c56bc-f12c-4c5d-bf18-5f7c141ea730",
            "f9d93097-dc8b-4bd2-a0ba-8946b5cf9604",
            "9f0ec792-bc75-4728-8d4e-4b7ff8e99571",
            "22fa42bb-1e0c-4bd2-9040-e71497682ab3"
          ],
          "failures": [
            "a6d20e95-6291-43a1-8880-d25cec6bda90",
            "24522d28-9675-4987-8b8f-04fb42d6b822"
          ],
          "pending": [],
          "skipped": [],
          "duration": 213344,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
          "title": "Monthly Claims -> Child Claims",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-child.js",
          "file": "/test/e2e/monthlyclaim/myclaims-child.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Monthly Claims -> Child Claims\"",
              "fullTitle": "Monthly Claims -> Child Claims \"before all\" hook in \"Monthly Claims -> Child Claims\"",
              "timedOut": false,
              "duration": 10526,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n    `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9429;`,\n    `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9474;`,\n  ];\n  await utilFun.udpateDatabase(query);\n  await utilFun.loginAccount()\n//   await utilFun.login(email, password)",
              "err": {},
              "uuid": "3ae6f62a-fe50-4297-b531-147e5777698a",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Upload Photo and click Close Button",
              "timedOut": false,
              "duration": 11255,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "d32f6db4-6a1f-4726-968e-9bd2a7b4492f",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Upload Photo and Delete Photos ",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Upload Photo and Delete Photos ",
              "timedOut": false,
              "duration": 14330,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(1);",
              "err": {},
              "uuid": "5f6ba80f-a35d-45c8-ab67-b7f304ea5011",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Add New Row and Delete Row ",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Add New Row and Delete Row ",
              "timedOut": false,
              "duration": 13200,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(1);",
              "err": {},
              "uuid": "a32c2cfb-0384-4ade-a708-6dc40b1e79d3",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Check Cancel Button",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Check Cancel Button",
              "timedOut": false,
              "duration": 7148,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "8a4dd24d-1051-4a20-b4d1-c10da25b583b",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 15286,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "d452cd52-8538-403e-9aab-c14b3915612c",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Edit Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Edit Child Claim",
              "timedOut": false,
              "duration": 15930,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MyClaims_EditBtn();\nawait child_claims.MyClaims_AddClaim_Child_Name('ALI', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-06-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(1);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(2);\nawait utilFun.wait(3000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit();\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is updated successfully');",
              "err": {},
              "uuid": "17e1cbdd-0ec2-4c13-9bcc-acfb790d876c",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Show Attachment",
              "fullTitle": "Monthly Claims -> Child Claims should be able Show Attachment",
              "timedOut": false,
              "duration": 5885,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "08eb40e5-1991-46c4-8ebc-c9f10b7a258c",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Review Icon",
              "fullTitle": "Monthly Claims -> Child Claims should be able Review Icon",
              "timedOut": false,
              "duration": 6783,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "9900bb07-3f01-4fd7-9f44-89a5fce80294",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Delete Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Delete Child Claim",
              "timedOut": false,
              "duration": 7735,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_DeleteBtn();\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "fe05acb7-38ed-4b63-9a55-d9df4b9f3cd9",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 21491,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "a653634a-e9b7-434b-b290-fd56390bb571",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment & Close Button",
              "fullTitle": "Monthly Claims -> Child Claims should be HR Role Show Attachment & Close Button",
              "timedOut": false,
              "duration": 7969,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(2000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "9b7f18dc-1c81-4e23-8d6b-631391e27727",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Edit Amount in Show Attachment",
              "fullTitle": "Monthly Claims -> Child Claims should be Edit Amount in Show Attachment",
              "timedOut": false,
              "duration": 14512,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_ShowAttachment_EditAmount_Hover();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ShowAttachment_EditAmount();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ClaimsRequest_EditBtn_RecieptAmount('3500');\nawait claims.MyClaims_ClaimsRequest_EditBtn_Reason('Extra budget');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();",
              "err": {},
              "uuid": "85a4b7b0-b0e8-4d69-84df-9a07c027ea54",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Child Claims should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 37770,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(4000);\nawait claims.MyClaims_FilterBtn();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\nawait claims.HRFilterSearchByClaimType('Personal Development Allowance');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Filter_HR_SearchByClaim_CrossIcon();\nawait claims.HRFilterSearchByClaimType('Fitness/Gym Allowance');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_HR_SearchByClaim_CrossIcon();\nawait claims.HRFilterSearchByClaimType('Child Education Support');\nawait utilFun.wait(4000);\n/// Start and End Date Filter\nawait claims.MyClaims_Filter_StartDate('2023-11-14');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2023-12-15')\nawait utilFun.wait(4000);\n/// Verify Results\nawait claims.Row_Assertion()\nawait claims.MyClaims_Filter_ClearBtn();",
              "err": {},
              "uuid": "86eaf0f0-b588-4638-8d80-d225846773bf",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be HR Role Review Flow",
              "timedOut": false,
              "duration": 16240,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet query =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "1bbb5daf-b72d-4a1f-a9f6-45767ad8032d",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit One Child Claim for Approve Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim for Approve Flow",
              "timedOut": false,
              "duration": 21310,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "f395d153-4be9-4bfe-b237-3e8af7c0522a",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Approve One Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Approve One Child Claim by HR",
              "timedOut": false,
              "duration": 24156,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Receipt status updated successfully!');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "2aeedc6d-cd10-4b8e-bd93-4678cb71d3a3",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit One Child Claim for Reject Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim for Reject Flow",
              "timedOut": false,
              "duration": 21195,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "9611ba1c-e1c3-4452-922f-f036e62ea7f8",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Reject Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Reject Child Claim by HR",
              "timedOut": false,
              "duration": 25231,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait utilFun.wait(3000)\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Receipt status updated successfully!');\nawait utilFun.wait(3000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "0cd662be-74b1-4c95-96d7-682a2273f31b",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be  Verify Reject Tab and check Show Attachment ",
              "fullTitle": "Monthly Claims -> Child Claims should be  Verify Reject Tab and check Show Attachment ",
              "timedOut": false,
              "duration": 9127,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "adba9cf3-431f-4fc5-b67f-f287595d9ea0",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be  Verify Reject Tab and Check Review Icon  ",
              "fullTitle": "Monthly Claims -> Child Claims should be  Verify Reject Tab and Check Review Icon  ",
              "timedOut": false,
              "duration": 9077,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000);\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion();\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "f84a30ac-4965-4277-9557-6da1f4bb968d",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Child Claims should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 7758,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "3b1da287-4d11-4aa9-9915-3b758b88823b",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Two Child Claim for Review Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Two Child Claim for Review Flow",
              "timedOut": false,
              "duration": 30928,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "71b4063f-591e-4312-bd5a-8075484917aa",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment & Close Button",
              "fullTitle": "Monthly Claims -> Child Claims should be HR Role Show Attachment & Close Button",
              "timedOut": false,
              "duration": 17086,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.wait(10000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "2a66ee44-ca8e-4aaa-a4d4-f6189e8463b5",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Edit Amount in Show Attachment",
              "fullTitle": "Monthly Claims -> Child Claims should be Edit Amount in Show Attachment",
              "timedOut": false,
              "duration": 14612,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_ShowAttachment_EditAmount_Hover();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ShowAttachment_EditAmount();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ClaimsRequest_EditBtn_RecieptAmount('3500');\nawait claims.MyClaims_ClaimsRequest_EditBtn_Reason('Extra budget');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();",
              "err": {},
              "uuid": "559d427a-c93e-4127-8d34-b58a89b5f816",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Review Flow for Two Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Review Flow for Two Child Claim by HR",
              "timedOut": false,
              "duration": 23275,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// const query = [\n//     `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n//     `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n//     `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n//     `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n// ];\n// await utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages1 = await claims.checkAlert();\nutilFun.assertEql(flashMessages1, 'Claim status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(1);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages2 = await claims.checkAlert();\nutilFun.assertEql(flashMessages2, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "522de80f-033d-4759-a04f-67da6a48fc49",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Two Child Claim for Approve Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Two Child Claim for Approve Flow",
              "timedOut": false,
              "duration": 31247,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "c58948ea-ab59-4124-83a6-89f72893af75",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Approve Two Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Approve Two Child Claim by HR",
              "timedOut": false,
              "duration": 31072,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "28185179-9f94-4bd3-b7db-7dacd748911f",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Two Child Claim for Reject Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Two Child Claim for Reject Flow",
              "timedOut": false,
              "duration": 30994,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "c1a43701-174b-4336-93d8-aa05f51d5570",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Reject Two Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Reject Two Child Claim by HR",
              "timedOut": false,
              "duration": 28907,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(3000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim status updated successfully!');\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion();\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "56408f88-a2be-4ecf-a63a-d9c96cc5d0fa",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Three Child Claim for Review Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Three Child Claim for Review Flow",
              "timedOut": false,
              "duration": 40337,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Noman', 2);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 2);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('6000', 2);\nconst validationMessage3 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage3, 'Max amount limit is 5000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 2);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "fdf915be-4efb-40d7-b110-870a372cc6b7",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Review Flow for Three Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Review Flow for Three Child Claim by HR",
              "timedOut": false,
              "duration": 30774,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages1 = await claims.checkAlert();\nutilFun.assertEql(flashMessages1, 'Claim status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(1);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages2 = await claims.checkAlert();\nutilFun.assertEql(flashMessages2, 'Claim status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(2);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages3 = await claims.checkAlert();\nutilFun.assertEql(flashMessages3, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "5454ed36-6513-4b46-8b23-33a6ca81867e",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Three Child Claim for Approve Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Three Child Claim for Approve Flow",
              "timedOut": false,
              "duration": 40626,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Noman', 2);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 2);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('6000', 2);\nconst validationMessage3 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage3, 'Max amount limit is 5000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 2);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "870e4e68-5965-43b4-a5b9-1555638bfd2f",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Approve Three Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Approve Three Child Claim by HR",
              "timedOut": false,
              "duration": 38013,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage3 = await claims.checkAlert();\nutilFun.assertEql(flashMessage3, 'Receipt status updated successfully!');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "e979f8b8-af33-499f-968a-d6d170fceec3",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Three Child Claim for Reject Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Three Child Claim for Reject Flow",
              "timedOut": false,
              "duration": 40814,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Noman', 2);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 2);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('6000', 2);\nconst validationMessage3 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage3, 'Max amount limit is 5000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 2);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "b25ebeb7-b977-4922-8d7e-c6259b5d4433",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Reject Three Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Reject Three Child Claim by HR",
              "timedOut": false,
              "duration": 34997,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage3 = await claims.checkAlert();\nutilFun.assertEql(flashMessage3, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim status updated successfully!');\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion();\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "a2d31ee4-d6dd-4eb0-aacf-34cb2622f809",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Child Claims should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 17875,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Deadline_Date('2023-02-05 22:40:20');\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "1fcc8469-1844-4c7d-9ee3-09947f3f15cd",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 17138,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'You are not able to claim as the claim time is over.');",
              "err": {},
              "uuid": "d570b424-e873-41e1-b34e-a0dc5fb43cbc",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Child Claims should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 18054,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        'DELETE FROM employee_claim_deadlines;',\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Deadline_Date('2024-12-05 22:40:20');\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "c56367c4-3263-4729-98d5-28ba5c125a1d",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 17108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');\nlet querys =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n        'DELETE FROM employee_claim_deadlines;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "c765c368-9586-4261-92c7-ac30c2efd700",
              "parentUUID": "0ab3c9e4-dc36-400e-9d7d-3c42729b1e08",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d32f6db4-6a1f-4726-968e-9bd2a7b4492f",
            "5f6ba80f-a35d-45c8-ab67-b7f304ea5011",
            "a32c2cfb-0384-4ade-a708-6dc40b1e79d3",
            "8a4dd24d-1051-4a20-b4d1-c10da25b583b",
            "d452cd52-8538-403e-9aab-c14b3915612c",
            "17e1cbdd-0ec2-4c13-9bcc-acfb790d876c",
            "08eb40e5-1991-46c4-8ebc-c9f10b7a258c",
            "9900bb07-3f01-4fd7-9f44-89a5fce80294",
            "fe05acb7-38ed-4b63-9a55-d9df4b9f3cd9",
            "a653634a-e9b7-434b-b290-fd56390bb571",
            "9b7f18dc-1c81-4e23-8d6b-631391e27727",
            "85a4b7b0-b0e8-4d69-84df-9a07c027ea54",
            "86eaf0f0-b588-4638-8d80-d225846773bf",
            "1bbb5daf-b72d-4a1f-a9f6-45767ad8032d",
            "f395d153-4be9-4bfe-b237-3e8af7c0522a",
            "2aeedc6d-cd10-4b8e-bd93-4678cb71d3a3",
            "9611ba1c-e1c3-4452-922f-f036e62ea7f8",
            "0cd662be-74b1-4c95-96d7-682a2273f31b",
            "adba9cf3-431f-4fc5-b67f-f287595d9ea0",
            "f84a30ac-4965-4277-9557-6da1f4bb968d",
            "3b1da287-4d11-4aa9-9915-3b758b88823b",
            "71b4063f-591e-4312-bd5a-8075484917aa",
            "2a66ee44-ca8e-4aaa-a4d4-f6189e8463b5",
            "559d427a-c93e-4127-8d34-b58a89b5f816",
            "522de80f-033d-4759-a04f-67da6a48fc49",
            "c58948ea-ab59-4124-83a6-89f72893af75",
            "28185179-9f94-4bd3-b7db-7dacd748911f",
            "c1a43701-174b-4336-93d8-aa05f51d5570",
            "56408f88-a2be-4ecf-a63a-d9c96cc5d0fa",
            "fdf915be-4efb-40d7-b110-870a372cc6b7",
            "5454ed36-6513-4b46-8b23-33a6ca81867e",
            "870e4e68-5965-43b4-a5b9-1555638bfd2f",
            "e979f8b8-af33-499f-968a-d6d170fceec3",
            "b25ebeb7-b977-4922-8d7e-c6259b5d4433",
            "a2d31ee4-d6dd-4eb0-aacf-34cb2622f809",
            "1fcc8469-1844-4c7d-9ee3-09947f3f15cd",
            "d570b424-e873-41e1-b34e-a0dc5fb43cbc",
            "c56367c4-3263-4729-98d5-28ba5c125a1d",
            "c765c368-9586-4261-92c7-ac30c2efd700"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 817245,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "b404d456-fc51-45ef-9001-dec73d589a0f",
          "title": "Monthly Claims -> Gym Allowance",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-gym.js",
          "file": "/test/e2e/monthlyclaim/myclaims-gym.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button in Gym Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be able to Upload Photo and click Close Button in Gym Allowance",
              "timedOut": false,
              "duration": 10771,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Fitness/Gym Allowance');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Amount('10000');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn();\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_DeleteBtn();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "d9862e37-7667-48bc-b0a0-907c04557f14",
              "parentUUID": "b404d456-fc51-45ef-9001-dec73d589a0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able multiple File Upload & Cancel Button in GYM Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be able multiple File Upload & Cancel Button in GYM Allowance",
              "timedOut": false,
              "duration": 11826,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000)\nawait claims.MyClaims_AddClaim_Btn()\nawait claims.ClaimSelect('Fitness/Gym Allowance')\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn()\nawait utilFun.wait(3000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()",
              "err": {},
              "uuid": "dd341cfb-ba35-496f-bf2f-491614d33030",
              "parentUUID": "b404d456-fc51-45ef-9001-dec73d589a0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Gym Allowance ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be add claim in Gym Allowance ",
              "timedOut": false,
              "duration": 14714,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000)\nawait claims.MyClaims_AddClaim_Btn()\nawait claims.ClaimSelect('Fitness/Gym Allowance')\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Amount('10000');\nawait utilFun.wait(3000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "7f3cc3f6-b33c-40e6-b581-650f612e2727",
              "parentUUID": "b404d456-fc51-45ef-9001-dec73d589a0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Delete Claim in Gym Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Delete Claim in Gym Allowance",
              "timedOut": false,
              "duration": 7765,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000)\nawait claims.MyClaims_MonthlyClaims_PersonalDevelopment_DeleteBtn()\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "59f0d3ac-f57c-48ef-a421-c30c1d06efd1",
              "parentUUID": "b404d456-fc51-45ef-9001-dec73d589a0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit Gym Allowance ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Submit Gym Allowance ",
              "timedOut": false,
              "duration": 14504,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000)\nawait claims.MyClaims_AddClaim_Btn()\nawait claims.ClaimSelect('Fitness/Gym Allowance')\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Amount('10000');\nawait utilFun.wait(3000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "34b0e9f9-e15c-42a6-9c4d-ccf356cfb5af",
              "parentUUID": "b404d456-fc51-45ef-9001-dec73d589a0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 2172,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait claims.MyClaims_ClaimsRequest_ShowAttachment()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn()",
              "err": {},
              "uuid": "8c5facfc-bbf0-4095-b1d3-b164a32fb200",
              "parentUUID": "b404d456-fc51-45ef-9001-dec73d589a0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Edit Claim of Gym Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Edit Claim of Gym Allowance",
              "timedOut": false,
              "duration": 12542,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait claims.MyClaims_ClaimsRequest_EditBtn_Hover();\nawait claims.MyClaims_ClaimsRequest_EditBtn();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ClaimsRequest_EditBtn_RecieptAmount('15000');\nawait claims.MyClaims_ClaimsRequest_EditBtn_Reason('10000');\nawait claims.MyClaims_ClaimsRequest_EditBtn_UpdateBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'The amount has been updated successfully!');",
              "err": {},
              "uuid": "a3c1a466-9319-4883-8407-f6f4a4868fe4",
              "parentUUID": "b404d456-fc51-45ef-9001-dec73d589a0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reviews Chart",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Reviews Chart",
              "timedOut": false,
              "duration": 6868,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait claims.MyClaims_ClaimsRequest_ReviewsSeeBtn()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn()",
              "err": {},
              "uuid": "c39ea275-7e90-4ffc-b417-31e87e6f5dd4",
              "parentUUID": "b404d456-fc51-45ef-9001-dec73d589a0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Add Reviews",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Add Reviews",
              "timedOut": false,
              "duration": 11250,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait claims.MyClaims_ClaimsRequest_AddReview();\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim request is reviewed successfully!');\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "7705ee83-32c2-4d08-bc5f-53b99b39b321",
              "parentUUID": "b404d456-fc51-45ef-9001-dec73d589a0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Approve Button",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Approve Button",
              "timedOut": false,
              "duration": 11872,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait claims.MyClaims_ClaimsRequest_ApproveBtn_Scroll()\nawait claims.MyClaims_ClaimsRequest_ApproveBtn()\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation')\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is approved successfully!');\n///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "63731d5e-f32d-45aa-b087-acea7d935dc6",
              "parentUUID": "b404d456-fc51-45ef-9001-dec73d589a0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review See Button in Approve Tab",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Review See Button in Approve Tab",
              "timedOut": false,
              "duration": 7023,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.MyClaims_ClaimsRequest_ReviewsSeeBtn()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn()",
              "err": {},
              "uuid": "e70e515c-dec7-4f39-953c-5537d9c2d67e",
              "parentUUID": "b404d456-fc51-45ef-9001-dec73d589a0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reject Button",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Reject Button",
              "timedOut": false,
              "duration": 11533,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait claims.MyClaims_ClaimsRequest_RejectBtn_Scroll()\nawait claims.MyClaims_ClaimsRequest_RejectBtn()\nawait claims.MyClaims_ClaimsRequest_TextArea('Rejected Claim for Test Automation')\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is rejected successfully!');\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "61901c87-904b-4e72-a317-18a4b1476471",
              "parentUUID": "b404d456-fc51-45ef-9001-dec73d589a0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reason See in Reject Tab ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Reason See in Reject Tab ",
              "timedOut": false,
              "duration": 6891,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.MyClaims_ClaimsRequest_RejectTab_ReasonBtn()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn()",
              "err": {},
              "uuid": "8ee036dc-4138-416f-8a0a-e96855d2ddf8",
              "parentUUID": "b404d456-fc51-45ef-9001-dec73d589a0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 8833,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(5000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "6e5ec502-cc8e-4b08-98f9-4e620a353c98",
              "parentUUID": "b404d456-fc51-45ef-9001-dec73d589a0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 16400,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2023-02-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "4a297326-a244-412c-a7c6-ba6b6907db76",
              "parentUUID": "b404d456-fc51-45ef-9001-dec73d589a0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Gym Allowance to Verify Incorrect Date ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be add claim in Gym Allowance to Verify Incorrect Date ",
              "timedOut": false,
              "duration": 14653,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000)\nawait claims.MyClaims_AddClaim_Btn()\nawait claims.ClaimSelect('Fitness/Gym Allowance')\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Amount('10000');\nawait utilFun.wait(3000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'You are not able to claim as the claim time is over.');",
              "err": {},
              "uuid": "03a9c099-243b-4353-acf1-a7a00ca1a2b3",
              "parentUUID": "b404d456-fc51-45ef-9001-dec73d589a0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Gym Allowance should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 15979,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n[\n    'DELETE FROM employee_claim_deadlines;',\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2024-12-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "2f895d93-f91c-4532-b3d3-2d92efb8f47a",
              "parentUUID": "b404d456-fc51-45ef-9001-dec73d589a0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Gym Allowance to Verify Correct Date ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be add claim in Gym Allowance to Verify Correct Date ",
              "timedOut": false,
              "duration": 14967,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000)\nawait claims.MyClaims_AddClaim_Btn()\nawait claims.ClaimSelect('Fitness/Gym Allowance')\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Amount('10000');\nawait utilFun.wait(3000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');\nlet querys =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n        'DELETE FROM employee_claim_deadlines;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "fd8596e8-4705-436d-ac92-8c962f5a2db2",
              "parentUUID": "b404d456-fc51-45ef-9001-dec73d589a0f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d9862e37-7667-48bc-b0a0-907c04557f14",
            "dd341cfb-ba35-496f-bf2f-491614d33030",
            "7f3cc3f6-b33c-40e6-b581-650f612e2727",
            "59f0d3ac-f57c-48ef-a421-c30c1d06efd1",
            "34b0e9f9-e15c-42a6-9c4d-ccf356cfb5af",
            "8c5facfc-bbf0-4095-b1d3-b164a32fb200",
            "a3c1a466-9319-4883-8407-f6f4a4868fe4",
            "c39ea275-7e90-4ffc-b417-31e87e6f5dd4",
            "7705ee83-32c2-4d08-bc5f-53b99b39b321",
            "63731d5e-f32d-45aa-b087-acea7d935dc6",
            "e70e515c-dec7-4f39-953c-5537d9c2d67e",
            "61901c87-904b-4e72-a317-18a4b1476471",
            "8ee036dc-4138-416f-8a0a-e96855d2ddf8",
            "6e5ec502-cc8e-4b08-98f9-4e620a353c98",
            "4a297326-a244-412c-a7c6-ba6b6907db76",
            "03a9c099-243b-4353-acf1-a7a00ca1a2b3",
            "2f895d93-f91c-4532-b3d3-2d92efb8f47a",
            "fd8596e8-4705-436d-ac92-8c962f5a2db2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 200563,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "6bf8a084-7740-4a73-b202-037a965d3c9c",
          "title": "Monthly Claims -> Marriage Bonus",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-marriage.js",
          "file": "/test/e2e/monthlyclaim/myclaims-marriage.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Upload Photo and click Close Button",
              "timedOut": false,
              "duration": 10386,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "19f4a5cd-5d80-4816-ae8a-cfd8316d506a",
              "parentUUID": "6bf8a084-7740-4a73-b202-037a965d3c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Upload Mulitiple Photos and click Close Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Upload Mulitiple Photos and click Close Button",
              "timedOut": false,
              "duration": 11292,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "53005376-cfdd-4da9-8284-3a5f3c00a377",
              "parentUUID": "6bf8a084-7740-4a73-b202-037a965d3c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus",
              "timedOut": false,
              "duration": 12412,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "b6f3e20c-2d13-4ae9-9e48-e4a20f9c009e",
              "parentUUID": "6bf8a084-7740-4a73-b202-037a965d3c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Edit Medical Claims",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Edit Medical Claims",
              "timedOut": false,
              "duration": 10713,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_EditBtn();\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0)\nawait utilFun.wait(1000);\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is updated successfully');",
              "err": {},
              "uuid": "0acd108d-689f-4402-a1ea-4d06b0d7799d",
              "parentUUID": "6bf8a084-7740-4a73-b202-037a965d3c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 33008,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Employee_FilterBtn();\nawait utilFun.wait(2000);\n// ///// Search By Claim Type\n// await claims.FilterSearchByClaimType('Personal Development Allowance');\n// await utilFun.wait(2000);\nawait claims.FilterSearchByClaimType('Fitness/Gym Allowance');\nawait utilFun.wait(2000);\nawait claims.FilterSearchByClaimType('Marriage Bonus');\n///// Search By Status\nawait claims.FilterSearchByStatus('Approved');\nawait claims.FilterSearchByStatus('Review');\nawait claims.FilterSearchByStatus('Pending');\nawait marriage_claims.Row_Assertion()\nawait utilFun.wait(4000);\nawait claims.MyClaims_Filter_ClearBtn()",
              "err": {},
              "uuid": "cd3abad0-c516-4520-a4a3-3314316fdf61",
              "parentUUID": "6bf8a084-7740-4a73-b202-037a965d3c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Show Attachment",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Show Attachment",
              "timedOut": false,
              "duration": 6929,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "20364fbc-e9c0-4038-a6e5-438c570396b4",
              "parentUUID": "6bf8a084-7740-4a73-b202-037a965d3c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Review Icon",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Review Icon",
              "timedOut": false,
              "duration": 6919,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon()\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "62325c4a-7cbc-441f-b52d-f54b2088ee6a",
              "parentUUID": "6bf8a084-7740-4a73-b202-037a965d3c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Delete Marriage Claims",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Delete Marriage Claims",
              "timedOut": false,
              "duration": 7749,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_DeleteBtn();\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "9a5d01c9-3fee-4455-a45b-0c3c08235b8d",
              "parentUUID": "6bf8a084-7740-4a73-b202-037a965d3c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus",
              "timedOut": false,
              "duration": 12445,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "af3f0b9c-a416-4c3b-aa1c-cb77f1e9328f",
              "parentUUID": "6bf8a084-7740-4a73-b202-037a965d3c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 5866,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "4030b04a-7087-4063-8b0e-418c42ca0b83",
              "parentUUID": "6bf8a084-7740-4a73-b202-037a965d3c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 37875,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(4000);\nawait claims.MyClaims_FilterBtn();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\nawait claims.HRFilterSearchByClaimType('Personal Development Allowance');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Filter_HR_SearchByClaim_CrossIcon();\nawait claims.HRFilterSearchByClaimType('Fitness/Gym Allowance');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_HR_SearchByClaim_CrossIcon();\nawait claims.HRFilterSearchByClaimType('Marriage Bonus');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Filter_StartDate('2023-11-08');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2023-11-11')\nawait utilFun.wait(4000);\n/// Verify Results\nawait claims.Row_Assertion()\nawait claims.MyClaims_Filter_ClearBtn();",
              "err": {},
              "uuid": "e9224676-a2f1-4d5b-afac-61864c9894b0",
              "parentUUID": "6bf8a084-7740-4a73-b202-037a965d3c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Add Reviews",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role Add Reviews",
              "timedOut": false,
              "duration": 11374,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait marriage_claims.MyClaims_ClaimRequest_AddReview()\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim request is reviewed successfully!');\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "6690b09f-3018-4181-8ec1-24463d3afaa1",
              "parentUUID": "6bf8a084-7740-4a73-b202-037a965d3c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role in Approve Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role in Approve Button",
              "timedOut": false,
              "duration": 11204,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait marriage_claims.MyClaims_ClaimRequest_ApproveBtn();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Button for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is approved successfully!');\n///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "7a7ac3d6-d676-475a-a2b2-e813771d1fc3",
              "parentUUID": "6bf8a084-7740-4a73-b202-037a965d3c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Approve Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be Verify Approve Claim in Applicant Side",
              "timedOut": false,
              "duration": 8033,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_CheckHRStatus_Scroll();\nawait claims.MyClaims_CheckHRStatus();\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "a8e74d6c-22ee-4409-9fc3-129c01f78f2c",
              "parentUUID": "6bf8a084-7740-4a73-b202-037a965d3c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role in Rejection Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role in Rejection Button",
              "timedOut": false,
              "duration": 15530,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait marriage_claims.MyClaims_ClaimRequest_RejectBtn();\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Button for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is rejected successfully!');\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "9f524171-7505-4bdb-8fa6-5c44509575fa",
              "parentUUID": "6bf8a084-7740-4a73-b202-037a965d3c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Reject Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be Verify Reject Claim in Applicant Side",
              "timedOut": false,
              "duration": 10016,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "0991400e-a74c-4083-9e49-bff5a93699a6",
              "parentUUID": "6bf8a084-7740-4a73-b202-037a965d3c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 16061,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9474;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2023-02-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "ec725617-1a4d-439b-b7fc-45bbd1364550",
              "parentUUID": "6bf8a084-7740-4a73-b202-037a965d3c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus for Verify Incorrect Deadline",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus for Verify Incorrect Deadline",
              "timedOut": false,
              "duration": 12500,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'You are not able to claim as the claim time is over.');",
              "err": {},
              "uuid": "6ef03f1c-27d5-4add-85f0-5e00cd914de3",
              "parentUUID": "6bf8a084-7740-4a73-b202-037a965d3c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 16119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n[\n    'DELETE FROM employee_claim_deadlines;',\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9474;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2024-12-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "6bd6a95c-e3aa-4e24-b0fc-1bb3906da29d",
              "parentUUID": "6bf8a084-7740-4a73-b202-037a965d3c9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus for Verify Correct Deadline",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus for Verify Correct Deadline",
              "timedOut": false,
              "duration": 12688,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');\nlet querys =\n[\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n    'DELETE FROM employee_claim_deadlines;'\n];\n    await utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "dbd8f2af-819c-4406-a9fe-badd813a9f79",
              "parentUUID": "6bf8a084-7740-4a73-b202-037a965d3c9c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "19f4a5cd-5d80-4816-ae8a-cfd8316d506a",
            "53005376-cfdd-4da9-8284-3a5f3c00a377",
            "b6f3e20c-2d13-4ae9-9e48-e4a20f9c009e",
            "0acd108d-689f-4402-a1ea-4d06b0d7799d",
            "cd3abad0-c516-4520-a4a3-3314316fdf61",
            "20364fbc-e9c0-4038-a6e5-438c570396b4",
            "62325c4a-7cbc-441f-b52d-f54b2088ee6a",
            "9a5d01c9-3fee-4455-a45b-0c3c08235b8d",
            "af3f0b9c-a416-4c3b-aa1c-cb77f1e9328f",
            "4030b04a-7087-4063-8b0e-418c42ca0b83",
            "e9224676-a2f1-4d5b-afac-61864c9894b0",
            "6690b09f-3018-4181-8ec1-24463d3afaa1",
            "7a7ac3d6-d676-475a-a2b2-e813771d1fc3",
            "a8e74d6c-22ee-4409-9fc3-129c01f78f2c",
            "9f524171-7505-4bdb-8fa6-5c44509575fa",
            "0991400e-a74c-4083-9e49-bff5a93699a6",
            "ec725617-1a4d-439b-b7fc-45bbd1364550",
            "6ef03f1c-27d5-4add-85f0-5e00cd914de3",
            "6bd6a95c-e3aa-4e24-b0fc-1bb3906da29d",
            "dbd8f2af-819c-4406-a9fe-badd813a9f79"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 269119,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
          "title": "Monthly Claims -> Medicals",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-medical.js",
          "file": "/test/e2e/monthlyclaim/myclaims-medical.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button",
              "fullTitle": "Monthly Claims -> Medicals should be able to Upload Photo and click Close Button",
              "timedOut": false,
              "duration": 10557,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "ec683426-251b-42c0-8e06-6755ce09ef48",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Upload Multiple Photos and click Close Button",
              "fullTitle": "Monthly Claims -> Medicals should be able to Upload Multiple Photos and click Close Button",
              "timedOut": false,
              "duration": 13863,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0);\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1500', 1);\nawait medical_claims.MyClaims_AddClaim_AddRow(1);\nawait medical_claims.MyClaims_AddClaim_AddRow(2);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_DeleteRow(1);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "c63a959a-faaf-48b3-b8a2-5a401a37ffc8",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Add New Row and Delete Row",
              "fullTitle": "Monthly Claims -> Medicals should be able to Add New Row and Delete Row",
              "timedOut": false,
              "duration": 15297,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait utilFun.wait(5000);\nawait medical_claims.Row_Assertion();\nawait medical_claims.MyClaims_AddClaim_DeleteRow(1)",
              "err": {},
              "uuid": "b2df02ef-8c92-4e15-b33c-3f348135af20",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Add and Delete Attachments",
              "fullTitle": "Monthly Claims -> Medicals should be able to Add and Delete Attachments",
              "timedOut": false,
              "duration": 12534,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(5000);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0)",
              "err": {},
              "uuid": "41bb17a8-8d9a-4302-a162-2d9884fe9bc1",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to click Cancel Button",
              "fullTitle": "Monthly Claims -> Medicals should be able to click Cancel Button",
              "timedOut": false,
              "duration": 12243,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(5000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "a988fadc-e96e-4f55-bd79-3eab82ac460c",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims",
              "timedOut": false,
              "duration": 17268,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "f4378cfc-8660-499a-bf17-328aae8030c1",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Edit Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Edit Medical Claims",
              "timedOut": false,
              "duration": 8951,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_EditBtn();\nawait medical_claims.MyClaims_AddClaim_DeleteRow(1)\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is updated successfully');",
              "err": {},
              "uuid": "a00e10ff-1867-491f-a25b-0947da8a3984",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Medicals should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 37991,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Employee_FilterBtn();\nawait utilFun.wait(4000);\nawait claims.FilterSearchByClaimType('Medical Coverage');\nawait utilFun.wait(4000);\nawait claims.FilterSearchByClaimType('Fitness/Gym Allowance');\nawait utilFun.wait(4000);\nawait claims.FilterSearchByClaimType('Personal Development Allowance');\nawait claims.FilterSearchByStatus('Approved');\nawait claims.FilterSearchByStatus('Review');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Filter_ClearBtn()",
              "err": {},
              "uuid": "8293b995-1af0-4e4f-90dd-7dc3e759950d",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Delete Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Delete Medical Claims",
              "timedOut": false,
              "duration": 7779,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_DeleteBtn();\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "49a965bd-7e9b-4e4f-bd7e-77f5268537c1",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims",
              "timedOut": false,
              "duration": 15368,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "51b229cb-597f-48c1-963a-50693eba61b5",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 2215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();",
              "err": {},
              "uuid": "3acacf3e-2edf-434d-af43-d2f3c5351d53",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review Flow",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Review Flow",
              "timedOut": false,
              "duration": 19992,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(1);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim request is reviewed successfully!');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet query =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "0aed6215-06f8-408c-bdac-2f7681a1f6a6",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims for Approve Flow",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims for Approve Flow",
              "timedOut": false,
              "duration": 15360,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "fe74e432-7a5e-453d-91d8-2deeff8168b6",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Edit Reciept Amount",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Show Edit Reciept Amount",
              "timedOut": false,
              "duration": 41950,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_FirstChildClaim_EditAmount_Hover()\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_EditAmount(0);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_RecieptAmount('2500')\nawait utilFun.wait(1000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_Reason('Reason for edit amount')\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'The receipt amount has been updated successfully!');\nawait utilFun.wait(3000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_SecondChildClaim_EditAmount_Hover();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_EditAmount(0);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_RecieptAmount('5000')\nawait utilFun.wait(1000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_Reason('Reason for edit amount')\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox()\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'The receipt amount has been updated successfully!');",
              "err": {},
              "uuid": "2f97e520-b17a-424b-a07e-9dbe55ca1ecb",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Approve Medicals",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Approve Medicals",
              "timedOut": false,
              "duration": 26739,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'The status has been updated successfully!');\nawait utilFun.wait(3000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'The status has been updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nawait utilFun.wait(3000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "d5f1d8d9-1fd6-439a-91b4-ae42aa31e7cd",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims for Reject Flow",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims for Reject Flow",
              "timedOut": false,
              "duration": 15437,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "d9d67a8b-fd83-4e6e-9779-eb318b623d0b",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reject Medicals",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Reject Medicals",
              "timedOut": false,
              "duration": 28751,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'The status has been updated successfully!');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'The status has been updated successfully!');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "7764eb39-2ceb-4078-bd0d-5f0a7aa273a9",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be  Verify Reject Tab and check Show Attachment ",
              "fullTitle": "Monthly Claims -> Medicals should be  Verify Reject Tab and check Show Attachment ",
              "timedOut": false,
              "duration": 9022,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "50891e24-0ce8-4cd3-80df-e1ce6a4dc965",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be  Verify Reject Tab and Check Review Icon  ",
              "fullTitle": "Monthly Claims -> Medicals should be  Verify Reject Tab and Check Review Icon  ",
              "timedOut": false,
              "duration": 9117,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "59e49bea-9ea7-40de-9fd3-c0ea649b659e",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Medicals should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 8055,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "43395d02-a65d-4522-89d6-99596c8920d6",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Medicals should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 16037,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2023-02-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "005f8bea-8d8f-442d-8360-19676439b417",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims Verify Incorrect Deadline",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims Verify Incorrect Deadline",
              "timedOut": false,
              "duration": 17274,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'You are not able to claim as the claim time is over.');",
              "err": {},
              "uuid": "218d6c58-0831-4783-a4b9-6255b7582ee7",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Medicals should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 16135,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        'DELETE FROM employee_claim_deadlines;',\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2024-12-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "f0904831-80d0-478f-83d1-bfb6853b6704",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims Verify Correct Deadline",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims Verify Correct Deadline",
              "timedOut": false,
              "duration": 17255,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');\nlet querys =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n        'DELETE FROM employee_claim_deadlines;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "a4f6af95-aae6-4152-b7c8-91298e40f613",
              "parentUUID": "2e8c6273-46d2-4403-8c7a-b380fef67e7c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ec683426-251b-42c0-8e06-6755ce09ef48",
            "c63a959a-faaf-48b3-b8a2-5a401a37ffc8",
            "b2df02ef-8c92-4e15-b33c-3f348135af20",
            "41bb17a8-8d9a-4302-a162-2d9884fe9bc1",
            "a988fadc-e96e-4f55-bd79-3eab82ac460c",
            "f4378cfc-8660-499a-bf17-328aae8030c1",
            "a00e10ff-1867-491f-a25b-0947da8a3984",
            "8293b995-1af0-4e4f-90dd-7dc3e759950d",
            "49a965bd-7e9b-4e4f-bd7e-77f5268537c1",
            "51b229cb-597f-48c1-963a-50693eba61b5",
            "3acacf3e-2edf-434d-af43-d2f3c5351d53",
            "0aed6215-06f8-408c-bdac-2f7681a1f6a6",
            "fe74e432-7a5e-453d-91d8-2deeff8168b6",
            "2f97e520-b17a-424b-a07e-9dbe55ca1ecb",
            "d5f1d8d9-1fd6-439a-91b4-ae42aa31e7cd",
            "d9d67a8b-fd83-4e6e-9779-eb318b623d0b",
            "7764eb39-2ceb-4078-bd0d-5f0a7aa273a9",
            "50891e24-0ce8-4cd3-80df-e1ce6a4dc965",
            "59e49bea-9ea7-40de-9fd3-c0ea649b659e",
            "43395d02-a65d-4522-89d6-99596c8920d6",
            "005f8bea-8d8f-442d-8360-19676439b417",
            "218d6c58-0831-4783-a4b9-6255b7582ee7",
            "f0904831-80d0-478f-83d1-bfb6853b6704",
            "a4f6af95-aae6-4152-b7c8-91298e40f613"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 395190,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
          "title": "Monthly Claims -> OverTime Claims",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-overtime.js",
          "file": "/test/e2e/monthlyclaim/myclaims-overtime.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Check Close Button ",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Check Close Button ",
              "timedOut": false,
              "duration": 11752,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn_Assertion()",
              "err": {},
              "uuid": "db0ed032-0507-47c2-8bbd-1059e5325583",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Check Cancel Button ",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Check Cancel Button ",
              "timedOut": false,
              "duration": 11709,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-11' where id = 1;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 780 , \"date\" = '2023-09-12' where id = 2;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-13' where id = 3;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-14' where id = 4;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-15' where id = 5;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-15' where id = 6;`\n\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "09634001-1bac-486f-ab13-74a486d36206",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to submit Overtime",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to submit Overtime",
              "timedOut": false,
              "duration": 31674,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\nawait overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "ad61b9f5-074e-4e8b-9734-579a7cb7b229",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details and Plus Icon",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details and Plus Icon",
              "timedOut": false,
              "duration": 10437,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "4a42590c-d36c-4ae0-a01d-d4c7c90167c4",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Delete Button",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Delete Button",
              "timedOut": false,
              "duration": 7909,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_DeleteButton(0)\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "152b90da-88f3-47dc-ab24-bb410e1c0d07",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Overtime",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Submit Overtime",
              "timedOut": false,
              "duration": 32109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\nawait overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "bfe7372d-54be-4929-a29d-07ba0aba93df",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to click Show Details",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to click Show Details",
              "timedOut": false,
              "duration": 21704,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"managerId\" = 9429 WHERE \"employeeId\" = 9429;`,\n    `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'project_manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 118 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = 2 WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.wait(5000)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(8000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "17eb0b58-6168-44c3-89b5-815ce7254f82",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Filter Button",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Filter Button",
              "timedOut": false,
              "duration": 21538,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_PMSide_FilterButton();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\nawait claims.HRFilterSearchByClaimType('Overtime');\nawait utilFun.wait(1000);\n/// Start and End Date Filter\nawait claims.MyClaims_Filter_StartDate('2023-01-04');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2024-01-04')\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "44793cf2-5897-48f9-9d93-13e10d63baf1",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Review Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Review Flow",
              "timedOut": false,
              "duration": 16454,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Action_ReviewIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(5000)\n/// Verify Data in Review Tab\nawait overtime_claims.MyClaims_ReviewTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "de5154d2-c3dd-4b59-aebc-5cdc7f30f499",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Reject Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Reject Flow",
              "timedOut": false,
              "duration": 11367,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Action_RejectIcon()\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Data in Reject Tab\nawait overtime_claims.MyClaims_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "e8a8d619-a788-4247-b747-744e68e38f72",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Approve Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Approve Flow",
              "timedOut": false,
              "duration": 13343,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(5000);\nawait overtime_claims.MyClaims_Action_ApproveIcon();\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n/// Verify Data in Approve Tab\nawait overtime_claims.MyClaims_ApproveTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "e5aacff9-ead4-4523-805b-8abb4a62a2cd",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details",
              "timedOut": false,
              "duration": 12348,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "9e46fcf3-c9b4-4442-ad72-14e0363132c7",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be HR Role Review Flow",
              "timedOut": false,
              "duration": 16382,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\n        await utilFun.wait(2000)\n        await overtime_claims.MyClaims_Action_ReviewIcon(0);\n        await claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\n        await claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\n        const flashMessages = await claims.checkAlert();\n        utilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\n        await utilFun.wait(3000)\n        /// Verify Data in Review Tab\n        await claims.MyClaims_ClaimsRequest_ReviewTab();\n        await claims.Row_Assertion()\n        await utilFun.wait(3000)",
              "err": {},
              "uuid": "c56d8e8e-3d14-4624-bf0f-1d3f27ee7c2a",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Approve Claim by HR",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Approve Claim by HR",
              "timedOut": false,
              "duration": 18352,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(5000);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_ApproveIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "3b39bca2-aa5e-4d0b-9ac2-b453d4498fd7",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Reject Claim by HR",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Reject Claim by HR",
              "timedOut": false,
              "duration": 16626,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_RejectIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait utilFun.wait(3000)\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "0ebacd4f-05bf-4cf8-b6a4-3eef2bf92725",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Reject Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Verify Reject Claim in Applicant Side",
              "timedOut": false,
              "duration": 14266,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nconst flashMessages = await overtime_claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Reject for Test Automation');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\nlet query =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "d19761a5-d2b9-43bb-90c4-fc6285d8c99a",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit OverTime as a Project Manager (Employee)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Submit OverTime as a Project Manager (Employee)",
              "timedOut": false,
              "duration": 35802,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'project_manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 118 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = 2 WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Sumera Shaikh')\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\nawait overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "20b61e30-ba66-4623-bd3d-87a5b241f67c",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details (HOD Side)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details (HOD Side)",
              "timedOut": false,
              "duration": 11777,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"managerId\" = 9429 WHERE \"employeeId\" = 9429;`,\n    `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'dev' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 83 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = 9429 WHERE id = 9;',\n    //// change manager id\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(5000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(3000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(2000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "0bf52960-2531-475d-9b91-4bb2d5c101b7",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Filter Button (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Filter Button (HOD Scenario)",
              "timedOut": false,
              "duration": 21316,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_PMSide_FilterButton();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\nawait claims.HRFilterSearchByClaimType('Overtime');\nawait utilFun.wait(1000);\n/// Start and End Date Filter\nawait claims.MyClaims_Filter_StartDate('2024-01-04');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2024-01-04')\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "fb81d089-f56b-4da4-95d4-592ac65ad5e3",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Review Flow (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Review Flow (HOD Scenario)",
              "timedOut": false,
              "duration": 20338,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(3000);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_Action_ReviewIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(5000)\n/// Verify Data in Review Tab\nawait overtime_claims.MyClaims_ReviewTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "299d555f-f385-4ee3-89c8-9786592c8700",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Reject Flow (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Reject Flow (HOD Scenario)",
              "timedOut": false,
              "duration": 11253,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Action_RejectIcon()\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Data in Reject Tab\nawait overtime_claims.MyClaims_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "0a6b443e-8abd-4a04-8db8-6ca9ebfee032",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Approve Flow (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Approve Flow (HOD Scenario)",
              "timedOut": false,
              "duration": 13347,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(5000);\nawait overtime_claims.MyClaims_Action_ApproveIcon();\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n/// Verify Data in Approve Tab\nawait overtime_claims.MyClaims_ApproveTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "ff9d9784-c599-4e1d-b5ff-0bd5031549e3",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details (HR Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details (HR Scenario)",
              "timedOut": false,
              "duration": 9585,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "e444f588-614f-4cf2-ab5f-ac9441c1531c",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review Flow (HR Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be HR Role Review Flow (HR Scenario)",
              "timedOut": false,
              "duration": 16452,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait overtime_claims.MyClaims_Action_ReviewIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(3000)\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nawait utilFun.wait(3000)",
              "err": {},
              "uuid": "31eaaaf0-fe55-45fe-8c1e-27ffed2341b1",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Approve Claim by HR (HR Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Approve Claim by HR (HR Scenario)",
              "timedOut": false,
              "duration": 18369,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(5000);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_ApproveIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "2ee4a005-e1d1-46bf-940b-fda936f16766",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Reject Claim by HR",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Reject Claim by HR",
              "timedOut": false,
              "duration": 16198,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_RejectIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait utilFun.wait(3000)\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "3b77e58f-4ed0-4149-a22c-4e93bef811e0",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Reject Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Verify Reject Claim in Applicant Side",
              "timedOut": false,
              "duration": 13954,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'project_manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 118 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = 2 WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nconst flashMessages = await overtime_claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Reject for Test Automation');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "0100c9a0-b4f8-40c0-bcbd-82d409339ff6",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Download CSV",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Download CSV",
              "timedOut": false,
              "duration": 21574,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_ClaimRequest_DownloadBtn()\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Filter_StartDate('2024-01-01');\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_Filter_EndDate('2024-01-15');\nawait claims.ClaimStatus('Pending');\nawait utilFun.wait(1000);\nawait claims.ClaimStatus('Rejected');\nawait claims.MyClaims_ClaimRequest_DownloadBtn_MainDownloadBtn()\nawait utilFun.wait(1000);\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "a9ca815d-36a7-482b-97ee-35f09f1c4b01",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 17963,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineDate_ClearHover();\nawait overtime_claims.MyClaims_DeadlineDate_ClearBtn();\nawait overtime_claims.MyClaims_Deadline_Date('2023-03-12 20:48:11');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "93a39961-d9df-4b4e-96fa-cf174dc5eae9",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit OverTime with Wrong Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Submit OverTime with Wrong Deadline Date",
              "timedOut": false,
              "duration": 22700,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Furqan Aziz')\nawait utilFun.wait(1000);\n// await overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\n// await overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Overtime claim is only allow for current month');\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);",
              "err": {},
              "uuid": "f5983643-6f88-4ade-81dc-fcc2c4bdf9ff",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Set Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Set Deadline Date",
              "timedOut": false,
              "duration": 17872,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        'DELETE FROM employee_claim_deadlines;',\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineDate_ClearHover();\nawait overtime_claims.MyClaims_DeadlineDate_ClearBtn();\nawait overtime_claims.MyClaims_Deadline_Date('2024-03-12 20:48:11');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "ab0203ad-7f11-4799-91bd-001df9475ac7",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit OverTime as a SQA Automation(Employee) to Verify with Correct Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Submit OverTime as a SQA Automation(Employee) to Verify with Correct Deadline Date",
              "timedOut": false,
              "duration": 30635,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Furqan Aziz')\n// await utilFun.wait(1000);\n// await overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\n// await overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');\n let querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n        'DELETE FROM employee_claim_deadlines;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "8b31a43e-1ac4-400a-ba0b-4f42cec45f26",
              "parentUUID": "57adc0e5-13d8-4165-8e6c-3d6a28735d2d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "db0ed032-0507-47c2-8bbd-1059e5325583",
            "09634001-1bac-486f-ab13-74a486d36206",
            "ad61b9f5-074e-4e8b-9734-579a7cb7b229",
            "4a42590c-d36c-4ae0-a01d-d4c7c90167c4",
            "152b90da-88f3-47dc-ab24-bb410e1c0d07",
            "bfe7372d-54be-4929-a29d-07ba0aba93df",
            "17eb0b58-6168-44c3-89b5-815ce7254f82",
            "44793cf2-5897-48f9-9d93-13e10d63baf1",
            "de5154d2-c3dd-4b59-aebc-5cdc7f30f499",
            "e8a8d619-a788-4247-b747-744e68e38f72",
            "e5aacff9-ead4-4523-805b-8abb4a62a2cd",
            "9e46fcf3-c9b4-4442-ad72-14e0363132c7",
            "c56d8e8e-3d14-4624-bf0f-1d3f27ee7c2a",
            "3b39bca2-aa5e-4d0b-9ac2-b453d4498fd7",
            "0ebacd4f-05bf-4cf8-b6a4-3eef2bf92725",
            "d19761a5-d2b9-43bb-90c4-fc6285d8c99a",
            "20b61e30-ba66-4623-bd3d-87a5b241f67c",
            "0bf52960-2531-475d-9b91-4bb2d5c101b7",
            "fb81d089-f56b-4da4-95d4-592ac65ad5e3",
            "299d555f-f385-4ee3-89c8-9786592c8700",
            "0a6b443e-8abd-4a04-8db8-6ca9ebfee032",
            "ff9d9784-c599-4e1d-b5ff-0bd5031549e3",
            "e444f588-614f-4cf2-ab5f-ac9441c1531c",
            "31eaaaf0-fe55-45fe-8c1e-27ffed2341b1",
            "2ee4a005-e1d1-46bf-940b-fda936f16766",
            "3b77e58f-4ed0-4149-a22c-4e93bef811e0",
            "0100c9a0-b4f8-40c0-bcbd-82d409339ff6",
            "a9ca815d-36a7-482b-97ee-35f09f1c4b01",
            "93a39961-d9df-4b4e-96fa-cf174dc5eae9",
            "f5983643-6f88-4ade-81dc-fcc2c4bdf9ff",
            "ab0203ad-7f11-4799-91bd-001df9475ac7",
            "8b31a43e-1ac4-400a-ba0b-4f42cec45f26"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 567105,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "ab2d361b-8cdc-4c46-9111-60a52e5c7120",
          "title": "Monthly Claims -> Personal Development Fund",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-pdf.js",
          "file": "/test/e2e/monthlyclaim/myclaims-pdf.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able one File Upload and close button in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be able one File Upload and close button in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "a8d93779-fd2a-4430-ad2e-3d9728d80659",
              "parentUUID": "ab2d361b-8cdc-4c46-9111-60a52e5c7120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able multiple File Upload & Cancel Button in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be able multiple File Upload & Cancel Button in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "f773419c-ac95-4d43-b561-3cfcacf29b9f",
              "parentUUID": "ab2d361b-8cdc-4c46-9111-60a52e5c7120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "d7066974-cde7-468f-a917-d979b1c9a50b",
              "parentUUID": "ab2d361b-8cdc-4c46-9111-60a52e5c7120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Delete Claim in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be Delete Claim in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "1181993c-0825-4004-9bf2-783a42b23cbf",
              "parentUUID": "ab2d361b-8cdc-4c46-9111-60a52e5c7120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "cab28409-6bd0-4174-aebc-587808b9c1b4",
              "parentUUID": "ab2d361b-8cdc-4c46-9111-60a52e5c7120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "b8d9ea36-9e55-452a-8139-0bb307d69e0c",
              "parentUUID": "ab2d361b-8cdc-4c46-9111-60a52e5c7120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Edit Claim of Personal Development Allowance",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Edit Claim of Personal Development Allowance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "cbc26d69-6b56-4460-965e-0c1f72adf2b1",
              "parentUUID": "ab2d361b-8cdc-4c46-9111-60a52e5c7120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reviews Chart",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Reviews Chart",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "6d566d96-8418-417e-af17-5527d5a80a45",
              "parentUUID": "ab2d361b-8cdc-4c46-9111-60a52e5c7120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Add Reviews",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Add Reviews",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "3e35a6ac-0983-46f5-afa9-056387badca4",
              "parentUUID": "ab2d361b-8cdc-4c46-9111-60a52e5c7120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Approve Button",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Approve Button",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "fdde3ac7-231d-4cb0-8ae0-82ec555b8186",
              "parentUUID": "ab2d361b-8cdc-4c46-9111-60a52e5c7120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review See Button in Approve Tab",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Review See Button in Approve Tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "4c048721-390a-4227-943e-1195f8f61faf",
              "parentUUID": "ab2d361b-8cdc-4c46-9111-60a52e5c7120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reject Button",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Reject Button",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "83e0e5dc-fe3c-44f6-9f9e-6c057724ee99",
              "parentUUID": "ab2d361b-8cdc-4c46-9111-60a52e5c7120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reason See in Reject Tab ",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Reason See in Reject Tab ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "1850898e-4b94-4c57-b09b-187bfd8618fd",
              "parentUUID": "ab2d361b-8cdc-4c46-9111-60a52e5c7120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "5a3849a7-de4e-4d35-8055-66316d480dda",
              "parentUUID": "ab2d361b-8cdc-4c46-9111-60a52e5c7120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e40e965f-5e24-4ab0-ad1b-e6bc00de2396",
              "parentUUID": "ab2d361b-8cdc-4c46-9111-60a52e5c7120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund for Verify Incorrect Deadline",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund for Verify Incorrect Deadline",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "cd81d4b4-f61d-4684-ba55-014176f7271b",
              "parentUUID": "ab2d361b-8cdc-4c46-9111-60a52e5c7120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "001b7724-4c00-4754-94ce-1ecd970e30a1",
              "parentUUID": "ab2d361b-8cdc-4c46-9111-60a52e5c7120",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund for Verify Correct Deadline",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund for Verify Correct Deadline",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "39f6c235-82ab-47c8-9d76-12f8b9ac44ce",
              "parentUUID": "ab2d361b-8cdc-4c46-9111-60a52e5c7120",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "a8d93779-fd2a-4430-ad2e-3d9728d80659",
            "f773419c-ac95-4d43-b561-3cfcacf29b9f",
            "d7066974-cde7-468f-a917-d979b1c9a50b",
            "1181993c-0825-4004-9bf2-783a42b23cbf",
            "cab28409-6bd0-4174-aebc-587808b9c1b4",
            "b8d9ea36-9e55-452a-8139-0bb307d69e0c",
            "cbc26d69-6b56-4460-965e-0c1f72adf2b1",
            "6d566d96-8418-417e-af17-5527d5a80a45",
            "3e35a6ac-0983-46f5-afa9-056387badca4",
            "fdde3ac7-231d-4cb0-8ae0-82ec555b8186",
            "4c048721-390a-4227-943e-1195f8f61faf",
            "83e0e5dc-fe3c-44f6-9f9e-6c057724ee99",
            "1850898e-4b94-4c57-b09b-187bfd8618fd",
            "5a3849a7-de4e-4d35-8055-66316d480dda",
            "e40e965f-5e24-4ab0-ad1b-e6bc00de2396",
            "cd81d4b4-f61d-4684-ba55-014176f7271b",
            "001b7724-4c00-4754-94ce-1ecd970e30a1",
            "39f6c235-82ab-47c8-9d76-12f8b9ac44ce"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
          "title": "Portfolio Module",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/portfolio/spec-1-portfolio.js",
          "file": "/test/e2e/portfolio/spec-1-portfolio.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Portfolio Module\"",
              "fullTitle": "Portfolio Module \"before all\" hook in \"Portfolio Module\"",
              "timedOut": false,
              "duration": 15507,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet portfolioId = await utilFun.getFromDatabase(`SELECT id FROM project_portfolios WHERE \"name\" = '${portfolioName}';`)\nif(portfolioId.rowCount !== 0){\nconst query = [\n  `DELETE FROM project_portfolio_attachments WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n  `DELETE FROM project_portfolio_skills WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n  `DELETE FROM project_portfolio_employees WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n  `DELETE FROM project_portfolios WHERE id = ${portfolioId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n  }",
              "err": {},
              "uuid": "d91ce105-d286-45a2-8244-6db1f8dacf98",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Portfolio Module\"",
              "fullTitle": "Portfolio Module \"before each\" hook in \"Portfolio Module\"",
              "timedOut": false,
              "duration": 4580,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/portfolio');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "c0f3c1a9-62af-4239-b779-93bd990196bc",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if Portfolio is showing",
              "fullTitle": "Portfolio Module should check if Portfolio is showing",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/portfolio');",
              "err": {},
              "uuid": "47da9fd9-8372-413a-ad55-f8dfc761832d",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add Portfolio",
              "fullTitle": "Portfolio Module should able to Add Portfolio",
              "timedOut": false,
              "duration": 25058,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickAddPorfolioBtn()\nawait portfolio.typeProjectName(portfolioName)\nawait portfolio.pasteLiveLink('http://google.com')\nawait portfolio.selectProjectStatus('Active')\nawait portfolio.selectPOC('Muhammad Bilal Rafaqat')\nawait portfolio.selectIndustry('Gaming')\nawait portfolio.selectProjectNature('Web App')\nawait portfolio.typeProjectDescription('testing')\nawait portfolio.clickYesCheckbox()\nawait portfolio.clickNotNowCheckbox()\nawait portfolio.clickFormNxtBtn()\nawait portfolio.clickFormNewNxtBtn()\nawait portfolio.selectEngagementModel('Fixed Term')\nawait portfolio.selectClientRegion('Germany')\nawait portfolio.selectDivision('InvoTeams')\nawait portfolio.selectTechStack('Node Js')\nawait portfolio.typeTag('testing')\nawait portfolio.selectResource('Hello')\nawait portfolio.selectRole('Lead Developer')\nawait portfolio.clickForm1NxtBtn()\nawait portfolio.selectDemoLinkUpdate('Web App')\nawait portfolio.typeDemoLinkLink('link')\nawait portfolio.typeDemoLinkDetails('testing')\nawait portfolio.selectAchievementsUpdate('Awards')\nawait portfolio.typeAchievementsLink('Link')\nawait portfolio.typeAchievementsDetails('testing')\nawait portfolio.typeGitUpdate('test')\nawait portfolio.typeGitLink('link')\nawait portfolio.typeGitDetails('testing')\nawait portfolio.clickForm2NxtBtn()\nawait portfolio.typeVideoTitle('Video Title')\nawait portfolio.uploadVideoFile()\nawait portfolio.typeDocTitle('Doc Title')\nawait portfolio.uploadDocFile()\nawait portfolio.typeProblemsOrChallenges('testing')\nawait portfolio.typeSolutions('testing')\nawait portfolio.clickForm3SubmitBtn()\nconst alertText = await portfolio.checkAlert();\nutilFun.assertEql(alertText, 'Portfolio has been saved successfully');",
              "err": {},
              "uuid": "2b2685c2-c12e-4b98-aa0e-57e08defda01",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if Portfolio is Added or Not",
              "fullTitle": "Portfolio Module should able to check if Portfolio is Added or Not",
              "timedOut": false,
              "duration": 1164,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.selectPortfolioName(portfolioName)\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {},
              "uuid": "ff195cd4-069c-4abc-94ba-ff1355be679c",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Update Portfolio",
              "fullTitle": "Portfolio Module should able to Update Portfolio",
              "timedOut": false,
              "duration": 30493,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.selectPortfolioName(portfolioName)\nawait portfolio.clickEditButton()\nawait portfolio.pasteLiveLink('http://google2.com')\nawait portfolio.selectProjectStatus('Closing')\nawait portfolio.selectPOC('Muhammad Bilal Rafaqat')\nawait portfolio.selectIndustry('Education')\nawait portfolio.selectProjectNature('IOS App')\nawait portfolio.typeProjectDescription('testing updated')\nawait portfolio.clickYesCheckbox()\nawait portfolio.clickNotNowCheckbox()\nawait portfolio.clickFormNxtBtn()\nawait portfolio.clickFormNewNxtBtn()\nawait portfolio.selectEngagementModel('Fixed Term')\nawait portfolio.selectClientRegion('Pakistan')\nawait portfolio.selectDivision('Invogame')\nawait portfolio.selectTechStack('Frontend')\nawait portfolio.typeTag('Updated Tag')\nawait portfolio.selectResource('Hello')\nawait portfolio.selectRole('Lead Developer')\nawait portfolio.clickForm1NxtBtn()\nawait portfolio.selectDemoLinkUpdate('Desktop App')\nawait portfolio.typeDemoLinkLink('updated')\nawait portfolio.typeDemoLinkDetails('update')\nawait portfolio.selectAchievementsUpdate('Shoutouts')\nawait portfolio.typeAchievementsLink('Link updated')\nawait portfolio.typeAchievementsDetails('testing updated')\nawait portfolio.typeGitUpdate('test updated')\nawait portfolio.typeGitLink('link updated')\nawait portfolio.typeGitDetails('testing updated')\nawait portfolio.clickForm2NxtBtn()\nawait portfolio.typeVideoTitle('Video Title Updated')\nawait portfolio.uploadVideoFile()\nawait portfolio.typeDocTitle('Doc Title updated')\nawait portfolio.uploadDocFile()\nawait portfolio.typeProblemsOrChallenges('testing updated')\nawait portfolio.typeSolutions('testing updated')\nawait portfolio.clickForm3SubmitBtn()\nconst alertText = await portfolio.checkAlert();\nutilFun.assertEql(alertText, 'Portfolio has been updated successfully');",
              "err": {},
              "uuid": "5db3fb28-a5b2-42e9-998e-59968dd5afe3",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Name",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Name",
              "timedOut": false,
              "duration": 1338,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.selectPortfolioName(portfolioName)\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {},
              "uuid": "7cbc558c-eb3d-4329-8047-d5c2c9c6cdff",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by POC",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by POC",
              "timedOut": false,
              "duration": 1433,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByPOC('Muhammad Bilal Rafaqat')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "30b6b9a9-a3c5-4819-9414-466e36e978f5",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Industry",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Industry",
              "timedOut": false,
              "duration": 1284,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByIndustry('Gaming')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Gaming'), `Expected text not found.`);",
              "err": {},
              "uuid": "89ae986d-668a-4f7e-b63d-6b2422bf2ef6",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Tech Stack",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Tech Stack",
              "timedOut": false,
              "duration": 1961,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByTechstack('Node Js')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Node Js'), `Expected text not found.`);",
              "err": {},
              "uuid": "91e7797b-fd1c-4aea-9df1-aef830246898",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Resource",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Resource",
              "timedOut": false,
              "duration": 4761,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByResources('Hello')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {},
              "uuid": "25dbe9d2-2889-4041-a1ff-ab3047e26d7f",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Tags",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Tags",
              "timedOut": false,
              "duration": 1150,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByTags('testing')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('testing'), `Expected text not found.`);",
              "err": {},
              "uuid": "1b8fd1a8-0b51-404b-9081-435bcdabd637",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Project Nature",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Project Nature",
              "timedOut": false,
              "duration": 1284,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByProjectNature('Web App')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Web App'), `Expected text not found.`);",
              "err": {},
              "uuid": "e3b529af-74c5-4a34-b08c-5dcb00da5e81",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Region",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Region",
              "timedOut": false,
              "duration": 4640,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByRegion('Pakistan')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Pakistan'), `Expected text not found.`);",
              "err": {},
              "uuid": "1482efce-8850-4e56-8094-00f76f02ed1f",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Date",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Date",
              "timedOut": false,
              "duration": 1248,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByDate('Last 2 Weeks')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {},
              "uuid": "f44ef0b4-32fd-450f-b1c0-740273961219",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Division Colum",
              "fullTitle": "Portfolio Module should able to Hide Division Colum",
              "timedOut": false,
              "duration": 1036,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Division')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 14, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Division'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "dd27ae58-db8e-411d-b92f-29aa1e4fd71a",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Project Nature Colum",
              "fullTitle": "Portfolio Module should able to Hide Project Nature Colum",
              "timedOut": false,
              "duration": 1143,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Project Nature')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 13, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Project Nature'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "3bb68b93-2016-4b30-a519-63dcb947f3c3",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Tech Stack Colum",
              "fullTitle": "Portfolio Module should able to Hide Tech Stack Colum",
              "timedOut": false,
              "duration": 931,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Tech Stack')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 12, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Tech Stack'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "74f7542a-45c6-4b35-a3fd-39ce0f941847",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide POC Colum",
              "fullTitle": "Portfolio Module should able to Hide POC Colum",
              "timedOut": false,
              "duration": 802,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('POC')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 11, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('POC'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "7b68d379-3b90-4159-be32-f184de574028",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Resources Colum",
              "fullTitle": "Portfolio Module should able to Hide Resources Colum",
              "timedOut": false,
              "duration": 1012,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Resources')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 10, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Resources'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "f845cb4a-d67d-4bcc-adb1-224655aba8ae",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Tags Colum",
              "fullTitle": "Portfolio Module should able to Hide Tags Colum",
              "timedOut": false,
              "duration": 798,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Tags')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 9, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Tags'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "2f59c3ae-1654-461f-aa0d-3957652509b6",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Industry Colum",
              "fullTitle": "Portfolio Module should able to Hide Industry Colum",
              "timedOut": false,
              "duration": 806,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Industry')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 8, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Industry'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "85f35adb-1b8e-4969-bec7-0adc0003ac10",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Region Colum",
              "fullTitle": "Portfolio Module should able to Hide Region Colum",
              "timedOut": false,
              "duration": 720,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Region')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 7, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Region'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "082d0ebd-690c-4a3a-859f-75998da6b845",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Attachments Colum",
              "fullTitle": "Portfolio Module should able to Hide Attachments Colum",
              "timedOut": false,
              "duration": 642,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Attachments')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 6, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Attachments'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "7b216204-1fa3-4acc-9beb-11b17c2477d1",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Achievements Colum",
              "fullTitle": "Portfolio Module should able to Hide Achievements Colum",
              "timedOut": false,
              "duration": 665,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Achievements')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 5, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Achievements'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "48bc1d58-620a-44c7-8273-9092402fa053",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Git Access Colum",
              "fullTitle": "Portfolio Module should able to Hide Git Access Colum",
              "timedOut": false,
              "duration": 808,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Git Access')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 4, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Git Access'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "d16b8076-f5de-4273-8137-7db459c9294c",
              "parentUUID": "8d8e8488-2d97-4b9f-979f-9592ebbf12cc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "47da9fd9-8372-413a-ad55-f8dfc761832d",
            "2b2685c2-c12e-4b98-aa0e-57e08defda01",
            "ff195cd4-069c-4abc-94ba-ff1355be679c",
            "5db3fb28-a5b2-42e9-998e-59968dd5afe3",
            "7cbc558c-eb3d-4329-8047-d5c2c9c6cdff",
            "30b6b9a9-a3c5-4819-9414-466e36e978f5",
            "89ae986d-668a-4f7e-b63d-6b2422bf2ef6",
            "91e7797b-fd1c-4aea-9df1-aef830246898",
            "25dbe9d2-2889-4041-a1ff-ab3047e26d7f",
            "1b8fd1a8-0b51-404b-9081-435bcdabd637",
            "e3b529af-74c5-4a34-b08c-5dcb00da5e81",
            "1482efce-8850-4e56-8094-00f76f02ed1f",
            "f44ef0b4-32fd-450f-b1c0-740273961219",
            "dd27ae58-db8e-411d-b92f-29aa1e4fd71a",
            "3bb68b93-2016-4b30-a519-63dcb947f3c3",
            "74f7542a-45c6-4b35-a3fd-39ce0f941847",
            "7b68d379-3b90-4159-be32-f184de574028",
            "f845cb4a-d67d-4bcc-adb1-224655aba8ae",
            "2f59c3ae-1654-461f-aa0d-3957652509b6",
            "85f35adb-1b8e-4969-bec7-0adc0003ac10",
            "082d0ebd-690c-4a3a-859f-75998da6b845",
            "7b216204-1fa3-4acc-9beb-11b17c2477d1",
            "48bc1d58-620a-44c7-8273-9092402fa053",
            "d16b8076-f5de-4273-8137-7db459c9294c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 85186,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "e0e23c96-cd83-4e69-a69e-256b728a9055",
          "title": "All Resources",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/resources/spec-1-all-resources.js",
          "file": "/test/e2e/resources/spec-1-all-resources.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"All Resources\"",
              "fullTitle": "All Resources \"before all\" hook in \"All Resources\"",
              "timedOut": false,
              "duration": 11336,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE departments SET \"hodId\" = 9474 WHERE id = 9;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\n// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "a5827ed8-b183-4da4-b821-3f3d54def4b2",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"All Resources\"",
              "fullTitle": "All Resources \"before each\" hook in \"All Resources\"",
              "timedOut": false,
              "duration": 3956,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resources');\nawait utilFun.wait(3000);\nawait utilFun.waitForPageLoad();",
              "err": {},
              "uuid": "99e87374-2f74-4a4f-ba7c-4922e7763b86",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if all-resources tab is click-able",
              "fullTitle": "All Resources should check if all-resources tab is click-able",
              "timedOut": false,
              "duration": 4334,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/home');\nawait utilFun.waitForPageLoad();\nawait resources.clickResourcesTab();\nawait resources.clickResourcesSubTab('All Resources');\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resources');",
              "err": {},
              "uuid": "921a920f-12fe-43cd-a5e0-0b2edd49792d",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by name.",
              "fullTitle": "All Resources should able to search resources by name.",
              "timedOut": false,
              "duration": 5194,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('James Salinas');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "027b0e3a-a1cc-4496-a044-a1a253ceb03b",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by their allocated Project.",
              "fullTitle": "All Resources should able to search resources by their allocated Project.",
              "timedOut": false,
              "duration": 3622,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Project');\nawait resources.selectFilterValue('automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "30d1528b-b7e5-473f-9e97-c3b78ef8a5b8",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by their Job status.",
              "fullTitle": "All Resources should able to search resources by their Job status.",
              "timedOut": false,
              "duration": 4263,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Job Status');\nawait resources.selectFilterValue('Permanent');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "8b1166e6-e3e1-4545-baa5-fc001b1e2f53",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Job status filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Job status filter.",
              "timedOut": false,
              "duration": 8494,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Project');\nawait resources.selectFilterValue('automation');\nawait resources.selectFilter('Search by Job Status');\nawait resources.selectFilterValue('Permanent');\nawait resources.selectFilter('Permanent');\nawait resources.selectFilterValue('Internship');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "b20a108c-aca8-4add-915d-737a41cea6bd",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by their Availability.",
              "fullTitle": "All Resources should able to search resources by their Availability.",
              "timedOut": false,
              "duration": 6349,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Project');\nawait resources.selectFilterValue('automation');\nawait resources.selectFilter('Search by Availability');\nawait resources.selectFilterValue('Fully Available');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "58cfdd61-c72c-4161-910a-4471b55e3534",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by this month.",
              "fullTitle": "All Resources should able to search resources by this month.",
              "timedOut": false,
              "duration": 3392,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by this Month');\nawait resources.selectFilterValue('Increments');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {},
              "uuid": "f59f2372-31e2-4e7d-945b-6e27fde51767",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on this month filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on this month filter.",
              "timedOut": false,
              "duration": 4858,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by this Month');\nawait resources.selectFilterValue('Probations');\nawait resources.selectFilter('Probations');\nawait resources.selectFilterValue('Increments');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {},
              "uuid": "13faf6dd-cddb-4492-bfa0-f3c945ece446",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Location.",
              "fullTitle": "All Resources should able to search resources by Location.",
              "timedOut": false,
              "duration": 2998,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Location');\nawait resources.selectFilterValue('Remote');\nawait utilFun.waitForPageLoad();\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "bc6baa7c-72f5-4436-8196-0aae25b41211",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Location filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Location filter.",
              "timedOut": false,
              "duration": 4872,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Location');\nawait resources.selectFilterValue('Remote');\nawait resources.selectFilter('Remote');\nawait resources.selectFilterValue('Karachi');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "bb49b6f8-6fe1-456e-981f-76829ab708ec",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Skill.",
              "fullTitle": "All Resources should able to search resources by Skill.",
              "timedOut": false,
              "duration": 3675,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Skills\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "ad8cfa5e-ab09-4e65-bdbc-2998fa01592d",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Skills filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Skills filter.",
              "timedOut": false,
              "duration": 6922,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Skills\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation');\nawait resources.selectFilter('Automation\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation1');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "e5d1e1da-10ab-4979-a4a8-7a7204ac7fbe",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Show resources with all selected skills.",
              "fullTitle": "All Resources should able to Show resources with all selected skills.",
              "timedOut": false,
              "duration": 7007,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Skills\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation');\nawait resources.selectFilter('Automation\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation1');\nawait resources.clickAllSelectedSkillsCheckbox();\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "a8c2b4ac-871a-49f6-87dd-580e2f6a4fcd",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Department.",
              "fullTitle": "All Resources should able to search resources by Department.",
              "timedOut": false,
              "duration": 4424,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {},
              "uuid": "11bdf1ad-ec35-40cb-9cad-3c97af404adf",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Department filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Department filter.",
              "timedOut": false,
              "duration": 4869,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nawait resources.selectFilter('Engineering');\nawait resources.selectFilterValue('Automation1');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {},
              "uuid": "f952098c-6119-41ca-a651-d498874948dd",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Sub-Department.",
              "fullTitle": "All Resources should able to search resources by Sub-Department.",
              "timedOut": false,
              "duration": 5779,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nawait resources.clickSubDepartment();\nawait resources.selectFilterValue('SQA Ib Support');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "c7ac6110-f3f8-4896-8002-2419c8075ae1",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Sub-Department filter..",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Sub-Department filter..",
              "timedOut": false,
              "duration": 9396,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nawait resources.clickSubDepartment();\nawait resources.selectFilterValue('SQA Ib Support');\nawait resources.clickSubDepartment();\nawait resources.selectFilterValue('DevOps Support');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "a69d1e15-4f9c-445e-b6c7-4d9093bb4c03",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Designation.",
              "fullTitle": "All Resources should able to search resources by Designation.",
              "timedOut": false,
              "duration": 5756,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation');\nawait resources.selectDesignation('Software Engineer');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "845a6993-daf6-428c-8cde-91cea9e9ff77",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Designation filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Designation filter.",
              "timedOut": false,
              "duration": 10646,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation');\nawait resources.selectDesignation('Software Engineer');\nawait resources.selectFilter('Software Engineer');\nawait resources.selectDesignation('HR');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "c2fbdf5d-951b-4d21-93cd-ce7457ae3105",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Designation Category.",
              "fullTitle": "All Resources should able to search resources by Designation Category.",
              "timedOut": false,
              "duration": 3421,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation Category');\nawait resources.selectDesignationCategory('Automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "b964894d-dfe7-443a-9611-591e11f59dca",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that when user click on clear button then all his search should be clear.",
              "fullTitle": "All Resources should able to Verify that when user click on clear button then all his search should be clear.",
              "timedOut": false,
              "duration": 4100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation Category');\nawait resources.selectDesignationCategory('Automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.length == 4, `Expected length not found.`);\nawait resources.clickClearButton();\nconst names1 = await resources.getResourceNameTag();\nassert.ok(names1.length > 4, `Expected length not found.`);",
              "err": {},
              "uuid": "5a03a9ec-239b-4975-8d19-28232baac3e8",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add new resource",
              "fullTitle": "All Resources should able to Add new resource",
              "timedOut": false,
              "duration": 31371,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_skills\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `UPDATE employee_assets SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_resumes\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_timeLines\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"project_portfolio_employees\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM employees WHERE id = ${resourceId.rows[0].id};`,\n  ];\n  await utilFun.udpateDatabase(query);\n}\nawait addResources.clickAddResourceBtn();\n//   Form 1\nawait addResources.clickInputField('Employee Name *', 'Steve');\nawait addResources.clickInputField('Work Phone Number', '123456');\nawait addResources.clickInputField('Work Email *', 'steve@email.com');\nawait addResources.clickInputField('Work Shift\\nSelect Work Shift', 'morning');\nawait addResources.clickOption();\nawait addResources.clickInputField('Work Location\\nSelect Work Location', 'remote');\nawait addResources.clickOption();\nawait addResources.clickInputField('Primary Manager\\nPrimary Manager', 'bilal rafaqat');\nawait addResources.clickOption();\nawait addResources.clickInputField('Attendance Mode\\nSelect Attendance Mode', 'invodesk');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation *\\nSelect Designation', 'automation');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation Category*\\nSelect Designation Category', 'automation');\nawait addResources.clickOption();\nawait addResources.clickNextButton();\n//   Form 2\nawait addResources.clickInputField2('Father Name', 'James');\nawait addResources.clickInputField2('Personal Email', 'personal@email.com');\nawait addResources.clickInputField2('Personal Phone', '12345');\nawait addResources.clickInputField2('Address', 'xyz');\nawait addResources.clickInputField2('National ID Number', '1122');\nawait addResources.setDOB('01-01-2000');\nawait addResources.clickInputField2('Gender\\nSelect Gender', 'other');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Marital Status\\nSelect Marital Status', 'single');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Emergency Contact Name', 'James');\nawait addResources.clickInputField2('Emergency Contact Number', '54321');\nawait addResources.clickInputField2('Emergency Contact Relation', 'Father');\nawait addResources.clickNextButton2();\n//   Form 3\nawait addResources.clickInputField3('Bank Name', 'MyBank');\nawait addResources.clickInputField3('Account Title', 'current');\nawait addResources.clickInputField3('IBAN Number', '3344');\nawait addResources.clickInputField3('Bank Address', 'qwerty');\nawait addResources.clickNextButton3();\n//   Form 4\nawait addResources.clickInputField4('Certification Level\\nSelect Certification Level', 'graduation');\nawait addResources.clickOption4();\nawait addResources.clickInputField4('Field of Study', 'SE');\nawait addResources.clickInputField4('School/University', 'MIT');\nawait addResources.clickInputField4('Score/Percentage', '70');\nawait addResources.clickInputField4('Passing Year\\nSelect Degree Passing Year', '2020');\nawait addResources.clickOption4();\nawait addResources.clickNextButton4();\n//   Form 5\nawait addResources.clickInputFieldForm5('Department\\nDepartment', 'Engineering');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Sub Department\\nSub Department', 'DevOps Support');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Contract Type*\\nSelect Contract Type', 'Full Time');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Date of Joining*', '01-11-2023');\nawait addResources.selectJobStatus('Probation');\nawait addResources.selectEndOfProbation('2 Months');\nawait addResources.clickInputFieldForm5('Total Working Hours*\\nSelect Total Working Hours', '4 Hrs');\nawait addResources.clickOptionForm5();\nawait addResources.clickNextButton5();\n//   Form 6\nawait addResources.clickInputFieldForm6('Current Salary (PKR)', '50000');\nawait addResources.clickInputFieldForm6('Last Salary (PKR)', '30000');\nawait addResources.clickInputFieldForm6('Last Increment Date', '01-01-2024');\nawait addResources.clickSubmitButton();\nconst alertText = await addResources.checkAlert();\nassert.equal(alertText, 'Resource Created Successfully!');",
              "err": {},
              "uuid": "d00fab65-391f-4b9b-8e81-aef1250780c1",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if Resource is added.",
              "fullTitle": "All Resources should able to check if Resource is added.",
              "timedOut": false,
              "duration": 4094,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);",
              "err": {},
              "uuid": "0ae00dee-f685-4e2b-bcd9-e7b5e6005ccc",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "All Resources should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "ccf72a0a-b43b-48b7-810d-c3270a330a95",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "All Resources should able to  copy email from options",
              "timedOut": false,
              "duration": 7220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Copy Email');\nconst alertText = await utilFun.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "7140cb88-a4eb-40d8-a08a-1822e68b7f62",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "All Resources should able to Send Email from options",
              "timedOut": false,
              "duration": 12719,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=steve@email.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "716e5942-198e-4d7f-9b7d-dc8835dedbf7",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "All Resources should able to see Email from options",
              "timedOut": false,
              "duration": 7911,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('See Email');\nconst email = await resources.copyEmail();\nassert.equal(email, 'Email: steve@email.com');",
              "err": {},
              "uuid": "cd50e58c-e096-4a1c-b56d-3e90b84c5d6d",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "All Resources should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 6575,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Phone Number');\nconst phnNo = await resources.copyEmail();\nassert.equal(phnNo, 'Phone: 12345');\nawait resources.copyPhoneNumber();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "b96d0e95-7440-4e03-8185-6686dbfde423",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to update Resource from options",
              "fullTitle": "All Resources should able to update Resource from options",
              "timedOut": false,
              "duration": 14091,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Update Resource');\nawait addResources.clickInputField('Work Phone Number', '8');\nawait addResources.clickNextButton();\nawait addResources.clickNextButton2();\nawait addResources.clickNextButton3();\nawait addResources.clickNextButton4();\nawait addResources.clickNextButton5();\nawait addResources.clickSubmitButton();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource Job Status is updated Successfully!');",
              "err": {},
              "uuid": "8cf06d2d-c672-4eea-902e-1e15f3f9957c",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to initiate a Performance Review from options",
              "fullTitle": "All Resources should able to initiate a Performance Review from options",
              "timedOut": false,
              "duration": 6035,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [`DELETE FROM employee_evaluations WHERE \"employeeId\" = ${resourceId.rows[0].id};`];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Initiate a Performance Review');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Review is initiated successfully.');",
              "err": {
                "message": "AssertionError: 'Review can not be initiated before 6 months' == 'Review is initiated successfully.'",
                "estack": "AssertionError [ERR_ASSERTION]: 'Review can not be initiated before 6 months' == 'Review is initiated successfully.'\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:440:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Review can not be initiated before 6 months\n+ Review is initiated successfully.\n"
              },
              "uuid": "1497b056-8a56-45a1-9e41-6af29763c426",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if Performance review is initiated or not",
              "fullTitle": "All Resources should able to check if Performance review is initiated or not",
              "timedOut": false,
              "duration": 13474,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/evaluation-performance');\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10123ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10123ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "f8a709ad-d134-4e3c-bd5b-b0bafd30a64c",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Initiate a Revised Designation from options",
              "fullTitle": "All Resources should able to Initiate a Revised Designation from options",
              "timedOut": false,
              "duration": 5931,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [`DELETE FROM employee_evaluations WHERE \"employeeId\" = ${resourceId.rows[0].id};`];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Initiate a Revised Designation');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Review is initiated successfully.');",
              "err": {},
              "uuid": "090178dd-682c-4ca7-991e-0e4139006c81",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if Performance review is initiated or not",
              "fullTitle": "All Resources should able to check if Performance review is initiated or not",
              "timedOut": false,
              "duration": 4053,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);",
              "err": {},
              "uuid": "902b0e5c-ef62-40ac-a187-755bb6c9873c",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to to add project from resource details",
              "fullTitle": "All Resources should able to to add project from resource details",
              "timedOut": false,
              "duration": 12444,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickAddproject();\nawait resources.selectAddProjectInputField('Projects', 'automation');\nawait resources.selectAddProjectInputField('Role in this project', 'Main Developer');\nawait resources.selectAddProjectInputField('Not Set', 'Fully Available');\nawait resources.selectAddProjectInputField('Engagement Mode', 'Billed');\nawait resources.selectAddProjectInputField('Add', '');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource added in project successfully.');",
              "err": {},
              "uuid": "b830fe04-52c3-4705-b3b2-534a4e0f0ffa",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to to delete project from resource details",
              "fullTitle": "All Resources should able to to delete project from resource details",
              "timedOut": false,
              "duration": 4759,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickDeleteProject();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource removed from project successfully.');",
              "err": {},
              "uuid": "bc2045db-892a-46ce-9199-924043221b85",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Create Employee Resume",
              "fullTitle": "All Resources should able to Create Employee Resume",
              "timedOut": false,
              "duration": 28119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [`DELETE FROM \"employee_resumes\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceResume.clickCreateResumeBtn();\nawait resourceResume.enterLable('Steve Resume');\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterSummary('testing');\nawait resourceResume.clickNextBtn();\nawait resourceResume.clickSkillDropdown();\nawait resourceResume.selectSkill('Automation');\nawait resourceResume.giveSkillRating(4);\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterTitle('Project1');\nawait resourceResume.enterDescription('Testing');\nawait resourceResume.enterResponsibilities('Testing');\nawait resourceResume.selectTechnologies('Automation1');\nawait resourceResume.selectTools('okokok');\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterDegree('BS Software Engineering');\nawait resourceResume.enterInstitution('UOL');\nawait resourceResume.clickCalendar();\nawait resourceResume.selectMonth('Sep');\nawait resourceResume.selectYear('2017');\nawait resourceResume.clickCalendar();\nawait resourceResume.selectMonth('Jan');\nawait resourceResume.selectYear('2022');\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterTitle('Js Developer');\nawait resourceResume.enterOrganization('Invozone');\nawait resourceResume.clickIssueDateCalendar();\nawait resourceResume.selectDate('22');\nawait resourceResume.selectMonth('Jan');\nawait resourceResume.selectYear('2022');\nawait resourceResume.clickNextBtn();\nawait resourceResume.clickNextBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resume is created successfully.');",
              "err": {},
              "uuid": "043dd2d1-9559-4f0a-a513-cc0a72d169b7",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Department Colum",
              "fullTitle": "All Resources should able to Hide Department Colum",
              "timedOut": false,
              "duration": 2864,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Department');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 12, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Department');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "d9c9ff8e-2546-4f1b-9e32-0d52f26e3a4e",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Sub-Department Colum",
              "fullTitle": "All Resources should able to Hide Sub-Department Colum",
              "timedOut": false,
              "duration": 2311,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Sub-Department');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 11, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Sub-Department');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "03335d0a-660e-44de-99b4-6903c1be3fbf",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Skills Colum",
              "fullTitle": "All Resources should able to Hide Skills Colum",
              "timedOut": false,
              "duration": 2254,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Skills');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 10, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Skills');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "7f9244a6-5eae-45a6-ac1e-f686bc991119",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Exp Years Colum",
              "fullTitle": "All Resources should able to Hide Exp Years Colum",
              "timedOut": false,
              "duration": 2749,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Exp Years');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 9, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Exp Years');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "4dce8c77-1754-4613-a8ef-10d36122e62e",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Location Colum",
              "fullTitle": "All Resources should able to Hide Location Colum",
              "timedOut": false,
              "duration": 2556,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Location');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 8, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Location');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "3d96d88e-2b66-4e33-8bfd-3983cd264915",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Projects Colum",
              "fullTitle": "All Resources should able to Hide Projects Colum",
              "timedOut": false,
              "duration": 2203,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Projects');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 7, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Projects');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "0ec90072-5677-4493-bddf-4c60a8e11399",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Availablility Colum",
              "fullTitle": "All Resources should able to Hide Availablility Colum",
              "timedOut": false,
              "duration": 2183,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Availability');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 6, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Availablility');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "a4ff4f92-c713-4dd7-9ad9-ff51569a9b05",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Resume Colum",
              "fullTitle": "All Resources should able to Hide Resume Colum",
              "timedOut": false,
              "duration": 1989,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Resume');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 5, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Resume');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "dbe1f227-8efe-4931-ac03-68add0c3f433",
              "parentUUID": "e0e23c96-cd83-4e69-a69e-256b728a9055",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "921a920f-12fe-43cd-a5e0-0b2edd49792d",
            "027b0e3a-a1cc-4496-a044-a1a253ceb03b",
            "30d1528b-b7e5-473f-9e97-c3b78ef8a5b8",
            "8b1166e6-e3e1-4545-baa5-fc001b1e2f53",
            "b20a108c-aca8-4add-915d-737a41cea6bd",
            "58cfdd61-c72c-4161-910a-4471b55e3534",
            "f59f2372-31e2-4e7d-945b-6e27fde51767",
            "13faf6dd-cddb-4492-bfa0-f3c945ece446",
            "bc6baa7c-72f5-4436-8196-0aae25b41211",
            "bb49b6f8-6fe1-456e-981f-76829ab708ec",
            "ad8cfa5e-ab09-4e65-bdbc-2998fa01592d",
            "e5d1e1da-10ab-4979-a4a8-7a7204ac7fbe",
            "a8c2b4ac-871a-49f6-87dd-580e2f6a4fcd",
            "11bdf1ad-ec35-40cb-9cad-3c97af404adf",
            "f952098c-6119-41ca-a651-d498874948dd",
            "c7ac6110-f3f8-4896-8002-2419c8075ae1",
            "a69d1e15-4f9c-445e-b6c7-4d9093bb4c03",
            "845a6993-daf6-428c-8cde-91cea9e9ff77",
            "c2fbdf5d-951b-4d21-93cd-ce7457ae3105",
            "b964894d-dfe7-443a-9611-591e11f59dca",
            "5a03a9ec-239b-4975-8d19-28232baac3e8",
            "d00fab65-391f-4b9b-8e81-aef1250780c1",
            "0ae00dee-f685-4e2b-bcd9-e7b5e6005ccc",
            "7140cb88-a4eb-40d8-a08a-1822e68b7f62",
            "716e5942-198e-4d7f-9b7d-dc8835dedbf7",
            "cd50e58c-e096-4a1c-b56d-3e90b84c5d6d",
            "b96d0e95-7440-4e03-8185-6686dbfde423",
            "8cf06d2d-c672-4eea-902e-1e15f3f9957c",
            "090178dd-682c-4ca7-991e-0e4139006c81",
            "902b0e5c-ef62-40ac-a187-755bb6c9873c",
            "b830fe04-52c3-4705-b3b2-534a4e0f0ffa",
            "bc2045db-892a-46ce-9199-924043221b85",
            "043dd2d1-9559-4f0a-a513-cc0a72d169b7",
            "d9c9ff8e-2546-4f1b-9e32-0d52f26e3a4e",
            "03335d0a-660e-44de-99b4-6903c1be3fbf",
            "7f9244a6-5eae-45a6-ac1e-f686bc991119",
            "4dce8c77-1754-4613-a8ef-10d36122e62e",
            "3d96d88e-2b66-4e33-8bfd-3983cd264915",
            "0ec90072-5677-4493-bddf-4c60a8e11399",
            "a4ff4f92-c713-4dd7-9ad9-ff51569a9b05",
            "dbe1f227-8efe-4931-ac03-68add0c3f433"
          ],
          "failures": [
            "1497b056-8a56-45a1-9e41-6af29763c426",
            "f8a709ad-d134-4e3c-bd5b-b0bafd30a64c"
          ],
          "pending": [
            "ccf72a0a-b43b-48b7-810d-c3270a330a95"
          ],
          "skipped": [],
          "duration": 292276,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "3fb1cbf3-225e-40e7-bfc7-5d378a489abc",
          "title": "Resource Offboarding",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/resources/spec-2-resource-offboarding.js",
          "file": "/test/e2e/resources/spec-2-resource-offboarding.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Resource Offboarding\"",
              "fullTitle": "Resource Offboarding \"before all\" hook in \"Resource Offboarding\"",
              "timedOut": false,
              "duration": 10620,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "84c11712-2357-4b6f-8393-9c3ecded128a",
              "parentUUID": "3fb1cbf3-225e-40e7-bfc7-5d378a489abc",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Resource Offboarding\"",
              "fullTitle": "Resource Offboarding \"before each\" hook in \"Resource Offboarding\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad()",
              "err": {},
              "uuid": "ee7696f8-7a5e-4dd1-a361-b6f701837b5a",
              "parentUUID": "3fb1cbf3-225e-40e7-bfc7-5d378a489abc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to OffBoard Resource by Resignation without Pending Discussion",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by Resignation without Pending Discussion",
              "timedOut": false,
              "duration": 11908,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('Resignation')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.clickPendingCheckbox()\nawait resourceOffBoarding.setConntractEndDate('14122024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource job status is updated and email has been sent to PM & HOD!!');",
              "err": {},
              "uuid": "9b86de11-06f9-48c1-838a-7c1cdad9ecbb",
              "parentUUID": "3fb1cbf3-225e-40e7-bfc7-5d378a489abc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 3965,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);",
              "err": {},
              "uuid": "af73ed36-885a-4db0-8685-e8d7bc221696",
              "parentUUID": "3fb1cbf3-225e-40e7-bfc7-5d378a489abc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to OffBoard Resource by Resignation Pending Discussion",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by Resignation Pending Discussion",
              "timedOut": false,
              "duration": 10226,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('Resignation')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource job status is updated and email has been sent to PM & HOD!!');",
              "err": {},
              "uuid": "9c40dfb6-034b-4aed-8446-49a0e20ed000",
              "parentUUID": "3fb1cbf3-225e-40e7-bfc7-5d378a489abc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 3549,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);",
              "err": {},
              "uuid": "ef6f4747-b4df-4e16-8489-66833e81b63a",
              "parentUUID": "3fb1cbf3-225e-40e7-bfc7-5d378a489abc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should able to approve Pending resource offBoarding",
              "fullTitle": "Resource Offboarding Should able to approve Pending resource offBoarding",
              "timedOut": false,
              "duration": 5560,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);\nawait resourceOffBoarding.selectOffBoardingResponse('Approved')\nawait resourceOffBoarding.setLastDate('14122024')\nawait resourceOffBoarding.clickUpdateBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resignation request has been approved succesfully!');\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {},
              "uuid": "9d343155-0e86-432c-8043-1d82b8d074fe",
              "parentUUID": "3fb1cbf3-225e-40e7-bfc7-5d378a489abc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should able to Reject Pending resource offBoarding",
              "fullTitle": "Resource Offboarding Should able to Reject Pending resource offBoarding",
              "timedOut": false,
              "duration": 5586,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `UPDATE boarding_requests SET \"status\" = 'PENDING' WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE boarding_requests SET \"noticeEndDate\" = NULL WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE boarding_requests SET \"deletedAt\" = NULL WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);\nawait resourceOffBoarding.selectOffBoardingResponse('Rejected')\nawait resourceOffBoarding.enterReason('testing')\nawait resourceOffBoarding.clickUpdateBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resignation request has been rejected succesfully!');\nawait resourceOffBoarding.confirmRejectStatus()",
              "err": {},
              "uuid": "06b40176-e70c-420f-8ca0-e078944ccf58",
              "parentUUID": "3fb1cbf3-225e-40e7-bfc7-5d378a489abc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to OffBoard Resource by Termination",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by Termination",
              "timedOut": false,
              "duration": 10812,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('Termination')\nawait resourceOffBoarding.enterReason('testing')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.setConntractEndDate('14122024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Termination request has been approved succesfully!');",
              "err": {},
              "uuid": "f43664e7-b21e-4964-9c04-56583bf81199",
              "parentUUID": "3fb1cbf3-225e-40e7-bfc7-5d378a489abc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 4004,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Termination'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {},
              "uuid": "24594bbf-1291-41ef-be73-949260030da3",
              "parentUUID": "3fb1cbf3-225e-40e7-bfc7-5d378a489abc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource upcoming offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource upcoming offBoarding is showning or not",
              "timedOut": false,
              "duration": 3810,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Termination'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {},
              "uuid": "38da633f-8edf-4f23-acd5-567c7a2b9d12",
              "parentUUID": "3fb1cbf3-225e-40e7-bfc7-5d378a489abc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to OffBoard Resource by End of Service",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by End of Service",
              "timedOut": false,
              "duration": 14517,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('End of Service')\nawait resourceOffBoarding.enterReason('testing')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.setConntractEndDate('14122024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'End of Service request has been approved succesfully!');",
              "err": {},
              "uuid": "f82f2ce1-8f9c-4011-94fb-1c3d8b86fc0b",
              "parentUUID": "3fb1cbf3-225e-40e7-bfc7-5d378a489abc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 3902,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('End of Service'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {},
              "uuid": "54bdd172-eb46-480e-999a-749c073287c0",
              "parentUUID": "3fb1cbf3-225e-40e7-bfc7-5d378a489abc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource upcoming offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource upcoming offBoarding is showning or not",
              "timedOut": false,
              "duration": 3534,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('End of Service'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {},
              "uuid": "88667c87-92b6-472b-abd6-74c96058a50e",
              "parentUUID": "3fb1cbf3-225e-40e7-bfc7-5d378a489abc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9b86de11-06f9-48c1-838a-7c1cdad9ecbb",
            "af73ed36-885a-4db0-8685-e8d7bc221696",
            "9c40dfb6-034b-4aed-8446-49a0e20ed000",
            "ef6f4747-b4df-4e16-8489-66833e81b63a",
            "9d343155-0e86-432c-8043-1d82b8d074fe",
            "06b40176-e70c-420f-8ca0-e078944ccf58",
            "f43664e7-b21e-4964-9c04-56583bf81199",
            "24594bbf-1291-41ef-be73-949260030da3",
            "38da633f-8edf-4f23-acd5-567c7a2b9d12",
            "f82f2ce1-8f9c-4011-94fb-1c3d8b86fc0b",
            "54bdd172-eb46-480e-999a-749c073287c0",
            "88667c87-92b6-472b-abd6-74c96058a50e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 81373,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "7d8895ed-ad6d-4de5-87db-18aad894e485",
          "title": "Position Openings",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/resources/spec-3-position-opening.js",
          "file": "/test/e2e/resources/spec-3-position-opening.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Position Openings\"",
              "fullTitle": "Position Openings \"before all\" hook in \"Position Openings\"",
              "timedOut": false,
              "duration": 9940,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "b66c1de4-0921-4dc6-8cc0-58d3e36341b3",
              "parentUUID": "7d8895ed-ad6d-4de5-87db-18aad894e485",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Position Openings\"",
              "fullTitle": "Position Openings \"before each\" hook in \"Position Openings\"",
              "timedOut": false,
              "duration": 621,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/position-openings');\nawait utilFun.waitForPageLoad();",
              "err": {},
              "uuid": "00c128d2-36c8-48a2-9b34-de56a257bd27",
              "parentUUID": "7d8895ed-ad6d-4de5-87db-18aad894e485",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Position Openings\"",
              "fullTitle": "Position Openings \"after all\" hook in \"Position Openings\"",
              "timedOut": false,
              "duration": 8,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9171;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\n// await utilFun.quit()",
              "err": {},
              "uuid": "0ea8a7d8-899c-4b53-a66b-9ca3ba0614d6",
              "parentUUID": "7d8895ed-ad6d-4de5-87db-18aad894e485",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should able to Apply Request For Position opening",
              "fullTitle": "Position Openings should able to Apply Request For Position opening",
              "timedOut": false,
              "duration": 19885,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9474;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9171;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9429;`,\n  `DELETE FROM \"position_openings\" WHERE \"employeeId\" = 9429;`,\n];\nawait utilFun.udpateDatabase(query);\nawait positionOpenings.clickAddBtn();\nawait positionOpenings.selectField1AndEnterValue('Department*\\nSelect Department', 'Engineering');\nawait positionOpenings.selectField1AndEnterValue('Name of Position*\\nSelect Position', 'Software Engineer');\nawait positionOpenings.selectField2AndEnterValue('Position Level*\\nSelect Level', 'Automation');\nawait positionOpenings.selectField2AndEnterValue('No. of Resources*', '3');\nawait positionOpenings.selectField2AndEnterValue(`Year's of Experience*\\nSelect Years`, '0 - 1');\nawait positionOpenings.selectField1AndEnterValue('Tech Stack*\\nSelect Tech Stack', 'Automation');\nawait positionOpenings.selectField1AndEnterValue('Minimum Education*\\nSelect Education', 'Matric');\nawait positionOpenings.selectField1AndEnterValue('Gender*\\nSelect Gender', 'Male');\nawait positionOpenings.selectField1AndEnterValue('Budget*\\nSelect Budget', '0 - 25');\nawait positionOpenings.selectField1AndEnterValue('Office Location*\\nSelect Location', 'Remote');\nawait positionOpenings.selectField1AndEnterValue('Priorty Level*\\nSelect Priorty', 'High');\nawait positionOpenings.uploadDescription();\nawait positionOpenings.enterInstructions('Testing');\nawait positionOpenings.clickConfirmAddBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position request is created successfully!');",
              "err": {},
              "uuid": "eee999b5-e5ac-4c0d-859f-6950d9d24b12",
              "parentUUID": "7d8895ed-ad6d-4de5-87db-18aad894e485",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if request id Added",
              "fullTitle": "Position Openings should able to check if request id Added",
              "timedOut": false,
              "duration": 1662,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {},
              "uuid": "ecb1bf2b-74f1-4658-8d24-27479650784a",
              "parentUUID": "7d8895ed-ad6d-4de5-87db-18aad894e485",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit request",
              "fullTitle": "Position Openings should able to edit request",
              "timedOut": false,
              "duration": 3788,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickEditBtn();\nawait positionOpenings.enterInstructions(' Updated');\nawait positionOpenings.clickConfirmAddBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been updated successfully');",
              "err": {},
              "uuid": "303db098-82e2-40ea-aa30-2fdc356b814b",
              "parentUUID": "7d8895ed-ad6d-4de5-87db-18aad894e485",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete request",
              "fullTitle": "Position Openings should able to Delete request",
              "timedOut": false,
              "duration": 2717,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickDeleteBtn();\nawait positionOpenings.enterReason('testing');\nawait positionOpenings.clickYesBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been deleted successfully!');",
              "err": {},
              "uuid": "76024a3b-ac47-4ba1-a78d-87b53be634f0",
              "parentUUID": "7d8895ed-ad6d-4de5-87db-18aad894e485",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if request is visible by HOD",
              "fullTitle": "Position Openings should check if request is visible by HOD",
              "timedOut": false,
              "duration": 1417,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE \"position_openings\" SET \"deletedAt\" = NULL WHERE \"employeeId\" = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {},
              "uuid": "ab4c3269-e04a-4601-8e44-5ae1caaa5c22",
              "parentUUID": "7d8895ed-ad6d-4de5-87db-18aad894e485",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if HOD can edit request",
              "fullTitle": "Position Openings should able to check if HOD can edit request",
              "timedOut": false,
              "duration": 4518,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickEditBtn();\nawait positionOpenings.enterInstructions(' Updated By HOD');\nawait positionOpenings.clickConfirmAddBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been updated successfully');",
              "err": {},
              "uuid": "36209c4d-f319-4ca6-946e-911805bd5fcc",
              "parentUUID": "7d8895ed-ad6d-4de5-87db-18aad894e485",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to reject request by hod",
              "fullTitle": "Position Openings should able to reject request by hod",
              "timedOut": false,
              "duration": 2895,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickRejectBtn();\nawait positionOpenings.enterReason('testing');\nawait positionOpenings.clickYesBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been rejected successfully');",
              "err": {},
              "uuid": "fb24a39b-a561-4eee-b8fd-47e1883467c0",
              "parentUUID": "7d8895ed-ad6d-4de5-87db-18aad894e485",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in reject tab",
              "fullTitle": "Position Openings should verify the request is showing in reject tab",
              "timedOut": false,
              "duration": 1530,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.selectReqTblSubTab('Rejected');\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {},
              "uuid": "0692e755-a02f-4039-b19e-68c27d01e226",
              "parentUUID": "7d8895ed-ad6d-4de5-87db-18aad894e485",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to approve request by hod",
              "fullTitle": "Position Openings should able to approve request by hod",
              "timedOut": false,
              "duration": 2665,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [`UPDATE \"position_openings\" SET \"isApprovedByHod\" = 'PENDING' WHERE \"employeeId\" = 9429;`];\nawait utilFun.udpateDatabase(query);\nawait positionOpenings.clickApproveBtn();\nawait positionOpenings.enterReason('testing');\nawait positionOpenings.clickYesBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been approved successfully');",
              "err": {},
              "uuid": "b163110e-d2e3-49bf-a84a-bb0281f3d0a2",
              "parentUUID": "7d8895ed-ad6d-4de5-87db-18aad894e485",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in approve tab",
              "fullTitle": "Position Openings should verify the request is showing in approve tab",
              "timedOut": false,
              "duration": 1486,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.selectReqTblSubTab('Approved');\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {},
              "uuid": "a7e87acd-7151-42f4-abdc-1903f1211987",
              "parentUUID": "7d8895ed-ad6d-4de5-87db-18aad894e485",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if request is visible by CEO",
              "fullTitle": "Position Openings should check if request is visible by CEO",
              "timedOut": false,
              "duration": 1407,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9474;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9171;`,\n];\nawait utilFun.udpateDatabase(query);\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {},
              "uuid": "195a66e7-0d73-4174-8052-c16c45ba3a01",
              "parentUUID": "7d8895ed-ad6d-4de5-87db-18aad894e485",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if CEO can edit request",
              "fullTitle": "Position Openings should able to check if CEO can edit request",
              "timedOut": false,
              "duration": 4392,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickEditBtn();\nawait positionOpenings.enterInstructions(' Updated By CEO');\nawait positionOpenings.clickConfirmAddBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been updated successfully');",
              "err": {},
              "uuid": "f2bacd21-44e6-4c50-b33d-e1483522da0e",
              "parentUUID": "7d8895ed-ad6d-4de5-87db-18aad894e485",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to reject request by hod",
              "fullTitle": "Position Openings should able to reject request by hod",
              "timedOut": false,
              "duration": 2745,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickRejectBtn();\nawait positionOpenings.enterReason('testing');\nawait positionOpenings.clickYesBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been rejected successfully');",
              "err": {},
              "uuid": "b478d98c-8a31-4b50-a475-038b2d20eb1a",
              "parentUUID": "7d8895ed-ad6d-4de5-87db-18aad894e485",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in reject tab",
              "fullTitle": "Position Openings should verify the request is showing in reject tab",
              "timedOut": false,
              "duration": 1529,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.selectSubTab('Rejected');\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {},
              "uuid": "40656678-7fb3-41a5-9995-85206c49da14",
              "parentUUID": "7d8895ed-ad6d-4de5-87db-18aad894e485",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to approve request by hod",
              "fullTitle": "Position Openings should able to approve request by hod",
              "timedOut": false,
              "duration": 2850,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [`UPDATE \"position_openings\" SET \"requestStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`];\nawait utilFun.udpateDatabase(query);\nawait positionOpenings.clickApproveBtn();\nawait positionOpenings.enterReason('testing');\nawait positionOpenings.clickYesBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been approved successfully');",
              "err": {},
              "uuid": "7f8c36c0-e732-493c-8b7e-b069be9c398b",
              "parentUUID": "7d8895ed-ad6d-4de5-87db-18aad894e485",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in approve tab",
              "fullTitle": "Position Openings should verify the request is showing in approve tab",
              "timedOut": false,
              "duration": 1847,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.selectSubTab('Approved');\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {},
              "uuid": "f9f77429-0ce3-4087-bbf7-54e1d850a8b1",
              "parentUUID": "7d8895ed-ad6d-4de5-87db-18aad894e485",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in approve tab for Applicant",
              "fullTitle": "Position Openings should verify the request is showing in approve tab for Applicant",
              "timedOut": false,
              "duration": 1611,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9171;`,\n];\nawait utilFun.udpateDatabase(query);\nawait positionOpenings.selectSubTab('Approved');\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {},
              "uuid": "d703af70-c293-4095-8858-8a320e5b9b0d",
              "parentUUID": "7d8895ed-ad6d-4de5-87db-18aad894e485",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eee999b5-e5ac-4c0d-859f-6950d9d24b12",
            "ecb1bf2b-74f1-4658-8d24-27479650784a",
            "303db098-82e2-40ea-aa30-2fdc356b814b",
            "76024a3b-ac47-4ba1-a78d-87b53be634f0",
            "ab4c3269-e04a-4601-8e44-5ae1caaa5c22",
            "36209c4d-f319-4ca6-946e-911805bd5fcc",
            "fb24a39b-a561-4eee-b8fd-47e1883467c0",
            "0692e755-a02f-4039-b19e-68c27d01e226",
            "b163110e-d2e3-49bf-a84a-bb0281f3d0a2",
            "a7e87acd-7151-42f4-abdc-1903f1211987",
            "195a66e7-0d73-4174-8052-c16c45ba3a01",
            "f2bacd21-44e6-4c50-b33d-e1483522da0e",
            "b478d98c-8a31-4b50-a475-038b2d20eb1a",
            "40656678-7fb3-41a5-9995-85206c49da14",
            "7f8c36c0-e732-493c-8b7e-b069be9c398b",
            "f9f77429-0ce3-4087-bbf7-54e1d850a8b1",
            "d703af70-c293-4095-8858-8a320e5b9b0d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 58944,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
          "title": "Resource Details",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/resources/spec-4-resourse-details.js",
          "file": "/test/e2e/resources/spec-4-resourse-details.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Resource Details\"",
              "fullTitle": "Resource Details \"before all\" hook in \"Resource Details\"",
              "timedOut": false,
              "duration": 10746,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nlet resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  detailsPageUrl = `/resource-detail/${resourceId.rows[0].id}?tab=Basic_Information`;\n  attendanceTabUrl = `/resource-detail/${resourceId.rows[0].id}?tab=Attendance`;\n  oldId = resourceId.rows[0].id;\n  newId = resourceId.rows[0].id;\n}\n// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "595134ee-a138-4be6-b9c4-4102218eefda",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to Add new resource",
              "fullTitle": "Resource Details should able to Add new resource",
              "timedOut": false,
              "duration": 35315,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_skills\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `UPDATE employee_assets SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_resumes\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_timeLines\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"project_portfolio_employees\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM employees WHERE id = ${resourceId.rows[0].id};`,\n  ];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.wait(3000);\nawait utilFun.waitForPageLoad();\nawait addResources.clickAddResourceBtn();\n//   Form 1\nawait addResources.clickInputField('Employee Name *', 'Stevee');\nawait addResources.clickInputField('Work Phone Number', '123456');\nawait addResources.clickInputField('Work Email *', 'steve@email.com');\nawait addResources.clickInputField('Work Shift\\nSelect Work Shift', 'morning');\nawait addResources.clickOption();\nawait addResources.clickInputField('Work Location\\nSelect Work Location', 'remote');\nawait addResources.clickOption();\nawait addResources.clickInputField('Primary Manager\\nPrimary Manager', 'bilal rafaqat');\nawait addResources.clickOption();\nawait addResources.clickInputField('Attendance Mode\\nSelect Attendance Mode', 'invodesk');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation *\\nSelect Designation', 'automation');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation Category*\\nSelect Designation Category', 'automation');\nawait addResources.clickOption();\nawait addResources.clickNextButton();\n//   Form 2\nawait addResources.clickInputField2('Father Name', 'James');\nawait addResources.clickInputField2('Personal Email', 'personal@email.com');\nawait addResources.clickInputField2('Personal Phone', '12345');\nawait addResources.clickInputField2('Address', 'xyz');\nawait addResources.clickInputField2('National ID Number', '1122');\nawait addResources.setDOB('01-01-2000');\nawait addResources.clickInputField2('Gender\\nSelect Gender', 'other');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Marital Status\\nSelect Marital Status', 'single');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Emergency Contact Name', 'James');\nawait addResources.clickInputField2('Emergency Contact Number', '54321');\nawait addResources.clickInputField2('Emergency Contact Relation', 'Father');\nawait addResources.clickNextButton2();\n//   Form 3\nawait addResources.clickInputField3('Bank Name', 'MyBank');\nawait addResources.clickInputField3('Account Title', 'current');\nawait addResources.clickInputField3('IBAN Number', '3344');\nawait addResources.clickInputField3('Bank Address', 'qwerty');\nawait addResources.clickNextButton3();\n//   Form 4\nawait addResources.clickInputField4('Certification Level\\nSelect Certification Level', 'graduation');\nawait addResources.clickOption4();\nawait addResources.clickInputField4('Field of Study', 'SE');\nawait addResources.clickInputField4('School/University', 'MIT');\nawait addResources.clickInputField4('Score/Percentage', '70');\nawait addResources.clickInputField4('Passing Year\\nSelect Degree Passing Year', '2020');\nawait addResources.clickOption4();\nawait addResources.clickNextButton4();\n//   Form 5\nawait addResources.clickInputFieldForm5('Department\\nDepartment', 'HR');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Sub Department\\nSub Department', 'DevOps Support');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Contract Type*\\nSelect Contract Type', 'Full Time');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Date of Joining*', '01-11-2023');\nawait addResources.selectJobStatus('Probation');\nawait addResources.selectEndOfProbation('2 Months');\nawait addResources.clickInputFieldForm5('Total Working Hours*\\nSelect Total Working Hours', '4 Hrs');\nawait addResources.clickOptionForm5();\nawait addResources.clickNextButton5();\n//   Form 6\nawait addResources.clickInputFieldForm6('Current Salary (PKR)', '50000');\nawait addResources.clickInputFieldForm6('Last Salary (PKR)', '30000');\nawait addResources.clickInputFieldForm6('Last Increment Date', '01-01-2024');\nawait addResources.clickSubmitButton();\nconst alertText = await addResources.checkAlert();\nassert.equal(alertText, 'Resource Created Successfully!');\nlet resourceId1 = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId1.rowCount !== 0) {\n  detailsPageUrl = `/resource-detail/${resourceId1.rows[0].id}?tab=Basic_Information`;\n  attendanceTabUrl = `/resource-detail/${resourceId1.rows[0].id}?tab=Attendance`;\n  newId = resourceId1.rows[0].id;\n}",
              "err": {},
              "uuid": "f1688dc4-d8e8-402d-8de1-fcd09430bd9e",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to to add project from resource details",
              "fullTitle": "Resource Details should able to to add project from resource details",
              "timedOut": false,
              "duration": 16777,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resources');\nawait utilFun.wait(3000);\nawait resources.clickFilterBtn();\nawait resources.searchName('Stevee');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Stevee'), `Expected text not found.`);\nawait resources.clickAddproject();\nawait resources.selectAddProjectInputField('Projects', 'automation');\nawait resources.selectAddProjectInputField('Role in this project', 'Main Developer');\nawait resources.selectAddProjectInputField('Not Set', 'Fully Available');\nawait resources.selectAddProjectInputField('Engagement Mode', 'Billed');\nawait resources.selectAddProjectInputField('Add', '');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource added in project successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"AddCircleOutlineIcon\"])\nWait timed out after 10043ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"AddCircleOutlineIcon\"])\nWait timed out after 10043ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "db81a426-3e88-47f3-ba1e-1588ac5a058b",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource is showing.",
              "fullTitle": "Resource Details should check if Resource is showing.",
              "timedOut": false,
              "duration": 5028,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/resources');\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Stevee'), `Expected text not found.`);",
              "err": {},
              "uuid": "1dc4d7c0-22f9-49a6-989b-c910ca967106",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if clicking on resource name redirecting to resoure details page.",
              "fullTitle": "Resource Details should check if clicking on resource name redirecting to resoure details page.",
              "timedOut": false,
              "duration": 6369,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/resources');\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Stevee'), `Expected text not found.`);\nawait resources.ClickResourceNameTag();\nawait utilFun.switchWindow(1);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);",
              "err": {},
              "uuid": "3628f641-37ae-4f33-8b6b-d6900a10bdf3",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource name is showing on Details page.",
              "fullTitle": "Resource Details should check if Resource name is showing on Details page.",
              "timedOut": false,
              "duration": 3401,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nconst name = await resourceDetails.getResourceNameTxt();\nassert.equal(name, 'Stevee', `Expected text not found.`);",
              "err": {},
              "uuid": "9818f4a1-3531-41df-b399-310f97cb194d",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Avatar is showing on Details page.",
              "fullTitle": "Resource Details should check if Resource Avatar is showing on Details page.",
              "timedOut": false,
              "duration": 2377,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nconst name = await resourceDetails.checkAvatarIcon();\nassert.equal(name, 'S', `Expected text not found.`);",
              "err": {},
              "uuid": "cb255853-9996-4207-9e6d-e9dd9722242f",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Father Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Father Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 9528,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Father Name', 'James');\nawait resourceDetails.editValue('Father Name', 'James Salinas');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Father Name', 'James salinas');",
              "err": {},
              "uuid": "741809f3-c3c8-45cf-a28b-f876c18e3707",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Personal Email is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Personal Email is Shownig and is editable.",
              "timedOut": false,
              "duration": 9458,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Personal Email', 'personal@email.com');\nawait resourceDetails.editValue('Personal Email', 'personalUpdated@email.com');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Personal Email', 'personalUpdated@email.com');",
              "err": {},
              "uuid": "c5c17f92-891f-44a6-9cb1-3f7e772e671d",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Address is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Address is Shownig and is editable.",
              "timedOut": false,
              "duration": 9125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Address', 'xyz');\nawait resourceDetails.editValue('Address', 'xyzUpdated');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Address', 'xyzUpdated');",
              "err": {},
              "uuid": "b269d6af-c85b-4ea0-b83d-3508bda0a9f6",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Nationality is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Nationality is Shownig and is editable.",
              "timedOut": false,
              "duration": 9724,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Nationality', 'Pakistan');\nawait resourceDetails.editValue('Nationality', 'United arab emirates');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Nationality', 'United arab emirates');",
              "err": {},
              "uuid": "b5b42bbe-3715-4d42-8d8b-5e66d4997045",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource National ID Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource National ID Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 9205,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('National ID Number', '1122');\nawait resourceDetails.editValue('National ID Number', '2233');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('National ID Number', '2233');",
              "err": {},
              "uuid": "4411ca08-e276-4f8a-a248-68906804223c",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Date of Birth is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Date of Birth is Shownig and is editable.",
              "timedOut": false,
              "duration": 9404,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Date of Birth', '01-01-2000');\nawait resourceDetails.editValue('Date of Birth', '01-01-2001');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Date of Birth', '01-01-2001');",
              "err": {},
              "uuid": "fd50aa44-c750-46b2-9427-3847f38db7d2",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Gender is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Gender is Shownig and is editable.",
              "timedOut": false,
              "duration": 10049,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Gender', 'Other');\nawait resourceDetails.editValue('Gender', 'Female');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Gender', 'Female');",
              "err": {},
              "uuid": "75b1373a-6ae1-4ebb-9298-a8c53484b7d2",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Marital Status is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Marital Status is Shownig and is editable.",
              "timedOut": false,
              "duration": 10270,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Marital Status', 'Single');\nawait resourceDetails.editValue('Marital Status', 'Married');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Marital Status', 'Married');",
              "err": {},
              "uuid": "d61750af-31b9-436f-99f5-35f8771ca065",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Emergency Contact Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Emergency Contact Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 9712,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Emergency Contact Name', 'James');\nawait resourceDetails.editValue('Emergency Contact Name', 'James Salinas');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Emergency Contact Name', 'James Salinas');",
              "err": {},
              "uuid": "f52c9bb6-bbe4-4420-b0fd-1318407a3aac",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Emergency Contact Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Emergency Contact Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 9231,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Emergency Contact Number', '54321');\nawait resourceDetails.editValue('Emergency Contact Number', '654321');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Emergency Contact Number', '654321');",
              "err": {},
              "uuid": "9f3117b4-0824-4406-9e04-6934396362cc",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Emergency Contact Relation is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Emergency Contact Relation is Shownig and is editable.",
              "timedOut": false,
              "duration": 9792,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Emergency Contact Relation', 'Father');\nawait resourceDetails.editValue('Emergency Contact Relation', 'Brother');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Emergency Contact Relation', 'Brother');",
              "err": {},
              "uuid": "4db1795a-65c5-4b9b-95a5-3ae3ede380cf",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Bank Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Bank Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 9114,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Bank Name', 'Mybank');\nawait resourceDetails.editValue('Bank Name', 'Bankname');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Bank Name', 'Bankname');",
              "err": {},
              "uuid": "6f43a3a5-7e6e-4ba4-96cc-40d53389e58c",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Account Title is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Account Title is Shownig and is editable.",
              "timedOut": false,
              "duration": 9438,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Account Title', 'Current');\nawait resourceDetails.editValue('Account Title', 'Saving');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Account Title', 'Saving');",
              "err": {},
              "uuid": "5e941a90-e5a6-4144-9b84-7ebd20035d46",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource IBAN Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource IBAN Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 9541,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('IBAN Number', '3344');\nawait resourceDetails.editValue('IBAN Number', '4455');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('IBAN Number', '4455');",
              "err": {},
              "uuid": "650ac426-d1fa-4590-8ca7-8cf203a9c1da",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Bank Address is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Bank Address is Shownig and is editable.",
              "timedOut": false,
              "duration": 9510,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Bank Address', 'qwerty');\nawait resourceDetails.editValue('Bank Address', 'street14');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Bank Address', 'street14');",
              "err": {},
              "uuid": "9aa19708-91b3-48b7-9cc4-0c1e53143f9b",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Certification Level is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Certification Level is Shownig and is editable.",
              "timedOut": false,
              "duration": 9089,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Certification Level', 'Graduation');\nawait resourceDetails.editValue('Certification Level', 'Master');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Certification Level', 'Master');",
              "err": {},
              "uuid": "9ceb0d51-1724-4a4d-898a-04e365ab05c8",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Field of Study is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Field of Study is Shownig and is editable.",
              "timedOut": false,
              "duration": 9326,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Field of Study', 'SE');\nawait resourceDetails.editValue('Field of Study', 'CS');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Field of Study', 'CS');",
              "err": {},
              "uuid": "4a92f731-2a95-4bb9-9faf-2a571db2a87f",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource School/University is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource School/University is Shownig and is editable.",
              "timedOut": false,
              "duration": 9775,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('School/University', 'Mit');\nawait resourceDetails.editValue('School/University', 'Uol');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('School/University', 'Uol');",
              "err": {},
              "uuid": "c5832664-e3e4-407a-a6bd-bc1f9e21834d",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Score/Percentage is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Score/Percentage is Shownig and is editable.",
              "timedOut": false,
              "duration": 9223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Score/Percentage', '70');\nawait resourceDetails.editValue('Score/Percentage', '80');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Score/Percentage', '80');",
              "err": {},
              "uuid": "650b6dca-4901-41fe-b38c-ba585bcda474",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Passing Year is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Passing Year is Shownig and is editable.",
              "timedOut": false,
              "duration": 9027,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Passing Year', '2020');\nawait resourceDetails.editValue('Passing Year', '2022');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Passing Year', '2022');",
              "err": {},
              "uuid": "10895c9a-e233-4820-952a-8aa2ee09b3f1",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 9754,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Employee Name', 'Stevee');\nawait resourceDetails.editValue('Employee Name', 'Steve');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Employee Name', 'Steve');",
              "err": {},
              "uuid": "17bd6cae-4372-4822-80cc-62109cf56cff",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Work Phone Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Work Phone Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 9001,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Work Phone Number', '123456');\nawait resourceDetails.editValue('Work Phone Number', '1234');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Work Phone Number', '1234');",
              "err": {},
              "uuid": "3c6dbec9-df4a-4159-9017-e02fa6d894a7",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Designation is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Designation is Shownig and is editable.",
              "timedOut": false,
              "duration": 9801,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Designation', 'Automation Associate SQA Automation');\nawait resourceDetails.editValue('Designation', 'Software Engineer');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Designation', 'Automation Software Engineer');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at ResourceDetails.checkValue (test/support/pages/resources/resourceDetails.js:87:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:437:5)",
                "diff": "- Automation Associate Software Engineer\n+ Automation Software Engineer\n"
              },
              "uuid": "09c5197c-23d2-4c21-88af-c8c5d35f203b",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Work Shift is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Work Shift is Shownig and is editable.",
              "timedOut": false,
              "duration": 9295,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Work Shift', 'Morning (9am-6pm)');\nawait resourceDetails.editValue('Work Shift', 'Evening (3pm-12pm)');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Work Shift', 'Evening (3pm-12pm)');",
              "err": {},
              "uuid": "18714cd7-2205-4147-99b5-eddff5461da3",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Work Location is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Work Location is Shownig and is editable.",
              "timedOut": false,
              "duration": 9057,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Work Location', 'Remote');\nawait resourceDetails.editValue('Work Location', 'Lahore');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Work Location', 'Lahore');",
              "err": {},
              "uuid": "101ff8ae-1801-442a-b157-4e93302ec541",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Attendance Mode is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Attendance Mode is Shownig and is editable.",
              "timedOut": false,
              "duration": 9247,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Attendance Mode', 'Invodesk');\nawait resourceDetails.editValue('Attendance Mode', 'Tahometer');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Attendance Mode', 'Tahometer');",
              "err": {},
              "uuid": "d91f3e39-8bfc-47f9-836f-2f363ebbdcba",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Employee Id is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Employee Id is Shownig and is editable.",
              "timedOut": false,
              "duration": 3979,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Employee ID', 'IZ-2023-11-01');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at ResourceDetails.checkValue (test/support/pages/resources/resourceDetails.js:87:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:477:5)",
                "diff": "- IZ-2023-01-02\n+ IZ-2023-11-01\n"
              },
              "uuid": "52e8ec23-f1ed-4f0f-b970-cfc3395c9250",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Experience is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Experience is Shownig and is editable.",
              "timedOut": false,
              "duration": 4456,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Experience', '0');",
              "err": {},
              "uuid": "e106a5fe-73dd-4f53-acbc-74f2a5d1828e",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availability is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availability is Shownig and is editable.",
              "timedOut": false,
              "duration": 4108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Availability', 'Fully Available');",
              "err": {},
              "uuid": "b9255d9f-565e-411b-a712-06e4b11d19d6",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Current Salary (PKR) is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Current Salary (PKR) is Shownig and is editable.",
              "timedOut": false,
              "duration": 9542,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Current Salary (PKR)', '50000');\nawait resourceDetails.editValue('Current Salary (PKR)', '60000');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Current Salary (PKR)', '60000');",
              "err": {},
              "uuid": "bdbaba23-59b4-43fd-a763-4e82bd830ae2",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Last Salary is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Last Salary is Shownig and is editable.",
              "timedOut": false,
              "duration": 9211,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Last Salary', '30000');\nawait resourceDetails.editValue('Last Salary', '35000');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Last Salary', '35000');",
              "err": {},
              "uuid": "594d94d0-7c66-4a5d-a1ba-b15be63a167c",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Last Increment Date is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Last Increment Date is Shownig and is editable.",
              "timedOut": false,
              "duration": 9521,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Last Increment Date', 'Jan 01, 2024');\nawait resourceDetails.editValue('Last Increment Date', '10-01-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Last Increment Date', 'Jan 10, 2024');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at ResourceDetails.checkValue (test/support/pages/resources/resourceDetails.js:87:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:524:5)",
                "diff": "- Oct 01, 2024\n+ Jan 10, 2024\n"
              },
              "uuid": "82e0cb02-73b5-4ae0-b8a8-54855927d92e",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Department is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Department is Shownig and is editable.",
              "timedOut": false,
              "duration": 9572,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Department', 'HR');\nawait resourceDetails.editValue('Department', 'Engineering');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Department', 'Engineering');",
              "err": {},
              "uuid": "b89f0de4-2793-47b9-9b39-6e0f555b4e2c",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Sub Department is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Sub Department is Shownig and is editable.",
              "timedOut": false,
              "duration": 9376,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Sub Department', 'N/A');\nawait resourceDetails.editValue('Sub Department', 'DevOps Support');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Sub Department', 'DevOps Support');",
              "err": {},
              "uuid": "082b8749-d9b6-4eb9-9139-ecb41c08f69f",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Contract Type is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Contract Type is Shownig and is editable.",
              "timedOut": false,
              "duration": 4339,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Contract Type', 'Full Time');",
              "err": {},
              "uuid": "46b830c3-2172-46d2-ae09-1f4215f15f25",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Job Status is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Job Status is Shownig and is editable.",
              "timedOut": false,
              "duration": 9720,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Job Status', 'Probation');\nawait resourceDetails.editValue('Job Status', 'Permanent');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Job Status', 'Permanent');",
              "err": {},
              "uuid": "0acf69e2-c4c1-43a9-be38-65f5d23a5563",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Date of Joining is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Date of Joining is Shownig and is editable.",
              "timedOut": false,
              "duration": 3820,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Date of Joining', 'Nov 01, 2023');\nawait resourceDetails.editValue('Date of Joining', '10-11-2023');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Date of Joining', 'Nov 10, 2023');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at ResourceDetails.checkValue (test/support/pages/resources/resourceDetails.js:87:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:571:5)",
                "diff": "- Jan 11, 2023\n+ Nov 01, 2023\n"
              },
              "uuid": "35069d55-08ce-447a-8c43-6585baa1c40f",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Expected End of Probation Date is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Expected End of Probation Date is Shownig and is editable.",
              "timedOut": false,
              "duration": 7571,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.editValue('Expected End of Probation Date', '10-01-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Expected End of Probation Date', 'Jan 10, 2024');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at ResourceDetails.checkValue (test/support/pages/resources/resourceDetails.js:87:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:585:5)",
                "diff": "- Oct 01, 2024\n+ Jan 10, 2024\n"
              },
              "uuid": "9d09c3b2-5571-4da9-9292-047f4a6e6b21",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Probation Completed is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Probation Completed is Shownig and is editable.",
              "timedOut": false,
              "duration": 6993,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.editValue('Probation Completed', '10-01-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Probation Completed', 'Jan 10, 2024');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at ResourceDetails.checkValue (test/support/pages/resources/resourceDetails.js:87:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:595:5)",
                "diff": "- Oct 01, 2024\n+ Jan 10, 2024\n"
              },
              "uuid": "541816a9-a261-4247-b057-5482f60a7812",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Permanent Date is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Permanent Date is Shownig and is editable.",
              "timedOut": false,
              "duration": 7368,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.editValue('Permanent Date', '11-01-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Permanent Date', 'Jan 11, 2024');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at ResourceDetails.checkValue (test/support/pages/resources/resourceDetails.js:87:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:605:5)",
                "diff": "- Nov 01, 2024\n+ Jan 11, 2024\n"
              },
              "uuid": "b903a0aa-07db-464b-a5d2-be5b5a869f6a",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Total Working Hours is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Working Hours is Shownig and is editable.",
              "timedOut": false,
              "duration": 9125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Working Hours', '4');\nawait resourceDetails.editValue('Total Working Hours', '6');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Total Working Hours', '6');",
              "err": {},
              "uuid": "68384fc6-69dc-45ec-9ee8-bef11a27eb68",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Earned Casual Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Earned Casual Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 8891,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Earned Casual Leaves', '13');\nawait resourceDetails.editValue('Earned Casual Leaves', '12');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Leave quota updated successfully');\nawait resourceDetails.checkValue('Earned Casual Leaves', '12');",
              "err": {},
              "uuid": "efbee8c0-1e49-4590-8703-07133eb6e63c",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Earned Sick Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Earned Sick Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 8858,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Earned Sick Leaves', '5');\nawait resourceDetails.editValue('Earned Sick Leaves', '4');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Leave quota updated successfully');\nawait resourceDetails.checkValue('Earned Sick Leaves', '4');",
              "err": {},
              "uuid": "035e34f9-181b-438d-ab7a-6ab2aaa4066d",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Total Leaves Earned (Casual/Sick) is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Leaves Earned (Casual/Sick) is Shownig and is editable.",
              "timedOut": false,
              "duration": 4237,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Leaves Earned (Casual/Sick)', '16');",
              "err": {},
              "uuid": "493155c2-5fd4-483f-94b9-c4686e08b188",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availed Casual Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Casual Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 4339,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Availed Casual Leaves', '0');",
              "err": {},
              "uuid": "8c5a361c-84e6-4e0b-b98c-6955626e92ac",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availed Sick Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Sick Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 4126,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Availed Sick Leaves', '0');",
              "err": {},
              "uuid": "cca42b32-1430-4cd4-8956-5f93c2f50a54",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Total Leaves Availed (Casual/Sick) is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Leaves Availed (Casual/Sick) is Shownig and is editable.",
              "timedOut": false,
              "duration": 4241,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Leaves Availed (Casual/Sick)', '0');",
              "err": {},
              "uuid": "e8884b2f-a041-4524-9b67-a7cf902aea37",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Total Remaining Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Remaining Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 4391,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Remaining Leaves', '17');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at ResourceDetails.checkValue (test/support/pages/resources/resourceDetails.js:87:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:675:5)",
                "diff": "- 16\n+ 17\n"
              },
              "uuid": "1b6ea472-d861-4776-85ee-cfb1d7497600",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availed Paid Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Paid Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 3652,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkOtherLeaves('Availed Paid Leaves', '0');",
              "err": {},
              "uuid": "c9860659-92b9-476e-836d-ab4a95585f76",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availed Unpaid Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Unpaid Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 2818,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkOtherLeaves('Availed Unpaid Leaves', '0');",
              "err": {},
              "uuid": "94c8c15a-d9f6-4b02-9808-149dbeb941b4",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Carry Forward Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Carry Forward Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 3637,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkOtherLeaves('Carry Forward Leaves', '0');",
              "err": {},
              "uuid": "02b1fbf3-e01d-4dd6-b5c4-c6b2bbae714e",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Project is Showing.",
              "fullTitle": "Resource Details should check if Resource Project is Showing.",
              "timedOut": false,
              "duration": 1888,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nconst projectData = await resourceDetails.checkProjectDetails();\nassert.ok(projectData.includes('automation'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:706:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "669c04f1-8f5e-4b23-baa7-ee0f34e2608f",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to delete project from details page.",
              "fullTitle": "Resource Details should able to delete project from details page.",
              "timedOut": false,
              "duration": 12671,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickDelProjectBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource removed from project successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, [aria-label=\"delete\"])\nWait timed out after 10080ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, [aria-label=\"delete\"])\nWait timed out after 10080ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d72fb65d-fee5-4aac-829a-16d625948eb3",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Hardware records are showing correctly.",
              "fullTitle": "Resource Details should check if Hardware records are showing correctly.",
              "timedOut": false,
              "duration": 12036,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [`UPDATE employee_assets SET \"employeeId\" = ${newId} WHERE \"employeeId\" = 9429;`];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nlet records = await resourceDetails.getAssetRecords();\nassert.ok(records.includes('Steve'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, [class=\"ProjectRowWrap\"])\nWait timed out after 10014ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, [class=\"ProjectRowWrap\"])\nWait timed out after 10014ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "63855a54-5dd8-4905-900f-96c316567f14",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add skills from Resource details page.",
              "fullTitle": "Resource Details should add skills from Resource details page.",
              "timedOut": false,
              "duration": 6125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickEditSkillBtn()\nawait resourceDetails.searchSkill('automation')\nawait resourceDetails.clickAddIcon()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Skills updated successfully.');\nawait resourceDetails.clickDoneBtn()",
              "err": {},
              "uuid": "4f4b97a4-0380-4964-a115-7f80e1a7fe6c",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if skills records are showing correctly.",
              "fullTitle": "Resource Details should check if skills records are showing correctly.",
              "timedOut": false,
              "duration": 2560,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nlet records = await resourceDetails.getSkillRecords();\nassert.ok(records.includes('Automation'), `Expected text not found.`);",
              "err": {},
              "uuid": "11fbcdd2-79fd-45c1-acda-adf00f168346",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to remove skill by editing.",
              "fullTitle": "Resource Details should able to remove skill by editing.",
              "timedOut": false,
              "duration": 5986,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickEditSkillBtn()\nawait resourceDetails.clickRemoveSkillBtn()\nawait resourceDetails.clickYesBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Skill is deleted successfully');\nawait resourceDetails.clickDoneBtn()\nlet records = await resourceDetails.getSkillRecordsEmpty();\nconsole.log(records);\nassert.equal(records, 'No Data');",
              "err": {},
              "uuid": "c1a4b96d-ce99-4a18-9274-d785692ce239",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if attendence is showing correctly.",
              "fullTitle": "Resource Details should check if attendence is showing correctly.",
              "timedOut": false,
              "duration": 5738,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [`UPDATE employee_attendances SET \"employeeId\" = ${newId} WHERE \"employeeId\" = 9429;`];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickAttendanceTab();\nconst url1 = await utilFun.getUrl();\nassert.equal(url1, baseUrl + attendanceTabUrl);\nawait resourceDetails.selectAttendanceYear(2024);\nawait resourceDetails.selectAttendanceMonth('Jan');\nawait utilFun.wait(2000)\nlet time = await resourceDetails.getTimeByDate('2024-01-22');\nassert.equal(time, '08:00');\ntime = await resourceDetails.getTimeByDate('2024-01-23');\nassert.equal(time, '08:00');\ntime = await resourceDetails.getTimeByDate('2024-01-24');\nassert.equal(time, '08:20');\ntime = await resourceDetails.getTimeByDate('2024-01-25');\nassert.equal(time, '07:30');\ntime = await resourceDetails.getTimeByDate('2024-01-26');\nassert.equal(time, '06:40');\nlet weekTime = await resourceDetails.getWeekTime(4);\nassert.equal(weekTime, '38:30');",
              "err": {
                "message": "AssertionError: '' == '08:00'",
                "estack": "AssertionError [ERR_ASSERTION]: '' == '08:00'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:782:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "+ 08:00\n"
              },
              "uuid": "a4a4ea58-6a7d-46c8-87b6-099ade3c9021",
              "parentUUID": "7be1bfa9-48f4-4c08-b484-e0aca1978e72",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f1688dc4-d8e8-402d-8de1-fcd09430bd9e",
            "1dc4d7c0-22f9-49a6-989b-c910ca967106",
            "3628f641-37ae-4f33-8b6b-d6900a10bdf3",
            "9818f4a1-3531-41df-b399-310f97cb194d",
            "cb255853-9996-4207-9e6d-e9dd9722242f",
            "741809f3-c3c8-45cf-a28b-f876c18e3707",
            "c5c17f92-891f-44a6-9cb1-3f7e772e671d",
            "b269d6af-c85b-4ea0-b83d-3508bda0a9f6",
            "b5b42bbe-3715-4d42-8d8b-5e66d4997045",
            "4411ca08-e276-4f8a-a248-68906804223c",
            "fd50aa44-c750-46b2-9427-3847f38db7d2",
            "75b1373a-6ae1-4ebb-9298-a8c53484b7d2",
            "d61750af-31b9-436f-99f5-35f8771ca065",
            "f52c9bb6-bbe4-4420-b0fd-1318407a3aac",
            "9f3117b4-0824-4406-9e04-6934396362cc",
            "4db1795a-65c5-4b9b-95a5-3ae3ede380cf",
            "6f43a3a5-7e6e-4ba4-96cc-40d53389e58c",
            "5e941a90-e5a6-4144-9b84-7ebd20035d46",
            "650ac426-d1fa-4590-8ca7-8cf203a9c1da",
            "9aa19708-91b3-48b7-9cc4-0c1e53143f9b",
            "9ceb0d51-1724-4a4d-898a-04e365ab05c8",
            "4a92f731-2a95-4bb9-9faf-2a571db2a87f",
            "c5832664-e3e4-407a-a6bd-bc1f9e21834d",
            "650b6dca-4901-41fe-b38c-ba585bcda474",
            "10895c9a-e233-4820-952a-8aa2ee09b3f1",
            "17bd6cae-4372-4822-80cc-62109cf56cff",
            "3c6dbec9-df4a-4159-9017-e02fa6d894a7",
            "18714cd7-2205-4147-99b5-eddff5461da3",
            "101ff8ae-1801-442a-b157-4e93302ec541",
            "d91f3e39-8bfc-47f9-836f-2f363ebbdcba",
            "e106a5fe-73dd-4f53-acbc-74f2a5d1828e",
            "b9255d9f-565e-411b-a712-06e4b11d19d6",
            "bdbaba23-59b4-43fd-a763-4e82bd830ae2",
            "594d94d0-7c66-4a5d-a1ba-b15be63a167c",
            "b89f0de4-2793-47b9-9b39-6e0f555b4e2c",
            "082b8749-d9b6-4eb9-9139-ecb41c08f69f",
            "46b830c3-2172-46d2-ae09-1f4215f15f25",
            "0acf69e2-c4c1-43a9-be38-65f5d23a5563",
            "68384fc6-69dc-45ec-9ee8-bef11a27eb68",
            "efbee8c0-1e49-4590-8703-07133eb6e63c",
            "035e34f9-181b-438d-ab7a-6ab2aaa4066d",
            "493155c2-5fd4-483f-94b9-c4686e08b188",
            "8c5a361c-84e6-4e0b-b98c-6955626e92ac",
            "cca42b32-1430-4cd4-8956-5f93c2f50a54",
            "e8884b2f-a041-4524-9b67-a7cf902aea37",
            "c9860659-92b9-476e-836d-ab4a95585f76",
            "94c8c15a-d9f6-4b02-9808-149dbeb941b4",
            "02b1fbf3-e01d-4dd6-b5c4-c6b2bbae714e",
            "4f4b97a4-0380-4964-a115-7f80e1a7fe6c",
            "11fbcdd2-79fd-45c1-acda-adf00f168346",
            "c1a4b96d-ce99-4a18-9274-d785692ce239"
          ],
          "failures": [
            "db81a426-3e88-47f3-ba1e-1588ac5a058b",
            "09c5197c-23d2-4c21-88af-c8c5d35f203b",
            "52e8ec23-f1ed-4f0f-b970-cfc3395c9250",
            "82e0cb02-73b5-4ae0-b8a8-54855927d92e",
            "35069d55-08ce-447a-8c43-6585baa1c40f",
            "9d09c3b2-5571-4da9-9292-047f4a6e6b21",
            "541816a9-a261-4247-b057-5482f60a7812",
            "b903a0aa-07db-464b-a5d2-be5b5a869f6a",
            "1b6ea472-d861-4776-85ee-cfb1d7497600",
            "669c04f1-8f5e-4b23-baa7-ee0f34e2608f",
            "d72fb65d-fee5-4aac-829a-16d625948eb3",
            "63855a54-5dd8-4905-900f-96c316567f14",
            "a4a4ea58-6a7d-46c8-87b6-099ade3c9021"
          ],
          "pending": [],
          "skipped": [],
          "duration": 519858,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 100000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "test/report"
      },
      "version": "6.2.0"
    }
  }
}