{
  "stats": {
    "suites": 21,
    "tests": 249,
    "passes": 0,
    "pending": 19,
    "failures": 230,
    "start": "2024-02-29T04:00:33.430Z",
    "end": "2024-02-29T04:55:16.539Z",
    "duration": 3283109,
    "testsRegistered": 564,
    "passPercent": 0,
    "pendingPercent": 3.368794326241135,
    "other": 13,
    "hasOther": true,
    "skipped": 314,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "13d8fff2-ed14-4a2c-8d18-94944c6e9f4b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e3bd6200-b113-4f38-aeb2-21d3496898f3",
          "title": "Pending Evaluations",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_1_pendings.js",
          "file": "/test/e2e/evaluation/spec_1_pendings.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"should check if pending evaluations are showing\"",
              "fullTitle": "Pending Evaluations \"before all\" hook for \"should check if pending evaluations are showing\"",
              "timedOut": true,
              "duration": 100067,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE departments SET \"hodId\" = 9474 WHERE id = 9;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.login(email, password);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query1 =[\n    `UPDATE employee_evaluations SET \"incrementType\" = 'annual' WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n    `DELETE FROM employee_evaluations WHERE \"employeeId\" = 9742 AND \"incrementType\" = 'designation';`,\n    ];\n    await utilFun.udpateDatabase(query1);",
              "err": {
                "message": "Error: Timeout of 100000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_1_pendings.js)",
                "estack": "Error: Timeout of 100000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_1_pendings.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                "diff": null
              },
              "uuid": "ffe0861b-ca19-46b8-95c9-fc9411b81ead",
              "parentUUID": "e3bd6200-b113-4f38-aeb2-21d3496898f3",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Pending Evaluations \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.wait(3000);",
              "err": {},
              "uuid": "9a4ce118-be10-470a-a6d3-1197c863886a",
              "parentUUID": "e3bd6200-b113-4f38-aeb2-21d3496898f3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if pending evaluations are showing",
              "fullTitle": "Pending Evaluations should check if pending evaluations are showing",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "1ff2893e-ddad-448b-b6de-a0b22df1a173",
              "parentUUID": "e3bd6200-b113-4f38-aeb2-21d3496898f3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Pending Evaluations should able to filter resoures by name",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "e00abcca-aa90-4862-90e0-13abf002d3c6",
              "parentUUID": "e3bd6200-b113-4f38-aeb2-21d3496898f3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to filter resoures by Review Type",
              "fullTitle": "Pending Evaluations should able to filter resoures by Review Type",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "5faff4aa-c9cd-4ae2-bd4e-fac9607a4984",
              "parentUUID": "e3bd6200-b113-4f38-aeb2-21d3496898f3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Pending Evaluations should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "4b696d10-104a-4fbc-b431-359817384f4a",
              "parentUUID": "e3bd6200-b113-4f38-aeb2-21d3496898f3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Pending Evaluations should able to  copy email from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nawait utilFun.wait(3000);\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "ddf30aae-70fd-4eac-8e58-6a6ec0ede86d",
              "parentUUID": "e3bd6200-b113-4f38-aeb2-21d3496898f3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Pending Evaluations should able to Send Email from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "2acb471c-3d54-4e73-88ba-29a8ff6d5727",
              "parentUUID": "e3bd6200-b113-4f38-aeb2-21d3496898f3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Pending Evaluations should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "6f313562-a3cd-4708-9fc9-7d83716b4b56",
              "parentUUID": "e3bd6200-b113-4f38-aeb2-21d3496898f3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Pending Evaluations should able to see Email from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(3000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "d1c08e2d-53bf-4a5a-98e2-6c7ba377d92e",
              "parentUUID": "e3bd6200-b113-4f38-aeb2-21d3496898f3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Pending Evaluations should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "d8efa709-ff5a-4234-8f4a-a58964f4d640",
              "parentUUID": "e3bd6200-b113-4f38-aeb2-21d3496898f3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Pending Evaluations should able to see Resource Details from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'http://localhost:3000/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "1ab8c37f-8a5c-4b32-b4fb-af04e75e1645",
              "parentUUID": "e3bd6200-b113-4f38-aeb2-21d3496898f3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Pending Evaluations should able to see employee history",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "83822b6a-f8f9-44a0-8630-7eb45f1f499c",
              "parentUUID": "e3bd6200-b113-4f38-aeb2-21d3496898f3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to request a review",
              "fullTitle": "Pending Evaluations should able to request a review",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait evaluation.clickReqReviewBtn();\nawait utilFun.wait(1000);\nawait evaluation.clickHod('Muhammad Bilal Rafaqat');\nawait evaluation.clickSendReqBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Request is send successfully.');",
              "err": {},
              "uuid": "c40c5969-df70-4083-90fe-4eb28fa5be80",
              "parentUUID": "e3bd6200-b113-4f38-aeb2-21d3496898f3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to give a review",
              "fullTitle": "Pending Evaluations should able to give a review",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait utilFun.wait(1000);\nawait evaluation.clickAddFeedback();\n// await feedbackForm.enterDate('03092023');\nawait feedbackForm.selectFeedbackDuration('6 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.selectRevisedDesignationCategory('Automation');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('testingggg');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "8170a30e-943a-40bb-a805-bbb212fe37b4",
              "parentUUID": "e3bd6200-b113-4f38-aeb2-21d3496898f3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to edit review form",
              "fullTitle": "Pending Evaluations should able to edit review form",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickEditForm();\nawait utilFun.wait(1000);\n// await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('updated');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "2c6f1eca-d842-4283-bb81-b7fcb6f8635d",
              "parentUUID": "e3bd6200-b113-4f38-aeb2-21d3496898f3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to defer review",
              "fullTitle": "Pending Evaluations should able to defer review",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickDefer();\nawait evaluation.clickDeferType();\nawait utilFun.wait(1000);\nawait evaluation.selectDeferType('2 Weeks');\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "51cf0df0-d007-49cd-99cc-e86c7ee8a2e2",
              "parentUUID": "e3bd6200-b113-4f38-aeb2-21d3496898f3",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to complete review",
              "fullTitle": "Pending Evaluations should able to complete review",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickComplete();\nawait feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "4cf091eb-ece6-44a7-a6fc-a95e3257c2da",
              "parentUUID": "e3bd6200-b113-4f38-aeb2-21d3496898f3",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "1ff2893e-ddad-448b-b6de-a0b22df1a173",
            "e00abcca-aa90-4862-90e0-13abf002d3c6",
            "5faff4aa-c9cd-4ae2-bd4e-fac9607a4984",
            "4b696d10-104a-4fbc-b431-359817384f4a",
            "ddf30aae-70fd-4eac-8e58-6a6ec0ede86d",
            "2acb471c-3d54-4e73-88ba-29a8ff6d5727",
            "6f313562-a3cd-4708-9fc9-7d83716b4b56",
            "d1c08e2d-53bf-4a5a-98e2-6c7ba377d92e",
            "d8efa709-ff5a-4234-8f4a-a58964f4d640",
            "1ab8c37f-8a5c-4b32-b4fb-af04e75e1645",
            "83822b6a-f8f9-44a0-8630-7eb45f1f499c",
            "c40c5969-df70-4083-90fe-4eb28fa5be80",
            "8170a30e-943a-40bb-a805-bbb212fe37b4",
            "2c6f1eca-d842-4283-bb81-b7fcb6f8635d",
            "51cf0df0-d007-49cd-99cc-e86c7ee8a2e2",
            "4cf091eb-ece6-44a7-a6fc-a95e3257c2da"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "95a8833c-c784-4657-a7de-c7b0927f28ce",
          "title": "Performance Base Evaluations",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_2_performance.js",
          "file": "/test/e2e/evaluation/spec_2_performance.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"should check if performance evaluations are showing\"",
              "fullTitle": "Performance Base Evaluations \"before all\" hook for \"should check if performance evaluations are showing\"",
              "timedOut": true,
              "duration": 100123,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'performance' WHERE id = 26;`,\n  `UPDATE employees SET \"designation\" = 'Software Engineer' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 138 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {
                "message": "Error: Timeout of 100000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_2_performance.js)",
                "estack": "Error: Timeout of 100000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_2_performance.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                "diff": null
              },
              "uuid": "7b9e94d2-0b80-472e-9daa-63640b746ff1",
              "parentUUID": "95a8833c-c784-4657-a7de-c7b0927f28ce",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Performance Base Evaluations \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation-performance');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "9655ec03-3149-4911-a667-b946a8f0ed07",
              "parentUUID": "95a8833c-c784-4657-a7de-c7b0927f28ce",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if performance evaluations are showing",
              "fullTitle": "Performance Base Evaluations should check if performance evaluations are showing",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "5fbf30a1-1ac1-4e11-a8c6-51d199690609",
              "parentUUID": "95a8833c-c784-4657-a7de-c7b0927f28ce",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Performance Base Evaluations should able to filter resoures by name",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "ee44c7f2-47ab-46bb-b2f5-c9c25ab34215",
              "parentUUID": "95a8833c-c784-4657-a7de-c7b0927f28ce",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Performance Base Evaluations should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "3dc49692-0c1f-45bf-89ba-48a356a86cf5",
              "parentUUID": "95a8833c-c784-4657-a7de-c7b0927f28ce",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Performance Base Evaluations should able to  copy email from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "68a82286-fb76-4037-9501-b1a5eaa1d65e",
              "parentUUID": "95a8833c-c784-4657-a7de-c7b0927f28ce",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Performance Base Evaluations should able to Send Email from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "3b080a21-0966-4d7c-a36c-d40b921d6ad9",
              "parentUUID": "95a8833c-c784-4657-a7de-c7b0927f28ce",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Performance Base Evaluations should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "d3de3389-1b05-4462-ac30-83a81de9618f",
              "parentUUID": "95a8833c-c784-4657-a7de-c7b0927f28ce",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Performance Base Evaluations should able to see Email from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(4000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "1d08e8cc-6777-40f1-9815-35f13b7174f5",
              "parentUUID": "95a8833c-c784-4657-a7de-c7b0927f28ce",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Performance Base Evaluations should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "f3b6f4ae-4aee-4453-9742-5bc29ec22753",
              "parentUUID": "95a8833c-c784-4657-a7de-c7b0927f28ce",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Performance Base Evaluations should able to see Resource Details from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "3796814c-50ca-4644-8118-bc7ef133355f",
              "parentUUID": "95a8833c-c784-4657-a7de-c7b0927f28ce",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Performance Base Evaluations should able to see employee history",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "7a84eabb-4335-4c68-a65d-837ab75ef780",
              "parentUUID": "95a8833c-c784-4657-a7de-c7b0927f28ce",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to request a review",
              "fullTitle": "Performance Base Evaluations should able to request a review",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();4\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait evaluation.clickReqReviewBtn();\nawait utilFun.wait(1000);\nawait evaluation.clickHod('Muhammad Bilal Rafaqat');\nawait evaluation.clickSendReqBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Request is send successfully.');",
              "err": {},
              "uuid": "b1b50df8-daa9-465f-845f-d72ecb7b3c94",
              "parentUUID": "95a8833c-c784-4657-a7de-c7b0927f28ce",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to give a review",
              "fullTitle": "Performance Base Evaluations should able to give a review",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait utilFun.wait(1000);\nawait evaluation.clickAddFeedback();\nawait feedbackForm.enterDate('03092023');\nawait feedbackForm.selectFeedbackDuration('6 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('testingggg');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "0546a64e-4c50-48c8-bf5a-83781b7a5907",
              "parentUUID": "95a8833c-c784-4657-a7de-c7b0927f28ce",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to edit review form",
              "fullTitle": "Performance Base Evaluations should able to edit review form",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickEditForm();\nawait utilFun.wait(1000);\nawait feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('updated');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "744033a2-7ec4-4bcf-a04e-eb25c7296dbc",
              "parentUUID": "95a8833c-c784-4657-a7de-c7b0927f28ce",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to defer review",
              "fullTitle": "Performance Base Evaluations should able to defer review",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickDefer();\nawait evaluation.clickDeferType();\nawait utilFun.wait(1000);\nawait evaluation.selectDeferType('2 Weeks');\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "d3f1c397-81cd-4de8-873d-06dd7dbff277",
              "parentUUID": "95a8833c-c784-4657-a7de-c7b0927f28ce",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to complete review",
              "fullTitle": "Performance Base Evaluations should able to complete review",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickComplete();\nawait feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "cbb20b21-e8dd-4ad4-ab29-20e945be80f8",
              "parentUUID": "95a8833c-c784-4657-a7de-c7b0927f28ce",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "5fbf30a1-1ac1-4e11-a8c6-51d199690609",
            "ee44c7f2-47ab-46bb-b2f5-c9c25ab34215",
            "3dc49692-0c1f-45bf-89ba-48a356a86cf5",
            "68a82286-fb76-4037-9501-b1a5eaa1d65e",
            "3b080a21-0966-4d7c-a36c-d40b921d6ad9",
            "d3de3389-1b05-4462-ac30-83a81de9618f",
            "1d08e8cc-6777-40f1-9815-35f13b7174f5",
            "f3b6f4ae-4aee-4453-9742-5bc29ec22753",
            "3796814c-50ca-4644-8118-bc7ef133355f",
            "7a84eabb-4335-4c68-a65d-837ab75ef780",
            "b1b50df8-daa9-465f-845f-d72ecb7b3c94",
            "0546a64e-4c50-48c8-bf5a-83781b7a5907",
            "744033a2-7ec4-4bcf-a04e-eb25c7296dbc",
            "d3f1c397-81cd-4de8-873d-06dd7dbff277",
            "cbb20b21-e8dd-4ad4-ab29-20e945be80f8"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "c14e00f2-7f03-467c-8b45-c01307ca7213",
          "title": "Retention Base Evaluations",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_3_retention.js",
          "file": "/test/e2e/evaluation/spec_3_retention.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"should check if retention evaluations are showing\"",
              "fullTitle": "Retention Base Evaluations \"before all\" hook for \"should check if retention evaluations are showing\"",
              "timedOut": false,
              "duration": 90173,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'retention' WHERE id = 26;`,\n  `UPDATE employees SET \"designation\" = 'Software Engineer' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 138 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {
                "message": "StaleElementReferenceError: stale element reference: stale element not found\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "StaleElementReferenceError: stale element reference: stale element not found\n  (Session info: headless chrome=119.0.6045.159)\n    at Object.throwDecodedError (node_modules/selenium-webdriver/lib/error.js:524:15)\n    at parseHttpResponse (node_modules/selenium-webdriver/lib/http.js:601:13)\n    at Executor.execute (node_modules/selenium-webdriver/lib/http.js:529:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async thenableWebDriverProxy.execute (node_modules/selenium-webdriver/lib/webdriver.js:745:17)\n    at async UtillityFun.selectAccount (test/support/utillityFun.js:151:21)\n    at async UtillityFun.loginAccount (test/support/utillityFun.js:83:5)\n    at async Context.<anonymous> (test/e2e/evaluation/spec_3_retention.js:12:5)",
                "diff": null
              },
              "uuid": "ba979095-0a63-4be1-92b3-f526d67d605d",
              "parentUUID": "c14e00f2-7f03-467c-8b45-c01307ca7213",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Retention Base Evaluations \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation-retention');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "a920dc84-8423-447b-b93f-3ee014f5f916",
              "parentUUID": "c14e00f2-7f03-467c-8b45-c01307ca7213",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if retention evaluations are showing",
              "fullTitle": "Retention Base Evaluations should check if retention evaluations are showing",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "e8029655-0fa2-4243-89fb-f6bad8bbaa74",
              "parentUUID": "c14e00f2-7f03-467c-8b45-c01307ca7213",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Retention Base Evaluations should able to filter resoures by name",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "c12f77ff-39e8-4258-99a1-fb35d5dec15d",
              "parentUUID": "c14e00f2-7f03-467c-8b45-c01307ca7213",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Retention Base Evaluations should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "3f236fb8-4d66-4200-8e57-71636207a452",
              "parentUUID": "c14e00f2-7f03-467c-8b45-c01307ca7213",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Retention Base Evaluations should able to  copy email from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "5b4cb123-3989-4f5a-b830-cf62a31cc324",
              "parentUUID": "c14e00f2-7f03-467c-8b45-c01307ca7213",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Retention Base Evaluations should able to Send Email from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "cf2fa9d5-7d38-49cd-947f-80d7c3d829e8",
              "parentUUID": "c14e00f2-7f03-467c-8b45-c01307ca7213",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Retention Base Evaluations should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "6067f0d5-fef4-4f4c-b811-1af6c2bcecc5",
              "parentUUID": "c14e00f2-7f03-467c-8b45-c01307ca7213",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Retention Base Evaluations should able to see Email from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(4000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "229734ba-f05f-4585-a55e-d164286ce897",
              "parentUUID": "c14e00f2-7f03-467c-8b45-c01307ca7213",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Retention Base Evaluations should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "e8a1c0f7-7ff3-445d-b54c-a10a30fc8446",
              "parentUUID": "c14e00f2-7f03-467c-8b45-c01307ca7213",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Retention Base Evaluations should able to see Resource Details from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "20acf871-eb0d-4376-8198-60235fefad6a",
              "parentUUID": "c14e00f2-7f03-467c-8b45-c01307ca7213",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Retention Base Evaluations should able to see employee history",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "da58730c-ac92-4f62-8237-27e962f904f8",
              "parentUUID": "c14e00f2-7f03-467c-8b45-c01307ca7213",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to request a review",
              "fullTitle": "Retention Base Evaluations should able to request a review",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait evaluation.clickReqReviewBtn();\nawait utilFun.wait(1000);\nawait evaluation.clickHod('Muhammad Bilal Rafaqat');\nawait evaluation.clickSendReqBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Request is send successfully.');",
              "err": {},
              "uuid": "421e1b37-0b46-47a9-890b-30181b38ad9f",
              "parentUUID": "c14e00f2-7f03-467c-8b45-c01307ca7213",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to give a review",
              "fullTitle": "Retention Base Evaluations should able to give a review",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait utilFun.wait(1000);\nawait evaluation.clickAddFeedback();\n// await feedbackForm.enterDate('03092023');\nawait feedbackForm.selectFeedbackDuration('6 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('testingggg');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "ae725da5-99ad-4e9a-8662-7ad70d813592",
              "parentUUID": "c14e00f2-7f03-467c-8b45-c01307ca7213",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to edit review form",
              "fullTitle": "Retention Base Evaluations should able to edit review form",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickEditForm();\nawait utilFun.wait(1000);\n// await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('updated');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "07ffa072-ba5d-4ab8-a106-10abb50e23d3",
              "parentUUID": "c14e00f2-7f03-467c-8b45-c01307ca7213",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to defer review",
              "fullTitle": "Retention Base Evaluations should able to defer review",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickDefer();\nawait evaluation.clickDeferType();\nawait utilFun.wait(1000);\nawait evaluation.selectDeferType('2 Weeks');\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "fe675c12-b694-4d6f-814f-a44cd4cd111c",
              "parentUUID": "c14e00f2-7f03-467c-8b45-c01307ca7213",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to complete review",
              "fullTitle": "Retention Base Evaluations should able to complete review",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickComplete();\nawait feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "534742d1-8eeb-45c7-99ec-ce58d5f83c43",
              "parentUUID": "c14e00f2-7f03-467c-8b45-c01307ca7213",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "e8029655-0fa2-4243-89fb-f6bad8bbaa74",
            "c12f77ff-39e8-4258-99a1-fb35d5dec15d",
            "3f236fb8-4d66-4200-8e57-71636207a452",
            "5b4cb123-3989-4f5a-b830-cf62a31cc324",
            "cf2fa9d5-7d38-49cd-947f-80d7c3d829e8",
            "6067f0d5-fef4-4f4c-b811-1af6c2bcecc5",
            "229734ba-f05f-4585-a55e-d164286ce897",
            "e8a1c0f7-7ff3-445d-b54c-a10a30fc8446",
            "20acf871-eb0d-4376-8198-60235fefad6a",
            "da58730c-ac92-4f62-8237-27e962f904f8",
            "421e1b37-0b46-47a9-890b-30181b38ad9f",
            "ae725da5-99ad-4e9a-8662-7ad70d813592",
            "07ffa072-ba5d-4ab8-a106-10abb50e23d3",
            "fe675c12-b694-4d6f-814f-a44cd4cd111c",
            "534742d1-8eeb-45c7-99ec-ce58d5f83c43"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "d44b2af2-8174-4f62-8db9-6103d3cf1689",
          "title": "Evaluations History",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_4_history.js",
          "file": "/test/e2e/evaluation/spec_4_history.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"should check if evaluations history is showing\"",
              "fullTitle": "Evaluations History \"before all\" hook for \"should check if evaluations history is showing\"",
              "timedOut": false,
              "duration": 1871,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query = [\n  `UPDATE employee_evaluations SET \"processType\" = 'COMPLETE' WHERE id = 26;`,\n  `DELETE FROM employee_evaluations WHERE \"employeeId\" = 9742 AND \"incrementType\" = 'designation';`,\n  `UPDATE employee_evaluations SET \"processDate\" = '2023-03-28 17:32:33.501+05' WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {
                "message": "StaleElementReferenceError: stale element reference: stale element not found\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "StaleElementReferenceError: stale element reference: stale element not found\n  (Session info: headless chrome=119.0.6045.159)\n    at Object.throwDecodedError (node_modules/selenium-webdriver/lib/error.js:524:15)\n    at parseHttpResponse (node_modules/selenium-webdriver/lib/http.js:601:13)\n    at Executor.execute (node_modules/selenium-webdriver/lib/http.js:529:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async thenableWebDriverProxy.execute (node_modules/selenium-webdriver/lib/webdriver.js:745:17)",
                "diff": null
              },
              "uuid": "75aab59f-1306-4a05-b89a-753fd9c54961",
              "parentUUID": "d44b2af2-8174-4f62-8db9-6103d3cf1689",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Evaluations History \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation-history');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "c01b958c-2a54-4294-8bfd-c3cd3f92fe36",
              "parentUUID": "d44b2af2-8174-4f62-8db9-6103d3cf1689",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if evaluations history is showing",
              "fullTitle": "Evaluations History should check if evaluations history is showing",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "41aecd8a-ff2a-4bb6-822a-55d3237edcef",
              "parentUUID": "d44b2af2-8174-4f62-8db9-6103d3cf1689",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Evaluations History should able to filter resoures by name",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "a7f39167-ff7a-41d3-85c2-d17a6ca7f3cc",
              "parentUUID": "d44b2af2-8174-4f62-8db9-6103d3cf1689",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to check review is completed",
              "fullTitle": "Evaluations History should able to check review is completed",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.checkProcessState()\nutilFun.assertEql(name, 'Complete');",
              "err": {},
              "uuid": "9d01b06f-4431-44c1-a0dc-7bd8e0b7d81a",
              "parentUUID": "d44b2af2-8174-4f62-8db9-6103d3cf1689",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to filter resoures by Review Type",
              "fullTitle": "Evaluations History should able to filter resoures by Review Type",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "150041ed-9d31-4178-bc8c-3a748a7c6e1d",
              "parentUUID": "d44b2af2-8174-4f62-8db9-6103d3cf1689",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Evaluations History should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "f8ab00ea-56ff-4b75-a233-81b9c6a8fa99",
              "parentUUID": "d44b2af2-8174-4f62-8db9-6103d3cf1689",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Evaluations History should able to  copy email from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "41e7a849-f2a6-4338-9310-834dbb9612f3",
              "parentUUID": "d44b2af2-8174-4f62-8db9-6103d3cf1689",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Evaluations History should able to Send Email from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "ba384318-043c-4f1e-b88b-6d1c56c3903e",
              "parentUUID": "d44b2af2-8174-4f62-8db9-6103d3cf1689",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Evaluations History should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "92eb16fd-ef2f-46f8-b5fd-79012330f9a6",
              "parentUUID": "d44b2af2-8174-4f62-8db9-6103d3cf1689",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Evaluations History should able to see Email from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(4000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "ae22378a-9510-4e26-9a86-a34171b2760c",
              "parentUUID": "d44b2af2-8174-4f62-8db9-6103d3cf1689",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Evaluations History should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "55b58a6f-724b-4406-8309-0790d2dcf557",
              "parentUUID": "d44b2af2-8174-4f62-8db9-6103d3cf1689",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Evaluations History should able to see Resource Details from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "17b11ba8-4de4-43d2-a09e-ff6890898d3b",
              "parentUUID": "d44b2af2-8174-4f62-8db9-6103d3cf1689",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Evaluations History should able to see employee history",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "c4f9a662-0db9-4aae-a863-91da00237c15",
              "parentUUID": "d44b2af2-8174-4f62-8db9-6103d3cf1689",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Initiate a Revised Designation",
              "fullTitle": "Evaluations History should able to Initiate a Revised Designation",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Initiate a Revised Designation');\nawait utilFun.wait(3000);\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Review is initiated successfully.');",
              "err": {},
              "uuid": "f146b93d-6ede-4f11-8bbd-0d54dd5a0476",
              "parentUUID": "d44b2af2-8174-4f62-8db9-6103d3cf1689",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able check if revised Designation evaluation is showing",
              "fullTitle": "Evaluations History should able check if revised Designation evaluation is showing",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nawait evaluation.selectReviewType('Rev. Designation');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "d5ab6956-12eb-427e-8a2c-bb17fab76169",
              "parentUUID": "d44b2af2-8174-4f62-8db9-6103d3cf1689",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "41aecd8a-ff2a-4bb6-822a-55d3237edcef",
            "a7f39167-ff7a-41d3-85c2-d17a6ca7f3cc",
            "9d01b06f-4431-44c1-a0dc-7bd8e0b7d81a",
            "150041ed-9d31-4178-bc8c-3a748a7c6e1d",
            "f8ab00ea-56ff-4b75-a233-81b9c6a8fa99",
            "41e7a849-f2a6-4338-9310-834dbb9612f3",
            "ba384318-043c-4f1e-b88b-6d1c56c3903e",
            "92eb16fd-ef2f-46f8-b5fd-79012330f9a6",
            "ae22378a-9510-4e26-9a86-a34171b2760c",
            "55b58a6f-724b-4406-8309-0790d2dcf557",
            "17b11ba8-4de4-43d2-a09e-ff6890898d3b",
            "c4f9a662-0db9-4aae-a863-91da00237c15",
            "f146b93d-6ede-4f11-8bbd-0d54dd5a0476",
            "d5ab6956-12eb-427e-8a2c-bb17fab76169"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "8601a7e5-afb7-425f-b2a3-32e27e344296",
          "title": "Evaluations Review Types",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_5_reviewTypes.js",
          "file": "/test/e2e/evaluation/spec_5_reviewTypes.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"should check if annual evaluations are showing\"",
              "fullTitle": "Evaluations Review Types \"before all\" hook for \"should check if annual evaluations are showing\"",
              "timedOut": false,
              "duration": 11836,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, li)\nWait timed out after 10128ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, li)\nWait timed out after 10128ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "e60091a8-2c26-4ee6-93ed-877452b25c00",
              "parentUUID": "8601a7e5-afb7-425f-b2a3-32e27e344296",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Evaluations Review Types \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.wait(3000);",
              "err": {},
              "uuid": "bc059ec7-f5b6-4b98-8b4d-af98257cef33",
              "parentUUID": "8601a7e5-afb7-425f-b2a3-32e27e344296",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if annual evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if annual evaluations are showing",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'annual' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Annual'), `Expected text not found.`);",
              "err": {},
              "uuid": "33f72d67-6375-4291-9e7f-7cb8459a1154",
              "parentUUID": "8601a7e5-afb7-425f-b2a3-32e27e344296",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Annual'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "6bc2f5bf-7635-4444-8b8d-49cfb446023e",
              "parentUUID": "8601a7e5-afb7-425f-b2a3-32e27e344296",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Bi Annual evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if Bi Annual evaluations are showing",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'bi-annual' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Bi Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Bi Annual'), `Expected text not found.`);",
              "err": {},
              "uuid": "b5895ea5-0b04-4482-9882-7e135229ed99",
              "parentUUID": "8601a7e5-afb7-425f-b2a3-32e27e344296",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Bi Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Bi Annual'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "763b14ca-0b3b-4b0f-92fd-d3d9a1873874",
              "parentUUID": "8601a7e5-afb7-425f-b2a3-32e27e344296",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Internship evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if Internship evaluations are showing",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'internship' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Internship');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Internship'), `Expected text not found.`);",
              "err": {},
              "uuid": "012b4a16-d684-4879-91ec-e6cdc659aa08",
              "parentUUID": "8601a7e5-afb7-425f-b2a3-32e27e344296",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Internship');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Internship'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "0df1f758-e78a-461b-b7f0-68513933244d",
              "parentUUID": "8601a7e5-afb7-425f-b2a3-32e27e344296",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should confirm Hr have Access of extend Btn and can extend Evaluation",
              "fullTitle": "Evaluations Review Types should confirm Hr have Access of extend Btn and can extend Evaluation",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Internship');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Internship'), `Expected text not found.`);\nawait evaluation.checkIfExtenfBtnIsLocated()\nawait utilFun.wait(1000);\nawait evaluation.clickExtendBtn()\nawait utilFun.wait(1000);\nawait evaluation.clickDeferType()\nawait evaluation.selectDeferType('2 Weeks');\nawait utilFun.wait(1000);\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "6ed8440b-2d72-496c-8249-8bb40bf308ee",
              "parentUUID": "8601a7e5-afb7-425f-b2a3-32e27e344296",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if End of Probation evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if End of Probation evaluations are showing",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'end_of_probation' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('End of Probation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('End of Probation'), `Expected text not found.`);",
              "err": {},
              "uuid": "80d0e8c6-7700-4a1e-b612-b0596febfad2",
              "parentUUID": "8601a7e5-afb7-425f-b2a3-32e27e344296",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('End of Probation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('End of Probation'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "7b30af47-bcae-4a56-b8c0-8166390c1b06",
              "parentUUID": "8601a7e5-afb7-425f-b2a3-32e27e344296",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should confirm Hr have Access of extend Btn and can extend Evaluation",
              "fullTitle": "Evaluations Review Types should confirm Hr have Access of extend Btn and can extend Evaluation",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('End of Probation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('End of Probation'), `Expected text not found.`);\nawait evaluation.checkIfExtenfBtnIsLocated()\nawait utilFun.wait(1000);\nawait evaluation.clickExtendBtn()\nawait utilFun.wait(1000);\nawait evaluation.clickDeferType()\nawait evaluation.selectDeferType('2 Weeks');\nawait utilFun.wait(1000);\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "145929bc-2ccc-498b-92e9-5b8c7253a9dd",
              "parentUUID": "8601a7e5-afb7-425f-b2a3-32e27e344296",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Revised Designation evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if Revised Designation evaluations are showing",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'designation' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Rev. Designation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Rev. Designation'), `Expected text not found.`);",
              "err": {},
              "uuid": "3c829db0-5452-4f76-bcfb-58019275d909",
              "parentUUID": "8601a7e5-afb7-425f-b2a3-32e27e344296",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Rev. Designation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Rev. Designation'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "e5d6cae6-eb77-4c97-953c-ca2d368a7ed8",
              "parentUUID": "8601a7e5-afb7-425f-b2a3-32e27e344296",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "33f72d67-6375-4291-9e7f-7cb8459a1154",
            "6bc2f5bf-7635-4444-8b8d-49cfb446023e",
            "b5895ea5-0b04-4482-9882-7e135229ed99",
            "763b14ca-0b3b-4b0f-92fd-d3d9a1873874",
            "012b4a16-d684-4879-91ec-e6cdc659aa08",
            "0df1f758-e78a-461b-b7f0-68513933244d",
            "6ed8440b-2d72-496c-8249-8bb40bf308ee",
            "80d0e8c6-7700-4a1e-b612-b0596febfad2",
            "7b30af47-bcae-4a56-b8c0-8166390c1b06",
            "145929bc-2ccc-498b-92e9-5b8c7253a9dd",
            "3c829db0-5452-4f76-bcfb-58019275d909",
            "e5d6cae6-eb77-4c97-953c-ca2d368a7ed8"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "265bc9fa-ba02-439e-a949-f26957f80592",
          "title": "My Leaves",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/leaves/spec_1_myleaves.js",
          "file": "/test/e2e/leaves/spec_1_myleaves.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"should should able to view employee leave\"",
              "fullTitle": "My Leaves \"before all\" hook for \"should should able to view employee leave\"",
              "timedOut": false,
              "duration": 28496,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\n// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query1 = [\n  `UPDATE employee_leaves_count SET \"carryForwardedLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesEarned\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalRemainingLeaves\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"availedUnPaidLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `DELETE FROM employee_leaves WHERE \"employeeId\" = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query1);",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, li)\nWait timed out after 10113ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, li)\nWait timed out after 10113ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "6b9d6410-ebbb-4106-a009-e5e366032be9",
              "parentUUID": "265bc9fa-ba02-439e-a949-f26957f80592",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "My Leaves \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);",
              "err": {},
              "uuid": "488c85b3-1898-42ca-a8f4-af07df3ec151",
              "parentUUID": "265bc9fa-ba02-439e-a949-f26957f80592",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should should able to view employee leave",
              "fullTitle": "My Leaves should should able to view employee leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_reporting_managers SET \"approvedLeaveStatus\" = 'PENDING' WHERE id = 45;`,\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE id = 32;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE id = 32;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE id = 32;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {},
              "uuid": "ed251e33-5deb-42d2-b525-a913fc3afbc3",
              "parentUUID": "265bc9fa-ba02-439e-a949-f26957f80592",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should should able to Approve employee leave",
              "fullTitle": "My Leaves should should able to Approve employee leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nawait myLeaves.clickApproveBtn()\nawait myLeaves.clickSubmitBtn()\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "dd134b5f-b5d9-4b9d-8f65-ccfe9aeccf68",
              "parentUUID": "265bc9fa-ba02-439e-a949-f26957f80592",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to view employee leave in Approved Tab",
              "fullTitle": "My Leaves should able to view employee leave in Approved Tab",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Approved Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {},
              "uuid": "9bd93f78-9d88-4ad5-a552-ad1fc40015b2",
              "parentUUID": "265bc9fa-ba02-439e-a949-f26957f80592",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Reject employee leave in Approved Tab",
              "fullTitle": "My Leaves should able to Reject employee leave in Approved Tab",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Approved Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);\nawait myLeaves.clickRejectBtn()\nawait myLeaves.typeRejectReasonAndReject('testing')\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "f9d14a9e-039a-4323-8b58-026c3d1aa60f",
              "parentUUID": "265bc9fa-ba02-439e-a949-f26957f80592",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to view employee leave in Reject Tab",
              "fullTitle": "My Leaves should able to view employee leave in Reject Tab",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Rejected Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {},
              "uuid": "98c8cc58-6d45-4528-85c5-f3a886287cb7",
              "parentUUID": "265bc9fa-ba02-439e-a949-f26957f80592",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should should able to Reject employee leave",
              "fullTitle": "My Leaves should should able to Reject employee leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_reporting_managers SET \"approvedLeaveStatus\" = 'PENDING' WHERE id = 45;`,\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE id = 32;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE id = 32;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE id = 32;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nawait myLeaves.clickRejectBtn()\nawait myLeaves.typeRejectReasonAndReject('testing')\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "f3e05f88-4b87-49ed-917e-fc8bd26ae56c",
              "parentUUID": "265bc9fa-ba02-439e-a949-f26957f80592",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to view employee leave in Reject Tab",
              "fullTitle": "My Leaves should able to view employee leave in Reject Tab",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Rejected Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {},
              "uuid": "30a30f35-0a63-4e00-a936-be3bc4346b97",
              "parentUUID": "265bc9fa-ba02-439e-a949-f26957f80592",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Approve employee leave in Reject Tab",
              "fullTitle": "My Leaves should able to Approve employee leave in Reject Tab",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Rejected Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);\nawait myLeaves.clickApproveBtn()\nawait myLeaves.clickSubmitBtn()\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "afe07032-ff34-4459-a57e-73e784ee56e9",
              "parentUUID": "265bc9fa-ba02-439e-a949-f26957f80592",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to view employee leave in Approved Tab",
              "fullTitle": "My Leaves should able to view employee leave in Approved Tab",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Approved Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {},
              "uuid": "00e9d3dc-4a04-4d0e-9c67-ad928d54a572",
              "parentUUID": "265bc9fa-ba02-439e-a949-f26957f80592",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Leaves counts are showing Correct",
              "fullTitle": "My Leaves should check if Leaves counts are showing Correct",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '10/');\nlet leaves1 = await myLeaves.getSickLeaves();\nassert.equal(leaves1, '10/');\nlet leaves2 = await myLeaves.getCarryForwardLeaves();\nassert.equal(leaves2, '0/');\nlet leaves3 = await myLeaves.getUnpaidLeaves();\nassert.equal(leaves3, '0');",
              "err": {},
              "uuid": "8ae8c02e-7da7-441d-9a90-6f757208ab47",
              "parentUUID": "265bc9fa-ba02-439e-a949-f26957f80592",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to apply Casual full leave",
              "fullTitle": "My Leaves should able to apply Casual full leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('05-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('05-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "fa8f8bde-0fe6-4ed8-996c-5d80a6bbf136",
              "parentUUID": "265bc9fa-ba02-439e-a949-f26957f80592",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to apply Casual First Half leave",
              "fullTitle": "My Leaves should able to apply Casual First Half leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('First Half');\nawait myLeaves.setStartDate('06-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('06-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "79c83e0e-2a65-4754-8937-cd9b5648b0e8",
              "parentUUID": "265bc9fa-ba02-439e-a949-f26957f80592",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to apply Casual Second Half leave",
              "fullTitle": "My Leaves should able to apply Casual Second Half leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('Second Half');\nawait myLeaves.setStartDate('07-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('07-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "ee8b8324-ab0d-49f4-8ac7-ebec3a2edb3a",
              "parentUUID": "265bc9fa-ba02-439e-a949-f26957f80592",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to apply Sick full leave",
              "fullTitle": "My Leaves should able to apply Sick full leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Sick Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('08-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('08-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "f3d3ea09-31c1-4908-ad5b-dc4febaa842e",
              "parentUUID": "265bc9fa-ba02-439e-a949-f26957f80592",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to apply Sick First Half leave",
              "fullTitle": "My Leaves should able to apply Sick First Half leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Sick Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('First Half');\nawait myLeaves.setStartDate('09-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('09-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "beaf2715-13f4-4c12-813d-d297071e4a7e",
              "parentUUID": "265bc9fa-ba02-439e-a949-f26957f80592",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to apply Sick Second Half leave",
              "fullTitle": "My Leaves should able to apply Sick Second Half leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Sick Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('Second Half');\nawait myLeaves.setStartDate('10-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('10-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "f9b4fb1d-678d-4f25-a936-ad13c04e0ecd",
              "parentUUID": "265bc9fa-ba02-439e-a949-f26957f80592",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to apply Un-Paid full leave",
              "fullTitle": "My Leaves should able to apply Un-Paid full leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Un-Paid Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('11-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('11-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "3f76e0ac-89fa-4be0-890b-0f793b33a603",
              "parentUUID": "265bc9fa-ba02-439e-a949-f26957f80592",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to apply Un-Paid First Half leave",
              "fullTitle": "My Leaves should able to apply Un-Paid First Half leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Un-Paid Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('First Half');\nawait myLeaves.setStartDate('12-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('12-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "7113bee7-afdd-47a8-9261-e117e00c9ef4",
              "parentUUID": "265bc9fa-ba02-439e-a949-f26957f80592",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to apply Un-Paid Second Half leave",
              "fullTitle": "My Leaves should able to apply Un-Paid Second Half leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Un-Paid Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('Second Half');\nawait myLeaves.setStartDate('13-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('13-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "39dfc31a-5d88-4b75-9316-38344f62c01d",
              "parentUUID": "265bc9fa-ba02-439e-a949-f26957f80592",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Leaves counts are showing Correct",
              "fullTitle": "My Leaves should check if Leaves counts are showing Correct",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '8/');\nlet leaves1 = await myLeaves.getSickLeaves();\nassert.equal(leaves1, '8/');\nlet leaves2 = await myLeaves.getCarryForwardLeaves();\nassert.equal(leaves2, '0/');\nlet leaves3 = await myLeaves.getUnpaidLeaves();\nassert.equal(leaves3, '2');",
              "err": {},
              "uuid": "539cf7e8-5b23-48e8-936b-d2762a320437",
              "parentUUID": "265bc9fa-ba02-439e-a949-f26957f80592",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "ed251e33-5deb-42d2-b525-a913fc3afbc3",
            "dd134b5f-b5d9-4b9d-8f65-ccfe9aeccf68",
            "9bd93f78-9d88-4ad5-a552-ad1fc40015b2",
            "f9d14a9e-039a-4323-8b58-026c3d1aa60f",
            "98c8cc58-6d45-4528-85c5-f3a886287cb7",
            "f3e05f88-4b87-49ed-917e-fc8bd26ae56c",
            "30a30f35-0a63-4e00-a936-be3bc4346b97",
            "afe07032-ff34-4459-a57e-73e784ee56e9",
            "00e9d3dc-4a04-4d0e-9c67-ad928d54a572",
            "8ae8c02e-7da7-441d-9a90-6f757208ab47",
            "fa8f8bde-0fe6-4ed8-996c-5d80a6bbf136",
            "79c83e0e-2a65-4754-8937-cd9b5648b0e8",
            "ee8b8324-ab0d-49f4-8ac7-ebec3a2edb3a",
            "f3d3ea09-31c1-4908-ad5b-dc4febaa842e",
            "beaf2715-13f4-4c12-813d-d297071e4a7e",
            "f9b4fb1d-678d-4f25-a936-ad13c04e0ecd",
            "3f76e0ac-89fa-4be0-890b-0f793b33a603",
            "7113bee7-afdd-47a8-9261-e117e00c9ef4",
            "39dfc31a-5d88-4b75-9316-38344f62c01d",
            "539cf7e8-5b23-48e8-936b-d2762a320437"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
          "title": "hr dashboard",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/leaves/spec_2_hrLeavesDashboard.js",
          "file": "/test/e2e/leaves/spec_2_hrLeavesDashboard.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"should check if Leaves counts are showing Correct\"",
              "fullTitle": "hr dashboard \"before all\" hook for \"should check if Leaves counts are showing Correct\"",
              "timedOut": false,
              "duration": 11754,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, li)\nWait timed out after 10146ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, li)\nWait timed out after 10146ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "106572d0-08ed-4e3e-aefd-9ef1c41c4a1b",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"hr dashboard\"",
              "fullTitle": "hr dashboard \"after all\" hook in \"hr dashboard\"",
              "timedOut": false,
              "duration": 48,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `DELETE FROM employee_leaves WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "06836fcd-ed9f-421a-9752-22391e776152",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should check if Leaves counts are showing Correct",
              "fullTitle": "hr dashboard should check if Leaves counts are showing Correct",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_count SET \"carryForwardedLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesEarned\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalRemainingLeaves\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"availedUnPaidLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `DELETE FROM employee_leaves WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nlet leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '10/');\nlet leaves1 = await myLeaves.getSickLeaves();\nassert.equal(leaves1, '10/');\nlet leaves2 = await myLeaves.getCarryForwardLeaves();\nassert.equal(leaves2, '0/');\nlet leaves3 = await myLeaves.getUnpaidLeaves();\nassert.equal(leaves3, '0');",
              "err": {},
              "uuid": "dc7fe612-c6f1-4963-a10f-103b817c40b3",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to apply Casual full leave",
              "fullTitle": "hr dashboard should able to apply Casual full leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nawait myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('05-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('05-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "9610023c-c616-425b-814f-3e1c745099c7",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to check if leave is showing in Hr Dashboard",
              "fullTitle": "hr dashboard should able to check if leave is showing in Hr Dashboard",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "806b60c9-b494-4cf3-b71c-fd563085583f",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Approve Leave",
              "fullTitle": "hr dashboard should able to Approve Leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.clickApproveBtn()\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.clickSubmitBtn()\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "d432c723-20b9-4818-867a-c15e81560a5b",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to view employee leave in Approved Tab",
              "fullTitle": "hr dashboard should able to view employee leave in Approved Tab",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickTab('Approved Leaves')\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "40822a44-e974-487d-8fd6-c29674029ead",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Reject Leave",
              "fullTitle": "hr dashboard should able to Reject Leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickRejectBtn()\nawait hrLeaveDashboard.typeRejectReasonAndReject('testing')\nawait utilFun.wait(1000);\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "7271df7f-2df5-4404-8121-018190833a8e",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to view employee leave in Rejected Tab",
              "fullTitle": "hr dashboard should able to view employee leave in Rejected Tab",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickTab('Rejected Leaves')\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "3f85af58-df61-461c-988c-21b3fe4dc13f",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to send leave notification to PMs",
              "fullTitle": "hr dashboard should able to send leave notification to PMs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickSendNotificationBtn()\nawait utilFun.wait(1000);\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Notification sent to PMs from which leave is pending');",
              "err": {},
              "uuid": "4d856882-15be-46ad-8592-07b8f264aaa7",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to delete Employee leave",
              "fullTitle": "hr dashboard should able to delete Employee leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickDeleteBtn()\nawait hrLeaveDashboard.typeDeleteReason('testing')\nawait hrLeaveDashboard.clickSubmitDeleteBtn()\nawait utilFun.wait(1000);\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request deleted successfully.');",
              "err": {},
              "uuid": "ac6a3735-1051-4963-a5aa-30f70282a554",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able check if delete leave is showing in Deleted Section",
              "fullTitle": "hr dashboard should able check if delete leave is showing in Deleted Section",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickSeeDeletedLeaves()\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "99baf76c-142c-4ea4-96ea-260211583ef5",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to add Compensatory leave to specific employee",
              "fullTitle": "hr dashboard should able to add Compensatory leave to specific employee",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `DELETE FROM employee_gift_leaves WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCompLeaveBtn()\nawait hrLeaveDashboard.selectResource('Muhammad Bilal Rafaqat')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('21-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('21-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Compensatory leave added successfully');",
              "err": {},
              "uuid": "92f346d5-61cd-43a6-ad4e-555e4f23c82e",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Leave is Added",
              "fullTitle": "hr dashboard should check if Leave is Added",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nlet leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '11/');",
              "err": {},
              "uuid": "fbf28edf-1ab1-4b6c-a355-68ffd2de05fc",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to add Compensatory leave to all employee",
              "fullTitle": "hr dashboard should able to add Compensatory leave to all employee",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCompLeaveBtn()\nawait hrLeaveDashboard.clickSelectAllRadioBtn()\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('20-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('20-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Compensatory leave added successfully');",
              "err": {},
              "uuid": "8e94a459-d85f-45e6-bbe1-80eef3a6b2f1",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Leave is Added",
              "fullTitle": "hr dashboard should check if Leave is Added",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nlet leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '11/');",
              "err": {},
              "uuid": "084bf103-3fb4-4925-a359-66171e7b011a",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to create Casual full leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Casual full leave from Hr Dashboard",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Casual Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Full Leave')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('10-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('10-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "bf1487f6-1731-40bb-b7b7-aff1315ebf25",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to create Casual First Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Casual First Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Casual Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('First Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('11-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('11-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "1aa3f1ed-bfaa-4d7d-af68-51e5a32cab6b",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to create Casual Second Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Casual Second Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Casual Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('Second Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('12-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('12-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "7001b0cb-0ccd-4603-9a56-d009b7cbbcaf",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to create Sick full leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Sick full leave from Hr Dashboard",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Sick Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Full Leave')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('13-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('13-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "06c0d007-bd29-4ce6-bbd0-6ee28f69ca1d",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to create Sick First Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Sick First Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Sick Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('First Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('14-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('14-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "09876e5e-31d4-4cee-862b-710f84eb8510",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to create Sick Second Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Sick Second Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Sick Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('Second Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('15-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('15-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "c746b0bb-c273-4de8-b2ce-db9f6855a93f",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to create Un-Paid full leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Un-Paid full leave from Hr Dashboard",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Un-Paid Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Full Leave')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('16-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('16-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "9977a68d-f07a-4a37-b756-a80696923f0a",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to create Un-Paid First Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Un-Paid First Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Un-Paid Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('First Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('17-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('17-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "a18b45e8-09f6-42c1-8b43-b743db03eb58",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to create Un-Paid Second Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Un-Paid Second Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Un-Paid Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('Second Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('18-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('18-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "0292ac63-5663-486d-826c-74077acc0d45",
              "parentUUID": "04dbd590-3b8d-4f35-b0e8-1da298fafce0",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "dc7fe612-c6f1-4963-a10f-103b817c40b3",
            "9610023c-c616-425b-814f-3e1c745099c7",
            "806b60c9-b494-4cf3-b71c-fd563085583f",
            "d432c723-20b9-4818-867a-c15e81560a5b",
            "40822a44-e974-487d-8fd6-c29674029ead",
            "7271df7f-2df5-4404-8121-018190833a8e",
            "3f85af58-df61-461c-988c-21b3fe4dc13f",
            "4d856882-15be-46ad-8592-07b8f264aaa7",
            "ac6a3735-1051-4963-a5aa-30f70282a554",
            "99baf76c-142c-4ea4-96ea-260211583ef5",
            "92f346d5-61cd-43a6-ad4e-555e4f23c82e",
            "fbf28edf-1ab1-4b6c-a355-68ffd2de05fc",
            "8e94a459-d85f-45e6-bbe1-80eef3a6b2f1",
            "084bf103-3fb4-4925-a359-66171e7b011a",
            "bf1487f6-1731-40bb-b7b7-aff1315ebf25",
            "1aa3f1ed-bfaa-4d7d-af68-51e5a32cab6b",
            "7001b0cb-0ccd-4603-9a56-d009b7cbbcaf",
            "06c0d007-bd29-4ce6-bbd0-6ee28f69ca1d",
            "09876e5e-31d4-4cee-862b-710f84eb8510",
            "c746b0bb-c273-4de8-b2ce-db9f6855a93f",
            "9977a68d-f07a-4a37-b756-a80696923f0a",
            "a18b45e8-09f6-42c1-8b43-b743db03eb58",
            "0292ac63-5663-486d-826c-74077acc0d45"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
          "title": "Monthly Claims -> Child Claims",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-child.js",
          "file": "/test/e2e/monthlyclaim/myclaims-child.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"should be able to Upload Photo and click Close Button\"",
              "fullTitle": "Monthly Claims -> Child Claims \"before all\" hook for \"should be able to Upload Photo and click Close Button\"",
              "timedOut": false,
              "duration": 11701,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [\n    `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9429;`,\n    `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9474;`,\n  ];\n  await utilFun.udpateDatabase(query);\n  await utilFun.loginAccount()\n//   await utilFun.login(email, password)",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, li)\nWait timed out after 10146ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, li)\nWait timed out after 10146ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "4dea5863-9f62-46f4-b442-611be033cc02",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Upload Photo and click Close Button",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "1be662f1-d368-4cf4-a849-4e3597499fd2",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Upload Photo and Delete Photos ",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Upload Photo and Delete Photos ",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(1);",
              "err": {},
              "uuid": "45a41009-7d9f-4014-81e5-abd186a83327",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Add New Row and Delete Row ",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Add New Row and Delete Row ",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(1);",
              "err": {},
              "uuid": "7091fac0-8780-42b5-b0c8-48acd7a53de1",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Check Cancel Button",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Check Cancel Button",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "be3e29ce-a0f7-4e39-9e75-8833ecc4c30b",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "46199598-9524-4124-82d8-2d3759ed9892",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Edit Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Edit Child Claim",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MyClaims_EditBtn();\nawait child_claims.MyClaims_AddClaim_Child_Name('ALI', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-06-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(1);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(2);\nawait utilFun.wait(3000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit();\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is updated successfully');",
              "err": {},
              "uuid": "ed162fbb-3ee7-49e3-b39a-7c6090decea2",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able Show Attachment",
              "fullTitle": "Monthly Claims -> Child Claims should be able Show Attachment",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "ecbc497e-ea04-4153-8936-bcf05f7fdb02",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able Review Icon",
              "fullTitle": "Monthly Claims -> Child Claims should be able Review Icon",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "b7bd2283-a765-4eca-8fc1-b468cd9f829d",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Delete Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Delete Child Claim",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_DeleteBtn();\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "e4d416f9-b3cc-4e48-9d8a-2aca5673e258",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "51fb1f04-83ac-45bf-9990-20a51831a13e",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be HR Role Show Attachment & Close Button",
              "fullTitle": "Monthly Claims -> Child Claims should be HR Role Show Attachment & Close Button",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(2000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "240fbd8d-b6ef-479b-a907-1ee362eed2d6",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Edit Amount in Show Attachment",
              "fullTitle": "Monthly Claims -> Child Claims should be Edit Amount in Show Attachment",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_ShowAttachment_EditAmount_Hover();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ShowAttachment_EditAmount();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ClaimsRequest_EditBtn_RecieptAmount('3500');\nawait claims.MyClaims_ClaimsRequest_EditBtn_Reason('Extra budget');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();",
              "err": {},
              "uuid": "dc5dac1e-4c11-4d67-a94a-819b934f0560",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Child Claims should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(4000);\nawait claims.MyClaims_FilterBtn();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\nawait claims.HRFilterSearchByClaimType('Personal Development Allowance');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Filter_HR_SearchByClaim_CrossIcon();\nawait claims.HRFilterSearchByClaimType('Fitness/Gym Allowance');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_HR_SearchByClaim_CrossIcon();\nawait claims.HRFilterSearchByClaimType('Child Education Support');\nawait utilFun.wait(4000);\n/// Start and End Date Filter\nawait claims.MyClaims_Filter_StartDate('2023-11-14');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2023-12-15')\nawait utilFun.wait(4000);\n/// Verify Results\nawait claims.Row_Assertion()\nawait claims.MyClaims_Filter_ClearBtn();",
              "err": {},
              "uuid": "d97a1be0-591e-40f8-b231-cbf06722ceb4",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be HR Role Review Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be HR Role Review Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet query =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "e822b464-ea22-4397-baee-304d26fbc15c",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit One Child Claim for Approve Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim for Approve Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "79fe1609-6f0e-45e3-9f11-75e29f26c72e",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Approve One Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Approve One Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Receipt status updated successfully!');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "12968cbe-6b00-4b2e-bb0c-be155b4760c8",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit One Child Claim for Reject Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim for Reject Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "89252d88-4123-43de-9008-06f0a6bf1a82",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Reject Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Reject Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait utilFun.wait(3000)\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Receipt status updated successfully!');\nawait utilFun.wait(3000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "ba96e9fc-e60a-454a-af17-ae4df230fe17",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be  Verify Reject Tab and check Show Attachment ",
              "fullTitle": "Monthly Claims -> Child Claims should be  Verify Reject Tab and check Show Attachment ",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "a99113ee-35fc-4c16-8459-0aa3a58a538f",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be  Verify Reject Tab and Check Review Icon  ",
              "fullTitle": "Monthly Claims -> Child Claims should be  Verify Reject Tab and Check Review Icon  ",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000);\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion();\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "45cdb23c-72ab-4f9c-b7ff-ea6e333b7d17",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Child Claims should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "f89bbdde-3838-4e8e-8d8e-063a8b97fb2b",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit Two Child Claim for Review Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Two Child Claim for Review Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "b0ad12ca-369a-4864-9d14-5422a1d16d08",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be HR Role Show Attachment & Close Button",
              "fullTitle": "Monthly Claims -> Child Claims should be HR Role Show Attachment & Close Button",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.wait(10000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "ef554dc4-891b-4a6a-bc20-80001b94b97c",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Edit Amount in Show Attachment",
              "fullTitle": "Monthly Claims -> Child Claims should be Edit Amount in Show Attachment",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_ShowAttachment_EditAmount_Hover();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ShowAttachment_EditAmount();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ClaimsRequest_EditBtn_RecieptAmount('3500');\nawait claims.MyClaims_ClaimsRequest_EditBtn_Reason('Extra budget');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();",
              "err": {},
              "uuid": "149c84aa-24fa-4c2f-941f-b4ba4ddddc6b",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Review Flow for Two Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Review Flow for Two Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// const query = [\n//     `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n//     `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n//     `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n//     `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n// ];\n// await utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages1 = await claims.checkAlert();\nutilFun.assertEql(flashMessages1, 'Claim status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(1);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages2 = await claims.checkAlert();\nutilFun.assertEql(flashMessages2, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "4474e7aa-89a7-4259-9cb9-31f7dd4440d5",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit Two Child Claim for Approve Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Two Child Claim for Approve Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "7da56602-f7b4-4aa0-b0f5-310a9e32b0c5",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Approve Two Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Approve Two Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "a018fd3b-aa27-47d1-b6da-44796785767d",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit Two Child Claim for Reject Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Two Child Claim for Reject Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "d1fa82cd-aa98-43b8-ba47-0448731323a9",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Reject Two Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Reject Two Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(3000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim status updated successfully!');\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion();\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "fdb1e1bf-a1af-49b7-be62-26c9ce2c9ec0",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit Three Child Claim for Review Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Three Child Claim for Review Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Noman', 2);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 2);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('6000', 2);\nconst validationMessage3 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage3, 'Max amount limit is 5000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 2);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "63cc9217-3218-45ca-819e-2a55beb08f1e",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Review Flow for Three Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Review Flow for Three Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages1 = await claims.checkAlert();\nutilFun.assertEql(flashMessages1, 'Claim status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(1);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages2 = await claims.checkAlert();\nutilFun.assertEql(flashMessages2, 'Claim status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(2);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages3 = await claims.checkAlert();\nutilFun.assertEql(flashMessages3, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "49f973a7-7aa0-4485-b9fd-483c379fe906",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit Three Child Claim for Approve Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Three Child Claim for Approve Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Noman', 2);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 2);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('6000', 2);\nconst validationMessage3 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage3, 'Max amount limit is 5000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 2);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "9975b89d-01e4-4cd7-8a17-22e51d967109",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Approve Three Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Approve Three Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage3 = await claims.checkAlert();\nutilFun.assertEql(flashMessage3, 'Receipt status updated successfully!');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "5a454e32-dec0-4dae-a20c-efcc45b8b5b3",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit Three Child Claim for Reject Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Three Child Claim for Reject Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Noman', 2);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 2);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('6000', 2);\nconst validationMessage3 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage3, 'Max amount limit is 5000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 2);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "41ef409e-6d02-453c-9efb-ec5db92d76e2",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Reject Three Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Reject Three Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage3 = await claims.checkAlert();\nutilFun.assertEql(flashMessage3, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim status updated successfully!');\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion();\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "a203e386-d81f-48dc-b3c3-38768105846e",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Child Claims should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Deadline_Date('2023-02-05 22:40:20');\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "7ad18269-eac7-4ebb-82c1-d83315a08de4",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'You are not able to claim as the claim time is over.');",
              "err": {},
              "uuid": "c91cf695-4cbf-468a-a01a-35b0fa610b00",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Child Claims should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        'DELETE FROM employee_claim_deadlines;',\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Deadline_Date('2024-12-05 22:40:20');\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "42c3e476-6963-4eae-aaa5-19156a2e8f67",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');\nlet querys =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n        'DELETE FROM employee_claim_deadlines;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "35632368-1c62-4488-b259-38482a1b3918",
              "parentUUID": "4bb3d514-f8b4-419e-a133-d0b64955dccb",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "1be662f1-d368-4cf4-a849-4e3597499fd2",
            "45a41009-7d9f-4014-81e5-abd186a83327",
            "7091fac0-8780-42b5-b0c8-48acd7a53de1",
            "be3e29ce-a0f7-4e39-9e75-8833ecc4c30b",
            "46199598-9524-4124-82d8-2d3759ed9892",
            "ed162fbb-3ee7-49e3-b39a-7c6090decea2",
            "ecbc497e-ea04-4153-8936-bcf05f7fdb02",
            "b7bd2283-a765-4eca-8fc1-b468cd9f829d",
            "e4d416f9-b3cc-4e48-9d8a-2aca5673e258",
            "51fb1f04-83ac-45bf-9990-20a51831a13e",
            "240fbd8d-b6ef-479b-a907-1ee362eed2d6",
            "dc5dac1e-4c11-4d67-a94a-819b934f0560",
            "d97a1be0-591e-40f8-b231-cbf06722ceb4",
            "e822b464-ea22-4397-baee-304d26fbc15c",
            "79fe1609-6f0e-45e3-9f11-75e29f26c72e",
            "12968cbe-6b00-4b2e-bb0c-be155b4760c8",
            "89252d88-4123-43de-9008-06f0a6bf1a82",
            "ba96e9fc-e60a-454a-af17-ae4df230fe17",
            "a99113ee-35fc-4c16-8459-0aa3a58a538f",
            "45cdb23c-72ab-4f9c-b7ff-ea6e333b7d17",
            "f89bbdde-3838-4e8e-8d8e-063a8b97fb2b",
            "b0ad12ca-369a-4864-9d14-5422a1d16d08",
            "ef554dc4-891b-4a6a-bc20-80001b94b97c",
            "149c84aa-24fa-4c2f-941f-b4ba4ddddc6b",
            "4474e7aa-89a7-4259-9cb9-31f7dd4440d5",
            "7da56602-f7b4-4aa0-b0f5-310a9e32b0c5",
            "a018fd3b-aa27-47d1-b6da-44796785767d",
            "d1fa82cd-aa98-43b8-ba47-0448731323a9",
            "fdb1e1bf-a1af-49b7-be62-26c9ce2c9ec0",
            "63cc9217-3218-45ca-819e-2a55beb08f1e",
            "49f973a7-7aa0-4485-b9fd-483c379fe906",
            "9975b89d-01e4-4cd7-8a17-22e51d967109",
            "5a454e32-dec0-4dae-a20c-efcc45b8b5b3",
            "41ef409e-6d02-453c-9efb-ec5db92d76e2",
            "a203e386-d81f-48dc-b3c3-38768105846e",
            "7ad18269-eac7-4ebb-82c1-d83315a08de4",
            "c91cf695-4cbf-468a-a01a-35b0fa610b00",
            "42c3e476-6963-4eae-aaa5-19156a2e8f67",
            "35632368-1c62-4488-b259-38482a1b3918"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "5bef9a0a-0ccf-43e1-bc74-df7b26d1627a",
          "title": "Monthly Claims -> Gym Allowance",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-gym.js",
          "file": "/test/e2e/monthlyclaim/myclaims-gym.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button in Gym Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be able to Upload Photo and click Close Button in Gym Allowance",
              "timedOut": false,
              "duration": 13577,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Fitness/Gym Allowance');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Amount('10000');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn();\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_DeleteBtn();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10118ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10118ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "b336f965-1f34-4df7-b967-d958f032287c",
              "parentUUID": "5bef9a0a-0ccf-43e1-bc74-df7b26d1627a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able multiple File Upload & Cancel Button in GYM Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be able multiple File Upload & Cancel Button in GYM Allowance",
              "timedOut": false,
              "duration": 13581,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000)\nawait claims.MyClaims_AddClaim_Btn()\nawait claims.ClaimSelect('Fitness/Gym Allowance')\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn()\nawait utilFun.wait(3000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10073ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10073ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "c929731f-d0bc-46c6-92e8-abf119032b77",
              "parentUUID": "5bef9a0a-0ccf-43e1-bc74-df7b26d1627a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Gym Allowance ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be add claim in Gym Allowance ",
              "timedOut": false,
              "duration": 13526,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000)\nawait claims.MyClaims_AddClaim_Btn()\nawait claims.ClaimSelect('Fitness/Gym Allowance')\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Amount('10000');\nawait utilFun.wait(3000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10125ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10125ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "f0b80994-1065-4592-a35d-1f6573eba19b",
              "parentUUID": "5bef9a0a-0ccf-43e1-bc74-df7b26d1627a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Delete Claim in Gym Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Delete Claim in Gym Allowance",
              "timedOut": false,
              "duration": 13594,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000)\nawait claims.MyClaims_MonthlyClaims_PersonalDevelopment_DeleteBtn()\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(xpath, //*[@class=\"ant-table-tbody\"]/tr[2]/td[9]/div/span[2]/button)\nWait timed out after 10141ms",
                "estack": "TimeoutError: Waiting for element to be located By(xpath, //*[@class=\"ant-table-tbody\"]/tr[2]/td[9]/div/span[2]/button)\nWait timed out after 10141ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "7034fff9-cbb6-482f-9065-9642aed22edf",
              "parentUUID": "5bef9a0a-0ccf-43e1-bc74-df7b26d1627a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit Gym Allowance ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Submit Gym Allowance ",
              "timedOut": false,
              "duration": 13469,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000)\nawait claims.MyClaims_AddClaim_Btn()\nawait claims.ClaimSelect('Fitness/Gym Allowance')\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Amount('10000');\nawait utilFun.wait(3000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10063ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10063ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "891e008d-2927-465c-b849-8fffde4d0095",
              "parentUUID": "5bef9a0a-0ccf-43e1-bc74-df7b26d1627a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 10524,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait claims.MyClaims_ClaimsRequest_ShowAttachment()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10059ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10059ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "a841c15d-d930-45fc-acce-ece945f1f3b5",
              "parentUUID": "5bef9a0a-0ccf-43e1-bc74-df7b26d1627a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Edit Claim of Gym Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Edit Claim of Gym Allowance",
              "timedOut": false,
              "duration": 3461,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait claims.MyClaims_ClaimsRequest_EditBtn_Hover();\nawait claims.MyClaims_ClaimsRequest_EditBtn();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ClaimsRequest_EditBtn_RecieptAmount('15000');\nawait claims.MyClaims_ClaimsRequest_EditBtn_Reason('10000');\nawait claims.MyClaims_ClaimsRequest_EditBtn_UpdateBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'The amount has been updated successfully!');",
              "err": {
                "message": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".d-flex > span:nth-child(1)> svg:nth-child(1)\"}\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".d-flex > span:nth-child(1)> svg:nth-child(1)\"}\n  (Session info: headless chrome=119.0.6045.159)\n    at Object.throwDecodedError (node_modules/selenium-webdriver/lib/error.js:524:15)\n    at parseHttpResponse (node_modules/selenium-webdriver/lib/http.js:601:13)\n    at Executor.execute (node_modules/selenium-webdriver/lib/http.js:529:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async thenableWebDriverProxy.execute (node_modules/selenium-webdriver/lib/webdriver.js:745:17)\n    at async claims.MyClaims_ClaimsRequest_EditBtn_Hover (test/support/pages/monthlyclaim/claims-pdf.js:184:28)\n    at async Context.<anonymous> (test/e2e/monthlyclaim/myclaims-gym.js:112:9)",
                "diff": null
              },
              "uuid": "49bee10b-fb8b-4281-b0f4-7229a015e6c9",
              "parentUUID": "5bef9a0a-0ccf-43e1-bc74-df7b26d1627a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reviews Chart",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Reviews Chart",
              "timedOut": false,
              "duration": 13512,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait claims.MyClaims_ClaimsRequest_ReviewsSeeBtn()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .icon)\nWait timed out after 10089ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .icon)\nWait timed out after 10089ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "53f7c52d-7c6b-42fd-989f-336b2e855af7",
              "parentUUID": "5bef9a0a-0ccf-43e1-bc74-df7b26d1627a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Add Reviews",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Add Reviews",
              "timedOut": false,
              "duration": 13561,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait claims.MyClaims_ClaimsRequest_AddReview();\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim request is reviewed successfully!');\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .d-flex > span:nth-child(1)> svg:nth-child(2))\nWait timed out after 10120ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .d-flex > span:nth-child(1)> svg:nth-child(2))\nWait timed out after 10120ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d1f5aa16-3b01-4dda-ab11-04ecc491940a",
              "parentUUID": "5bef9a0a-0ccf-43e1-bc74-df7b26d1627a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Approve Button",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Approve Button",
              "timedOut": false,
              "duration": 3487,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait claims.MyClaims_ClaimsRequest_ApproveBtn_Scroll()\nawait claims.MyClaims_ClaimsRequest_ApproveBtn()\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation')\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is approved successfully!');\n///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()",
              "err": {
                "message": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".d-flex > span:nth-child(1)> svg:nth-child(3)\"}\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".d-flex > span:nth-child(1)> svg:nth-child(3)\"}\n  (Session info: headless chrome=119.0.6045.159)\n    at Object.throwDecodedError (node_modules/selenium-webdriver/lib/error.js:524:15)\n    at parseHttpResponse (node_modules/selenium-webdriver/lib/http.js:601:13)\n    at Executor.execute (node_modules/selenium-webdriver/lib/http.js:529:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async thenableWebDriverProxy.execute (node_modules/selenium-webdriver/lib/webdriver.js:745:17)\n    at async claims.MyClaims_ClaimsRequest_ApproveBtn_Scroll (test/support/pages/monthlyclaim/claims-pdf.js:239:28)\n    at async Context.<anonymous> (test/e2e/monthlyclaim/myclaims-gym.js:151:9)",
                "diff": null
              },
              "uuid": "f6040897-1dea-49e7-b59a-5661838f06f0",
              "parentUUID": "5bef9a0a-0ccf-43e1-bc74-df7b26d1627a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review See Button in Approve Tab",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Review See Button in Approve Tab",
              "timedOut": false,
              "duration": 13352,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.MyClaims_ClaimsRequest_ReviewsSeeBtn()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[class='d-flex pointer'] div:nth-child(3) div:nth-child(1))\nWait timed out after 10037ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[class='d-flex pointer'] div:nth-child(3) div:nth-child(1))\nWait timed out after 10037ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "e9a5df4f-594c-4b87-9efe-aaf11a71a27d",
              "parentUUID": "5bef9a0a-0ccf-43e1-bc74-df7b26d1627a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reject Button",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Reject Button",
              "timedOut": false,
              "duration": 3442,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait claims.MyClaims_ClaimsRequest_RejectBtn_Scroll()\nawait claims.MyClaims_ClaimsRequest_RejectBtn()\nawait claims.MyClaims_ClaimsRequest_TextArea('Rejected Claim for Test Automation')\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is rejected successfully!');\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".d-flex > span:nth-child(1)> svg:nth-child(4)\"}\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".d-flex > span:nth-child(1)> svg:nth-child(4)\"}\n  (Session info: headless chrome=119.0.6045.159)\n    at Object.throwDecodedError (node_modules/selenium-webdriver/lib/error.js:524:15)\n    at parseHttpResponse (node_modules/selenium-webdriver/lib/http.js:601:13)\n    at Executor.execute (node_modules/selenium-webdriver/lib/http.js:529:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async thenableWebDriverProxy.execute (node_modules/selenium-webdriver/lib/webdriver.js:745:17)\n    at async claims.MyClaims_ClaimsRequest_RejectBtn_Scroll (test/support/pages/monthlyclaim/claims-pdf.js:252:28)\n    at async Context.<anonymous> (test/e2e/monthlyclaim/myclaims-gym.js:176:9)",
                "diff": null
              },
              "uuid": "4724e0a2-a44f-441f-9c58-d360ebcea6b0",
              "parentUUID": "5bef9a0a-0ccf-43e1-bc74-df7b26d1627a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reason See in Reject Tab ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Reason See in Reject Tab ",
              "timedOut": false,
              "duration": 13431,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.MyClaims_ClaimsRequest_RejectTab_ReasonBtn()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[class='d-flex pointer'] div:nth-child(4) div:nth-child(1))\nWait timed out after 10027ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[class='d-flex pointer'] div:nth-child(4) div:nth-child(1))\nWait timed out after 10027ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "dcfc1167-31ec-477f-862d-d31be684a9df",
              "parentUUID": "5bef9a0a-0ccf-43e1-bc74-df7b26d1627a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 5561,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(5000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {
                "message": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".ant-table-cell > .MuiButtonBase-root\"}\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".ant-table-cell > .MuiButtonBase-root\"}\n  (Session info: headless chrome=119.0.6045.159)\n    at Object.throwDecodedError (node_modules/selenium-webdriver/lib/error.js:524:15)\n    at parseHttpResponse (node_modules/selenium-webdriver/lib/http.js:601:13)\n    at Executor.execute (node_modules/selenium-webdriver/lib/http.js:529:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async thenableWebDriverProxy.execute (node_modules/selenium-webdriver/lib/webdriver.js:745:17)\n    at async claims.MyClaims_CheckHRStatus_Scroll (test/support/pages/monthlyclaim/claims-pdf.js:270:28)\n    at async Context.<anonymous> (test/e2e/monthlyclaim/myclaims-gym.js:206:9)",
                "diff": null
              },
              "uuid": "bdb44b45-c7a0-471c-8d5a-f7dcd1e22840",
              "parentUUID": "5bef9a0a-0ccf-43e1-bc74-df7b26d1627a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 16531,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2023-02-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label='Set Deadline For Claims'])\nWait timed out after 10051ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label='Set Deadline For Claims'])\nWait timed out after 10051ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d8ff13f5-b6b1-4a3a-a2a1-ba0f3b54aedd",
              "parentUUID": "5bef9a0a-0ccf-43e1-bc74-df7b26d1627a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Gym Allowance to Verify Incorrect Date ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be add claim in Gym Allowance to Verify Incorrect Date ",
              "timedOut": false,
              "duration": 13492,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000)\nawait claims.MyClaims_AddClaim_Btn()\nawait claims.ClaimSelect('Fitness/Gym Allowance')\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Amount('10000');\nawait utilFun.wait(3000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'You are not able to claim as the claim time is over.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10055ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10055ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "9d5f4a4d-fb5d-490e-9eee-0152fb06aa33",
              "parentUUID": "5bef9a0a-0ccf-43e1-bc74-df7b26d1627a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Gym Allowance should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 16484,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n[\n    'DELETE FROM employee_claim_deadlines;',\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2024-12-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label='Set Deadline For Claims'])\nWait timed out after 10073ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label='Set Deadline For Claims'])\nWait timed out after 10073ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "31cfdeb5-d074-43bf-a849-364fe2f97446",
              "parentUUID": "5bef9a0a-0ccf-43e1-bc74-df7b26d1627a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Gym Allowance to Verify Correct Date ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be add claim in Gym Allowance to Verify Correct Date ",
              "timedOut": false,
              "duration": 13489,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000)\nawait claims.MyClaims_AddClaim_Btn()\nawait claims.ClaimSelect('Fitness/Gym Allowance')\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Amount('10000');\nawait utilFun.wait(3000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Upload_Btn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');\nlet querys =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n        'DELETE FROM employee_claim_deadlines;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10056ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10056ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "fe813e90-dae3-46d6-a397-bfddb2a96169",
              "parentUUID": "5bef9a0a-0ccf-43e1-bc74-df7b26d1627a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b336f965-1f34-4df7-b967-d958f032287c",
            "c929731f-d0bc-46c6-92e8-abf119032b77",
            "f0b80994-1065-4592-a35d-1f6573eba19b",
            "7034fff9-cbb6-482f-9065-9642aed22edf",
            "891e008d-2927-465c-b849-8fffde4d0095",
            "a841c15d-d930-45fc-acce-ece945f1f3b5",
            "49bee10b-fb8b-4281-b0f4-7229a015e6c9",
            "53f7c52d-7c6b-42fd-989f-336b2e855af7",
            "d1f5aa16-3b01-4dda-ab11-04ecc491940a",
            "f6040897-1dea-49e7-b59a-5661838f06f0",
            "e9a5df4f-594c-4b87-9efe-aaf11a71a27d",
            "4724e0a2-a44f-441f-9c58-d360ebcea6b0",
            "dcfc1167-31ec-477f-862d-d31be684a9df",
            "bdb44b45-c7a0-471c-8d5a-f7dcd1e22840",
            "d8ff13f5-b6b1-4a3a-a2a1-ba0f3b54aedd",
            "9d5f4a4d-fb5d-490e-9eee-0152fb06aa33",
            "31cfdeb5-d074-43bf-a849-364fe2f97446",
            "fe813e90-dae3-46d6-a397-bfddb2a96169"
          ],
          "pending": [],
          "skipped": [],
          "duration": 208074,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "6692e2a2-88e3-43b0-80cc-fb438c5acf3d",
          "title": "Monthly Claims -> Marriage Bonus",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-marriage.js",
          "file": "/test/e2e/monthlyclaim/myclaims-marriage.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Upload Photo and click Close Button",
              "timedOut": false,
              "duration": 13533,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10056ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10056ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "9630c306-f43e-4d38-84e7-38a8aa6d76de",
              "parentUUID": "6692e2a2-88e3-43b0-80cc-fb438c5acf3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Upload Mulitiple Photos and click Close Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Upload Mulitiple Photos and click Close Button",
              "timedOut": false,
              "duration": 13432,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10066ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10066ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "34c072f7-8fda-4565-99df-f3d9bb274b76",
              "parentUUID": "6692e2a2-88e3-43b0-80cc-fb438c5acf3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus",
              "timedOut": false,
              "duration": 13406,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10028ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10028ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "8d4399b3-cd43-4f49-9d2d-84a64f0780d9",
              "parentUUID": "6692e2a2-88e3-43b0-80cc-fb438c5acf3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Edit Medical Claims",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Edit Medical Claims",
              "timedOut": false,
              "duration": 13481,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_EditBtn();\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0)\nawait utilFun.wait(1000);\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is updated successfully');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, span:nth-child(1) > .MuiButtonBase-root > svg)\nWait timed out after 10073ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, span:nth-child(1) > .MuiButtonBase-root > svg)\nWait timed out after 10073ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "0516d916-ce9b-44e1-abfe-e94c5751a04b",
              "parentUUID": "6692e2a2-88e3-43b0-80cc-fb438c5acf3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 14501,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Employee_FilterBtn();\nawait utilFun.wait(2000);\n// ///// Search By Claim Type\n// await claims.FilterSearchByClaimType('Personal Development Allowance');\n// await utilFun.wait(2000);\nawait claims.FilterSearchByClaimType('Fitness/Gym Allowance');\nawait utilFun.wait(2000);\nawait claims.FilterSearchByClaimType('Marriage Bonus');\n///// Search By Status\nawait claims.FilterSearchByStatus('Approved');\nawait claims.FilterSearchByStatus('Review');\nawait claims.FilterSearchByStatus('Pending');\nawait marriage_claims.Row_Assertion()\nawait utilFun.wait(4000);\nawait claims.MyClaims_Filter_ClearBtn()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(xpath, //*[@id=\"root\"]/div[2]/div[2]/div[2]/div/div/div[1]/div/div[1]/div/div[2])\nWait timed out after 10077ms",
                "estack": "TimeoutError: Waiting for element to be located By(xpath, //*[@id=\"root\"]/div[2]/div[2]/div[2]/div/div/div[1]/div/div[1]/div/div[2])\nWait timed out after 10077ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "ebbb6830-a8c1-426e-a93d-065210fad55d",
              "parentUUID": "6692e2a2-88e3-43b0-80cc-fb438c5acf3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Show Attachment",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Show Attachment",
              "timedOut": false,
              "duration": 14456,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10061ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10061ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "1a44f2c8-db09-44b1-bd1e-a938120d061e",
              "parentUUID": "6692e2a2-88e3-43b0-80cc-fb438c5acf3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Review Icon",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Review Icon",
              "timedOut": false,
              "duration": 14510,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon()\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell .icon)\nWait timed out after 10080ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell .icon)\nWait timed out after 10080ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "0a1d25dd-62a8-4523-904c-60b1ef5bdf5e",
              "parentUUID": "6692e2a2-88e3-43b0-80cc-fb438c5acf3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Delete Marriage Claims",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Delete Marriage Claims",
              "timedOut": false,
              "duration": 13521,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_DeleteBtn();\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, span:nth-child(2) > .MuiButtonBase-root > svg)\nWait timed out after 10068ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, span:nth-child(2) > .MuiButtonBase-root > svg)\nWait timed out after 10068ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "6372b4b2-9604-4c37-a5c9-8b1b5291577a",
              "parentUUID": "6692e2a2-88e3-43b0-80cc-fb438c5acf3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus",
              "timedOut": false,
              "duration": 13514,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10080ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10080ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "cc86e2bd-e253-4cd1-9bc4-856b46cecd8c",
              "parentUUID": "6692e2a2-88e3-43b0-80cc-fb438c5acf3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 13441,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10032ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10032ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "f5129554-b3d7-45a4-a6fd-a47f67d59163",
              "parentUUID": "6692e2a2-88e3-43b0-80cc-fb438c5acf3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 14516,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(4000);\nawait claims.MyClaims_FilterBtn();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\nawait claims.HRFilterSearchByClaimType('Personal Development Allowance');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Filter_HR_SearchByClaim_CrossIcon();\nawait claims.HRFilterSearchByClaimType('Fitness/Gym Allowance');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_HR_SearchByClaim_CrossIcon();\nawait claims.HRFilterSearchByClaimType('Marriage Bonus');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Filter_StartDate('2023-11-08');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2023-11-11')\nawait utilFun.wait(4000);\n/// Verify Results\nawait claims.Row_Assertion()\nawait claims.MyClaims_Filter_ClearBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(xpath, //*[@id=\"root\"]/div[2]/div[2]/div[2]/div/div/div[1]/div/div[1]/div/div[3])\nWait timed out after 10096ms",
                "estack": "TimeoutError: Waiting for element to be located By(xpath, //*[@id=\"root\"]/div[2]/div[2]/div[2]/div/div/div[1]/div/div[1]/div/div[3])\nWait timed out after 10096ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "ce4af05f-7c0c-4f53-add2-b24b52a5f980",
              "parentUUID": "6692e2a2-88e3-43b0-80cc-fb438c5acf3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Add Reviews",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role Add Reviews",
              "timedOut": false,
              "duration": 13466,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait marriage_claims.MyClaims_ClaimRequest_AddReview()\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim request is reviewed successfully!');\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .d-flex > span:nth-child(1)> svg:nth-child(1))\nWait timed out after 10056ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .d-flex > span:nth-child(1)> svg:nth-child(1))\nWait timed out after 10056ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d468c683-66be-4c4d-9998-3364c29fc318",
              "parentUUID": "6692e2a2-88e3-43b0-80cc-fb438c5acf3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role in Approve Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role in Approve Button",
              "timedOut": false,
              "duration": 13472,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait marriage_claims.MyClaims_ClaimRequest_ApproveBtn();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Button for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is approved successfully!');\n///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .d-flex > span:nth-child(1)> svg:nth-child(2))\nWait timed out after 10024ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .d-flex > span:nth-child(1)> svg:nth-child(2))\nWait timed out after 10024ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "a26f0efb-6eb0-4037-a840-e54ac93cc4e6",
              "parentUUID": "6692e2a2-88e3-43b0-80cc-fb438c5acf3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Approve Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be Verify Approve Claim in Applicant Side",
              "timedOut": false,
              "duration": 4506,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_CheckHRStatus_Scroll();\nawait claims.MyClaims_CheckHRStatus();\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".ant-table-cell > .MuiButtonBase-root\"}\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".ant-table-cell > .MuiButtonBase-root\"}\n  (Session info: headless chrome=119.0.6045.159)\n    at Object.throwDecodedError (node_modules/selenium-webdriver/lib/error.js:524:15)\n    at parseHttpResponse (node_modules/selenium-webdriver/lib/http.js:601:13)\n    at Executor.execute (node_modules/selenium-webdriver/lib/http.js:529:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async thenableWebDriverProxy.execute (node_modules/selenium-webdriver/lib/webdriver.js:745:17)\n    at async claims.MyClaims_CheckHRStatus_Scroll (test/support/pages/monthlyclaim/claims-pdf.js:270:28)\n    at async Context.<anonymous> (test/e2e/monthlyclaim/myclaims-marriage.js:225:9)",
                "diff": null
              },
              "uuid": "4f768350-8a48-4855-9eb0-3b81ecfefdc3",
              "parentUUID": "6692e2a2-88e3-43b0-80cc-fb438c5acf3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role in Rejection Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role in Rejection Button",
              "timedOut": false,
              "duration": 17542,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait marriage_claims.MyClaims_ClaimRequest_RejectBtn();\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Button for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is rejected successfully!');\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .d-flex > span:nth-child(1)> svg:nth-child(3))\nWait timed out after 10052ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .d-flex > span:nth-child(1)> svg:nth-child(3))\nWait timed out after 10052ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "c0e2ccee-9749-4b2a-b8d2-65ae017c315e",
              "parentUUID": "6692e2a2-88e3-43b0-80cc-fb438c5acf3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Reject Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be Verify Reject Claim in Applicant Side",
              "timedOut": false,
              "duration": 6430,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {
                "message": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".ant-table-cell > .MuiButtonBase-root\"}\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".ant-table-cell > .MuiButtonBase-root\"}\n  (Session info: headless chrome=119.0.6045.159)\n    at Object.throwDecodedError (node_modules/selenium-webdriver/lib/error.js:524:15)\n    at parseHttpResponse (node_modules/selenium-webdriver/lib/http.js:601:13)\n    at Executor.execute (node_modules/selenium-webdriver/lib/http.js:529:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async thenableWebDriverProxy.execute (node_modules/selenium-webdriver/lib/webdriver.js:745:17)\n    at async claims.MyClaims_CheckHRStatus_Scroll (test/support/pages/monthlyclaim/claims-pdf.js:270:28)\n    at async Context.<anonymous> (test/e2e/monthlyclaim/myclaims-marriage.js:264:9)",
                "diff": null
              },
              "uuid": "7796f97e-6e0f-4c36-88e5-0b5cf0730723",
              "parentUUID": "6692e2a2-88e3-43b0-80cc-fb438c5acf3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 16591,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9474;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2023-02-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label='Set Deadline For Claims'])\nWait timed out after 10056ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label='Set Deadline For Claims'])\nWait timed out after 10056ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "c2ae5aea-e8a1-40a0-ba1c-55a65b315011",
              "parentUUID": "6692e2a2-88e3-43b0-80cc-fb438c5acf3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus for Verify Incorrect Deadline",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus for Verify Incorrect Deadline",
              "timedOut": false,
              "duration": 13526,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'You are not able to claim as the claim time is over.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10083ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10083ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "a480d4be-1c24-4d65-af6d-9dfade7d507a",
              "parentUUID": "6692e2a2-88e3-43b0-80cc-fb438c5acf3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 16544,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n[\n    'DELETE FROM employee_claim_deadlines;',\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9474;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2024-12-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label='Set Deadline For Claims'])\nWait timed out after 10105ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label='Set Deadline For Claims'])\nWait timed out after 10105ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "fc7a7ddd-5c8e-4fae-8147-5aab091b4762",
              "parentUUID": "6692e2a2-88e3-43b0-80cc-fb438c5acf3d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus for Verify Correct Deadline",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus for Verify Correct Deadline",
              "timedOut": false,
              "duration": 13524,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');\nlet querys =\n[\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n    'DELETE FROM employee_claim_deadlines;'\n];\n    await utilFun.udpateDatabase(querys);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10097ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10097ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "5c4b5d24-00bf-482b-9084-15b9ffcc3266",
              "parentUUID": "6692e2a2-88e3-43b0-80cc-fb438c5acf3d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "9630c306-f43e-4d38-84e7-38a8aa6d76de",
            "34c072f7-8fda-4565-99df-f3d9bb274b76",
            "8d4399b3-cd43-4f49-9d2d-84a64f0780d9",
            "0516d916-ce9b-44e1-abfe-e94c5751a04b",
            "ebbb6830-a8c1-426e-a93d-065210fad55d",
            "1a44f2c8-db09-44b1-bd1e-a938120d061e",
            "0a1d25dd-62a8-4523-904c-60b1ef5bdf5e",
            "6372b4b2-9604-4c37-a5c9-8b1b5291577a",
            "cc86e2bd-e253-4cd1-9bc4-856b46cecd8c",
            "f5129554-b3d7-45a4-a6fd-a47f67d59163",
            "ce4af05f-7c0c-4f53-add2-b24b52a5f980",
            "d468c683-66be-4c4d-9998-3364c29fc318",
            "a26f0efb-6eb0-4037-a840-e54ac93cc4e6",
            "4f768350-8a48-4855-9eb0-3b81ecfefdc3",
            "c0e2ccee-9749-4b2a-b8d2-65ae017c315e",
            "7796f97e-6e0f-4c36-88e5-0b5cf0730723",
            "c2ae5aea-e8a1-40a0-ba1c-55a65b315011",
            "a480d4be-1c24-4d65-af6d-9dfade7d507a",
            "fc7a7ddd-5c8e-4fae-8147-5aab091b4762",
            "5c4b5d24-00bf-482b-9084-15b9ffcc3266"
          ],
          "pending": [],
          "skipped": [],
          "duration": 267912,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
          "title": "Monthly Claims -> Medicals",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-medical.js",
          "file": "/test/e2e/monthlyclaim/myclaims-medical.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button",
              "fullTitle": "Monthly Claims -> Medicals should be able to Upload Photo and click Close Button",
              "timedOut": false,
              "duration": 13517,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10094ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10094ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "5793946e-68f7-4982-8f7b-34f556a2ae25",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Upload Multiple Photos and click Close Button",
              "fullTitle": "Monthly Claims -> Medicals should be able to Upload Multiple Photos and click Close Button",
              "timedOut": false,
              "duration": 13413,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0);\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1500', 1);\nawait medical_claims.MyClaims_AddClaim_AddRow(1);\nawait medical_claims.MyClaims_AddClaim_AddRow(2);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_DeleteRow(1);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10038ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10038ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "64b91ad5-986d-4f1c-8130-fb59b5ae2da6",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Add New Row and Delete Row",
              "fullTitle": "Monthly Claims -> Medicals should be able to Add New Row and Delete Row",
              "timedOut": false,
              "duration": 13442,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait utilFun.wait(5000);\nawait medical_claims.Row_Assertion();\nawait medical_claims.MyClaims_AddClaim_DeleteRow(1)",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10052ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10052ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "a8b83786-053f-49c9-bf54-d65a287bbc9a",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Add and Delete Attachments",
              "fullTitle": "Monthly Claims -> Medicals should be able to Add and Delete Attachments",
              "timedOut": false,
              "duration": 13495,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(5000);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0)",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10090ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10090ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3df711aa-7538-4ade-9f30-c7ea053c41f2",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to click Cancel Button",
              "fullTitle": "Monthly Claims -> Medicals should be able to click Cancel Button",
              "timedOut": false,
              "duration": 13429,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(5000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10013ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10013ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "0392fb73-681f-44c1-813d-a3973b9944ed",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims",
              "timedOut": false,
              "duration": 13481,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10069ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10069ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "7bebacad-11e8-4617-bdd6-786b9d7bbae7",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Edit Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Edit Medical Claims",
              "timedOut": false,
              "duration": 13418,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_EditBtn();\nawait medical_claims.MyClaims_AddClaim_DeleteRow(1)\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is updated successfully');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, span:nth-child(1) > .MuiButtonBase-root > svg)\nWait timed out after 10025ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, span:nth-child(1) > .MuiButtonBase-root > svg)\nWait timed out after 10025ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "b2e5c6b7-12ea-44a0-a9d5-d3bbfb6286c9",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Medicals should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 14489,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Employee_FilterBtn();\nawait utilFun.wait(4000);\nawait claims.FilterSearchByClaimType('Medical Coverage');\nawait utilFun.wait(4000);\nawait claims.FilterSearchByClaimType('Fitness/Gym Allowance');\nawait utilFun.wait(4000);\nawait claims.FilterSearchByClaimType('Personal Development Allowance');\nawait claims.FilterSearchByStatus('Approved');\nawait claims.FilterSearchByStatus('Review');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Filter_ClearBtn()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(xpath, //*[@id=\"root\"]/div[2]/div[2]/div[2]/div/div/div[1]/div/div[1]/div/div[2])\nWait timed out after 10059ms",
                "estack": "TimeoutError: Waiting for element to be located By(xpath, //*[@id=\"root\"]/div[2]/div[2]/div[2]/div/div/div[1]/div/div[1]/div/div[2])\nWait timed out after 10059ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "0f51ebb7-1507-443d-bb17-3446e00b9acd",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Delete Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Delete Medical Claims",
              "timedOut": false,
              "duration": 13637,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_DeleteBtn();\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, span:nth-child(2) > .MuiButtonBase-root > svg)\nWait timed out after 10066ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, span:nth-child(2) > .MuiButtonBase-root > svg)\nWait timed out after 10066ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "6b758711-69ce-45a3-be3f-cf7514c48fa5",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims",
              "timedOut": false,
              "duration": 13435,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10058ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10058ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "a86cca1b-d460-490e-b07c-db8fd90c87ed",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 10605,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10144ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10144ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "12efefd9-2d6c-47eb-bca2-baeb8a347fb9",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review Flow",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Review Flow",
              "timedOut": false,
              "duration": 10448,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(1);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim request is reviewed successfully!');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet query =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10091ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10091ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "cd6924c8-596f-4441-989d-52588cf5f226",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims for Approve Flow",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims for Approve Flow",
              "timedOut": false,
              "duration": 13445,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10034ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10034ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "9ccd157e-e7d4-485e-851a-f4f50db50b45",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Edit Reciept Amount",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Show Edit Reciept Amount",
              "timedOut": false,
              "duration": 10508,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_FirstChildClaim_EditAmount_Hover()\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_EditAmount(0);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_RecieptAmount('2500')\nawait utilFun.wait(1000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_Reason('Reason for edit amount')\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'The receipt amount has been updated successfully!');\nawait utilFun.wait(3000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_SecondChildClaim_EditAmount_Hover();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_EditAmount(0);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_RecieptAmount('5000')\nawait utilFun.wait(1000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_Reason('Reason for edit amount')\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox()\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'The receipt amount has been updated successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10078ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10078ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "643753d1-42d4-417f-9eef-186354533ef3",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Approve Medicals",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Approve Medicals",
              "timedOut": false,
              "duration": 15475,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'The status has been updated successfully!');\nawait utilFun.wait(3000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'The status has been updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nawait utilFun.wait(3000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10091ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10091ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "e62605fd-a12b-4ae1-b5bc-40587e2128e7",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims for Reject Flow",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims for Reject Flow",
              "timedOut": false,
              "duration": 13573,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10088ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10088ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "a18fd571-f011-4282-b28c-1f12040bce4e",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reject Medicals",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Reject Medicals",
              "timedOut": false,
              "duration": 10538,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'The status has been updated successfully!');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'The status has been updated successfully!');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10113ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10113ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "a6f3ef95-9047-4cb0-9858-44f647f241a2",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be  Verify Reject Tab and check Show Attachment ",
              "fullTitle": "Monthly Claims -> Medicals should be  Verify Reject Tab and check Show Attachment ",
              "timedOut": false,
              "duration": 15434,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[class='d-flex pointer'] div:nth-child(4) div:nth-child(1))\nWait timed out after 10034ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[class='d-flex pointer'] div:nth-child(4) div:nth-child(1))\nWait timed out after 10034ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "70c3c1dd-bf47-4836-9142-99cf4a2e3d5f",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be  Verify Reject Tab and Check Review Icon  ",
              "fullTitle": "Monthly Claims -> Medicals should be  Verify Reject Tab and Check Review Icon  ",
              "timedOut": false,
              "duration": 15433,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[class='d-flex pointer'] div:nth-child(4) div:nth-child(1))\nWait timed out after 10052ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[class='d-flex pointer'] div:nth-child(4) div:nth-child(1))\nWait timed out after 10052ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "da4be366-7590-4970-95dd-57b98cbf8fb8",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Medicals should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 4447,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {
                "message": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".ant-table-cell > .MuiButtonBase-root\"}\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".ant-table-cell > .MuiButtonBase-root\"}\n  (Session info: headless chrome=119.0.6045.159)\n    at Object.throwDecodedError (node_modules/selenium-webdriver/lib/error.js:524:15)\n    at parseHttpResponse (node_modules/selenium-webdriver/lib/http.js:601:13)\n    at Executor.execute (node_modules/selenium-webdriver/lib/http.js:529:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async thenableWebDriverProxy.execute (node_modules/selenium-webdriver/lib/webdriver.js:745:17)\n    at async claims.MyClaims_CheckHRStatus_Scroll (test/support/pages/monthlyclaim/claims-pdf.js:270:28)\n    at async Context.<anonymous> (test/e2e/monthlyclaim/myclaims-medical.js:380:9)",
                "diff": null
              },
              "uuid": "4ad06d4a-aee1-4a99-9c6d-7bd66d079745",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Medicals should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 16415,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2023-02-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label='Set Deadline For Claims'])\nWait timed out after 10018ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label='Set Deadline For Claims'])\nWait timed out after 10018ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "8a6291af-4cb2-4c64-8de8-3f5e389a5d64",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims Verify Incorrect Deadline",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims Verify Incorrect Deadline",
              "timedOut": false,
              "duration": 13540,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'You are not able to claim as the claim time is over.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10079ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10079ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "50ddeee7-6168-46ad-98f7-aca8abbb5740",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Medicals should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 16532,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        'DELETE FROM employee_claim_deadlines;',\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2024-12-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label='Set Deadline For Claims'])\nWait timed out after 10060ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label='Set Deadline For Claims'])\nWait timed out after 10060ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "8c728ddb-3ccb-416a-b72f-375683b4b39d",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims Verify Correct Deadline",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims Verify Correct Deadline",
              "timedOut": false,
              "duration": 13495,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');\nlet querys =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n        'DELETE FROM employee_claim_deadlines;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10057ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10057ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "19135ad1-d017-49b0-98be-5b3fbce77fba",
              "parentUUID": "e3cd8bf8-e8f6-45f6-8aaf-4bdb297a6ec5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5793946e-68f7-4982-8f7b-34f556a2ae25",
            "64b91ad5-986d-4f1c-8130-fb59b5ae2da6",
            "a8b83786-053f-49c9-bf54-d65a287bbc9a",
            "3df711aa-7538-4ade-9f30-c7ea053c41f2",
            "0392fb73-681f-44c1-813d-a3973b9944ed",
            "7bebacad-11e8-4617-bdd6-786b9d7bbae7",
            "b2e5c6b7-12ea-44a0-a9d5-d3bbfb6286c9",
            "0f51ebb7-1507-443d-bb17-3446e00b9acd",
            "6b758711-69ce-45a3-be3f-cf7514c48fa5",
            "a86cca1b-d460-490e-b07c-db8fd90c87ed",
            "12efefd9-2d6c-47eb-bca2-baeb8a347fb9",
            "cd6924c8-596f-4441-989d-52588cf5f226",
            "9ccd157e-e7d4-485e-851a-f4f50db50b45",
            "643753d1-42d4-417f-9eef-186354533ef3",
            "e62605fd-a12b-4ae1-b5bc-40587e2128e7",
            "a18fd571-f011-4282-b28c-1f12040bce4e",
            "a6f3ef95-9047-4cb0-9858-44f647f241a2",
            "70c3c1dd-bf47-4836-9142-99cf4a2e3d5f",
            "da4be366-7590-4970-95dd-57b98cbf8fb8",
            "4ad06d4a-aee1-4a99-9c6d-7bd66d079745",
            "8a6291af-4cb2-4c64-8de8-3f5e389a5d64",
            "50ddeee7-6168-46ad-98f7-aca8abbb5740",
            "8c728ddb-3ccb-416a-b72f-375683b4b39d",
            "19135ad1-d017-49b0-98be-5b3fbce77fba"
          ],
          "pending": [],
          "skipped": [],
          "duration": 315644,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "d0bd5490-930a-4117-9758-cbb62cb549c7",
          "title": "Monthly Claims -> OverTime Claims",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-overtime.js",
          "file": "/test/e2e/monthlyclaim/myclaims-overtime.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Check Close Button ",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Check Close Button ",
              "timedOut": false,
              "duration": 13519,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10096ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10096ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d0954ba2-d97c-4654-939d-ffba26958d0b",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Check Cancel Button ",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Check Cancel Button ",
              "timedOut": false,
              "duration": 13523,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-11' where id = 1;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 780 , \"date\" = '2023-09-12' where id = 2;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-13' where id = 3;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-14' where id = 4;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-15' where id = 5;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-15' where id = 6;`\n\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10044ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10044ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "bd09a649-580e-4240-9801-3d580a67a086",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to submit Overtime",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to submit Overtime",
              "timedOut": false,
              "duration": 13451,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\nawait overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10042ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10042ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "088d4985-e7ab-42ce-a422-0bf00a908f05",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details and Plus Icon",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details and Plus Icon",
              "timedOut": false,
              "duration": 13530,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10112ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10112ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "34b6769e-f4b3-4848-b1fb-afb4f11797b5",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Delete Button",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Delete Button",
              "timedOut": false,
              "duration": 13492,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_DeleteButton(0)\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, button[aria-label='Delete'])\nWait timed out after 10096ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, button[aria-label='Delete'])\nWait timed out after 10096ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "5806ef7e-d492-4d83-a45c-8b790b2130a8",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Overtime",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Submit Overtime",
              "timedOut": false,
              "duration": 13462,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\nawait overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10068ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10068ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "b06afa6f-95e8-4177-a30a-2d4fccc2cb03",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to click Show Details",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to click Show Details",
              "timedOut": false,
              "duration": 24525,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"managerId\" = 9429 WHERE \"employeeId\" = 9429;`,\n    `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'project_manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 118 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = 2 WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.wait(5000)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(8000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10075ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10075ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "c91bbe82-0db8-41ce-bb15-2745f1964180",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Filter Button",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Filter Button",
              "timedOut": false,
              "duration": 14447,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_PMSide_FilterButton();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\nawait claims.HRFilterSearchByClaimType('Overtime');\nawait utilFun.wait(1000);\n/// Start and End Date Filter\nawait claims.MyClaims_Filter_StartDate('2023-01-04');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2024-01-04')\nawait utilFun.wait(4000);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.ml-50.MuiBox-root.css-0)\nWait timed out after 10034ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.ml-50.MuiBox-root.css-0)\nWait timed out after 10034ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "8efa4474-7e72-4eae-b804-9eb0aa32a665",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Review Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Review Flow",
              "timedOut": false,
              "duration": 13420,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Action_ReviewIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(5000)\n/// Verify Data in Review Tab\nawait overtime_claims.MyClaims_ReviewTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, [aria-label=\"Add Review\"])\nWait timed out after 10022ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, [aria-label=\"Add Review\"])\nWait timed out after 10022ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "560a3c85-05ee-46d8-8075-110a9570e86f",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Reject Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Reject Flow",
              "timedOut": false,
              "duration": 13470,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Action_RejectIcon()\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Data in Reject Tab\nawait overtime_claims.MyClaims_RejectTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Reject\"])\nWait timed out after 10045ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Reject\"])\nWait timed out after 10045ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3d0864fb-af9b-4bed-ba48-87866d7e79aa",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Approve Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Approve Flow",
              "timedOut": false,
              "duration": 15449,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(5000);\nawait overtime_claims.MyClaims_Action_ApproveIcon();\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n/// Verify Data in Approve Tab\nawait overtime_claims.MyClaims_ApproveTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Approve\"])\nWait timed out after 10049ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Approve\"])\nWait timed out after 10049ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d1d647b3-5d64-41d8-b707-edcb281d8f2d",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details",
              "timedOut": false,
              "duration": 15475,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10042ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10042ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "01a109b7-9086-490d-b30a-fd7c2dd12eac",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be HR Role Review Flow",
              "timedOut": false,
              "duration": 12463,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\n        await utilFun.wait(2000)\n        await overtime_claims.MyClaims_Action_ReviewIcon(0);\n        await claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\n        await claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\n        const flashMessages = await claims.checkAlert();\n        utilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\n        await utilFun.wait(3000)\n        /// Verify Data in Review Tab\n        await claims.MyClaims_ClaimsRequest_ReviewTab();\n        await claims.Row_Assertion()\n        await utilFun.wait(3000)",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, [aria-label=\"Add Review\"])\nWait timed out after 10073ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, [aria-label=\"Add Review\"])\nWait timed out after 10073ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "59c1569e-1e29-4af7-aec6-c7784eaefc5d",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Approve Claim by HR",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Approve Claim by HR",
              "timedOut": false,
              "duration": 20518,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(5000);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_ApproveIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Approve\"])\nWait timed out after 10092ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Approve\"])\nWait timed out after 10092ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "68795b36-c414-4091-be6a-0b2689cadbaa",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Reject Claim by HR",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Reject Claim by HR",
              "timedOut": false,
              "duration": 15477,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_RejectIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait utilFun.wait(3000)\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Reject\"])\nWait timed out after 10069ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Reject\"])\nWait timed out after 10069ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "27510386-836a-46ec-83bf-62138402049c",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Reject Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Verify Reject Claim in Applicant Side",
              "timedOut": false,
              "duration": 6481,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nconst flashMessages = await overtime_claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Reject for Test Automation');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\nlet query =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);",
              "err": {
                "message": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".ant-table-cell > .MuiButtonBase-root\"}\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".ant-table-cell > .MuiButtonBase-root\"}\n  (Session info: headless chrome=119.0.6045.159)\n    at Object.throwDecodedError (node_modules/selenium-webdriver/lib/error.js:524:15)\n    at parseHttpResponse (node_modules/selenium-webdriver/lib/http.js:601:13)\n    at Executor.execute (node_modules/selenium-webdriver/lib/http.js:529:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async thenableWebDriverProxy.execute (node_modules/selenium-webdriver/lib/webdriver.js:745:17)\n    at async claims.MyClaims_CheckHRStatus_Scroll (test/support/pages/monthlyclaim/claims-pdf.js:270:28)\n    at async Context.<anonymous> (test/e2e/monthlyclaim/myclaims-overtime.js:318:9)",
                "diff": null
              },
              "uuid": "88bfb145-41e6-491c-b639-9a9cb478ab4a",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit OverTime as a Project Manager (Employee)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Submit OverTime as a Project Manager (Employee)",
              "timedOut": false,
              "duration": 16595,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'project_manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 118 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = 2 WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Sumera Shaikh')\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\nawait overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10039ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10039ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "ec019edc-2069-4c9d-9e4c-4d7abaf9f9ff",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details (HOD Side)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details (HOD Side)",
              "timedOut": false,
              "duration": 15469,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"managerId\" = 9429 WHERE \"employeeId\" = 9429;`,\n    `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'dev' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 83 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = 9429 WHERE id = 9;',\n    //// change manager id\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(5000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(3000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(2000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10027ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10027ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "b09872b6-a8d6-4821-98a2-4d9b566d8da3",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Filter Button (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Filter Button (HOD Scenario)",
              "timedOut": false,
              "duration": 14419,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_PMSide_FilterButton();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\nawait claims.HRFilterSearchByClaimType('Overtime');\nawait utilFun.wait(1000);\n/// Start and End Date Filter\nawait claims.MyClaims_Filter_StartDate('2024-01-04');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2024-01-04')\nawait utilFun.wait(4000);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.ml-50.MuiBox-root.css-0)\nWait timed out after 10044ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.ml-50.MuiBox-root.css-0)\nWait timed out after 10044ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "68ac174e-49fa-463b-a965-4739a84c59f0",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Review Flow (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Review Flow (HOD Scenario)",
              "timedOut": false,
              "duration": 17482,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(3000);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_Action_ReviewIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(5000)\n/// Verify Data in Review Tab\nawait overtime_claims.MyClaims_ReviewTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, [aria-label=\"Add Review\"])\nWait timed out after 10041ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, [aria-label=\"Add Review\"])\nWait timed out after 10041ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "7c057414-009e-462e-86a3-adb96aa3706d",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Reject Flow (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Reject Flow (HOD Scenario)",
              "timedOut": false,
              "duration": 13460,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Action_RejectIcon()\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Data in Reject Tab\nawait overtime_claims.MyClaims_RejectTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Reject\"])\nWait timed out after 10066ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Reject\"])\nWait timed out after 10066ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3e9a087a-f2d6-4140-874c-eb51b503abe3",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Approve Flow (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Approve Flow (HOD Scenario)",
              "timedOut": false,
              "duration": 15493,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(5000);\nawait overtime_claims.MyClaims_Action_ApproveIcon();\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n/// Verify Data in Approve Tab\nawait overtime_claims.MyClaims_ApproveTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Approve\"])\nWait timed out after 10067ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Approve\"])\nWait timed out after 10067ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "e74a970b-e9a0-4334-a291-a300d9502f25",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details (HR Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details (HR Scenario)",
              "timedOut": false,
              "duration": 12497,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10091ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10091ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "468a1ea9-7f3d-4809-8eb7-0ec3d6cdfdac",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review Flow (HR Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be HR Role Review Flow (HR Scenario)",
              "timedOut": false,
              "duration": 12446,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait overtime_claims.MyClaims_Action_ReviewIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(3000)\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nawait utilFun.wait(3000)",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, [aria-label=\"Add Review\"])\nWait timed out after 10061ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, [aria-label=\"Add Review\"])\nWait timed out after 10061ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "b80273ab-aa72-4dad-8bd7-ace7a4fa2cd7",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Approve Claim by HR (HR Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Approve Claim by HR (HR Scenario)",
              "timedOut": false,
              "duration": 20478,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(5000);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_ApproveIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Approve\"])\nWait timed out after 10059ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Approve\"])\nWait timed out after 10059ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "52a18fd2-f5ad-4147-a38d-a4cc48b6563d",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Reject Claim by HR",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Reject Claim by HR",
              "timedOut": false,
              "duration": 15494,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_RejectIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait utilFun.wait(3000)\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Reject\"])\nWait timed out after 10046ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Reject\"])\nWait timed out after 10046ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "99be9dc6-7974-4380-861b-5c9be7540699",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Reject Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Verify Reject Claim in Applicant Side",
              "timedOut": false,
              "duration": 6463,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'project_manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 118 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = 2 WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nconst flashMessages = await overtime_claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Reject for Test Automation');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".ant-table-cell > .MuiButtonBase-root\"}\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".ant-table-cell > .MuiButtonBase-root\"}\n  (Session info: headless chrome=119.0.6045.159)\n    at Object.throwDecodedError (node_modules/selenium-webdriver/lib/error.js:524:15)\n    at parseHttpResponse (node_modules/selenium-webdriver/lib/http.js:601:13)\n    at Executor.execute (node_modules/selenium-webdriver/lib/http.js:529:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async thenableWebDriverProxy.execute (node_modules/selenium-webdriver/lib/webdriver.js:745:17)\n    at async claims.MyClaims_CheckHRStatus_Scroll (test/support/pages/monthlyclaim/claims-pdf.js:270:28)\n    at async Context.<anonymous> (test/e2e/monthlyclaim/myclaims-overtime.js:545:9)",
                "diff": null
              },
              "uuid": "62289ee3-2fcd-4646-8761-97f691a1b5ca",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Download CSV",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Download CSV",
              "timedOut": false,
              "duration": 16583,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_ClaimRequest_DownloadBtn()\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Filter_StartDate('2024-01-01');\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_Filter_EndDate('2024-01-15');\nawait claims.ClaimStatus('Pending');\nawait utilFun.wait(1000);\nawait claims.ClaimStatus('Rejected');\nawait claims.MyClaims_ClaimRequest_DownloadBtn_MainDownloadBtn()\nawait utilFun.wait(1000);\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label=\"Download Lists\"])\nWait timed out after 10025ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label=\"Download Lists\"])\nWait timed out after 10025ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "cca156c1-1492-4b0d-9d8b-56b9b5fc7d9f",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 16527,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineDate_ClearHover();\nawait overtime_claims.MyClaims_DeadlineDate_ClearBtn();\nawait overtime_claims.MyClaims_Deadline_Date('2023-03-12 20:48:11');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label='Set Deadline For Claims'])\nWait timed out after 10040ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label='Set Deadline For Claims'])\nWait timed out after 10040ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "a5f03508-49c7-4061-afc2-f0502bc8a142",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit OverTime with Wrong Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Submit OverTime with Wrong Deadline Date",
              "timedOut": false,
              "duration": 16456,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Furqan Aziz')\nawait utilFun.wait(1000);\n// await overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\n// await overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Overtime claim is only allow for current month');\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10030ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10030ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "826b139b-1cfe-4cdf-a167-49cab45f50d7",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Set Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Set Deadline Date",
              "timedOut": false,
              "duration": 16583,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        'DELETE FROM employee_claim_deadlines;',\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineDate_ClearHover();\nawait overtime_claims.MyClaims_DeadlineDate_ClearBtn();\nawait overtime_claims.MyClaims_Deadline_Date('2024-03-12 20:48:11');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label='Set Deadline For Claims'])\nWait timed out after 10077ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label='Set Deadline For Claims'])\nWait timed out after 10077ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "b511b6e6-767e-49a0-8d46-a270f2b24713",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit OverTime as a SQA Automation(Employee) to Verify with Correct Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Submit OverTime as a SQA Automation(Employee) to Verify with Correct Deadline Date",
              "timedOut": false,
              "duration": 16446,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Furqan Aziz')\n// await utilFun.wait(1000);\n// await overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\n// await overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');\n let querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n        'DELETE FROM employee_claim_deadlines;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10031ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .iconBtn.mr-50.MuiBox-root.css-0)\nWait timed out after 10031ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "51dd67d7-674c-4b63-9611-62cdfd5aafe1",
              "parentUUID": "d0bd5490-930a-4117-9758-cbb62cb549c7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "d0954ba2-d97c-4654-939d-ffba26958d0b",
            "bd09a649-580e-4240-9801-3d580a67a086",
            "088d4985-e7ab-42ce-a422-0bf00a908f05",
            "34b6769e-f4b3-4848-b1fb-afb4f11797b5",
            "5806ef7e-d492-4d83-a45c-8b790b2130a8",
            "b06afa6f-95e8-4177-a30a-2d4fccc2cb03",
            "c91bbe82-0db8-41ce-bb15-2745f1964180",
            "8efa4474-7e72-4eae-b804-9eb0aa32a665",
            "560a3c85-05ee-46d8-8075-110a9570e86f",
            "3d0864fb-af9b-4bed-ba48-87866d7e79aa",
            "d1d647b3-5d64-41d8-b707-edcb281d8f2d",
            "01a109b7-9086-490d-b30a-fd7c2dd12eac",
            "59c1569e-1e29-4af7-aec6-c7784eaefc5d",
            "68795b36-c414-4091-be6a-0b2689cadbaa",
            "27510386-836a-46ec-83bf-62138402049c",
            "88bfb145-41e6-491c-b639-9a9cb478ab4a",
            "ec019edc-2069-4c9d-9e4c-4d7abaf9f9ff",
            "b09872b6-a8d6-4821-98a2-4d9b566d8da3",
            "68ac174e-49fa-463b-a965-4739a84c59f0",
            "7c057414-009e-462e-86a3-adb96aa3706d",
            "3e9a087a-f2d6-4140-874c-eb51b503abe3",
            "e74a970b-e9a0-4334-a291-a300d9502f25",
            "468a1ea9-7f3d-4809-8eb7-0ec3d6cdfdac",
            "b80273ab-aa72-4dad-8bd7-ace7a4fa2cd7",
            "52a18fd2-f5ad-4147-a38d-a4cc48b6563d",
            "99be9dc6-7974-4380-861b-5c9be7540699",
            "62289ee3-2fcd-4646-8761-97f691a1b5ca",
            "cca156c1-1492-4b0d-9d8b-56b9b5fc7d9f",
            "a5f03508-49c7-4061-afc2-f0502bc8a142",
            "826b139b-1cfe-4cdf-a167-49cab45f50d7",
            "b511b6e6-767e-49a0-8d46-a270f2b24713",
            "51dd67d7-674c-4b63-9611-62cdfd5aafe1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 475593,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "a4634d6f-7816-458b-9ae3-02f51e1b56fb",
          "title": "Monthly Claims -> Personal Development Fund",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-pdf.js",
          "file": "/test/e2e/monthlyclaim/myclaims-pdf.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able one File Upload and close button in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be able one File Upload and close button in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8f024f2d-62d8-45a3-8673-b5618b7e97c0",
              "parentUUID": "a4634d6f-7816-458b-9ae3-02f51e1b56fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able multiple File Upload & Cancel Button in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be able multiple File Upload & Cancel Button in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "89454ec0-467b-4da9-9e8d-237ebc96aae4",
              "parentUUID": "a4634d6f-7816-458b-9ae3-02f51e1b56fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "9b3debf2-1138-4aa0-9c9a-88cb8bd93144",
              "parentUUID": "a4634d6f-7816-458b-9ae3-02f51e1b56fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Delete Claim in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be Delete Claim in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "83dd5e52-c6cb-44ba-b8cf-995dd3ae9e8a",
              "parentUUID": "a4634d6f-7816-458b-9ae3-02f51e1b56fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "2aec2201-af7b-4871-a376-111ddc6abbe0",
              "parentUUID": "a4634d6f-7816-458b-9ae3-02f51e1b56fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "fd2aaa41-7aa9-4557-b01e-431a8f60b633",
              "parentUUID": "a4634d6f-7816-458b-9ae3-02f51e1b56fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Edit Claim of Personal Development Allowance",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Edit Claim of Personal Development Allowance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "ca8b7e83-0bfd-4361-9f24-74ad92fd76e1",
              "parentUUID": "a4634d6f-7816-458b-9ae3-02f51e1b56fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reviews Chart",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Reviews Chart",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e568b854-68b0-45e1-a361-d00fe1020a8d",
              "parentUUID": "a4634d6f-7816-458b-9ae3-02f51e1b56fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Add Reviews",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Add Reviews",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "635313a1-03e6-41b3-b0de-7678bac9fe2d",
              "parentUUID": "a4634d6f-7816-458b-9ae3-02f51e1b56fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Approve Button",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Approve Button",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "4ee2ec1e-b444-416b-bd7c-0d227191c9f7",
              "parentUUID": "a4634d6f-7816-458b-9ae3-02f51e1b56fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review See Button in Approve Tab",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Review See Button in Approve Tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e4922ae1-6a2b-4801-851a-e5002fb9f9ac",
              "parentUUID": "a4634d6f-7816-458b-9ae3-02f51e1b56fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reject Button",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Reject Button",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "98ba0edf-a5e9-4c14-bb00-6a8d6e95c433",
              "parentUUID": "a4634d6f-7816-458b-9ae3-02f51e1b56fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reason See in Reject Tab ",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Reason See in Reject Tab ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "d8a06bd8-6a13-4d66-bfc9-80566684ef94",
              "parentUUID": "a4634d6f-7816-458b-9ae3-02f51e1b56fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "c694c051-46fa-4017-a4f7-b9d8edfc9f03",
              "parentUUID": "a4634d6f-7816-458b-9ae3-02f51e1b56fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "a6c4e16c-c91f-4b70-94d0-dc4c65400f8e",
              "parentUUID": "a4634d6f-7816-458b-9ae3-02f51e1b56fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund for Verify Incorrect Deadline",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund for Verify Incorrect Deadline",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "1f5abab9-39c0-46a6-9c33-f109479cd8ba",
              "parentUUID": "a4634d6f-7816-458b-9ae3-02f51e1b56fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "c26add03-3d53-40c2-9abe-8ad0e225f025",
              "parentUUID": "a4634d6f-7816-458b-9ae3-02f51e1b56fb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund for Verify Correct Deadline",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund for Verify Correct Deadline",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e8a3c5bc-d12a-4294-9652-abfcf6415aeb",
              "parentUUID": "a4634d6f-7816-458b-9ae3-02f51e1b56fb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "8f024f2d-62d8-45a3-8673-b5618b7e97c0",
            "89454ec0-467b-4da9-9e8d-237ebc96aae4",
            "9b3debf2-1138-4aa0-9c9a-88cb8bd93144",
            "83dd5e52-c6cb-44ba-b8cf-995dd3ae9e8a",
            "2aec2201-af7b-4871-a376-111ddc6abbe0",
            "fd2aaa41-7aa9-4557-b01e-431a8f60b633",
            "ca8b7e83-0bfd-4361-9f24-74ad92fd76e1",
            "e568b854-68b0-45e1-a361-d00fe1020a8d",
            "635313a1-03e6-41b3-b0de-7678bac9fe2d",
            "4ee2ec1e-b444-416b-bd7c-0d227191c9f7",
            "e4922ae1-6a2b-4801-851a-e5002fb9f9ac",
            "98ba0edf-a5e9-4c14-bb00-6a8d6e95c433",
            "d8a06bd8-6a13-4d66-bfc9-80566684ef94",
            "c694c051-46fa-4017-a4f7-b9d8edfc9f03",
            "a6c4e16c-c91f-4b70-94d0-dc4c65400f8e",
            "1f5abab9-39c0-46a6-9c33-f109479cd8ba",
            "c26add03-3d53-40c2-9abe-8ad0e225f025",
            "e8a3c5bc-d12a-4294-9652-abfcf6415aeb"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
          "title": "Portfolio Module",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/portfolio/spec-1-portfolio.js",
          "file": "/test/e2e/portfolio/spec-1-portfolio.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"should check if Portfolio is showing\"",
              "fullTitle": "Portfolio Module \"before all\" hook for \"should check if Portfolio is showing\"",
              "timedOut": false,
              "duration": 11834,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet portfolioId = await utilFun.getFromDatabase(`SELECT id FROM project_portfolios WHERE \"name\" = '${portfolioName}';`)\nif(portfolioId.rowCount !== 0){\nconst query = [\n  `DELETE FROM project_portfolio_attachments WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n  `DELETE FROM project_portfolio_skills WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n  `DELETE FROM project_portfolio_employees WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n  `DELETE FROM project_portfolios WHERE id = ${portfolioId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n  }",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, li)\nWait timed out after 10214ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, li)\nWait timed out after 10214ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "b967f84e-66c6-4270-b8ab-45b3c2c32cfa",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Portfolio Module \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/portfolio');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "1d1a7274-e4f3-4433-b52b-7d959ee5c8d0",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if Portfolio is showing",
              "fullTitle": "Portfolio Module should check if Portfolio is showing",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/portfolio');",
              "err": {},
              "uuid": "e79b5fe0-96c8-4f20-80e2-df7cea98fbaf",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Add Portfolio",
              "fullTitle": "Portfolio Module should able to Add Portfolio",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickAddPorfolioBtn()\nawait portfolio.typeProjectName(portfolioName)\nawait portfolio.pasteLiveLink('http://google.com')\nawait portfolio.selectProjectStatus('Active')\nawait portfolio.selectPOC('Muhammad Bilal Rafaqat')\nawait portfolio.selectIndustry('Gaming')\nawait portfolio.selectProjectNature('Web App')\nawait portfolio.typeProjectDescription('testing')\nawait portfolio.clickYesCheckbox()\nawait portfolio.clickNotNowCheckbox()\nawait portfolio.clickFormNxtBtn()\nawait portfolio.clickFormNewNxtBtn()\nawait portfolio.selectEngagementModel('Fixed Term')\nawait portfolio.selectClientRegion('Germany')\nawait portfolio.selectDivision('InvoTeams')\nawait portfolio.selectTechStack('Node Js')\nawait portfolio.typeTag('testing')\nawait portfolio.selectResource('Hello')\nawait portfolio.selectRole('Lead Developer')\nawait portfolio.clickForm1NxtBtn()\nawait portfolio.selectDemoLinkUpdate('Web App')\nawait portfolio.typeDemoLinkLink('link')\nawait portfolio.typeDemoLinkDetails('testing')\nawait portfolio.selectAchievementsUpdate('Awards')\nawait portfolio.typeAchievementsLink('Link')\nawait portfolio.typeAchievementsDetails('testing')\nawait portfolio.typeGitUpdate('test')\nawait portfolio.typeGitLink('link')\nawait portfolio.typeGitDetails('testing')\nawait portfolio.clickForm2NxtBtn()\nawait portfolio.typeVideoTitle('Video Title')\nawait portfolio.uploadVideoFile()\nawait portfolio.typeDocTitle('Doc Title')\nawait portfolio.uploadDocFile()\nawait portfolio.typeProblemsOrChallenges('testing')\nawait portfolio.typeSolutions('testing')\nawait portfolio.clickForm3SubmitBtn()\nconst alertText = await portfolio.checkAlert();\nutilFun.assertEql(alertText, 'Portfolio has been saved successfully');",
              "err": {},
              "uuid": "93a6fb5a-5007-4b18-bc70-683a098e714f",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to check if Portfolio is Added or Not",
              "fullTitle": "Portfolio Module should able to check if Portfolio is Added or Not",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.selectPortfolioName(portfolioName)\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {},
              "uuid": "bd74a793-31c6-44b8-bda8-0bc523c48fae",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Update Portfolio",
              "fullTitle": "Portfolio Module should able to Update Portfolio",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.selectPortfolioName(portfolioName)\nawait portfolio.clickEditButton()\nawait portfolio.pasteLiveLink('http://google2.com')\nawait portfolio.selectProjectStatus('Closing')\nawait portfolio.selectPOC('Muhammad Bilal Rafaqat')\nawait portfolio.selectIndustry('Education')\nawait portfolio.selectProjectNature('IOS App')\nawait portfolio.typeProjectDescription('testing updated')\nawait portfolio.clickYesCheckbox()\nawait portfolio.clickNotNowCheckbox()\nawait portfolio.clickFormNxtBtn()\nawait portfolio.clickFormNewNxtBtn()\nawait portfolio.selectEngagementModel('Fixed Term')\nawait portfolio.selectClientRegion('Pakistan')\nawait portfolio.selectDivision('Invogame')\nawait portfolio.selectTechStack('Frontend')\nawait portfolio.typeTag('Updated Tag')\nawait portfolio.selectResource('Hello')\nawait portfolio.selectRole('Lead Developer')\nawait portfolio.clickForm1NxtBtn()\nawait portfolio.selectDemoLinkUpdate('Desktop App')\nawait portfolio.typeDemoLinkLink('updated')\nawait portfolio.typeDemoLinkDetails('update')\nawait portfolio.selectAchievementsUpdate('Shoutouts')\nawait portfolio.typeAchievementsLink('Link updated')\nawait portfolio.typeAchievementsDetails('testing updated')\nawait portfolio.typeGitUpdate('test updated')\nawait portfolio.typeGitLink('link updated')\nawait portfolio.typeGitDetails('testing updated')\nawait portfolio.clickForm2NxtBtn()\nawait portfolio.typeVideoTitle('Video Title Updated')\nawait portfolio.uploadVideoFile()\nawait portfolio.typeDocTitle('Doc Title updated')\nawait portfolio.uploadDocFile()\nawait portfolio.typeProblemsOrChallenges('testing updated')\nawait portfolio.typeSolutions('testing updated')\nawait portfolio.clickForm3SubmitBtn()\nconst alertText = await portfolio.checkAlert();\nutilFun.assertEql(alertText, 'Portfolio has been updated successfully');",
              "err": {},
              "uuid": "5e2fabc7-f7c1-427d-8048-856fa8d52ed5",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to fiter Portfolio by Name",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Name",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.selectPortfolioName(portfolioName)\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {},
              "uuid": "60ffa986-d4d1-4732-b3be-3edad179a696",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to fiter Portfolio by POC",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by POC",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByPOC('Muhammad Bilal Rafaqat')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "49074348-cfca-42d0-ae03-79bf8a720fdb",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to fiter Portfolio by Industry",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Industry",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByIndustry('Gaming')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Gaming'), `Expected text not found.`);",
              "err": {},
              "uuid": "72626738-f2f5-4740-8586-9350ec18dd0d",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to fiter Portfolio by Tech Stack",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Tech Stack",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByTechstack('Node Js')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Node Js'), `Expected text not found.`);",
              "err": {},
              "uuid": "71c931c9-2efe-4d88-8329-4ca91be89b5d",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to fiter Portfolio by Resource",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Resource",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByResources('Hello')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {},
              "uuid": "83d4199e-303b-4426-b3ac-d98f6bcd44f2",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to fiter Portfolio by Tags",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Tags",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByTags('testing')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('testing'), `Expected text not found.`);",
              "err": {},
              "uuid": "90dc8432-cb3d-41a3-9cea-b25f363a7a37",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to fiter Portfolio by Project Nature",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Project Nature",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByProjectNature('Web App')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Web App'), `Expected text not found.`);",
              "err": {},
              "uuid": "7746adfa-a3b0-465a-9de3-3af6aa680cc9",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to fiter Portfolio by Region",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Region",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByRegion('Pakistan')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Pakistan'), `Expected text not found.`);",
              "err": {},
              "uuid": "e56ed561-87f7-4d99-ba44-81cb9311c506",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to fiter Portfolio by Date",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Date",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByDate('Last 2 Weeks')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {},
              "uuid": "547d1aa2-f26b-4715-9fd2-4a4806d00d44",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Division Colum",
              "fullTitle": "Portfolio Module should able to Hide Division Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Division')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 14, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Division'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "d8f28c1c-44ee-4e62-b1f1-1c210660acaa",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Project Nature Colum",
              "fullTitle": "Portfolio Module should able to Hide Project Nature Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Project Nature')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 13, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Project Nature'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "6f0f4037-6cce-4466-a481-e8d7a4eeef03",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Tech Stack Colum",
              "fullTitle": "Portfolio Module should able to Hide Tech Stack Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Tech Stack')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 12, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Tech Stack'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "1f0bc0da-80f3-45bc-b80c-969160d5108d",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide POC Colum",
              "fullTitle": "Portfolio Module should able to Hide POC Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('POC')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 11, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('POC'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "49b70b1a-45e1-4cab-83cc-6fcf3726b720",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Resources Colum",
              "fullTitle": "Portfolio Module should able to Hide Resources Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Resources')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 10, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Resources'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "375ce224-42ed-4c79-bbf2-80829589158b",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Tags Colum",
              "fullTitle": "Portfolio Module should able to Hide Tags Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Tags')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 9, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Tags'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "7543a6b3-3126-4408-884d-089e968b9d5f",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Industry Colum",
              "fullTitle": "Portfolio Module should able to Hide Industry Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Industry')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 8, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Industry'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "fff761bf-4c2d-458b-b244-414eff412aee",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Region Colum",
              "fullTitle": "Portfolio Module should able to Hide Region Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Region')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 7, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Region'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "abc3ce57-eaf9-4958-a9e0-489a601e2fe8",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Attachments Colum",
              "fullTitle": "Portfolio Module should able to Hide Attachments Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Attachments')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 6, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Attachments'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "2104d17b-9722-4c91-9010-29e6e5937b03",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Achievements Colum",
              "fullTitle": "Portfolio Module should able to Hide Achievements Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Achievements')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 5, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Achievements'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "aabf451f-20ea-482d-8554-831a8c6dd4f8",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Git Access Colum",
              "fullTitle": "Portfolio Module should able to Hide Git Access Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Git Access')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 4, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Git Access'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "f56a4bcb-2b78-4323-80aa-3f51a539eb40",
              "parentUUID": "2e94d73a-9727-401b-bc8c-ca7ba1bfd85f",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "e79b5fe0-96c8-4f20-80e2-df7cea98fbaf",
            "93a6fb5a-5007-4b18-bc70-683a098e714f",
            "bd74a793-31c6-44b8-bda8-0bc523c48fae",
            "5e2fabc7-f7c1-427d-8048-856fa8d52ed5",
            "60ffa986-d4d1-4732-b3be-3edad179a696",
            "49074348-cfca-42d0-ae03-79bf8a720fdb",
            "72626738-f2f5-4740-8586-9350ec18dd0d",
            "71c931c9-2efe-4d88-8329-4ca91be89b5d",
            "83d4199e-303b-4426-b3ac-d98f6bcd44f2",
            "90dc8432-cb3d-41a3-9cea-b25f363a7a37",
            "7746adfa-a3b0-465a-9de3-3af6aa680cc9",
            "e56ed561-87f7-4d99-ba44-81cb9311c506",
            "547d1aa2-f26b-4715-9fd2-4a4806d00d44",
            "d8f28c1c-44ee-4e62-b1f1-1c210660acaa",
            "6f0f4037-6cce-4466-a481-e8d7a4eeef03",
            "1f0bc0da-80f3-45bc-b80c-969160d5108d",
            "49b70b1a-45e1-4cab-83cc-6fcf3726b720",
            "375ce224-42ed-4c79-bbf2-80829589158b",
            "7543a6b3-3126-4408-884d-089e968b9d5f",
            "fff761bf-4c2d-458b-b244-414eff412aee",
            "abc3ce57-eaf9-4958-a9e0-489a601e2fe8",
            "2104d17b-9722-4c91-9010-29e6e5937b03",
            "aabf451f-20ea-482d-8554-831a8c6dd4f8",
            "f56a4bcb-2b78-4323-80aa-3f51a539eb40"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
          "title": "Projects -> All Projects",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/projects/spec-1-allprojects.js",
          "file": "/test/e2e/projects/spec-1-allprojects.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Projects -> All Projects\"",
              "fullTitle": "Projects -> All Projects \"before all\" hook in \"Projects -> All Projects\"",
              "timedOut": false,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\n// await utilFun.login(email, password);",
              "err": {},
              "uuid": "aac4c7c5-a844-4282-828f-8ffb56b5bf6d",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to check Add Project Button Clickable ",
              "fullTitle": "Projects -> All Projects should able to check Add Project Button Clickable ",
              "timedOut": false,
              "duration": 13479,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9429;`,\n  `UPDATE employees SET \"workAs\" = 'dev' WHERE id = 9429;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9429;`,\n  `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n  `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n  'UPDATE departments SET \"hodId\" = 9429 WHERE id = 9;',\n  //// change manager id\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_AddProject_Btn();\nawait projects.checkModelIsVisible();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label='Add Project'])\nWait timed out after 10057ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label='Add Project'])\nWait timed out after 10057ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "4e75c71f-aa66-4200-8787-da7b9d55e646",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Add Button is Disable ",
              "fullTitle": "Projects -> All Projects should able to Verify Add Button is Disable ",
              "timedOut": false,
              "duration": 13490,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_AddProject_Btn();\nawait utilFun.wait(1000);\nawait projects.Projects_AddProject_AddBtn_Disable();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label='Add Project'])\nWait timed out after 10006ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label='Add Project'])\nWait timed out after 10006ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "981e2b17-d62e-4698-a892-d86eaaf82ecf",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add Project",
              "fullTitle": "Projects -> All Projects should able to Add Project",
              "timedOut": false,
              "duration": 10568,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM projects WHERE \"name\" = 'Appeo';`);\nlet portfolioId = await utilFun.getFromDatabase(`SELECT id FROM project_portfolios WHERE \"name\" = 'Appeo';`);\nif (resourceId.rowCount !== 0) {\n  let query = [\n    `DELETE FROM \"project_portfolio_skills\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n    `DELETE FROM \"project_timelines\" WHERE \"projectId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"project_portfolio_employees\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n    `DELETE FROM \"project_portfolios\" WHERE \"projectId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"projects\" WHERE \"id\" = ${resourceId.rows[0].id};`,\n  ];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_AddProject_Btn();\nawait projects.Projects_AddProject_ProjectName('Appeo');\nawait projects.Projects_AddProject_Divison('InvoLane');\nawait projects.Projects_AddProject_Status('Closing');\nawait projects.Projects_AddProject_AddBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project is created successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label='Add Project'])\nWait timed out after 10132ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, button[aria-label='Add Project'])\nWait timed out after 10132ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "80b52284-11e7-48a6-a6c8-d379e1c0e722",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify if Project is added",
              "fullTitle": "Projects -> All Projects should able to Verify if Project is added",
              "timedOut": false,
              "duration": 12430,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Appeo'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10049ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10049ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "a754c4c2-4103-48ff-ac06-c4b3dabf3993",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Division",
              "fullTitle": "Projects -> All Projects should able to Edit Division",
              "timedOut": false,
              "duration": 12434,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditDivision_Hover();\nawait projects.Projects_ProjectDetail_EditDivision();\nawait projects.selectInput('Invogame');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10037ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10037ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d961551f-752a-40c5-900d-6bab668db4dd",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Country",
              "fullTitle": "Projects -> All Projects should able to Edit Country",
              "timedOut": false,
              "duration": 12424,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditCountry_Hover();\nawait projects.Projects_ProjectDetail_EditCountryClick();\nawait projects.selectInput('Egypt');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10047ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10047ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "022b96a2-724a-49ca-85af-be8e81818827",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Status",
              "fullTitle": "Projects -> All Projects should able to Edit Status",
              "timedOut": false,
              "duration": 12468,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditStatusHover();\nawait projects.Projects_ProjectDetail_EditStatusClick();\nawait projects.selectInput('Closing');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10102ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10102ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "19324270-251e-484f-9c17-52f99d51e5a5",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Project Manager",
              "fullTitle": "Projects -> All Projects should able to Edit Project Manager",
              "timedOut": false,
              "duration": 12410,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditProjectManagerHover();\nawait projects.Projects_ProjectDetail_EditProjectManagerClick();\nawait projects.selectInput('Muhammad Bilal Rafaqat');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10001ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10001ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "c2516352-013a-4d2e-b4bc-6ca975084d2c",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Contract",
              "fullTitle": "Projects -> All Projects should able to Edit Contract",
              "timedOut": false,
              "duration": 12457,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditContractHover();\nawait projects.Projects_ProjectDetail_EditContractClick();\nawait projects.selectInput('Agency to Client');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10063ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10063ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "97797938-ca9f-401f-b9c8-b16448b57d51",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit PM Introduced",
              "fullTitle": "Projects -> All Projects should able to Edit PM Introduced",
              "timedOut": false,
              "duration": 12485,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditPMIntroHover();\nawait projects.Projects_ProjectDetail_EditPMIntroClick();\nawait projects.selectInput('No');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10029ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10029ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "496d8ad4-f09c-4a8e-bd50-5e33122d1a07",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Dev Introduced",
              "fullTitle": "Projects -> All Projects should able to Edit Dev Introduced",
              "timedOut": false,
              "duration": 12409,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditDevIntroHover();\nawait projects.Projects_ProjectDetail_EditDevIntroClick();\nawait projects.selectInput('Yes');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10011ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10011ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "00926f14-9b6f-4c47-83aa-d4f49c75e871",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Engagement",
              "fullTitle": "Projects -> All Projects should able to Edit Engagement",
              "timedOut": false,
              "duration": 12465,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditEngagementHover();\nawait projects.Projects_ProjectDetail_EditEngagementClick();\nawait projects.selectInput('Hourly');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10067ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10067ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "876c46ff-e917-4657-911d-c3ceea17cb02",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Billing Cycle",
              "fullTitle": "Projects -> All Projects should able to Edit Billing Cycle",
              "timedOut": false,
              "duration": 12376,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditBillingCycleHover();\nawait projects.Projects_ProjectDetail_EditBillingCycleClick();\nawait projects.selectInput('Weekly');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10008ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10008ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "dd111112-feec-403c-8db9-0235e762c4c7",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit BD Member",
              "fullTitle": "Projects -> All Projects should able to Edit BD Member",
              "timedOut": false,
              "duration": 12404,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditBDMemberHover();\nawait projects.Projects_ProjectDetail_EditBDMember();\nawait projects.selectInput('Ahsan Butt');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10020ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10020ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "44291203-f5bc-479e-8f1f-2c9125ce4009",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Communication Mode",
              "fullTitle": "Projects -> All Projects should able to Edit Communication Mode",
              "timedOut": false,
              "duration": 12393,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditCommunicationModeHover();\nawait projects.Projects_ProjectDetail_EditCommunicationModeClick();\nawait projects.selectInput('Email');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10002ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10002ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "b852448e-7049-4a7d-a18f-1495c16f0037",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Billing Profile",
              "fullTitle": "Projects -> All Projects should able to Edit Billing Profile",
              "timedOut": false,
              "duration": 12413,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditBillingProfileHover();\nawait projects.Projects_ProjectDetail_EditBillingProfile();\nawait projects.selectInput('Cash');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10014ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10014ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "774088f9-10e8-4828-9487-50fb1362e9c4",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Billing Channel",
              "fullTitle": "Projects -> All Projects should able to Edit Billing Channel",
              "timedOut": false,
              "duration": 12588,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditBillingChannelHover();\nawait projects.Projects_ProjectDetail_EditBillingChannelClick();\nawait projects.selectInput('Upwork Profile');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');\n//'Billing profile is required for this billing channel!!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10202ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10202ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "ce0620b4-5d69-4682-81a0-510bb9a939ec",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document & Cancel Button",
              "fullTitle": "Projects -> All Projects should able to Upload Document & Cancel Button",
              "timedOut": false,
              "duration": 12412,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadPhoto(0);\nawait projects.Projects_ProjectDetail_UploadDocument_AddRow(0);\nawait projects.Projects_ProjectDetail_UploadDocument_RemoveRow(1);\nawait projects.Projects_CancelBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10036ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10036ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3e239c92-a79a-4ce1-bdc9-8ef88049c974",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document  & Disable Submit Button ",
              "fullTitle": "Projects -> All Projects should able to Upload Document  & Disable Submit Button ",
              "timedOut": false,
              "duration": 12403,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_DisableSubmitBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10039ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10039ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3363fe55-c68b-4be0-a864-ab3243d06503",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document Photo & Submit Button ",
              "fullTitle": "Projects -> All Projects should able to Upload Document Photo & Submit Button ",
              "timedOut": false,
              "duration": 12436,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadPhoto(0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10051ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10051ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "f6c81a84-83a9-4f84-9d4d-dd400782c273",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Download Documents ",
              "fullTitle": "Projects -> All Projects should able to Download Documents ",
              "timedOut": false,
              "duration": 12430,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_DownloadDocumentBtn(0);\nawait projects.Projects_DownloadDocumentBtn(1);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10050ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10050ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "10a6fde4-f15f-47ef-b79f-c3298b500fd9",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document Link & Cancel Button",
              "fullTitle": "Projects -> All Projects should able to Upload Document Link & Cancel Button",
              "timedOut": false,
              "duration": 12451,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('Link', 1);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_ProjectDetail_UploadDocument_Field('www.invohub.com', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_AddRow(0);\nawait projects.Projects_ProjectDetail_UploadDocument_RemoveRow(1);\nawait projects.Projects_CancelBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10027ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10027ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "7401600c-7cb6-4b42-b001-b9be04ad3f89",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document Link & Submit Button ",
              "fullTitle": "Projects -> All Projects should able to Upload Document Link & Submit Button ",
              "timedOut": false,
              "duration": 12397,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('Link', 1);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_ProjectDetail_UploadDocument_Field('www.invohub.com', 0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10003ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10003ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "66cba8c6-9667-4698-bd6f-aab856e38cf6",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete Documents & Cancel Button ",
              "fullTitle": "Projects -> All Projects should able to Delete Documents & Cancel Button ",
              "timedOut": false,
              "duration": 12426,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_CancelBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10003ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10003ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d1175fdd-2445-4d47-976f-05d4e8e1bc1a",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete Documents & Ok Button ",
              "fullTitle": "Projects -> All Projects should able to Delete Documents & Ok Button ",
              "timedOut": false,
              "duration": 12376,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Document removed from project successfully.');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Document removed from project successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10034ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10034ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "1c2e4461-4202-43a0-9e44-5c7ecf1714f3",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document PDF & Submit Button & Delete PDF ",
              "fullTitle": "Projects -> All Projects should able to Upload Document PDF & Submit Button & Delete PDF ",
              "timedOut": false,
              "duration": 12614,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document PDF Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadPDF(0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Document removed from project successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10210ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10210ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d4eb3e67-4075-45b5-b2b7-e39c2d0d4b50",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document Doc & Submit Button & Delete Doc ",
              "fullTitle": "Projects -> All Projects should able to Upload Document Doc & Submit Button & Delete Doc ",
              "timedOut": false,
              "duration": 12482,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Doc Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadDoc(0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Document removed from project successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10083ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10083ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "6c795749-9b61-4f97-aff2-aeb04995c876",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document xlsx & Submit Button & Delete xlsx ",
              "fullTitle": "Projects -> All Projects should able to Upload Document xlsx & Submit Button & Delete xlsx ",
              "timedOut": false,
              "duration": 12430,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Xlsx Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadXlsx(0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Document removed from project successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10036ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10036ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "6c24ab08-9ebe-4ed5-9532-c9bea6920005",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add Resource in Project ",
              "fullTitle": "Projects -> All Projects should able to Add Resource in Project ",
              "timedOut": false,
              "duration": 12369,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(1);\nawait projects.RoleProject('Lead SQA');\nawait projects.ResourceName('Ahmed Ali');\nawait projects.EngagementCapicity('5~6 hours');\nawait projects.EngagementMode('Parked');\nawait projects.Projects_ProjectDetail_AddResource_Alias('Input Alias');\nawait projects.Projects_SubmitBtns();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Resource added successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10019ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10019ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "a1174050-74e7-4695-af79-ca1de3b31560",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Resource Engagement Mode ",
              "fullTitle": "Projects -> All Projects should able to Edit Resource Engagement Mode ",
              "timedOut": false,
              "duration": 12414,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_Resource_EngagementModeHover();\nawait projects.Projects_Resource_EngagementModeEdit();\nawait projects.ResourceEngagementMode('Training');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10011ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10011ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "0badfe24-2de7-47c1-b179-8ca5ea4fc4c8",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Resource Engagement Capicity ",
              "fullTitle": "Projects -> All Projects should able to Edit Resource Engagement Capicity ",
              "timedOut": false,
              "duration": 12428,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.ResourceEngagementCapicity('Fully Occupied');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10046ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10046ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "5a769510-f6e3-4b77-8e30-91d86393e996",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Alias",
              "fullTitle": "Projects -> All Projects should able to Edit Alias",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "a99d7fa9-d92f-4fa6-9744-13c145a89d7d",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete Resource",
              "fullTitle": "Projects -> All Projects should able to Delete Resource",
              "timedOut": false,
              "duration": 12434,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Resource removed from project successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10026ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10026ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "32e32f57-4570-4188-b638-2d72f7671c78",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Project",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Project",
              "timedOut": false,
              "duration": 12522,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Appeo'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10028ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10028ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "be738709-b710-4420-b549-cc16f1108245",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Manager ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Manager ",
              "timedOut": false,
              "duration": 12383,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Manager', 'Muhammad Bilal Rafaqat');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10007ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10007ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "24170666-8de2-428f-9e6f-b63e48257f1b",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Division ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Division ",
              "timedOut": false,
              "duration": 12466,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Division', 'InvoTeams');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('InvoTeams'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10091ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10091ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "a7e5a75e-d2d2-4e3c-a870-a208770539c6",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Status ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Status ",
              "timedOut": false,
              "duration": 12406,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Status', 'Active');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Active'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10032ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10032ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "00c1ac51-b147-42f4-a36d-7a98c0e8617c",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by BD Team ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by BD Team ",
              "timedOut": false,
              "duration": 12486,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by BD Team', 'Bd F');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Bd F'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10021ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10021ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "392366d9-8d2f-4501-9791-6cc199e5e8c2",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by BD Member ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by BD Member ",
              "timedOut": false,
              "duration": 12419,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by BD Member', 'Ahsan Butt');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Ahsan Butt'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10036ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10036ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d386fee2-1e16-4949-93dd-93c08e99bceb",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Contract ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Contract ",
              "timedOut": false,
              "duration": 12564,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Contract', 'Agency to Client');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Agency to Client'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10193ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10193ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3dcc2a6b-b20a-4a5d-bedb-30d5836f4e11",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Country ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Country ",
              "timedOut": false,
              "duration": 12380,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Country', 'Egypt');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Egypt'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10007ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10007ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "1ecdbe7a-8ab3-4615-9feb-592708b63fdd",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Billing Channel ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Billing Channel ",
              "timedOut": false,
              "duration": 12398,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Billing Channel', 'Upwork Profile');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Upwork Profile'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10026ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10026ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "7de8a34d-6126-4982-96ca-b843aa91327a",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Click Clear Button ",
              "fullTitle": "Projects -> All Projects should able Click Clear Button ",
              "timedOut": false,
              "duration": 12441,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Billing Channel', 'InvoZone Pvt. Ltd. Meezan');\nawait projects.selectFilter_ProjectDetail_Assert('InvoZone Pvt. Ltd. Meezan');\nawait projects.Projects_Filter_ClearBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10022ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10022ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "a222f1fe-623d-429d-8e67-28a1447402e6",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Filter Fields ",
              "fullTitle": "Projects -> All Projects should able to Verify Filter Fields ",
              "timedOut": false,
              "duration": 12409,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.selectFilter('Search by Manager', 'Muhammad Bilal Rafaqat');\nawait projects.selectFilter('Search by Division', 'InvoTeams');\nawait projects.selectFilter('Search by Status', 'Active');\nawait projects.selectFilter('Search by BD Team', 'BD F');\nawait projects.selectFilter('Search by BD Member', 'Ahmed Irtza');\nawait projects.selectFilter('Search by Contract', 'Individual to Client');\nawait projects.selectFilter('Search by Country', 'Egypt');\nawait projects.selectFilter('Search by Billing Channel', 'InvoZone Pvt. Ltd. Meezan');\nawait projects.Projects_Filter_ClearBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10027ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10027ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "98906fe5-766a-41ba-b81f-48a1af80e4d3",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Apply Multiple Searches ",
              "fullTitle": "Projects -> All Projects should able to Verify Apply Multiple Searches ",
              "timedOut": false,
              "duration": 12423,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.selectFilter('Search by Manager', 'Muhammad Bilal Rafaqat');\nawait projects.selectFilter('Search by Manager', 'Ali Ahmad');\nawait projects.selectFilter('Search by Division', 'InvoTeams');\nawait projects.selectFilter('Search by Division', 'Invogame');\nawait projects.selectFilter('Search by Status', 'Active');\nawait projects.selectFilter('Search by Status', 'Paused');\nawait projects.selectFilter('Search by BD Team', 'BD F');\nawait projects.selectFilter('Search by BD Team', 'N/A');\nawait projects.selectFilter('Search by BD Member', 'Ahmed Irtza');\nawait projects.selectFilter('Search by BD Member', 'Ahsan Butt');\nawait projects.selectFilter('Search by CSM', 'Areeba Tariq');\nawait projects.selectFilter('Search by CSM', 'Fiza Murad');\nawait projects.selectFilter('Search by Contract', 'Individual to Client');\nawait projects.selectFilter('Search by Contract', 'Agency to Client');\nawait projects.selectFilter('Search by Country', 'Egypt');\nawait projects.selectFilter('Search by Country', 'Pakistan');\nawait projects.selectFilter('Search by Billing Channel', 'InvoZone Pvt. Ltd. Meezan');\nawait projects.selectFilter('Search by Billing Channel', 'N/A');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10027ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10027ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3576cff4-26a7-4663-9af8-68c41184ca81",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Click Project Detail",
              "fullTitle": "Projects -> All Projects should able Click Project Detail",
              "timedOut": false,
              "duration": 12632,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10211ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10211ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d31d2fc7-9c91-4bd0-afd8-43a68189e7c3",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Edit Project Name",
              "fullTitle": "Projects -> All Projects should able Edit Project Name",
              "timedOut": false,
              "duration": 12398,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectsDetail_EditProject();\nawait projects.Projects_ProjectsDetail_InputName('test');\nawait projects.Projects_ProjectsDetail_UpdateButton();\nlet flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');\nawait utilFun.wait(2000)\nawait projects.Projects_ProjectsDetail_EditProject();\nawait projects.Projects_ProjectsDetail_InputName_Clear();\nawait projects.Projects_ProjectsDetail_InputName('Appeo');\nawait projects.Projects_ProjectsDetail_UpdateButton();\nflashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10020ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10020ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "f1e617fe-27fc-422f-81d7-f50b681959f7",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify if Project is added",
              "fullTitle": "Projects -> All Projects should able to Verify if Project is added",
              "timedOut": false,
              "duration": 12376,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Appeo'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10023ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10023ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "41bbfbf2-056c-47dc-b735-8ea2b1f52921",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Click Cancel Btn in Project Detail",
              "fullTitle": "Projects -> All Projects should able Click Cancel Btn in Project Detail",
              "timedOut": false,
              "duration": 12381,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectsDetail_EditProject();\nawait projects.Projects_ProjectsDetail_InputName('test');\nawait projects.Projects_ProjectsDetail_CancelBtn();\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10003ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10003ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "9e977e23-bb4f-46b7-a645-aa886038eb33",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Add Description in Project Detail",
              "fullTitle": "Projects -> All Projects should able Add Description in Project Detail",
              "timedOut": false,
              "duration": 12390,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectsDetail_Description('Add New Description');\nawait projects.Projects_ProjectsDetail_UpdateBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10011ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10011ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "93231264-8786-4ecf-b808-36472c5bb061",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Search Stack in Project Detail",
              "fullTitle": "Projects -> All Projects should able Search Stack in Project Detail",
              "timedOut": false,
              "duration": 12420,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectDetail_Search('Admin');\nawait projects.ProjectDetail_TextAssertion();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10026ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10026ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "266d19fd-c585-49c8-93a1-0840e093bb57",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Add Stack in Project Detail",
              "fullTitle": "Projects -> All Projects should able Add Stack in Project Detail",
              "timedOut": false,
              "duration": 10009,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await projects.Projects_ProjectDetail_Search('Admin');\nawait projects.Projects_ProjectDetail_AddStack();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Skills are updated successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [placeholder=\"Search Tech Stacks\"])\nWait timed out after 10006ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [placeholder=\"Search Tech Stacks\"])\nWait timed out after 10006ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "0d34e7bf-9f02-4a0d-a40e-9b5f918bc9cd",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Delete Stack and Click No Btutton",
              "fullTitle": "Projects -> All Projects should able Delete Stack and Click No Btutton",
              "timedOut": false,
              "duration": 10022,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await projects.Projects_ProjectDetail_DeleteStack();\nawait projects.Projects_NoBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"makeStyles-root-1\"])\nWait timed out after 10022ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"makeStyles-root-1\"])\nWait timed out after 10022ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "7224b939-85ff-4810-887a-37b9e069d337",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Delete Stack in Project Detail",
              "fullTitle": "Projects -> All Projects should able Delete Stack in Project Detail",
              "timedOut": false,
              "duration": 10036,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await projects.Projects_ProjectDetail_DeleteStack();\nawait projects.Projects_ProjectDetail_YesBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Tech Stack is deleted successfully.');\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"makeStyles-root-1\"])\nWait timed out after 10036ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"makeStyles-root-1\"])\nWait timed out after 10036ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "41ada5bc-1002-463f-9c01-b6089076d60c",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Check Filter Btn in Timeline",
              "fullTitle": "Projects -> All Projects should able to Check Filter Btn in Timeline",
              "timedOut": false,
              "duration": 12510,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectDetail_TimelineTab();\nawait projects.Projects_ProjectDetail_TimelineStartDate('28-11-2023');\nawait projects.Projects_ProjectDetail_TimelineEndDate('28-12-2024');\nawait projects.Projects_ProjectDetail_ApplyFilterBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Filtered successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10099ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10099ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "dbe911c9-3324-4f3e-9b00-32e08e4e7376",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Verify Status in Timeline",
              "fullTitle": "Projects -> All Projects should able Verify Status in Timeline",
              "timedOut": false,
              "duration": 10036,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// await projects.Projects_ProjectDetail_TimelineTab();\nawait projects.Projects_ProjectDetail_TimelineStartDate('28-11-2023');\nawait projects.Projects_ProjectDetail_TimelineEndDate('28-12-2024');\nawait projects.Projects_ProjectDetail_ApplyFilterBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Filtered successfully.');\nconst name = await projects.Projects_ProjectDetail_Timeline_StatusAssert();\nassert.ok(name.includes('Removed'), `Expected text not found.`);\nconst names = await projects.Projects_ProjectDetail_Timeline_StatusAssert();\nassert.ok(names.includes('Muhammad Zeeshan Ullah'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [id=\"startDate\"])\nWait timed out after 10035ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [id=\"startDate\"])\nWait timed out after 10035ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d866a742-72fa-4d8e-a7d7-a381bc28ac74",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Clear Button in Project Timeline",
              "fullTitle": "Projects -> All Projects should able Clear Button in Project Timeline",
              "timedOut": false,
              "duration": 10038,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await projects.Projects_ProjectDetail_TimelineStartDate('28-11-2023');\nawait projects.Projects_ProjectDetail_TimelineEndDate('28-12-2024');\nawait projects.Projects_ProjectDetail_ApplyFilterBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Filtered successfully.');\nawait projects.Projects_ProjectDetail_Timeline_ClearBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [id=\"startDate\"])\nWait timed out after 10036ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [id=\"startDate\"])\nWait timed out after 10036ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "c0d22398-58ec-4dee-b997-5c265b9a5c09",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click History Tab",
              "fullTitle": "Projects -> All Projects should able to Click History Tab",
              "timedOut": false,
              "duration": 13040,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.wait(3000);\nawait projects.Projects_ProjectDetail_HistoryBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, button:nth-child(3) b:nth-child(1))\nWait timed out after 10035ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, button:nth-child(3) b:nth-child(1))\nWait timed out after 10035ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "8aa30fb6-9965-4f00-b657-7ea2e8bfdb74",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify notification History Tab",
              "fullTitle": "Projects -> All Projects should able to Verify notification History Tab",
              "timedOut": false,
              "duration": 28,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const name = await projects.Projects_ProjectDetail_History_Assert();\nassert.ok(\n  name.includes('bilal.rafaqat@invozone.dev has updated the Project Tech Stack by removing the technology named Admin.'),\n  `Expected text not found.`,\n);\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/projects/spec-1-allprojects.js:629:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "34ac0ef1-ef52-4e68-8ff2-bb8bafe37f06",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Division in Hide Columns ",
              "fullTitle": "Projects -> All Projects should able to Click Division in Hide Columns ",
              "timedOut": false,
              "duration": 13547,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await login.switchWindow(0);\nawait utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Division');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 17, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Division');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10079ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10079ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "df04692b-59b2-4dc5-a61a-73e13014fb98",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Tech Stack in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Tech Stack in Hide Columns",
              "timedOut": false,
              "duration": 13481,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Tech Stack');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 16, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Tech Stack');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10089ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10089ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "65deb099-8216-4bb4-87e3-235c2e5298bf",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Country in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Country in Hide Columns",
              "timedOut": false,
              "duration": 13413,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Country');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 15, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Country');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10012ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10012ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "772a2b8d-7e69-47ac-bcc7-93665c5c35b9",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Status in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Status in Hide Columns",
              "timedOut": false,
              "duration": 13418,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Status');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 14, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Status');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10001ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10001ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "176d7847-6676-4151-8b27-9e46c6ab15ef",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Project Manager in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Project Manager in Hide Columns",
              "timedOut": false,
              "duration": 13398,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Project Manager');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 13, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Project Manager');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10011ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10011ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "930f7ced-6c9f-403a-9e27-d333bb2475b6",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Contract in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Contract in Hide Columns",
              "timedOut": false,
              "duration": 13427,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Contract');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 12, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Contract');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10024ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10024ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "4f938f57-4d43-46ec-b4ab-2d32caada234",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click PM Introduced in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click PM Introduced in Hide Columns",
              "timedOut": false,
              "duration": 13422,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('PM Introduced');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 11, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('PM Introduced');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10032ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10032ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "cb4172a2-b093-4bf0-92c2-244a6375a7ee",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Dev Introduced in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Dev Introduced in Hide Columns",
              "timedOut": false,
              "duration": 13434,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Dev Introduced');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 10, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Dev Introduced');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10050ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10050ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "7fb4d1c7-a02c-47b5-b62e-363654e7fb2e",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Engagement in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Engagement in Hide Columns",
              "timedOut": false,
              "duration": 13394,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Engagement');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 9, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Engagement');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10031ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10031ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "0003fbe1-032a-401c-8724-b04fd97754fc",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Billing Cycle in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Billing Cycle in Hide Columns",
              "timedOut": false,
              "duration": 13424,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Billing Cycle');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 8, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Billing Cycle');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10026ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10026ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "5eba2ba8-237e-4615-96d6-cabfe53319d8",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click BD Member in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click BD Member in Hide Columns",
              "timedOut": false,
              "duration": 13431,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('BD Member');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 7, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('BD Member');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10060ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10060ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "70f1f766-eef2-406e-9df0-ea3060ff5b36",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click BD Team in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click BD Team in Hide Columns",
              "timedOut": false,
              "duration": 13357,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('BD Team');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 6, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('BD Team');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10001ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10001ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "bb6fd8f1-ef53-4b82-98a0-24fe868e79b7",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Communication in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Communication in Hide Columns",
              "timedOut": false,
              "duration": 13405,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Communication');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 5, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Communication');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10030ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10030ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "481a560c-05eb-4763-b93c-adf45c39b8f3",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Billing Profile in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Billing Profile in Hide Columns",
              "timedOut": false,
              "duration": 13418,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Billing Profile');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 4, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Billing Profile');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10041ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10041ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "da57f7ab-e0f1-4dca-8ac5-6a3bd516fdce",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Billing Channel in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Billing Channel in Hide Columns",
              "timedOut": false,
              "duration": 13449,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Billing Channel');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 3, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Billing Channel');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10072ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10072ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "2b872042-3752-4f0e-ba93-e2ad59fb1b6e",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Engineers in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Engineers in Hide Columns",
              "timedOut": false,
              "duration": 13438,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Engineers');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 2, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Engineers');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10051ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Hide Columns\"])\nWait timed out after 10051ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "1d9111ec-83d6-4678-b1cb-a5ca7af3a82e",
              "parentUUID": "ca112ecd-69a5-430a-8bac-0c580a5d5d9e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4e75c71f-aa66-4200-8787-da7b9d55e646",
            "981e2b17-d62e-4698-a892-d86eaaf82ecf",
            "80b52284-11e7-48a6-a6c8-d379e1c0e722",
            "a754c4c2-4103-48ff-ac06-c4b3dabf3993",
            "d961551f-752a-40c5-900d-6bab668db4dd",
            "022b96a2-724a-49ca-85af-be8e81818827",
            "19324270-251e-484f-9c17-52f99d51e5a5",
            "c2516352-013a-4d2e-b4bc-6ca975084d2c",
            "97797938-ca9f-401f-b9c8-b16448b57d51",
            "496d8ad4-f09c-4a8e-bd50-5e33122d1a07",
            "00926f14-9b6f-4c47-83aa-d4f49c75e871",
            "876c46ff-e917-4657-911d-c3ceea17cb02",
            "dd111112-feec-403c-8db9-0235e762c4c7",
            "44291203-f5bc-479e-8f1f-2c9125ce4009",
            "b852448e-7049-4a7d-a18f-1495c16f0037",
            "774088f9-10e8-4828-9487-50fb1362e9c4",
            "ce0620b4-5d69-4682-81a0-510bb9a939ec",
            "3e239c92-a79a-4ce1-bdc9-8ef88049c974",
            "3363fe55-c68b-4be0-a864-ab3243d06503",
            "f6c81a84-83a9-4f84-9d4d-dd400782c273",
            "10a6fde4-f15f-47ef-b79f-c3298b500fd9",
            "7401600c-7cb6-4b42-b001-b9be04ad3f89",
            "66cba8c6-9667-4698-bd6f-aab856e38cf6",
            "d1175fdd-2445-4d47-976f-05d4e8e1bc1a",
            "1c2e4461-4202-43a0-9e44-5c7ecf1714f3",
            "d4eb3e67-4075-45b5-b2b7-e39c2d0d4b50",
            "6c795749-9b61-4f97-aff2-aeb04995c876",
            "6c24ab08-9ebe-4ed5-9532-c9bea6920005",
            "a1174050-74e7-4695-af79-ca1de3b31560",
            "0badfe24-2de7-47c1-b179-8ca5ea4fc4c8",
            "5a769510-f6e3-4b77-8e30-91d86393e996",
            "32e32f57-4570-4188-b638-2d72f7671c78",
            "be738709-b710-4420-b549-cc16f1108245",
            "24170666-8de2-428f-9e6f-b63e48257f1b",
            "a7e5a75e-d2d2-4e3c-a870-a208770539c6",
            "00c1ac51-b147-42f4-a36d-7a98c0e8617c",
            "392366d9-8d2f-4501-9791-6cc199e5e8c2",
            "d386fee2-1e16-4949-93dd-93c08e99bceb",
            "3dcc2a6b-b20a-4a5d-bedb-30d5836f4e11",
            "1ecdbe7a-8ab3-4615-9feb-592708b63fdd",
            "7de8a34d-6126-4982-96ca-b843aa91327a",
            "a222f1fe-623d-429d-8e67-28a1447402e6",
            "98906fe5-766a-41ba-b81f-48a1af80e4d3",
            "3576cff4-26a7-4663-9af8-68c41184ca81",
            "d31d2fc7-9c91-4bd0-afd8-43a68189e7c3",
            "f1e617fe-27fc-422f-81d7-f50b681959f7",
            "41bbfbf2-056c-47dc-b735-8ea2b1f52921",
            "9e977e23-bb4f-46b7-a645-aa886038eb33",
            "93231264-8786-4ecf-b808-36472c5bb061",
            "266d19fd-c585-49c8-93a1-0840e093bb57",
            "0d34e7bf-9f02-4a0d-a40e-9b5f918bc9cd",
            "7224b939-85ff-4810-887a-37b9e069d337",
            "41ada5bc-1002-463f-9c01-b6089076d60c",
            "dbe911c9-3324-4f3e-9b00-32e08e4e7376",
            "d866a742-72fa-4d8e-a7d7-a381bc28ac74",
            "c0d22398-58ec-4dee-b997-5c265b9a5c09",
            "8aa30fb6-9965-4f00-b657-7ea2e8bfdb74",
            "34ac0ef1-ef52-4e68-8ff2-bb8bafe37f06",
            "df04692b-59b2-4dc5-a61a-73e13014fb98",
            "65deb099-8216-4bb4-87e3-235c2e5298bf",
            "772a2b8d-7e69-47ac-bcc7-93665c5c35b9",
            "176d7847-6676-4151-8b27-9e46c6ab15ef",
            "930f7ced-6c9f-403a-9e27-d333bb2475b6",
            "4f938f57-4d43-46ec-b4ab-2d32caada234",
            "cb4172a2-b093-4bf0-92c2-244a6375a7ee",
            "7fb4d1c7-a02c-47b5-b62e-363654e7fb2e",
            "0003fbe1-032a-401c-8724-b04fd97754fc",
            "5eba2ba8-237e-4615-96d6-cabfe53319d8",
            "70f1f766-eef2-406e-9df0-ea3060ff5b36",
            "bb6fd8f1-ef53-4b82-98a0-24fe868e79b7",
            "481a560c-05eb-4763-b93c-adf45c39b8f3",
            "da57f7ab-e0f1-4dca-8ac5-6a3bd516fdce",
            "2b872042-3752-4f0e-ba93-e2ad59fb1b6e",
            "1d9111ec-83d6-4678-b1cb-a5ca7af3a82e"
          ],
          "pending": [
            "a99d7fa9-d92f-4fa6-9744-13c145a89d7d"
          ],
          "skipped": [],
          "duration": 912664,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "69fe94b9-394c-43af-972d-dbb96d7f5022",
          "title": "Projects -> OnBoarding",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/projects/spec-2-actualProejct.js",
          "file": "/test/e2e/projects/spec-2-actualProejct.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to check Actual Prject Form is Showing by clicking Add btn  ",
              "fullTitle": "Projects -> OnBoarding should able to check Actual Prject Form is Showing by clicking Add btn  ",
              "timedOut": false,
              "duration": 10714,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'BD F' WHERE id = 9429;`,\n  `UPDATE employees SET \"workAs\" = 'dev' WHERE id = 9429;`,\n  `UPDATE employees SET \"departmentId\" = 3 WHERE id = 9429;`,\n  `UPDATE employees SET \"designationId\" = 13 WHERE id = 9429;`,\n  `UPDATE employees SET \"subDepartmentId\" = 13 WHERE id = 9429;`,\n  `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n  'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n  'UPDATE departments SET \"hodId\" = NULL WHERE id = 3;',\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProject();\nawait projectOnBoarding.checkActualProjectModel();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [label=\"[object Object]\"])\nWait timed out after 10177ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [label=\"[object Object]\"])\nWait timed out after 10177ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "b9f0a3cc-8a9e-4d12-9be4-265d128ffa90",
              "parentUUID": "69fe94b9-394c-43af-972d-dbb96d7f5022",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check Cross Button ",
              "fullTitle": "Projects -> OnBoarding should able to check Cross Button ",
              "timedOut": false,
              "duration": 10482,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProject();\nawait projectOnBoarding.checkActualProjectModel();\nawait projectOnBoarding.ProjectOnBoarding_CrossBtn();\nawait projectOnBoarding.checkActualProjectModelNotVisible();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [label=\"[object Object]\"])\nWait timed out after 10108ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [label=\"[object Object]\"])\nWait timed out after 10108ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "9fd411b6-4014-42eb-a8ba-d728781cd682",
              "parentUUID": "69fe94b9-394c-43af-972d-dbb96d7f5022",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Add Actual Project  ",
              "fullTitle": "Projects -> OnBoarding should able Add Actual Project  ",
              "timedOut": false,
              "duration": 13459,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [`DELETE FROM \"project_onboardings\" WHERE \"name\" = 'InvoChain'`, `DELETE FROM \"project_onboardings\" WHERE \"name\" = 'InvoBlog'`];\nawait utilFun.udpateDatabase(query);\nlet resourceId = await utilFun.getFromDatabase(`SELECT id FROM projects WHERE \"name\" = 'InvoChain';`);\nlet portfolioId = await utilFun.getFromDatabase(`SELECT id FROM project_portfolios WHERE \"name\" = 'InvoChain';`);\nif (resourceId.rowCount !== 0) {\n  let query = [\n    `DELETE FROM \"project_portfolio_skills\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n    `DELETE FROM \"project_timelines\" WHERE \"projectId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"project_portfolio_employees\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n    `DELETE FROM \"project_portfolios\" WHERE \"projectId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"projects\" WHERE \"id\" = ${resourceId.rows[0].id};`,\n  ];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait utilFun.wait(3000);\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProject();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectName('InvoBlog');\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectReferenceNo('12344321');\nawait projectOnBoarding.OnBoarding_AddActualProject_StartDate('02-01-2024');\nawait projectOnBoarding.OnBoarding_AddActualProject_TentavieDuration('2 year');\nawait projectOnBoarding.selectValue('Select Division', 'Dtest');\nawait projectOnBoarding.selectValue('Select Source', 'International Event');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactName('Alia');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactPersonEmail('abc@info.com');\nawait projectOnBoarding.clickNextBtnPage1();\nawait projectOnBoarding.selectField('BD Member *\\nSelect resource', 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField('Actual Resource(s)\\nSelect resources', 'Abdul Wakeel');\nawait projectOnBoarding.selectField('Resource Name (Shared with Client)', 'Tariq');\nawait projectOnBoarding.selectField('Tech Stack *\\nSelect Tech Stack', 'Admin');\nawait projectOnBoarding.selectField('Communication Mode\\nSelect mode', 'Email');\nawait projectOnBoarding.selectField('Project Manager\\nSelect Project Manager', 'amna hussain');\nawait projectOnBoarding.selectField('Service Mode*\\nSelect service mode', 'Yet To Be Decided');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.selectField('Company Name', 'InvoZone USA');\nawait projectOnBoarding.selectField('Company Address', 'Lahore');\nawait projectOnBoarding.selectField('Client Side Billing Representative Name*', 'Abdul Wakeel');\nawait projectOnBoarding.selectField('Client Side Billing Representative Email', '123@invozone.com');\nawait projectOnBoarding.selectField('Billing Cycle*\\nSelect billing cycle', 'Monthly');\nawait projectOnBoarding.selectField('Billing Start Date *', '01-01-2024');\nawait projectOnBoarding.selectField('Currency *\\nUnited States Dollar', 'United States Dollar');\nawait projectOnBoarding.selectField('Billing Rates/ Total Project Cost*', '20024');\nawait projectOnBoarding.selectField('Billing Platform *', 'Cash');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn3();\nawait projectOnBoarding.selectField('Reference thread\\nNo', 'No');\nawait projectOnBoarding.selectField('Are we introduced as Agency or Individual?*\\nSelect introduction', 'Individual to Client');\nawait projectOnBoarding.selectField('Rate Concluded*', '15');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration', 'No Trial');\nawait projectOnBoarding.selectField(\n  'Any Future Upsells which client gave a heads up for near future?*\\n' + 'Select option',\n  'Nothing at the moment',\n);\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_AddActualProject_AddRequest();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project onboarding request is completed successfuly!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [label=\"[object Object]\"])\nWait timed out after 10029ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [label=\"[object Object]\"])\nWait timed out after 10029ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "c4093336-2486-434d-992e-338e1a5dca7a",
              "parentUUID": "69fe94b9-394c-43af-972d-dbb96d7f5022",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Actual project is created or not",
              "fullTitle": "Projects -> OnBoarding should check if Actual project is created or not",
              "timedOut": false,
              "duration": 12430,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoBlog');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoBlog');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10031ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10031ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "86ef5f19-1508-4068-935f-822f4d0de111",
              "parentUUID": "69fe94b9-394c-43af-972d-dbb96d7f5022",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check Edit Project Button Clickable",
              "fullTitle": "Projects -> OnBoarding should able to check Edit Project Button Clickable",
              "timedOut": false,
              "duration": 10502,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.OnBoarding_AddActualProject_EditHover();\nawait projectOnBoarding.OnBoarding_AddActualProject_Edit();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectName('InvoChain');\nawait utilFun.wait(1000);\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectReferenceNo('12344321');\nawait projectOnBoarding.OnBoarding_AddActualProject_StartDate('03-01-2024');\nawait projectOnBoarding.OnBoarding_AddActualProject_TentavieDuration('3 year');\nawait projectOnBoarding.selectValue('Select Division', 'Atest');\nawait projectOnBoarding.selectValue('Select Source', 'Upwork');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactName('Ali');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactPersonEmail('abcd@info.com');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn1();\nawait projectOnBoarding.selectField('BD Member *\\nSelect resource', 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField('Actual Resource(s)\\nAbdul Wakeel', 'Abid Ali');\nawait projectOnBoarding.selectField('Resource Name (Shared with Client)', 'Ahmed');\nawait projectOnBoarding.selectField('Tech Stack *\\nAdmin', 'BA');\nawait projectOnBoarding.selectField('Communication Mode\\nEmail', 'InvoChat');\nawait projectOnBoarding.selectField('Project Manager\\nSelect Project Manager', 'amna hussain');\nawait projectOnBoarding.selectField('Service Mode*\\nYet To Be Decided', 'Augmentation / Dedicated Resource');\nawait projectOnBoarding.selectField('Augmentation*\\nSelect augmentation', 'Monthly');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.selectField('Company Name', 'InvoZone PAK');\nawait projectOnBoarding.selectField('Company Address', 'Faisalabad');\nawait projectOnBoarding.selectField('Client Side Billing Representative Name*', 'Uzair Arbab');\nawait projectOnBoarding.selectField('Client Side Billing Representative Email', '1234@invozone.com');\nawait projectOnBoarding.selectField('Billing Cycle*\\nSelect billing cycle', 'Weekly');\nawait projectOnBoarding.selectField('Billing Start Date *', '02-01-2024');\nawait projectOnBoarding.selectField('Currency *\\nUnited States Dollar', 'Pounds');\nawait projectOnBoarding.selectField('Billing Rates/ Total Project Cost*', '20025');\nawait projectOnBoarding.selectField('Billing Platform *', 'Check');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn3();\nawait projectOnBoarding.selectField('Reference thread\\nNo', 'Yes');\nawait projectOnBoarding.selectField('BA Names - Created/ Approved the estimation Doc *\\nSelect option', 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField(\"PM's Names - Created/ Approved the estimation Doc*\\nSelect option\", 'Muhammad Bilal Rafaqat');\nawait projectOnBoarding.selectField('Reference Internal Thread Link*', 'www.invo-zone.com');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration', 'Free Trial');\nawait projectOnBoarding.selectField('Trial Duration*', '2 Weeks');\nawait projectOnBoarding.selectField('Are we introduced as Agency or Individual?*\\nSelect introduction', 'Individual to Client');\nawait projectOnBoarding.selectField('Rate Concluded*', '15');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration', 'No Trial');\nawait projectOnBoarding.selectField(\n  'Any Future Upsells which client gave a heads up for near future?*\\n' + 'Select option',\n  'Nothing at the moment',\n);\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_AddActualProject_AddRequest();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project is updated Successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, td[class='ant-table-cell ant-table-cell-fix-left ant-table-cell-fix-left-last'] a[target='_blank'])\nWait timed out after 10106ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, td[class='ant-table-cell ant-table-cell-fix-left ant-table-cell-fix-left-last'] a[target='_blank'])\nWait timed out after 10106ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "b779e689-de83-4a74-8a46-32d3dd7f6c9b",
              "parentUUID": "69fe94b9-394c-43af-972d-dbb96d7f5022",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if actual project is updated or not",
              "fullTitle": "Projects -> OnBoarding should check if actual project is updated or not",
              "timedOut": false,
              "duration": 12574,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoChain');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoChain');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10203ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10203ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "321acf84-957e-48f3-845f-b15517dfad2f",
              "parentUUID": "69fe94b9-394c-43af-972d-dbb96d7f5022",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check Delete Button Clickable",
              "fullTitle": "Projects -> OnBoarding should able to check Delete Button Clickable",
              "timedOut": false,
              "duration": 10490,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.OnBoarding_AddActualProject_DeleteBtn();\nawait projectOnBoarding.OnBoarding_AddActualProject_Delete_YesBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project is archived successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, button [class=\"ActionButtons_delete_icon__8I50p\"])\nWait timed out after 10067ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, button [class=\"ActionButtons_delete_icon__8I50p\"])\nWait timed out after 10067ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "84989930-88fe-4ff4-bbd4-2f1f672f0fb4",
              "parentUUID": "69fe94b9-394c-43af-972d-dbb96d7f5022",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if project is showing in Archived Project",
              "fullTitle": "Projects -> OnBoarding should check if project is showing in Archived Project",
              "timedOut": false,
              "duration": 10519,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickArchiveBtn();\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoChain');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoChain');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [data-testid=\"ArchiveIcon\"])\nWait timed out after 10171ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [data-testid=\"ArchiveIcon\"])\nWait timed out after 10171ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "024e96f3-6385-4627-a59c-e3e8534352fc",
              "parentUUID": "69fe94b9-394c-43af-972d-dbb96d7f5022",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Add Actual Project  ",
              "fullTitle": "Projects -> OnBoarding should able Add Actual Project  ",
              "timedOut": false,
              "duration": 13457,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [`DELETE FROM \"project_onboardings\" WHERE \"name\" = 'InvoChain'`];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait utilFun.wait(3000);\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProject();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectName('InvoChain');\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectReferenceNo('12344321');\nawait projectOnBoarding.OnBoarding_AddActualProject_StartDate('02-01-2024');\nawait projectOnBoarding.OnBoarding_AddActualProject_TentavieDuration('2 year');\nawait projectOnBoarding.selectValue('Select Division', 'Dtest');\nawait projectOnBoarding.selectValue('Select Source', 'International Event');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactName('Alia');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactPersonEmail('abc@info.com');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn1();\nawait projectOnBoarding.selectField('BD Member *\\nSelect resource', 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField('Actual Resource(s)\\nSelect resources', 'Abdul Wakeel');\nawait projectOnBoarding.selectField('Resource Name (Shared with Client)', 'Tariq');\nawait projectOnBoarding.selectField('Tech Stack *\\nSelect Tech Stack', 'Admin');\nawait projectOnBoarding.selectField('Communication Mode\\nSelect mode', 'Email');\nawait projectOnBoarding.selectField('Project Manager\\nSelect Project Manager', 'amna hussain');\nawait projectOnBoarding.selectField('Service Mode*\\nSelect service mode', 'Yet To Be Decided');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.selectField('Company Name', 'InvoZone USA');\nawait projectOnBoarding.selectField('Company Address', 'Lahore');\nawait projectOnBoarding.selectField('Client Side Billing Representative Name*', 'Abdul Wakeel');\nawait projectOnBoarding.selectField('Client Side Billing Representative Email', '123@invozone.com');\nawait projectOnBoarding.selectField('Billing Cycle*\\nSelect billing cycle', 'Monthly');\nawait projectOnBoarding.selectField('Billing Start Date *', '01-01-2024');\nawait projectOnBoarding.selectField('Currency *\\nUnited States Dollar', 'United States Dollar');\nawait projectOnBoarding.selectField('Billing Rates/ Total Project Cost*', '20024');\nawait projectOnBoarding.selectField('Billing Platform *', 'Cash');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn3();\nawait projectOnBoarding.selectField('Reference thread\\nNo', 'No');\nawait projectOnBoarding.selectField('Are we introduced as Agency or Individual?*\\nSelect introduction', 'Individual to Client');\nawait projectOnBoarding.selectField('Rate Concluded*', '15');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration', 'No Trial');\nawait projectOnBoarding.selectField(\n  'Any Future Upsells which client gave a heads up for near future?*\\n' + 'Select option',\n  'Nothing at the moment',\n);\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_AddActualProject_AddRequest();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project onboarding request is completed successfuly!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [label=\"[object Object]\"])\nWait timed out after 10012ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [label=\"[object Object]\"])\nWait timed out after 10012ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "7035236b-1d87-451f-9208-89dc4410ebde",
              "parentUUID": "69fe94b9-394c-43af-972d-dbb96d7f5022",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Actual project is created or not",
              "fullTitle": "Projects -> OnBoarding should check if Actual project is created or not",
              "timedOut": false,
              "duration": 12410,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoChain');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoChain');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10031ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10031ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "2bf28c38-5c15-4c20-bd5f-15afe1ef114a",
              "parentUUID": "69fe94b9-394c-43af-972d-dbb96d7f5022",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check OnBoard Icon Clickable",
              "fullTitle": "Projects -> OnBoarding should able to check OnBoard Icon Clickable",
              "timedOut": false,
              "duration": 12455,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = ['UPDATE departments SET \"hodId\" = 9429 WHERE id = 3;'];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoChain');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoChain');\nawait projectOnBoarding.OnBoarding_AddActualProject_OnBoardIcon();\nawait projectOnBoarding.checkActualProjectModel();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10012ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10012ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "a7670e99-3e39-4a7f-959f-07faa660d88f",
              "parentUUID": "69fe94b9-394c-43af-972d-dbb96d7f5022",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check Cancel Btn Clickable ",
              "fullTitle": "Projects -> OnBoarding should able to check Cancel Btn Clickable ",
              "timedOut": false,
              "duration": 12419,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoChain');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoChain');\nawait projectOnBoarding.OnBoarding_AddActualProject_OnBoardIcon();\nawait projectOnBoarding.checkActualProjectModel();\nawait projectOnBoarding.OnBoarding_AddActualProject_CancelBtn();\nawait projectOnBoarding.checkActualProjectModelNotVisible();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10009ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10009ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3cc0c3e0-1324-48b3-ae4b-c4734fb36bc8",
              "parentUUID": "69fe94b9-394c-43af-972d-dbb96d7f5022",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should should able to onboard project",
              "fullTitle": "Projects -> OnBoarding should should able to onboard project",
              "timedOut": false,
              "duration": 12406,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoChain');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoChain');\nawait projectOnBoarding.OnBoarding_AddActualProject_OnBoardIcon();\nawait projectOnBoarding.OnBoarding_AddActualProject_OnBoardBtn();\nconst alert = await projects.checkAlert();\nutilFun.assertEql(alert, 'Project is onboarded successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10024ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10024ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "1ac20633-7921-41b4-91cb-80f4705b5b2b",
              "parentUUID": "69fe94b9-394c-43af-972d-dbb96d7f5022",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify if Project is added",
              "fullTitle": "Projects -> OnBoarding should able to Verify if Project is added",
              "timedOut": false,
              "duration": 12432,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'InvoChain');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('InvoChain'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10070ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10070ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d44de300-2a69-4f88-8f62-7e944440d05a",
              "parentUUID": "69fe94b9-394c-43af-972d-dbb96d7f5022",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "b9f0a3cc-8a9e-4d12-9be4-265d128ffa90",
            "9fd411b6-4014-42eb-a8ba-d728781cd682",
            "c4093336-2486-434d-992e-338e1a5dca7a",
            "86ef5f19-1508-4068-935f-822f4d0de111",
            "b779e689-de83-4a74-8a46-32d3dd7f6c9b",
            "321acf84-957e-48f3-845f-b15517dfad2f",
            "84989930-88fe-4ff4-bbd4-2f1f672f0fb4",
            "024e96f3-6385-4627-a59c-e3e8534352fc",
            "7035236b-1d87-451f-9208-89dc4410ebde",
            "2bf28c38-5c15-4c20-bd5f-15afe1ef114a",
            "a7670e99-3e39-4a7f-959f-07faa660d88f",
            "3cc0c3e0-1324-48b3-ae4b-c4734fb36bc8",
            "1ac20633-7921-41b4-91cb-80f4705b5b2b",
            "d44de300-2a69-4f88-8f62-7e944440d05a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 166749,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
          "title": "Per-Sale Project Onboarding",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/projects/spec-3-presale.js",
          "file": "/test/e2e/projects/spec-3-presale.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Per-Sale Project Onboarding\"",
              "fullTitle": "Per-Sale Project Onboarding \"before all\" hook in \"Per-Sale Project Onboarding\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let projectId = await utilFun.getFromDatabase(`SELECT id FROM projects WHERE \"name\" = 'PreSaleTesting';`)\nlet portfolioId = await utilFun.getFromDatabase(`SELECT id FROM project_portfolios WHERE \"name\" = 'PreSaleTesting';`)\nif(projectId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"project_portfolio_skills\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n  `DELETE FROM \"project_portfolios\" WHERE id = ${portfolioId.rows[0].id};`,\n  `DELETE FROM \"project_timelines\" WHERE \"projectId\" = ${projectId.rows[0].id};`,\n  `DELETE FROM \"projects\" WHERE id = ${projectId.rows[0].id};`\n];\nawait utilFun.udpateDatabase(query);\n}\n// await utilFun.login(email, password);",
              "err": {},
              "uuid": "a38583e7-2b50-4aa6-8186-df2d6f739fea",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to Add Pre-Sale project onboarding request",
              "fullTitle": "Per-Sale Project Onboarding should able to Add Pre-Sale project onboarding request",
              "timedOut": false,
              "duration": 10578,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [\n    `DELETE FROM \"project_onboardings\" WHERE \"name\" = 'PreSaleTest';`,\n    `DELETE FROM \"project_onboardings\" WHERE \"name\" = 'PreSaleTesting';`\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.OnBoarding_PreSaleBtn();\nawait projectOnBoarding.selectField('Project Name *', 'PreSaleTest');\nawait projectOnBoarding.selectField('Lead Reference Number/ Name *' , '1232123');\nawait projectOnBoarding.selectField('Division *\\nSelect Division' , 'Dtest');\nawait projectOnBoarding.selectField('Source*\\nSelect Source' , 'Upwork');\nawait projectOnBoarding.selectField('Offer Received on Upwork? (BD-F Only)*\\nSelect option' , 'Yes');\nawait projectOnBoarding.selectField('Offer Accepted on Upwork? (BD-F Only)*\\nSelect option' , 'Yes');\nawait projectOnBoarding.selectField('Offer Expiry Date (BD-F Only)' , '24-5-2025');\nawait projectOnBoarding.selectField('Profile Name*' , 'Furqan Aziz');\nawait projectOnBoarding.selectField('Lead Upwork Reference Link*' , 'www.furqan/upwork.com');\nawait projectOnBoarding.selectField('Client Side Contact Person Name(s) *' , 'Ali');\nawait projectOnBoarding.selectField('Client Side Point of Contact Email(s)' , 'abcd@gmail.com');\nawait projectOnBoarding.OnBoarding_PreSale_TextArea('Reason');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn1();\nawait projectOnBoarding.selectField('BD Member *' , 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField('Actual Resource(s)\\nSelect resources' , 'Awais Shaukat');\nawait projectOnBoarding.selectField('Resource Name (Shared with Client)' , 'Furqan Aziz');\nawait projectOnBoarding.selectField('Tech Stack *\\nSelect Tech Stack' , 'Admin');\nawait projectOnBoarding.selectField('Communication Mode\\nSelect mode' , 'InvoZone Slack');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.selectField('Service Mode*\\nSelect service mode' , 'Yet To Be Decided');\nawait projectOnBoarding.selectField('Introduced as*\\nSelect option' , 'Agency');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration' , 'Free Trial');\nawait projectOnBoarding.selectField('Trial Duration *' , '6');\nawait projectOnBoarding.selectField('Are there Reference thread?*\\nNo' , 'Yes');\nawait projectOnBoarding.selectField('BA Names - Created/ Approved the estimation Doc*\\nSelect option' , 'Muhammad Zeeshan Ullah');\nawait utilFun.wait(2000);\nawait projectOnBoarding.selectField(\"PM's Names - Created/ Approved the estimation Doc*\\nSelect resource\" , 'Muhammad Bilal');\nawait projectOnBoarding.selectField('Reference internal thread link*' , 'www.google.com');\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_PreSale_AddRequest();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project onboarding request is completed successfuly!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [label=\"[object Object]\"])\nWait timed out after 10149ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [label=\"[object Object]\"])\nWait timed out after 10149ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "55d6e8cb-8fba-42ae-9cfe-434804a77222",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if pre-sale project is created or not",
              "fullTitle": "Per-Sale Project Onboarding should check if pre-sale project is created or not",
              "timedOut": false,
              "duration": 12423,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTest')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTest');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10022ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10022ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "70dbcaf8-3941-4a23-b977-d44fae4876ec",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shold able to archive project",
              "fullTitle": "Per-Sale Project Onboarding shold able to archive project",
              "timedOut": false,
              "duration": 12401,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTest')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTest');\nawait projectOnBoarding.clickArchiveChannelBtn()\nawait projectOnBoarding.clickYesBtn()\nconst alert = await projects.checkAlert()\nutilFun.assertEql(alert, 'Project is archived successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10025ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10025ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "e8d19fc3-edf6-4e7e-baf8-7ab98d86e3be",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if project is showing in Archived Project",
              "fullTitle": "Per-Sale Project Onboarding should check if project is showing in Archived Project",
              "timedOut": false,
              "duration": 10609,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickArchiveBtn()\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTest')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTest');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [data-testid=\"ArchiveIcon\"])\nWait timed out after 10186ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [data-testid=\"ArchiveIcon\"])\nWait timed out after 10186ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "ac1e4580-a84e-4aa3-a18d-591467187574",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add Pre-Sale project onboarding request",
              "fullTitle": "Per-Sale Project Onboarding should able to Add Pre-Sale project onboarding request",
              "timedOut": false,
              "duration": 10505,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [\n    `DELETE FROM \"project_onboardings\" WHERE \"name\" = 'PreSaleTest';`,\n    `DELETE FROM \"project_onboardings\" WHERE \"name\" = 'PreSaleTesting';`\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.OnBoarding_PreSaleBtn();\nawait projectOnBoarding.selectField('Project Name *', 'PreSaleTest');\nawait projectOnBoarding.selectField('Lead Reference Number/ Name *' , '1232123');\nawait projectOnBoarding.selectField('Division *\\nSelect Division' , 'Dtest');\nawait projectOnBoarding.selectField('Source*\\nSelect Source' , 'Upwork');\nawait projectOnBoarding.selectField('Offer Received on Upwork? (BD-F Only)*\\nSelect option' , 'Yes');\nawait projectOnBoarding.selectField('Offer Accepted on Upwork? (BD-F Only)*\\nSelect option' , 'Yes');\nawait projectOnBoarding.selectField('Offer Expiry Date (BD-F Only)' , '24-5-2025');\nawait projectOnBoarding.selectField('Profile Name*' , 'Furqan Aziz');\nawait projectOnBoarding.selectField('Lead Upwork Reference Link*' , 'www.furqan/upwork.com');\nawait projectOnBoarding.selectField('Client Side Contact Person Name(s) *' , 'Ali');\nawait projectOnBoarding.selectField('Client Side Point of Contact Email(s)' , 'abcd@gmail.com');\nawait projectOnBoarding.OnBoarding_PreSale_TextArea('Reason');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn1();\nawait projectOnBoarding.selectField('BD Member *' , 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField('Actual Resource(s)\\nSelect resources' , 'Awais Shaukat');\nawait projectOnBoarding.selectField('Resource Name (Shared with Client)' , 'Furqan Aziz');\nawait projectOnBoarding.selectField('Tech Stack *\\nSelect Tech Stack' , 'Admin');\nawait projectOnBoarding.selectField('Communication Mode\\nSelect mode' , 'InvoZone Slack');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.selectField('Service Mode*\\nSelect service mode' , 'Yet To Be Decided');\nawait projectOnBoarding.selectField('Introduced as*\\nSelect option' , 'Agency');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration' , 'Free Trial');\nawait projectOnBoarding.selectField('Trial Duration *' , '6');\nawait projectOnBoarding.selectField('Are there Reference thread?*\\nNo' , 'Yes');\nawait projectOnBoarding.selectField('BA Names - Created/ Approved the estimation Doc*\\nSelect option' , 'Muhammad Zeeshan Ullah');\nawait utilFun.wait(2000);\nawait projectOnBoarding.selectField(\"PM's Names - Created/ Approved the estimation Doc*\\nSelect resource\" , 'Muhammad Bilal');\nawait projectOnBoarding.selectField('Reference internal thread link*' , 'www.google.com');\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_PreSale_AddRequest();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project onboarding request is completed successfuly!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [label=\"[object Object]\"])\nWait timed out after 10091ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [label=\"[object Object]\"])\nWait timed out after 10091ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "6c2993d8-b222-4a3a-aafe-0dc8a6616e14",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if pre-sale project is created or not",
              "fullTitle": "Per-Sale Project Onboarding should check if pre-sale project is created or not",
              "timedOut": false,
              "duration": 12387,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTest')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTest');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10008ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10008ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d5e5cdf1-d535-45be-a57a-75db17d9b50e",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit pre-sale project",
              "fullTitle": "Per-Sale Project Onboarding should able to edit pre-sale project",
              "timedOut": false,
              "duration": 12452,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTest')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTest');\nawait projectOnBoarding.clickEditProject()\nawait projectOnBoarding.selectField('Project Name *', 'PreSaleTesting');\nawait projectOnBoarding.selectField('Lead Reference Number/ Name *' , '12345');\nawait projectOnBoarding.selectField('Profile Name*' , 'TestProfile');\nawait projectOnBoarding.selectField('Lead Upwork Reference Link*' , 'www.test/upwork.com');\nawait projectOnBoarding.selectField('Client Side Contact Person Name(s) *' , 'James');\nawait projectOnBoarding.selectField('Client Side Point of Contact Email(s)' , 'james@gmail.com');\nawait projectOnBoarding.OnBoarding_PreSale_TextArea('Reason updated');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn1();\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_PreSale_AddRequest();\nconst alert = await projects.checkAlert();\nutilFun.assertEql(alert, 'Project is updated Successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10061ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10061ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "238d0cd5-6f11-435d-8742-eb288949788f",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if pre-sale project is updated or not",
              "fullTitle": "Per-Sale Project Onboarding should check if pre-sale project is updated or not",
              "timedOut": false,
              "duration": 12420,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTesting')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTesting');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10015ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10015ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "222430bc-1ef4-491f-9a03-f5569460f905",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to add billing details by clicking manage channel button",
              "fullTitle": "Per-Sale Project Onboarding should able to add billing details by clicking manage channel button",
              "timedOut": false,
              "duration": 12391,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTesting')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTesting');\nawait projectOnBoarding.clickManageChannelBtn()\nawait projectOnBoarding.manageChannelInput('Project Manager *\\nSelect Project Manager','Bilal Rafaqat')\nawait projectOnBoarding.manageChannelInput('Start Date *','10-02-2024')\nawait projectOnBoarding.manageChannelInput('Company Name','xyz')\nawait projectOnBoarding.manageChannelInput('Company Address','xyz')\nawait projectOnBoarding.manageChannelInput('Client Side Billing Representative Name*','James')\nawait projectOnBoarding.manageChannelInput('Client Side Billing Representative Email','james@email.com')\nawait projectOnBoarding.manageChannelInput('Billing Cycle*\\nSelect billing cycle','weekly')\nawait projectOnBoarding.manageChannelInput('Billing Start Date *','15-02-2024')\nawait projectOnBoarding.manageChannelInput('Billing Rates/ Total Project Cost*','5000')\nawait projectOnBoarding.manageChannelInput('Billing Platform *','paypal')\nawait projectOnBoarding.clickUpdateBillingBtn()\nconst alert = await projects.checkAlert()\nutilFun.assertEql(alert, 'Project billing details are updated successfully');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10009ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10009ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "41c666e4-ccda-41ee-8ab2-42dfdbdd6596",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create a channel",
              "fullTitle": "Per-Sale Project Onboarding should able to create a channel",
              "timedOut": false,
              "duration": 12413,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTesting')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTesting');\nawait projectOnBoarding.clickCreateChannelBtn();\nconst alert = await projects.checkAlert()\nutilFun.assertEql(alert, 'Channel is created successfully!');\nawait projectOnBoarding.clickCreateChannelBtn();\nconst alert1 = await projects.checkAlert()\nutilFun.assertEql(alert1, 'Channel is not created!');\nawait projectOnBoarding.clickCreateChannelBtn();\nconst alert3 = await projects.checkAlert()\nutilFun.assertEql(alert3, 'Channel is created successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10026ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10026ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "bbb62eda-3236-432d-904d-ef96d85fa3e1",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shold check if project is showing in mark as channel created",
              "fullTitle": "Per-Sale Project Onboarding shold check if project is showing in mark as channel created",
              "timedOut": false,
              "duration": 10404,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickMarkAsChannelCreatedCheckbox()\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTesting')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTesting');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"card-body\"] >div:nth-child(2) input)\nWait timed out after 10021ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"card-body\"] >div:nth-child(2) input)\nWait timed out after 10021ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "758808dd-a484-47db-885f-f1d03e5f1232",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should should able to onboard project",
              "fullTitle": "Per-Sale Project Onboarding should should able to onboard project",
              "timedOut": false,
              "duration": 12591,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// let query = [\n//     `UPDATE project_onboardings SET \"isArchived\" = false WHERE \"name\" = 'PreSaleTesting';`\n// ]\n// await utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTesting')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTesting');\nawait projectOnBoarding.clickOnboardProjectBtn()\nawait projectOnBoarding.clickOnboardBtn()\nconst alert = await projects.checkAlert()\nutilFun.assertEql(alert, 'Project is onboarded successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10210ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Filters\"])\nWait timed out after 10210ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "5be38624-5677-4a97-9b5a-13794d20d2c2",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check is pre-sale project is showing in all Projects",
              "fullTitle": "Per-Sale Project Onboarding should check is pre-sale project is showing in all Projects",
              "timedOut": false,
              "duration": 12410,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'PreSaleTesting');\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTesting');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10030ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 10030ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "95b4eb04-07c5-42a7-b4f9-bf79595ccad5",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide submitted at column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide submitted at column",
              "timedOut": false,
              "duration": 10534,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Submitted At')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 36, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Submitted At'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10156ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10156ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "9a068823-deea-4781-b7ca-bf4c7420e8c9",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide type column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide type column",
              "timedOut": false,
              "duration": 10421,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Type')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 35, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Type'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10055ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10055ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "10efa09f-04fb-411f-8ef1-82f2f5a7cd5d",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Lead Reference column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Lead Reference column",
              "timedOut": false,
              "duration": 10462,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Lead Reference')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 34, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Lead Reference'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10079ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10079ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "27e7adbd-cda3-44fa-8985-c0fe2b874eb9",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Reason for Pre-sale column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Reason for Pre-sale column",
              "timedOut": false,
              "duration": 10479,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Reason For Presale')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 33, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Reason For Presale'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10073ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10073ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "6d6198e9-e73c-4bc4-b923-64078b63eb6d",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Division column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Division column",
              "timedOut": false,
              "duration": 10523,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Division')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 32, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Division'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10155ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10155ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "92246656-47ad-4c39-8012-a33886085855",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Source column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Source column",
              "timedOut": false,
              "duration": 10482,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Source')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 31, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Source'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10118ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10118ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "bc40ae08-7cbb-4c86-92ea-adaec476ba9a",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Profile Name column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Profile Name column",
              "timedOut": false,
              "duration": 10466,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Profile Name')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 30, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Profile Name'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10080ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10080ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "05414f60-f63a-454e-a991-b534f01184a4",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Lead Upwork Reference Link column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Lead Upwork Reference Link column",
              "timedOut": false,
              "duration": 10505,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Lead Upwork Reference Link')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 29, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Lead Upwork Reference Link'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10117ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10117ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "181e2c49-34cb-4506-b970-056261b54c9a",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Offer Received on Upwork? column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Offer Received on Upwork? column",
              "timedOut": false,
              "duration": 10502,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Offer Received on Upwork?')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 28, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Offer Received on Upwork?'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10128ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10128ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3abd5753-4c42-416a-ab89-58a63c5db8fb",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Offer Accepted on Upwork? column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Offer Accepted on Upwork? column",
              "timedOut": false,
              "duration": 10517,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Offer Accepted on Upwork?')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 27, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Offer Accepted on Upwork?'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10152ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10152ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "000ce0fe-fb1e-49d4-b0fc-adf15b614f26",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Tech Stack column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Tech Stack column",
              "timedOut": false,
              "duration": 10586,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Tech Stack')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 26, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Tech Stack'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10177ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10177ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "8cd8b6f0-01a8-4095-b182-566fee0e1c3f",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Client Side Contact Person Name(s) column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Client Side Contact Person Name(s) column",
              "timedOut": false,
              "duration": 10546,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Client Side Contact Person Name(s)')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 25, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Client Side Contact Person Name(s)'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10175ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10175ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "1f203c95-653d-4eeb-b1ad-bd22965cc23d",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Client Side Point of Contact Email(s) column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Client Side Point of Contact Email(s) column",
              "timedOut": false,
              "duration": 10603,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Client Side Point of Contact Email(s)')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 24, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Client Side Point of Contact Email(s)'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10209ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10209ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "38de57fc-f7e6-432e-91f4-60e338e84928",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Tentative Duration column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Tentative Duration column",
              "timedOut": false,
              "duration": 10522,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Tentative Duration')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 23, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Tentative Duration'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10135ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10135ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "89b5629b-9a0d-4075-a23d-0158f1c33266",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Start Date column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Start Date column",
              "timedOut": false,
              "duration": 10456,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Start Date')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 22, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Start Date'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10087ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10087ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d7c74dc1-0ab9-4e5e-8870-68662cd8bdeb",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide BD Member column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide BD Member column",
              "timedOut": false,
              "duration": 10511,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('BD Member')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 21, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('BD Member'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10093ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10093ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "73d2782f-664d-4d75-920d-598183af0a71",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Service Mode column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Service Mode column",
              "timedOut": false,
              "duration": 10440,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Service Mode')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 20, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Service Mode'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10076ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10076ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3d018a8d-ff63-49d0-acbb-220e5d211e07",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Trial Period column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Trial Period column",
              "timedOut": false,
              "duration": 10474,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Trial Period')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 19, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Trial Period'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10093ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10093ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "12e43be7-e04e-41b8-b619-65a83919adc7",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Resource Name (Shared with Client) column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Resource Name (Shared with Client) column",
              "timedOut": false,
              "duration": 10464,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Resource Name (Shared with Client)')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 18, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Resource Name (Shared with Client)'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10110ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10110ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "c3ae7cc3-ede8-4b75-8315-2b0422cb6459",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Actual Resource(s) column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Actual Resource(s) column",
              "timedOut": false,
              "duration": 10515,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Actual Resource(s)')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 17, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Actual Resource(s)'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10120ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10120ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "06770329-e64d-47e8-b265-e57c69a84468",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Communication Mode column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Communication Mode column",
              "timedOut": false,
              "duration": 10553,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Communication Mode')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 16, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Communication Mode'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10168ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10168ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "48740374-136d-47e3-93c8-92c50533ec86",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Company Name column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Company Name column",
              "timedOut": false,
              "duration": 10525,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Company Name')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 15, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Company Name'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10151ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10151ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "4a6726e2-c038-4b70-a83e-d903d5fb2f45",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Company Address column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Company Address column",
              "timedOut": false,
              "duration": 10568,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Company Address')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 14, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Company Address'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10205ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10205ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "fb69615e-cd04-4c7b-bc66-cb634342f431",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Client Side Billing Representative Name column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Client Side Billing Representative Name column",
              "timedOut": false,
              "duration": 10561,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Client Side Billing Representative Name')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 13, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Client Side Billing Representative Name'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10179ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10179ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "167abfef-a52e-4a3e-a940-8efbea39fdef",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Client Side Billing Representative Email column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Client Side Billing Representative Email column",
              "timedOut": false,
              "duration": 10509,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Client Side Billing Representative Email')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 12, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Client Side Billing Representative Email'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10158ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10158ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "f8d66f5f-748d-4a23-8733-c1a62bca9027",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Billing Cycle column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Billing Cycle column",
              "timedOut": false,
              "duration": 10546,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Billing Cycle')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 11, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Billing Cycle'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10170ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10170ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "7239ddfa-9a68-4cae-b18d-668ecb68489a",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Billing Start Date column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Billing Start Date column",
              "timedOut": false,
              "duration": 10485,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Billing Start Date')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 10, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Billing Start Date'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10093ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10093ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "a92ec855-977f-4e55-abd4-cfb3e98ebff7",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Billing Rates/ Total Project Cost column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Billing Rates/ Total Project Cost column",
              "timedOut": false,
              "duration": 10550,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Billing Rates/ Total Project Cost')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 9, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Billing Rates/ Total Project Cost'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10178ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10178ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "9863a19d-e04f-4102-8ee1-6e78a5568a8b",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Currency column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Currency column",
              "timedOut": false,
              "duration": 10539,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Currency')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 8, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Currency'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10165ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10165ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "de825b97-1adb-4b9c-99ed-7e682f12f8a3",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Reference BO Placement Link column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Reference BO Placement Link column",
              "timedOut": false,
              "duration": 10487,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Reference BO Placement Link')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 7, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Reference BO Placement Link'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10114ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10114ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "1c0bb62a-5fd7-471b-aa06-51d9237213e6",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Introduced As column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Introduced As column",
              "timedOut": false,
              "duration": 10469,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Introduced As')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 6, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Introduced As'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10106ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10106ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "55751029-b018-46b8-8d3e-974dd506298f",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Offer Expiry Date column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Offer Expiry Date column",
              "timedOut": false,
              "duration": 10543,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Offer Expiry Date')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 5, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Offer Expiry Date'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10137ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10137ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "4be53c89-348a-4cb7-b75e-f29146a31a0b",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Business Analyst column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Business Analyst column",
              "timedOut": false,
              "duration": 10416,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Business Analyst')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 4, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Business Analyst'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10056ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10056ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d1b7a998-6d17-41d5-af9b-e70d03009f32",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Project Manager column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Project Manager column",
              "timedOut": false,
              "duration": 10557,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Project Manager')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 3, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Project Manager'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10176ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10176ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "2777d492-a843-4888-9d7e-18f6d2602614",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Future Upsells column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Future Upsells column",
              "timedOut": false,
              "duration": 10533,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Future Upsells')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 2, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Future Upsells'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10126ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-container\"])\nWait timed out after 10126ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "04b14246-145c-452d-9ab1-ccb4590a6859",
              "parentUUID": "901c515c-f8c9-41cb-bfd4-4d245dca1092",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "55d6e8cb-8fba-42ae-9cfe-434804a77222",
            "70dbcaf8-3941-4a23-b977-d44fae4876ec",
            "e8d19fc3-edf6-4e7e-baf8-7ab98d86e3be",
            "ac1e4580-a84e-4aa3-a18d-591467187574",
            "6c2993d8-b222-4a3a-aafe-0dc8a6616e14",
            "d5e5cdf1-d535-45be-a57a-75db17d9b50e",
            "238d0cd5-6f11-435d-8742-eb288949788f",
            "222430bc-1ef4-491f-9a03-f5569460f905",
            "41c666e4-ccda-41ee-8ab2-42dfdbdd6596",
            "bbb62eda-3236-432d-904d-ef96d85fa3e1",
            "758808dd-a484-47db-885f-f1d03e5f1232",
            "5be38624-5677-4a97-9b5a-13794d20d2c2",
            "95b4eb04-07c5-42a7-b4f9-bf79595ccad5",
            "9a068823-deea-4781-b7ca-bf4c7420e8c9",
            "10efa09f-04fb-411f-8ef1-82f2f5a7cd5d",
            "27e7adbd-cda3-44fa-8985-c0fe2b874eb9",
            "6d6198e9-e73c-4bc4-b923-64078b63eb6d",
            "92246656-47ad-4c39-8012-a33886085855",
            "bc40ae08-7cbb-4c86-92ea-adaec476ba9a",
            "05414f60-f63a-454e-a991-b534f01184a4",
            "181e2c49-34cb-4506-b970-056261b54c9a",
            "3abd5753-4c42-416a-ab89-58a63c5db8fb",
            "000ce0fe-fb1e-49d4-b0fc-adf15b614f26",
            "8cd8b6f0-01a8-4095-b182-566fee0e1c3f",
            "1f203c95-653d-4eeb-b1ad-bd22965cc23d",
            "38de57fc-f7e6-432e-91f4-60e338e84928",
            "89b5629b-9a0d-4075-a23d-0158f1c33266",
            "d7c74dc1-0ab9-4e5e-8870-68662cd8bdeb",
            "73d2782f-664d-4d75-920d-598183af0a71",
            "3d018a8d-ff63-49d0-acbb-220e5d211e07",
            "12e43be7-e04e-41b8-b619-65a83919adc7",
            "c3ae7cc3-ede8-4b75-8315-2b0422cb6459",
            "06770329-e64d-47e8-b265-e57c69a84468",
            "48740374-136d-47e3-93c8-92c50533ec86",
            "4a6726e2-c038-4b70-a83e-d903d5fb2f45",
            "fb69615e-cd04-4c7b-bc66-cb634342f431",
            "167abfef-a52e-4a3e-a940-8efbea39fdef",
            "f8d66f5f-748d-4a23-8733-c1a62bca9027",
            "7239ddfa-9a68-4cae-b18d-668ecb68489a",
            "a92ec855-977f-4e55-abd4-cfb3e98ebff7",
            "9863a19d-e04f-4102-8ee1-6e78a5568a8b",
            "de825b97-1adb-4b9c-99ed-7e682f12f8a3",
            "1c0bb62a-5fd7-471b-aa06-51d9237213e6",
            "55751029-b018-46b8-8d3e-974dd506298f",
            "4be53c89-348a-4cb7-b75e-f29146a31a0b",
            "d1b7a998-6d17-41d5-af9b-e70d03009f32",
            "2777d492-a843-4888-9d7e-18f6d2602614",
            "04b14246-145c-452d-9ab1-ccb4590a6859"
          ],
          "pending": [],
          "skipped": [],
          "duration": 521833,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
          "title": "All Resources",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/resources/spec-1-all-resources.js",
          "file": "/test/e2e/resources/spec-1-all-resources.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"should check if all-resources tab is click-able\"",
              "fullTitle": "All Resources \"before all\" hook for \"should check if all-resources tab is click-able\"",
              "timedOut": false,
              "duration": 11532,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE departments SET \"hodId\" = 9474 WHERE id = 9;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\n// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, li)\nWait timed out after 10006ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, li)\nWait timed out after 10006ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "26aed306-0b35-4c15-8d54-9f02b64629b5",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "All Resources \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resources');\nawait utilFun.wait(3000);\nawait utilFun.waitForPageLoad();",
              "err": {},
              "uuid": "22de8aa2-6cac-427b-b51d-59127ee7ca12",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if all-resources tab is click-able",
              "fullTitle": "All Resources should check if all-resources tab is click-able",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/home');\nawait utilFun.waitForPageLoad();\nawait resources.clickResourcesTab();\nawait resources.clickResourcesSubTab('All Resources');\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resources');",
              "err": {},
              "uuid": "915acf2d-b7a7-4061-bb78-252cbdfa622c",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to search resources by name.",
              "fullTitle": "All Resources should able to search resources by name.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('James Salinas');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "b26545df-92c1-4f3d-906f-d1e3a3ca9af1",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to search resources by their allocated Project.",
              "fullTitle": "All Resources should able to search resources by their allocated Project.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Project');\nawait resources.selectFilterValue('automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "90b2a96c-c8ef-420f-ae91-a099d9d02f74",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to search resources by their Job status.",
              "fullTitle": "All Resources should able to search resources by their Job status.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Job Status');\nawait resources.selectFilterValue('Permanent');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "ac5bf9a8-8c6a-4e80-a5af-45ab96115137",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Verify that multi select is impelmented on Job status filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Job status filter.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Project');\nawait resources.selectFilterValue('automation');\nawait resources.selectFilter('Search by Job Status');\nawait resources.selectFilterValue('Permanent');\nawait resources.selectFilter('Permanent');\nawait resources.selectFilterValue('Internship');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "64fb72cc-d57b-4c95-af2b-eb910ff81cef",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to search resources by their Availability.",
              "fullTitle": "All Resources should able to search resources by their Availability.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Project');\nawait resources.selectFilterValue('automation');\nawait resources.selectFilter('Search by Availability');\nawait resources.selectFilterValue('Fully Available');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "4f18697a-2bf1-4eb3-a60c-872487dddc65",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to search resources by this month.",
              "fullTitle": "All Resources should able to search resources by this month.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by this Month');\nawait resources.selectFilterValue('Increments');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {},
              "uuid": "839a91b6-10f6-4fc8-bea6-680eb16ba9fe",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Verify that multi select is impelmented on this month filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on this month filter.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by this Month');\nawait resources.selectFilterValue('Probations');\nawait resources.selectFilter('Probations');\nawait resources.selectFilterValue('Increments');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {},
              "uuid": "36eb2548-a828-4c7b-ac8e-021266b5c958",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to search resources by Location.",
              "fullTitle": "All Resources should able to search resources by Location.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Location');\nawait resources.selectFilterValue('Remote');\nawait utilFun.waitForPageLoad();\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "0d0b560a-02a5-495e-926f-7084ca779b7e",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Verify that multi select is impelmented on Location filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Location filter.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Location');\nawait resources.selectFilterValue('Remote');\nawait resources.selectFilter('Remote');\nawait resources.selectFilterValue('Karachi');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "e232d1e3-f6ac-4b56-b39b-1b1ec486d93d",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to search resources by Skill.",
              "fullTitle": "All Resources should able to search resources by Skill.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Skills\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "2192212b-f589-450e-915d-e8629264bafa",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Verify that multi select is impelmented on Skills filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Skills filter.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Skills\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation');\nawait resources.selectFilter('Automation\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation1');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "7a739f2d-f4ad-4fcd-87ec-6945d700148b",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Show resources with all selected skills.",
              "fullTitle": "All Resources should able to Show resources with all selected skills.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Skills\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation');\nawait resources.selectFilter('Automation\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation1');\nawait resources.clickAllSelectedSkillsCheckbox();\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "6c33c38c-34ea-4ef5-8e5d-fbf650567b7c",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to search resources by Department.",
              "fullTitle": "All Resources should able to search resources by Department.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {},
              "uuid": "3717a4cb-eec4-4086-b057-2ad05399c1f5",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Verify that multi select is impelmented on Department filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Department filter.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nawait resources.selectFilter('Engineering');\nawait resources.selectFilterValue('Automation1');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {},
              "uuid": "9f886353-6165-4eb9-ac2b-39a93b22a013",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to search resources by Sub-Department.",
              "fullTitle": "All Resources should able to search resources by Sub-Department.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nawait resources.clickSubDepartment();\nawait resources.selectFilterValue('SQA Ib Support');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "060ecc0e-4e17-4897-9327-9515f2c09d4b",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Verify that multi select is impelmented on Sub-Department filter..",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Sub-Department filter..",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nawait resources.clickSubDepartment();\nawait resources.selectFilterValue('SQA Ib Support');\nawait resources.clickSubDepartment();\nawait resources.selectFilterValue('DevOps Support');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "361bef2b-ba69-47a6-89c5-664b57a5aa65",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to search resources by Designation.",
              "fullTitle": "All Resources should able to search resources by Designation.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation');\nawait resources.selectDesignation('Software Engineer');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "5422c6dc-89c1-4a75-804a-093e458e8a5e",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Verify that multi select is impelmented on Designation filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Designation filter.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation');\nawait resources.selectDesignation('Software Engineer');\nawait resources.selectFilter('Software Engineer');\nawait resources.selectDesignation('HR');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "302762c0-4955-48e0-8f09-3f7242928179",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to search resources by Designation Category.",
              "fullTitle": "All Resources should able to search resources by Designation Category.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation Category');\nawait resources.selectDesignationCategory('Automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "9cb16bc1-ac6e-41a8-9874-5439d95d4d61",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Verify that when user click on clear button then all his search should be clear.",
              "fullTitle": "All Resources should able to Verify that when user click on clear button then all his search should be clear.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation Category');\nawait resources.selectDesignationCategory('Automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.length == 4, `Expected length not found.`);\nawait resources.clickClearButton();\nconst names1 = await resources.getResourceNameTag();\nassert.ok(names1.length > 4, `Expected length not found.`);",
              "err": {},
              "uuid": "6a5a0b20-3788-4ead-9684-5a99194c2432",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Add new resource",
              "fullTitle": "All Resources should able to Add new resource",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_skills\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `UPDATE employee_assets SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_resumes\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_timeLines\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"project_portfolio_employees\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM employees WHERE id = ${resourceId.rows[0].id};`,\n  ];\n  await utilFun.udpateDatabase(query);\n}\nawait addResources.clickAddResourceBtn();\n//   Form 1\nawait addResources.clickInputField('Employee Name *', 'Steve');\nawait addResources.clickInputField('Work Phone Number', '123456');\nawait addResources.clickInputField('Work Email *', 'steve@email.com');\nawait addResources.clickInputField('Work Shift\\nSelect Work Shift', 'morning');\nawait addResources.clickOption();\nawait addResources.clickInputField('Work Location\\nSelect Work Location', 'remote');\nawait addResources.clickOption();\nawait addResources.clickInputField('Primary Manager\\nPrimary Manager', 'bilal rafaqat');\nawait addResources.clickOption();\nawait addResources.clickInputField('Attendance Mode\\nSelect Attendance Mode', 'invodesk');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation *\\nSelect Designation', 'automation');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation Category*\\nSelect Designation Category', 'automation');\nawait addResources.clickOption();\nawait addResources.clickNextButton();\n//   Form 2\nawait addResources.clickInputField2('Father Name', 'James');\nawait addResources.clickInputField2('Personal Email', 'personal@email.com');\nawait addResources.clickInputField2('Personal Phone', '12345');\nawait addResources.clickInputField2('Address', 'xyz');\nawait addResources.clickInputField2('National ID Number', '1122');\nawait addResources.setDOB('01-01-2000');\nawait addResources.clickInputField2('Gender\\nSelect Gender', 'other');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Marital Status\\nSelect Marital Status', 'single');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Emergency Contact Name', 'James');\nawait addResources.clickInputField2('Emergency Contact Number', '54321');\nawait addResources.clickInputField2('Emergency Contact Relation', 'Father');\nawait addResources.clickNextButton2();\n//   Form 3\nawait addResources.clickInputField3('Bank Name', 'MyBank');\nawait addResources.clickInputField3('Account Title', 'current');\nawait addResources.clickInputField3('IBAN Number', '3344');\nawait addResources.clickInputField3('Bank Address', 'qwerty');\nawait addResources.clickNextButton3();\n//   Form 4\nawait addResources.clickInputField4('Certification Level\\nSelect Certification Level', 'graduation');\nawait addResources.clickOption4();\nawait addResources.clickInputField4('Field of Study', 'SE');\nawait addResources.clickInputField4('School/University', 'MIT');\nawait addResources.clickInputField4('Score/Percentage', '70');\nawait addResources.clickInputField4('Passing Year\\nSelect Degree Passing Year', '2020');\nawait addResources.clickOption4();\nawait addResources.clickNextButton4();\n//   Form 5\nawait addResources.clickInputFieldForm5('Department\\nDepartment', 'Engineering');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Sub Department\\nSub Department', 'DevOps Support');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Contract Type*\\nSelect Contract Type', 'Full Time');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Date of Joining*', '01-11-2023');\nawait addResources.selectJobStatus('Probation');\nawait addResources.selectEndOfProbation('2 Months');\nawait addResources.clickInputFieldForm5('Total Working Hours*\\nSelect Total Working Hours', '4 Hrs');\nawait addResources.clickOptionForm5();\nawait addResources.clickNextButton5();\n//   Form 6\nawait addResources.clickInputFieldForm6('Current Salary (PKR)', '50000');\nawait addResources.clickInputFieldForm6('Last Salary (PKR)', '30000');\nawait addResources.clickInputFieldForm6('Last Increment Date', '01-01-2023');\nawait addResources.clickSubmitButton();\nconst alertText = await addResources.checkAlert();\nassert.equal(alertText, 'Resource Created Successfully!');",
              "err": {},
              "uuid": "14779a75-7ad1-4ee8-90c3-78cb63330b52",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to check if Resource is added.",
              "fullTitle": "All Resources should able to check if Resource is added.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);",
              "err": {},
              "uuid": "701fc70b-ce16-4383-8915-80a21b0a9b17",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "All Resources should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "6e43d71f-c0e9-4ec4-be42-41911b05670d",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "All Resources should able to  copy email from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Copy Email');\nconst alertText = await utilFun.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "259d8bef-f354-43b0-ae99-32f6ec01552c",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "All Resources should able to Send Email from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=steve@email.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "705217e2-4787-456d-9bb4-0371732e9eec",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "All Resources should able to see Email from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('See Email');\nconst email = await resources.copyEmail();\nassert.equal(email, 'Email: steve@email.com');",
              "err": {},
              "uuid": "3ab97a96-ec6e-4dd1-8b51-62fe0cf89a57",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "All Resources should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Phone Number');\nconst phnNo = await resources.copyEmail();\nassert.equal(phnNo, 'Phone: 12345');\nawait resources.copyPhoneNumber();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "af2f73af-abd9-4de6-b3e6-f7a32c3ab742",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to update Resource from options",
              "fullTitle": "All Resources should able to update Resource from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Update Resource');\nawait addResources.clickInputField('Work Phone Number', '8');\nawait addResources.clickNextButton();\nawait addResources.clickNextButton2();\nawait addResources.clickNextButton3();\nawait addResources.clickNextButton4();\nawait addResources.clickNextButton5();\nawait addResources.clickSubmitButton();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource Job Status is updated Successfully!');",
              "err": {},
              "uuid": "fc56419a-e428-4304-bd21-d9193a656f70",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to initiate a Performance Review from options",
              "fullTitle": "All Resources should able to initiate a Performance Review from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [`DELETE FROM employee_evaluations WHERE \"employeeId\" = ${resourceId.rows[0].id};`];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Initiate a Performance Review');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Review is initiated successfully.');",
              "err": {},
              "uuid": "66f73461-61ec-4237-8b21-f19d38c46958",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to check if Performance review is initiated or not",
              "fullTitle": "All Resources should able to check if Performance review is initiated or not",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/evaluation-performance');\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);",
              "err": {},
              "uuid": "3ea1113f-f3a6-4a48-b133-db71893d5b70",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Initiate a Revised Designation from options",
              "fullTitle": "All Resources should able to Initiate a Revised Designation from options",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [`DELETE FROM employee_evaluations WHERE \"employeeId\" = ${resourceId.rows[0].id};`];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Initiate a Revised Designation');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Review is initiated successfully.');",
              "err": {},
              "uuid": "ecf09235-afde-46e8-9e57-a3343a2a5755",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to check if Performance review is initiated or not",
              "fullTitle": "All Resources should able to check if Performance review is initiated or not",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);",
              "err": {},
              "uuid": "6978a0f3-9c38-4f34-ae99-ff66ebf980d0",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to to add project from resource details",
              "fullTitle": "All Resources should able to to add project from resource details",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickAddproject();\nawait resources.selectAddProjectInputField('Projects', 'automation');\nawait resources.selectAddProjectInputField('Role in this project', 'Main Developer');\nawait resources.selectAddProjectInputField('Not Set', 'Fully Available');\nawait resources.selectAddProjectInputField('Engagement Mode', 'Billed');\nawait resources.selectAddProjectInputField('Add', '');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource added in project successfully.');",
              "err": {},
              "uuid": "6c4134a8-c432-417c-beb4-0758b91ebc09",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to to delete project from resource details",
              "fullTitle": "All Resources should able to to delete project from resource details",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickDeleteProject();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource removed from project successfully.');",
              "err": {},
              "uuid": "c8b91481-5f8a-4570-9f17-0c2dc437b694",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Create Employee Resume",
              "fullTitle": "All Resources should able to Create Employee Resume",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [`DELETE FROM \"employee_resumes\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceResume.clickCreateResumeBtn();\nawait resourceResume.enterLable('Steve Resume');\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterSummary('testing');\nawait resourceResume.clickNextBtn();\nawait resourceResume.clickSkillDropdown();\nawait resourceResume.selectSkill('Automation');\nawait resourceResume.giveSkillRating(4);\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterTitle('Project1');\nawait resourceResume.enterDescription('Testing');\nawait resourceResume.enterResponsibilities('Testing');\nawait resourceResume.selectTechnologies('Automation1');\nawait resourceResume.selectTools('okokok');\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterDegree('BS Software Engineering');\nawait resourceResume.enterInstitution('UOL');\nawait resourceResume.clickCalendar();\nawait resourceResume.selectMonth('Sep');\nawait resourceResume.selectYear('2017');\nawait resourceResume.clickCalendar();\nawait resourceResume.selectMonth('Jan');\nawait resourceResume.selectYear('2022');\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterTitle('Js Developer');\nawait resourceResume.enterOrganization('Invozone');\nawait resourceResume.clickIssueDateCalendar();\nawait resourceResume.selectDate('22');\nawait resourceResume.selectMonth('Jan');\nawait resourceResume.selectYear('2022');\nawait resourceResume.clickNextBtn();\nawait resourceResume.clickNextBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resume is created successfully.');",
              "err": {},
              "uuid": "444f76c5-90e9-42c8-8deb-9511d1436c66",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Department Colum",
              "fullTitle": "All Resources should able to Hide Department Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Department');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 12, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Department');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "cb81318b-559e-42c6-9350-56078805be8e",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Sub-Department Colum",
              "fullTitle": "All Resources should able to Hide Sub-Department Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Sub-Department');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 11, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Sub-Department');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "bd733a7e-6a07-4b49-8f44-6f30e5158d90",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Skills Colum",
              "fullTitle": "All Resources should able to Hide Skills Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Skills');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 10, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Skills');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "185ec132-db40-4b65-9073-064f1a6b1bc3",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Exp Years Colum",
              "fullTitle": "All Resources should able to Hide Exp Years Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Exp Years');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 9, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Exp Years');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "026bb9c9-8d6d-461b-93d7-3236d5484fc0",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Location Colum",
              "fullTitle": "All Resources should able to Hide Location Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Location');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 8, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Location');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "6fcdde80-b355-43e7-901e-48130c9ce5b2",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Projects Colum",
              "fullTitle": "All Resources should able to Hide Projects Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Projects');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 7, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Projects');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "e0b65de3-cdb7-4f7d-bcda-9ebd54ef72b6",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Availablility Colum",
              "fullTitle": "All Resources should able to Hide Availablility Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Availability');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 6, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Availablility');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "5609c6b6-b2c3-4ca3-93de-28761ef4fca7",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Resume Colum",
              "fullTitle": "All Resources should able to Hide Resume Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Resume');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 5, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Resume');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "99c6a779-c437-4b0c-9802-75615620084e",
              "parentUUID": "f4d6ee19-f417-407e-b2a5-f0d4301ff12f",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "6e43d71f-c0e9-4ec4-be42-41911b05670d"
          ],
          "skipped": [
            "915acf2d-b7a7-4061-bb78-252cbdfa622c",
            "b26545df-92c1-4f3d-906f-d1e3a3ca9af1",
            "90b2a96c-c8ef-420f-ae91-a099d9d02f74",
            "ac5bf9a8-8c6a-4e80-a5af-45ab96115137",
            "64fb72cc-d57b-4c95-af2b-eb910ff81cef",
            "4f18697a-2bf1-4eb3-a60c-872487dddc65",
            "839a91b6-10f6-4fc8-bea6-680eb16ba9fe",
            "36eb2548-a828-4c7b-ac8e-021266b5c958",
            "0d0b560a-02a5-495e-926f-7084ca779b7e",
            "e232d1e3-f6ac-4b56-b39b-1b1ec486d93d",
            "2192212b-f589-450e-915d-e8629264bafa",
            "7a739f2d-f4ad-4fcd-87ec-6945d700148b",
            "6c33c38c-34ea-4ef5-8e5d-fbf650567b7c",
            "3717a4cb-eec4-4086-b057-2ad05399c1f5",
            "9f886353-6165-4eb9-ac2b-39a93b22a013",
            "060ecc0e-4e17-4897-9327-9515f2c09d4b",
            "361bef2b-ba69-47a6-89c5-664b57a5aa65",
            "5422c6dc-89c1-4a75-804a-093e458e8a5e",
            "302762c0-4955-48e0-8f09-3f7242928179",
            "9cb16bc1-ac6e-41a8-9874-5439d95d4d61",
            "6a5a0b20-3788-4ead-9684-5a99194c2432",
            "14779a75-7ad1-4ee8-90c3-78cb63330b52",
            "701fc70b-ce16-4383-8915-80a21b0a9b17",
            "259d8bef-f354-43b0-ae99-32f6ec01552c",
            "705217e2-4787-456d-9bb4-0371732e9eec",
            "3ab97a96-ec6e-4dd1-8b51-62fe0cf89a57",
            "af2f73af-abd9-4de6-b3e6-f7a32c3ab742",
            "fc56419a-e428-4304-bd21-d9193a656f70",
            "66f73461-61ec-4237-8b21-f19d38c46958",
            "3ea1113f-f3a6-4a48-b133-db71893d5b70",
            "ecf09235-afde-46e8-9e57-a3343a2a5755",
            "6978a0f3-9c38-4f34-ae99-ff66ebf980d0",
            "6c4134a8-c432-417c-beb4-0758b91ebc09",
            "c8b91481-5f8a-4570-9f17-0c2dc437b694",
            "444f76c5-90e9-42c8-8deb-9511d1436c66",
            "cb81318b-559e-42c6-9350-56078805be8e",
            "bd733a7e-6a07-4b49-8f44-6f30e5158d90",
            "185ec132-db40-4b65-9073-064f1a6b1bc3",
            "026bb9c9-8d6d-461b-93d7-3236d5484fc0",
            "6fcdde80-b355-43e7-901e-48130c9ce5b2",
            "e0b65de3-cdb7-4f7d-bcda-9ebd54ef72b6",
            "5609c6b6-b2c3-4ca3-93de-28761ef4fca7",
            "99c6a779-c437-4b0c-9802-75615620084e"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "cd05a97c-9e65-482a-8a6e-93a46805d2d8",
          "title": "Resource Offboarding",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/resources/spec-2-resource-offboarding.js",
          "file": "/test/e2e/resources/spec-2-resource-offboarding.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"should able to OffBoard Resource by Resignation without Pending Discussion\"",
              "fullTitle": "Resource Offboarding \"before all\" hook for \"should able to OffBoard Resource by Resignation without Pending Discussion\"",
              "timedOut": false,
              "duration": 11683,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, li)\nWait timed out after 10038ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, li)\nWait timed out after 10038ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "41fd572b-ad21-43d1-888d-cd1819fe7076",
              "parentUUID": "cd05a97c-9e65-482a-8a6e-93a46805d2d8",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Resource Offboarding \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad()",
              "err": {},
              "uuid": "61292268-efd1-4eb2-ba63-3e38b6922da6",
              "parentUUID": "cd05a97c-9e65-482a-8a6e-93a46805d2d8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to OffBoard Resource by Resignation without Pending Discussion",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by Resignation without Pending Discussion",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('Resignation')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.clickPendingCheckbox()\nawait resourceOffBoarding.setConntractEndDate('14122024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource job status is updated and email has been sent to PM & HOD!!');",
              "err": {},
              "uuid": "31ec96aa-c3eb-4302-b667-c4e972dc6abb",
              "parentUUID": "cd05a97c-9e65-482a-8a6e-93a46805d2d8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);",
              "err": {},
              "uuid": "7d18fa44-7c25-4de3-bf41-708d3bbf9d9b",
              "parentUUID": "cd05a97c-9e65-482a-8a6e-93a46805d2d8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to OffBoard Resource by Resignation Pending Discussion",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by Resignation Pending Discussion",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('Resignation')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource job status is updated and email has been sent to PM & HOD!!');",
              "err": {},
              "uuid": "3763fc6a-8655-4261-931d-28a6a7e42662",
              "parentUUID": "cd05a97c-9e65-482a-8a6e-93a46805d2d8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);",
              "err": {},
              "uuid": "a7630408-69dc-4ec1-8263-0f7ae97189fe",
              "parentUUID": "cd05a97c-9e65-482a-8a6e-93a46805d2d8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Should able to approve Pending resource offBoarding",
              "fullTitle": "Resource Offboarding Should able to approve Pending resource offBoarding",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);\nawait resourceOffBoarding.selectOffBoardingResponse('Approved')\nawait resourceOffBoarding.setLastDate('14122024')\nawait resourceOffBoarding.clickUpdateBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resignation request has been approved succesfully!');\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {},
              "uuid": "911b43cb-a333-4a94-91cf-43dbadfd3664",
              "parentUUID": "cd05a97c-9e65-482a-8a6e-93a46805d2d8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Should able to Reject Pending resource offBoarding",
              "fullTitle": "Resource Offboarding Should able to Reject Pending resource offBoarding",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `UPDATE boarding_requests SET \"status\" = 'PENDING' WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE boarding_requests SET \"noticeEndDate\" = NULL WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE boarding_requests SET \"deletedAt\" = NULL WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);\nawait resourceOffBoarding.selectOffBoardingResponse('Rejected')\nawait resourceOffBoarding.enterReason('testing')\nawait resourceOffBoarding.clickUpdateBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resignation request has been rejected succesfully!');\nawait resourceOffBoarding.confirmRejectStatus()",
              "err": {},
              "uuid": "dd862b46-3060-411f-aba6-14e8ebf7639c",
              "parentUUID": "cd05a97c-9e65-482a-8a6e-93a46805d2d8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to OffBoard Resource by Termination",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by Termination",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('Termination')\nawait resourceOffBoarding.enterReason('testing')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.setConntractEndDate('14122024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Termination request has been approved succesfully!');",
              "err": {},
              "uuid": "0e12a979-a18b-4294-995e-685f5faab86c",
              "parentUUID": "cd05a97c-9e65-482a-8a6e-93a46805d2d8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Termination'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {},
              "uuid": "e9f9320f-5b9e-4482-ad02-997ac1ae29e4",
              "parentUUID": "cd05a97c-9e65-482a-8a6e-93a46805d2d8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Should verify if resource upcoming offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource upcoming offBoarding is showning or not",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Termination'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {},
              "uuid": "cd71b071-3ee6-41bd-a033-6b53488cec45",
              "parentUUID": "cd05a97c-9e65-482a-8a6e-93a46805d2d8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to OffBoard Resource by End of Service",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by End of Service",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('End of Service')\nawait resourceOffBoarding.enterReason('testing')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.setConntractEndDate('14122024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'End of Service request has been approved succesfully!');",
              "err": {},
              "uuid": "9cce1eb3-a0a5-4829-8b23-9fc44701f143",
              "parentUUID": "cd05a97c-9e65-482a-8a6e-93a46805d2d8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('End of Service'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {},
              "uuid": "28ad96db-1ab3-43b5-a807-876e47980944",
              "parentUUID": "cd05a97c-9e65-482a-8a6e-93a46805d2d8",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Should verify if resource upcoming offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource upcoming offBoarding is showning or not",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('End of Service'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {},
              "uuid": "03fae18e-123b-4b42-9c5c-0d771d7af9b9",
              "parentUUID": "cd05a97c-9e65-482a-8a6e-93a46805d2d8",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "31ec96aa-c3eb-4302-b667-c4e972dc6abb",
            "7d18fa44-7c25-4de3-bf41-708d3bbf9d9b",
            "3763fc6a-8655-4261-931d-28a6a7e42662",
            "a7630408-69dc-4ec1-8263-0f7ae97189fe",
            "911b43cb-a333-4a94-91cf-43dbadfd3664",
            "dd862b46-3060-411f-aba6-14e8ebf7639c",
            "0e12a979-a18b-4294-995e-685f5faab86c",
            "e9f9320f-5b9e-4482-ad02-997ac1ae29e4",
            "cd71b071-3ee6-41bd-a033-6b53488cec45",
            "9cce1eb3-a0a5-4829-8b23-9fc44701f143",
            "28ad96db-1ab3-43b5-a807-876e47980944",
            "03fae18e-123b-4b42-9c5c-0d771d7af9b9"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "33bdb8b7-54f4-428f-aa66-e87c5ca5da4c",
          "title": "Position Openings",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/resources/spec-3-position-opening.js",
          "file": "/test/e2e/resources/spec-3-position-opening.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"should able to Apply Request For Position opening\"",
              "fullTitle": "Position Openings \"before all\" hook for \"should able to Apply Request For Position opening\"",
              "timedOut": false,
              "duration": 11531,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, li)\nWait timed out after 10032ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, li)\nWait timed out after 10032ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "88a868dc-9e25-41d1-9141-d7d54cc56cd8",
              "parentUUID": "33bdb8b7-54f4-428f-aa66-e87c5ca5da4c",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Position Openings \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/position-openings');\nawait utilFun.waitForPageLoad();",
              "err": {},
              "uuid": "dffee8f5-03ac-4cc5-96d0-e1c782d2c4fe",
              "parentUUID": "33bdb8b7-54f4-428f-aa66-e87c5ca5da4c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Position Openings\"",
              "fullTitle": "Position Openings \"after all\" hook in \"Position Openings\"",
              "timedOut": false,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9171;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\n// await utilFun.quit()",
              "err": {},
              "uuid": "eb81a0ea-b29f-4c45-b4a9-cdf06213bbe3",
              "parentUUID": "33bdb8b7-54f4-428f-aa66-e87c5ca5da4c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should able to Apply Request For Position opening",
              "fullTitle": "Position Openings should able to Apply Request For Position opening",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9474;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9171;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9429;`,\n  `DELETE FROM \"position_openings\" WHERE \"employeeId\" = 9429;`,\n];\nawait utilFun.udpateDatabase(query);\nawait positionOpenings.clickAddBtn();\nawait positionOpenings.selectField1AndEnterValue('Department*\\nSelect Department', 'Engineering');\nawait positionOpenings.selectField1AndEnterValue('Name of Position*\\nSelect Position', 'Software Engineer');\nawait positionOpenings.selectField2AndEnterValue('Position Level*\\nSelect Level', 'Automation');\nawait positionOpenings.selectField2AndEnterValue('No. of Resources*', '3');\nawait positionOpenings.selectField2AndEnterValue(`Year's of Experience*\\nSelect Years`, '0 - 1');\nawait positionOpenings.selectField1AndEnterValue('Tech Stack*\\nSelect Tech Stack', 'Automation');\nawait positionOpenings.selectField1AndEnterValue('Minimum Education*\\nSelect Education', 'Matric');\nawait positionOpenings.selectField1AndEnterValue('Gender*\\nSelect Gender', 'Male');\nawait positionOpenings.selectField1AndEnterValue('Budget*\\nSelect Budget', '0 - 25');\nawait positionOpenings.selectField1AndEnterValue('Office Location*\\nSelect Location', 'Remote');\nawait positionOpenings.selectField1AndEnterValue('Priorty Level*\\nSelect Priorty', 'High');\nawait positionOpenings.uploadDescription();\nawait positionOpenings.enterInstructions('Testing');\nawait positionOpenings.clickConfirmAddBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position request is created successfully!');",
              "err": {},
              "uuid": "298f3c0a-bcf6-4020-987f-3edb5a6626cf",
              "parentUUID": "33bdb8b7-54f4-428f-aa66-e87c5ca5da4c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to check if request id Added",
              "fullTitle": "Position Openings should able to check if request id Added",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {},
              "uuid": "6ab3329f-f49d-40df-bd88-c8aeeaaf9417",
              "parentUUID": "33bdb8b7-54f4-428f-aa66-e87c5ca5da4c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to edit request",
              "fullTitle": "Position Openings should able to edit request",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickEditBtn();\nawait positionOpenings.enterInstructions(' Updated');\nawait positionOpenings.clickConfirmAddBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been updated successfully');",
              "err": {},
              "uuid": "d9d2f5db-1990-4e74-9719-85b56d1fe0ab",
              "parentUUID": "33bdb8b7-54f4-428f-aa66-e87c5ca5da4c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Delete request",
              "fullTitle": "Position Openings should able to Delete request",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickDeleteBtn();\nawait positionOpenings.enterReason('testing');\nawait positionOpenings.clickYesBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been deleted successfully!');",
              "err": {},
              "uuid": "9299d6be-b6ba-4aa3-be61-35f301aff371",
              "parentUUID": "33bdb8b7-54f4-428f-aa66-e87c5ca5da4c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if request is visible by HOD",
              "fullTitle": "Position Openings should check if request is visible by HOD",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE \"position_openings\" SET \"deletedAt\" = NULL WHERE \"employeeId\" = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {},
              "uuid": "5c1873a9-89b9-4977-8d19-7d320f725566",
              "parentUUID": "33bdb8b7-54f4-428f-aa66-e87c5ca5da4c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to check if HOD can edit request",
              "fullTitle": "Position Openings should able to check if HOD can edit request",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickEditBtn();\nawait positionOpenings.enterInstructions(' Updated By HOD');\nawait positionOpenings.clickConfirmAddBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been updated successfully');",
              "err": {},
              "uuid": "9ea50c71-1b8f-46c1-8c25-17e5f962b686",
              "parentUUID": "33bdb8b7-54f4-428f-aa66-e87c5ca5da4c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to reject request by hod",
              "fullTitle": "Position Openings should able to reject request by hod",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickRejectBtn();\nawait positionOpenings.enterReason('testing');\nawait positionOpenings.clickYesBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been rejected successfully');",
              "err": {},
              "uuid": "91515c9d-a667-4cc4-bc29-83e7d544d995",
              "parentUUID": "33bdb8b7-54f4-428f-aa66-e87c5ca5da4c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should verify the request is showing in reject tab",
              "fullTitle": "Position Openings should verify the request is showing in reject tab",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.selectReqTblSubTab('Rejected');\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {},
              "uuid": "8c5cb211-b6f6-40ca-8249-96c1ada29f19",
              "parentUUID": "33bdb8b7-54f4-428f-aa66-e87c5ca5da4c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to approve request by hod",
              "fullTitle": "Position Openings should able to approve request by hod",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [`UPDATE \"position_openings\" SET \"isApprovedByHod\" = 'PENDING' WHERE \"employeeId\" = 9429;`];\nawait utilFun.udpateDatabase(query);\nawait positionOpenings.clickApproveBtn();\nawait positionOpenings.enterReason('testing');\nawait positionOpenings.clickYesBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been approved successfully');",
              "err": {},
              "uuid": "766e3545-4794-4756-b7a3-6df6ebf806e6",
              "parentUUID": "33bdb8b7-54f4-428f-aa66-e87c5ca5da4c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should verify the request is showing in approve tab",
              "fullTitle": "Position Openings should verify the request is showing in approve tab",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.selectReqTblSubTab('Approved');\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {},
              "uuid": "9420f54b-6945-49e5-983b-32747e96553c",
              "parentUUID": "33bdb8b7-54f4-428f-aa66-e87c5ca5da4c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if request is visible by CEO",
              "fullTitle": "Position Openings should check if request is visible by CEO",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9474;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9171;`,\n];\nawait utilFun.udpateDatabase(query);\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {},
              "uuid": "808774e6-56e5-4440-9ea9-cdc986680579",
              "parentUUID": "33bdb8b7-54f4-428f-aa66-e87c5ca5da4c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to check if CEO can edit request",
              "fullTitle": "Position Openings should able to check if CEO can edit request",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickEditBtn();\nawait positionOpenings.enterInstructions(' Updated By CEO');\nawait positionOpenings.clickConfirmAddBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been updated successfully');",
              "err": {},
              "uuid": "f598dbf6-6f3d-4d82-bd63-3da47283153b",
              "parentUUID": "33bdb8b7-54f4-428f-aa66-e87c5ca5da4c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to reject request by hod",
              "fullTitle": "Position Openings should able to reject request by hod",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickRejectBtn();\nawait positionOpenings.enterReason('testing');\nawait positionOpenings.clickYesBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been rejected successfully');",
              "err": {},
              "uuid": "ac2f7eb0-43b7-4601-baae-b125b187551e",
              "parentUUID": "33bdb8b7-54f4-428f-aa66-e87c5ca5da4c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should verify the request is showing in reject tab",
              "fullTitle": "Position Openings should verify the request is showing in reject tab",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.selectSubTab('Rejected');\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {},
              "uuid": "b564ba95-fe4e-4f00-828f-5b083da61969",
              "parentUUID": "33bdb8b7-54f4-428f-aa66-e87c5ca5da4c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to approve request by hod",
              "fullTitle": "Position Openings should able to approve request by hod",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [`UPDATE \"position_openings\" SET \"requestStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`];\nawait utilFun.udpateDatabase(query);\nawait positionOpenings.clickApproveBtn();\nawait positionOpenings.enterReason('testing');\nawait positionOpenings.clickYesBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been approved successfully');",
              "err": {},
              "uuid": "dd92f58b-dcd9-4d4d-990f-e302f4bb2a3c",
              "parentUUID": "33bdb8b7-54f4-428f-aa66-e87c5ca5da4c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should verify the request is showing in approve tab",
              "fullTitle": "Position Openings should verify the request is showing in approve tab",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.selectSubTab('Approved');\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {},
              "uuid": "55365a2e-29d3-4763-bc40-b869ca127c3f",
              "parentUUID": "33bdb8b7-54f4-428f-aa66-e87c5ca5da4c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should verify the request is showing in approve tab for Applicant",
              "fullTitle": "Position Openings should verify the request is showing in approve tab for Applicant",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9171;`,\n];\nawait utilFun.udpateDatabase(query);\nawait positionOpenings.selectSubTab('Approved');\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {},
              "uuid": "e2b8bb44-4e3b-44b9-a54b-78289dae599f",
              "parentUUID": "33bdb8b7-54f4-428f-aa66-e87c5ca5da4c",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "298f3c0a-bcf6-4020-987f-3edb5a6626cf",
            "6ab3329f-f49d-40df-bd88-c8aeeaaf9417",
            "d9d2f5db-1990-4e74-9719-85b56d1fe0ab",
            "9299d6be-b6ba-4aa3-be61-35f301aff371",
            "5c1873a9-89b9-4977-8d19-7d320f725566",
            "9ea50c71-1b8f-46c1-8c25-17e5f962b686",
            "91515c9d-a667-4cc4-bc29-83e7d544d995",
            "8c5cb211-b6f6-40ca-8249-96c1ada29f19",
            "766e3545-4794-4756-b7a3-6df6ebf806e6",
            "9420f54b-6945-49e5-983b-32747e96553c",
            "808774e6-56e5-4440-9ea9-cdc986680579",
            "f598dbf6-6f3d-4d82-bd63-3da47283153b",
            "ac2f7eb0-43b7-4601-baae-b125b187551e",
            "b564ba95-fe4e-4f00-828f-5b083da61969",
            "dd92f58b-dcd9-4d4d-990f-e302f4bb2a3c",
            "55365a2e-29d3-4763-bc40-b869ca127c3f",
            "e2b8bb44-4e3b-44b9-a54b-78289dae599f"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
          "title": "Resource Details",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/resources/spec-4-resourse-details.js",
          "file": "/test/e2e/resources/spec-4-resourse-details.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"should able to Add new resource\"",
              "fullTitle": "Resource Details \"before all\" hook for \"should able to Add new resource\"",
              "timedOut": false,
              "duration": 11531,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nlet resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  detailsPageUrl = `/resource-detail/${resourceId.rows[0].id}?tab=Basic_Information`;\n  attendanceTabUrl = `/resource-detail/${resourceId.rows[0].id}?tab=Attendance`;\n  oldId = resourceId.rows[0].id;\n  newId = resourceId.rows[0].id;\n}\n// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, li)\nWait timed out after 10061ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, li)\nWait timed out after 10061ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "1ced8eb3-4fa5-4028-841e-01f42af3a04f",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to Add new resource",
              "fullTitle": "Resource Details should able to Add new resource",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_skills\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `UPDATE employee_assets SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_resumes\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_timeLines\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"project_portfolio_employees\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM employees WHERE id = ${resourceId.rows[0].id};`,\n  ];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.wait(3000);\nawait utilFun.waitForPageLoad();\nawait addResources.clickAddResourceBtn();\n//   Form 1\nawait addResources.clickInputField('Employee Name *', 'Stevee');\nawait addResources.clickInputField('Work Phone Number', '123456');\nawait addResources.clickInputField('Work Email *', 'steve@email.com');\nawait addResources.clickInputField('Work Shift\\nSelect Work Shift', 'morning');\nawait addResources.clickOption();\nawait addResources.clickInputField('Work Location\\nSelect Work Location', 'remote');\nawait addResources.clickOption();\nawait addResources.clickInputField('Primary Manager\\nPrimary Manager', 'bilal rafaqat');\nawait addResources.clickOption();\nawait addResources.clickInputField('Attendance Mode\\nSelect Attendance Mode', 'invodesk');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation *\\nSelect Designation', 'automation');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation Category*\\nSelect Designation Category', 'automation');\nawait addResources.clickOption();\nawait addResources.clickNextButton();\n//   Form 2\nawait addResources.clickInputField2('Father Name', 'James');\nawait addResources.clickInputField2('Personal Email', 'personal@email.com');\nawait addResources.clickInputField2('Personal Phone', '12345');\nawait addResources.clickInputField2('Address', 'xyz');\nawait addResources.clickInputField2('National ID Number', '1122');\nawait addResources.setDOB('01-01-2000');\nawait addResources.clickInputField2('Gender\\nSelect Gender', 'other');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Marital Status\\nSelect Marital Status', 'single');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Emergency Contact Name', 'James');\nawait addResources.clickInputField2('Emergency Contact Number', '54321');\nawait addResources.clickInputField2('Emergency Contact Relation', 'Father');\nawait addResources.clickNextButton2();\n//   Form 3\nawait addResources.clickInputField3('Bank Name', 'MyBank');\nawait addResources.clickInputField3('Account Title', 'current');\nawait addResources.clickInputField3('IBAN Number', '3344');\nawait addResources.clickInputField3('Bank Address', 'qwerty');\nawait addResources.clickNextButton3();\n//   Form 4\nawait addResources.clickInputField4('Certification Level\\nSelect Certification Level', 'graduation');\nawait addResources.clickOption4();\nawait addResources.clickInputField4('Field of Study', 'SE');\nawait addResources.clickInputField4('School/University', 'MIT');\nawait addResources.clickInputField4('Score/Percentage', '70');\nawait addResources.clickInputField4('Passing Year\\nSelect Degree Passing Year', '2020');\nawait addResources.clickOption4();\nawait addResources.clickNextButton4();\n//   Form 5\nawait addResources.clickInputFieldForm5('Department\\nDepartment', 'HR');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Sub Department\\nSub Department', 'DevOps Support');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Contract Type*\\nSelect Contract Type', 'Full Time');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Date of Joining*', '11-01-2023');\nawait addResources.selectJobStatus('Probation');\nawait addResources.selectEndOfProbation('2 Months');\nawait addResources.clickInputFieldForm5('Total Working Hours*\\nSelect Total Working Hours', '4 Hrs');\nawait addResources.clickOptionForm5();\nawait addResources.clickNextButton5();\n//   Form 6\nawait addResources.clickInputFieldForm6('Current Salary (PKR)', '50000');\nawait addResources.clickInputFieldForm6('Last Salary (PKR)', '30000');\nawait addResources.clickInputFieldForm6('Last Increment Date', '01-01-2024');\nawait addResources.clickSubmitButton();\nconst alertText = await addResources.checkAlert();\nassert.equal(alertText, 'Resource Created Successfully!');\nlet resourceId1 = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId1.rowCount !== 0) {\n  detailsPageUrl = `/resource-detail/${resourceId1.rows[0].id}?tab=Basic_Information`;\n  attendanceTabUrl = `/resource-detail/${resourceId1.rows[0].id}?tab=Attendance`;\n  newId = resourceId1.rows[0].id;\n}",
              "err": {},
              "uuid": "cf6d77f5-4dda-40bd-8d0c-dc36c5a63b56",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to to add project from resource details",
              "fullTitle": "Resource Details should able to to add project from resource details",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resources');\nawait utilFun.wait(3000);\nawait resources.clickFilterBtn();\nawait resources.searchName('Stevee');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Stevee'), `Expected text not found.`);\nawait resources.clickAddproject();\nawait resources.selectAddProjectInputField('Projects', 'automation');\nawait resources.selectAddProjectInputField('Role in this project', 'Main Developer');\nawait resources.selectAddProjectInputField('Not Set', 'Fully Available');\nawait resources.selectAddProjectInputField('Engagement Mode', 'Billed');\nawait resources.selectAddProjectInputField('Add', '');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource added in project successfully.');",
              "err": {},
              "uuid": "68c6688b-a518-4a5b-83b2-e926dbcc6a04",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource is showing.",
              "fullTitle": "Resource Details should check if Resource is showing.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/resources');\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Stevee'), `Expected text not found.`);",
              "err": {},
              "uuid": "22d341d7-cc4b-4d39-8cfa-7ceb03c5148a",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if clicking on resource name redirecting to resoure details page.",
              "fullTitle": "Resource Details should check if clicking on resource name redirecting to resoure details page.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/resources');\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Stevee'), `Expected text not found.`);\nawait resources.ClickResourceNameTag();\nawait utilFun.switchWindow(1);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);",
              "err": {},
              "uuid": "d103f31e-1775-4ed3-bcbb-490af51948e9",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource name is showing on Details page.",
              "fullTitle": "Resource Details should check if Resource name is showing on Details page.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nconst name = await resourceDetails.getResourceNameTxt();\nassert.equal(name, 'Stevee', `Expected text not found.`);",
              "err": {},
              "uuid": "da1d45f4-7146-4f13-8a32-27f89c941afb",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Avatar is showing on Details page.",
              "fullTitle": "Resource Details should check if Resource Avatar is showing on Details page.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nconst name = await resourceDetails.checkAvatarIcon();\nassert.equal(name, 'S', `Expected text not found.`);",
              "err": {},
              "uuid": "54fd1422-5ff3-4b63-aebf-270589f6be08",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Father Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Father Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Father Name', 'James');\nawait resourceDetails.editValue('Father Name', 'James Salinas');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Father Name', 'James salinas');",
              "err": {},
              "uuid": "084cfe61-1822-4799-a35d-3f4c976db726",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Personal Email is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Personal Email is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Personal Email', 'personal@email.com');\nawait resourceDetails.editValue('Personal Email', 'personalUpdated@email.com');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Personal Email', 'personalUpdated@email.com');",
              "err": {},
              "uuid": "4189343b-edad-45a8-813b-86659aff5f08",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Address is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Address is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Address', 'xyz');\nawait resourceDetails.editValue('Address', 'xyzUpdated');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Address', 'xyzUpdated');",
              "err": {},
              "uuid": "cb5277f3-0d5a-4f00-afee-c14e355dbf32",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Nationality is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Nationality is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Nationality', 'Pakistan');\nawait resourceDetails.editValue('Nationality', 'United arab emirates');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Nationality', 'United arab emirates');",
              "err": {},
              "uuid": "11dab208-89dc-4b3e-bf81-0317ba1893bd",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource National ID Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource National ID Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('National ID Number', '1122');\nawait resourceDetails.editValue('National ID Number', '2233');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('National ID Number', '2233');",
              "err": {},
              "uuid": "b10b24e3-f700-4e94-bd11-17de1abafd0e",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Date of Birth is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Date of Birth is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Date of Birth', '01-01-2000');\nawait resourceDetails.editValue('Date of Birth', '01-01-2001');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Date of Birth', '01-01-2001');",
              "err": {},
              "uuid": "ee108c95-b3cf-4f49-aa41-1e58ba79bcb6",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Gender is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Gender is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Gender', 'Other');\nawait resourceDetails.editValue('Gender', 'Female');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Gender', 'Female');",
              "err": {},
              "uuid": "018f5006-6315-4edb-a6e6-91e0aad46467",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Marital Status is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Marital Status is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Marital Status', 'Single');\nawait resourceDetails.editValue('Marital Status', 'Married');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Marital Status', 'Married');",
              "err": {},
              "uuid": "06d844df-8deb-49a9-9325-d31d44e29cba",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Emergency Contact Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Emergency Contact Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Emergency Contact Name', 'James');\nawait resourceDetails.editValue('Emergency Contact Name', 'James Salinas');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Emergency Contact Name', 'James Salinas');",
              "err": {},
              "uuid": "8967c2d7-aae2-49aa-bbde-05cfd482e390",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Emergency Contact Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Emergency Contact Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Emergency Contact Number', '54321');\nawait resourceDetails.editValue('Emergency Contact Number', '654321');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Emergency Contact Number', '654321');",
              "err": {},
              "uuid": "0492d632-a3ba-42c1-b6f6-4405753a1a83",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Emergency Contact Relation is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Emergency Contact Relation is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Emergency Contact Relation', 'Father');\nawait resourceDetails.editValue('Emergency Contact Relation', 'Brother');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Emergency Contact Relation', 'Brother');",
              "err": {},
              "uuid": "6a05f7a2-5587-451d-9043-84102b80d404",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Bank Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Bank Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Bank Name', 'Mybank');\nawait resourceDetails.editValue('Bank Name', 'Bankname');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Bank Name', 'Bankname');",
              "err": {},
              "uuid": "9ac9ada7-4a1e-47e0-8f62-bdc4bb846c69",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Account Title is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Account Title is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Account Title', 'Current');\nawait resourceDetails.editValue('Account Title', 'Saving');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Account Title', 'Saving');",
              "err": {},
              "uuid": "21227418-226f-4210-89a2-164cb0abd5fa",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource IBAN Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource IBAN Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('IBAN Number', '3344');\nawait resourceDetails.editValue('IBAN Number', '4455');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('IBAN Number', '4455');",
              "err": {},
              "uuid": "b796534b-48a1-4497-93e9-1c3c04a4e057",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Bank Address is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Bank Address is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Bank Address', 'qwerty');\nawait resourceDetails.editValue('Bank Address', 'street14');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Bank Address', 'street14');",
              "err": {},
              "uuid": "44abf34d-4eee-49f8-a11f-d0ff72559fdc",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Certification Level is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Certification Level is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Certification Level', 'Graduation');\nawait resourceDetails.editValue('Certification Level', 'Master');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Certification Level', 'Master');",
              "err": {},
              "uuid": "61f29b29-80ac-468d-bb63-cf62d48d232a",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Field of Study is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Field of Study is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Field of Study', 'SE');\nawait resourceDetails.editValue('Field of Study', 'CS');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Field of Study', 'CS');",
              "err": {},
              "uuid": "81225d72-f973-40af-b254-451ec7f623da",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource School/University is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource School/University is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('School/University', 'Mit');\nawait resourceDetails.editValue('School/University', 'Uol');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('School/University', 'Uol');",
              "err": {},
              "uuid": "423e0a74-bc4e-40a4-aad0-4163dd45361a",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Score/Percentage is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Score/Percentage is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Score/Percentage', '70');\nawait resourceDetails.editValue('Score/Percentage', '80');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Score/Percentage', '80');",
              "err": {},
              "uuid": "aab4d786-adbd-444f-89eb-b2f19599eca6",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Passing Year is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Passing Year is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Passing Year', '2020');\nawait resourceDetails.editValue('Passing Year', '2022');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Passing Year', '2022');",
              "err": {},
              "uuid": "053f9e71-8f84-43dc-ad32-0247e9b20e30",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Employee Name', 'Stevee');\nawait resourceDetails.editValue('Employee Name', 'Steve');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Employee Name', 'Steve');",
              "err": {},
              "uuid": "7f403a8d-be88-4994-946d-150df7ca1e7a",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Work Phone Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Work Phone Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Work Phone Number', '123456');\nawait resourceDetails.editValue('Work Phone Number', '1234');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Work Phone Number', '1234');",
              "err": {},
              "uuid": "0f2a4186-28ab-44f2-9399-e55fa0e6ec4b",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Designation is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Designation is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Designation', 'Automation Associate SQA Automation');\nawait resourceDetails.editValue('Designation', 'Associate Software Engineer');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Designation', 'Automation Software Engineer');",
              "err": {},
              "uuid": "35003a28-85b6-4f16-8e6c-1d6d7ffefbe1",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Work Shift is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Work Shift is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Work Shift', 'Morning (9am-6pm)');\nawait resourceDetails.editValue('Work Shift', 'Evening (3pm-12pm)');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Work Shift', 'Evening (3pm-12pm)');",
              "err": {},
              "uuid": "81ccd7ff-b486-4a1a-bf0e-6a587bb1591c",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Work Location is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Work Location is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Work Location', 'Remote');\nawait resourceDetails.editValue('Work Location', 'Lahore');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Work Location', 'Lahore');",
              "err": {},
              "uuid": "cd8dbf76-c74f-4bdb-a3f0-d72194bc1553",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Attendance Mode is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Attendance Mode is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Attendance Mode', 'Invodesk');\nawait resourceDetails.editValue('Attendance Mode', 'Tahometer');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Attendance Mode', 'Tahometer');",
              "err": {},
              "uuid": "031f4e39-2f9e-4efb-bd88-4d71924bafab",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Employee Id is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Employee Id is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Employee ID', 'IZ-2023-11-01');",
              "err": {},
              "uuid": "42211f2d-df99-486d-bc90-883146415e2d",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Experience is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Experience is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Experience', '0');",
              "err": {},
              "uuid": "f80300d3-79a0-499e-a519-8fc388852926",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Availability is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availability is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Availability', 'Fully Available');",
              "err": {},
              "uuid": "ee55eb05-7911-45f4-add1-7ce71aa348e1",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Current Salary (PKR) is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Current Salary (PKR) is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Current Salary (PKR)', '50000');\nawait resourceDetails.editValue('Current Salary (PKR)', '60000');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Current Salary (PKR)', '60000');",
              "err": {},
              "uuid": "491b2640-b0db-44a2-9cfb-162e0d28b321",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Last Salary is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Last Salary is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Last Salary', '30000');\nawait resourceDetails.editValue('Last Salary', '35000');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Last Salary', '35000');",
              "err": {},
              "uuid": "2b32b476-049f-421d-be9d-c159074bd703",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Last Increment Date is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Last Increment Date is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Last Increment Date', 'Jan 01, 2024');\nawait resourceDetails.editValue('Last Increment Date', '01-10-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Last Increment Date', 'Jan 10, 2024');",
              "err": {},
              "uuid": "338cfbad-b4d5-4877-a694-6f11c2271339",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Department is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Department is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Department', 'HR');\nawait resourceDetails.editValue('Department', 'Engineering');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Department', 'Engineering');",
              "err": {},
              "uuid": "aa78f730-d55b-492d-b8dc-95a6b3d78002",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Sub Department is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Sub Department is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Sub Department', 'N/A');\nawait resourceDetails.editValue('Sub Department', 'DevOps Support');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Sub Department', 'DevOps Support');",
              "err": {},
              "uuid": "3ce7a827-2139-4bef-abb4-9834482d76b1",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Contract Type is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Contract Type is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Contract Type', 'Full Time');",
              "err": {},
              "uuid": "154c6904-1d8e-40c9-bc70-621d17ee9247",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Job Status is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Job Status is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Job Status', 'Probation');\nawait resourceDetails.editValue('Job Status', 'Permanent');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Job Status', 'Permanent');",
              "err": {},
              "uuid": "c8618d14-edf0-467d-b160-38fdb101a51f",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Date of Joining is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Date of Joining is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Date of Joining', 'Nov 01, 2023');\nawait resourceDetails.editValue('Date of Joining', '11-10-2023');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Date of Joining', 'Nov 10, 2023');",
              "err": {},
              "uuid": "3dddf60b-2b8f-4d3c-b9be-b09cec27136e",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Expected End of Probation Date is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Expected End of Probation Date is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.editValue('Expected End of Probation Date', '01-10-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Expected End of Probation Date', 'Jan 10, 2024');",
              "err": {},
              "uuid": "4fd15296-aa0f-4823-828b-27ca54b51698",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Probation Completed is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Probation Completed is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.editValue('Probation Completed', '01-10-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Probation Completed', 'Jan 10, 2024');",
              "err": {},
              "uuid": "5d91701d-f9c5-469c-894b-73d33353993a",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Permanent Date is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Permanent Date is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.editValue('Permanent Date', '01-11-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Permanent Date', 'Jan 11, 2024');",
              "err": {},
              "uuid": "0ee5ef31-b3cb-44bf-8b4f-84f160541a6e",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Total Working Hours is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Working Hours is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Working Hours', '4');\nawait resourceDetails.editValue('Total Working Hours', '6');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Total Working Hours', '6');",
              "err": {},
              "uuid": "308413b6-a066-44d1-ae68-cca7560bc098",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Earned Casual Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Earned Casual Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Earned Casual Leaves', '13');\nawait resourceDetails.editValue('Earned Casual Leaves', '12');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Leave quota updated successfully');\nawait resourceDetails.checkValue('Earned Casual Leaves', '12');",
              "err": {},
              "uuid": "0bd61df4-4c44-4091-afba-0e3fa3ca7dd7",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Earned Sick Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Earned Sick Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Earned Sick Leaves', '5');\nawait resourceDetails.editValue('Earned Sick Leaves', '4');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Leave quota updated successfully');\nawait resourceDetails.checkValue('Earned Sick Leaves', '4');",
              "err": {},
              "uuid": "691998a3-ff7f-481d-9d9d-ac007fbae1b0",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Total Leaves Earned (Casual/Sick) is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Leaves Earned (Casual/Sick) is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Leaves Earned (Casual/Sick)', '16');",
              "err": {},
              "uuid": "6a3e533e-838d-4ca7-842b-41cd4dccc958",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Availed Casual Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Casual Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Availed Casual Leaves', '0');",
              "err": {},
              "uuid": "90d201ff-a8dd-4711-a8d2-c50ff43ae131",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Availed Sick Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Sick Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Availed Sick Leaves', '0');",
              "err": {},
              "uuid": "cd597f34-1321-4bdf-82e5-32b8f52be305",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Total Leaves Availed (Casual/Sick) is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Leaves Availed (Casual/Sick) is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Leaves Availed (Casual/Sick)', '0');",
              "err": {},
              "uuid": "d1eb5c8e-a236-40b6-8516-26614ac33db6",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Total Remaining Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Remaining Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Remaining Leaves', '16');",
              "err": {},
              "uuid": "52a20171-d98d-48a8-88f2-499a0576fe11",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Availed Paid Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Paid Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkOtherLeaves('Availed Paid Leaves', '0');",
              "err": {},
              "uuid": "3b195f22-a05c-4a64-a373-f86ff8fec5d4",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Availed Unpaid Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Unpaid Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkOtherLeaves('Availed Unpaid Leaves', '0');",
              "err": {},
              "uuid": "ab27ce8b-f471-4652-ad29-ba283c28093d",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Carry Forward Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Carry Forward Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkOtherLeaves('Carry Forward Leaves', '0');",
              "err": {},
              "uuid": "8b6348c8-cef3-494c-af94-8b3439f654b4",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Resource Project is Showing.",
              "fullTitle": "Resource Details should check if Resource Project is Showing.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nconst projectData = await resourceDetails.checkProjectDetails();\nassert.ok(projectData.includes('automation'), `Expected text not found.`);",
              "err": {},
              "uuid": "7dc4b4b8-1d70-44e1-a780-cef9f59923c5",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to delete project from details page.",
              "fullTitle": "Resource Details should able to delete project from details page.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickDelProjectBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource removed from project successfully.');",
              "err": {},
              "uuid": "d9e7d7ec-a64a-471d-a9c3-e1f9a58568dc",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Hardware records are showing correctly.",
              "fullTitle": "Resource Details should check if Hardware records are showing correctly.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [`UPDATE employee_assets SET \"employeeId\" = ${newId} WHERE \"employeeId\" = 9429;`];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nlet records = await resourceDetails.getAssetRecords();\nassert.ok(records.includes('Steve'), `Expected text not found.`);",
              "err": {},
              "uuid": "ddbc2903-6cb0-4f47-851c-bb06bca10280",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should add skills from Resource details page.",
              "fullTitle": "Resource Details should add skills from Resource details page.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickEditSkillBtn()\nawait resourceDetails.searchSkill('automation')\nawait resourceDetails.clickAddIcon()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Skills updated successfully.');\nawait resourceDetails.clickDoneBtn()",
              "err": {},
              "uuid": "132bc860-284c-4d49-af87-4b42d234d047",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if skills records are showing correctly.",
              "fullTitle": "Resource Details should check if skills records are showing correctly.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nlet records = await resourceDetails.getSkillRecords();\nassert.ok(records.includes('Automation'), `Expected text not found.`);",
              "err": {},
              "uuid": "3c8e4f35-5c67-492d-b9ac-70a49936ae4e",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to remove skill by editing.",
              "fullTitle": "Resource Details should able to remove skill by editing.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickEditSkillBtn()\nawait resourceDetails.clickRemoveSkillBtn()\nawait resourceDetails.clickYesBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Skill is deleted successfully');\nawait resourceDetails.clickDoneBtn()\nlet records = await resourceDetails.getSkillRecordsEmpty();\nconsole.log(records);\nassert.equal(records, 'No Data');",
              "err": {},
              "uuid": "959a4a52-fa59-442b-91d2-254fb0f36939",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if attendence is showing correctly.",
              "fullTitle": "Resource Details should check if attendence is showing correctly.",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [`UPDATE employee_attendances SET \"employeeId\" = ${newId} WHERE \"employeeId\" = 9429;`];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickAttendanceTab();\nconst url1 = await utilFun.getUrl();\nassert.equal(url1, baseUrl + attendanceTabUrl);\nawait resourceDetails.selectAttendanceYear(2024);\nawait resourceDetails.selectAttendanceMonth('Jan');\nawait utilFun.wait(2000)\nlet time = await resourceDetails.getTimeByDate('2024-01-22');\nassert.equal(time, '08:00');\ntime = await resourceDetails.getTimeByDate('2024-01-23');\nassert.equal(time, '08:00');\ntime = await resourceDetails.getTimeByDate('2024-01-24');\nassert.equal(time, '08:20');\ntime = await resourceDetails.getTimeByDate('2024-01-25');\nassert.equal(time, '07:30');\ntime = await resourceDetails.getTimeByDate('2024-01-26');\nassert.equal(time, '06:40');\nlet weekTime = await resourceDetails.getWeekTime(4);\nassert.equal(weekTime, '38:30');",
              "err": {},
              "uuid": "828df3ca-9f7e-40fa-bf2b-fa11b203a3d0",
              "parentUUID": "7e882bae-78dc-4d37-bf46-94c5bb60a192",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "cf6d77f5-4dda-40bd-8d0c-dc36c5a63b56",
            "68c6688b-a518-4a5b-83b2-e926dbcc6a04",
            "22d341d7-cc4b-4d39-8cfa-7ceb03c5148a",
            "d103f31e-1775-4ed3-bcbb-490af51948e9",
            "da1d45f4-7146-4f13-8a32-27f89c941afb",
            "54fd1422-5ff3-4b63-aebf-270589f6be08",
            "084cfe61-1822-4799-a35d-3f4c976db726",
            "4189343b-edad-45a8-813b-86659aff5f08",
            "cb5277f3-0d5a-4f00-afee-c14e355dbf32",
            "11dab208-89dc-4b3e-bf81-0317ba1893bd",
            "b10b24e3-f700-4e94-bd11-17de1abafd0e",
            "ee108c95-b3cf-4f49-aa41-1e58ba79bcb6",
            "018f5006-6315-4edb-a6e6-91e0aad46467",
            "06d844df-8deb-49a9-9325-d31d44e29cba",
            "8967c2d7-aae2-49aa-bbde-05cfd482e390",
            "0492d632-a3ba-42c1-b6f6-4405753a1a83",
            "6a05f7a2-5587-451d-9043-84102b80d404",
            "9ac9ada7-4a1e-47e0-8f62-bdc4bb846c69",
            "21227418-226f-4210-89a2-164cb0abd5fa",
            "b796534b-48a1-4497-93e9-1c3c04a4e057",
            "44abf34d-4eee-49f8-a11f-d0ff72559fdc",
            "61f29b29-80ac-468d-bb63-cf62d48d232a",
            "81225d72-f973-40af-b254-451ec7f623da",
            "423e0a74-bc4e-40a4-aad0-4163dd45361a",
            "aab4d786-adbd-444f-89eb-b2f19599eca6",
            "053f9e71-8f84-43dc-ad32-0247e9b20e30",
            "7f403a8d-be88-4994-946d-150df7ca1e7a",
            "0f2a4186-28ab-44f2-9399-e55fa0e6ec4b",
            "35003a28-85b6-4f16-8e6c-1d6d7ffefbe1",
            "81ccd7ff-b486-4a1a-bf0e-6a587bb1591c",
            "cd8dbf76-c74f-4bdb-a3f0-d72194bc1553",
            "031f4e39-2f9e-4efb-bd88-4d71924bafab",
            "42211f2d-df99-486d-bc90-883146415e2d",
            "f80300d3-79a0-499e-a519-8fc388852926",
            "ee55eb05-7911-45f4-add1-7ce71aa348e1",
            "491b2640-b0db-44a2-9cfb-162e0d28b321",
            "2b32b476-049f-421d-be9d-c159074bd703",
            "338cfbad-b4d5-4877-a694-6f11c2271339",
            "aa78f730-d55b-492d-b8dc-95a6b3d78002",
            "3ce7a827-2139-4bef-abb4-9834482d76b1",
            "154c6904-1d8e-40c9-bc70-621d17ee9247",
            "c8618d14-edf0-467d-b160-38fdb101a51f",
            "3dddf60b-2b8f-4d3c-b9be-b09cec27136e",
            "4fd15296-aa0f-4823-828b-27ca54b51698",
            "5d91701d-f9c5-469c-894b-73d33353993a",
            "0ee5ef31-b3cb-44bf-8b4f-84f160541a6e",
            "308413b6-a066-44d1-ae68-cca7560bc098",
            "0bd61df4-4c44-4091-afba-0e3fa3ca7dd7",
            "691998a3-ff7f-481d-9d9d-ac007fbae1b0",
            "6a3e533e-838d-4ca7-842b-41cd4dccc958",
            "90d201ff-a8dd-4711-a8d2-c50ff43ae131",
            "cd597f34-1321-4bdf-82e5-32b8f52be305",
            "d1eb5c8e-a236-40b6-8516-26614ac33db6",
            "52a20171-d98d-48a8-88f2-499a0576fe11",
            "3b195f22-a05c-4a64-a373-f86ff8fec5d4",
            "ab27ce8b-f471-4652-ad29-ba283c28093d",
            "8b6348c8-cef3-494c-af94-8b3439f654b4",
            "7dc4b4b8-1d70-44e1-a780-cef9f59923c5",
            "d9e7d7ec-a64a-471d-a9c3-e1f9a58568dc",
            "ddbc2903-6cb0-4f47-851c-bb06bca10280",
            "132bc860-284c-4d49-af87-4b42d234d047",
            "3c8e4f35-5c67-492d-b9ac-70a49936ae4e",
            "959a4a52-fa59-442b-91d2-254fb0f36939",
            "828df3ca-9f7e-40fa-bf2b-fa11b203a3d0"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 100000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "test/report"
      },
      "version": "6.2.0"
    }
  }
}