{
  "stats": {
    "suites": 21,
    "tests": 470,
    "passes": 282,
    "pending": 38,
    "failures": 150,
    "start": "2024-03-10T04:01:26.458Z",
    "end": "2024-03-10T05:14:54.854Z",
    "duration": 4408396,
    "testsRegistered": 564,
    "passPercent": 53.61216730038023,
    "pendingPercent": 6.73758865248227,
    "other": 4,
    "hasOther": true,
    "skipped": 94,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "c39e5d9f-b6da-48d2-b98c-2dcdab3ff04b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0f8b0cbf-07cd-4d13-b20f-c1671d2a0be9",
          "title": "Pending Evaluations",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_1_pendings.js",
          "file": "/test/e2e/evaluation/spec_1_pendings.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pending Evaluations\"",
              "fullTitle": "Pending Evaluations \"before all\" hook in \"Pending Evaluations\"",
              "timedOut": false,
              "duration": 53863,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE departments SET \"hodId\" = 9474 WHERE id = 9;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.login(email, password);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query1 =[\n    `UPDATE employee_evaluations SET \"incrementType\" = 'annual' WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n    `DELETE FROM employee_evaluations WHERE \"employeeId\" = 9742 AND \"incrementType\" = 'designation';`,\n    ];\n    await utilFun.udpateDatabase(query1);",
              "err": {},
              "uuid": "f335e98c-e95d-4b02-b1dd-b6c9c640a0ef",
              "parentUUID": "0f8b0cbf-07cd-4d13-b20f-c1671d2a0be9",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Pending Evaluations\"",
              "fullTitle": "Pending Evaluations \"before each\" hook in \"Pending Evaluations\"",
              "timedOut": false,
              "duration": 3403,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.wait(3000);",
              "err": {},
              "uuid": "347ae30b-1da7-40d2-92df-146d99f6fa4d",
              "parentUUID": "0f8b0cbf-07cd-4d13-b20f-c1671d2a0be9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if pending evaluations are showing",
              "fullTitle": "Pending Evaluations should check if pending evaluations are showing",
              "timedOut": false,
              "duration": 41,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "7c385687-b898-4db0-a3c8-6c10f9c17826",
              "parentUUID": "0f8b0cbf-07cd-4d13-b20f-c1671d2a0be9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Pending Evaluations should able to filter resoures by name",
              "timedOut": false,
              "duration": 1994,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "e3d5381e-c5b0-486c-8a7b-51d5aec485a6",
              "parentUUID": "0f8b0cbf-07cd-4d13-b20f-c1671d2a0be9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Review Type",
              "fullTitle": "Pending Evaluations should able to filter resoures by Review Type",
              "timedOut": false,
              "duration": 1632,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "5bb99459-6507-43ea-b085-bc10323bca66",
              "parentUUID": "0f8b0cbf-07cd-4d13-b20f-c1671d2a0be9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Pending Evaluations should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 1584,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "84103ba3-c47f-4f33-ae28-6d65e619f34a",
              "parentUUID": "0f8b0cbf-07cd-4d13-b20f-c1671d2a0be9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Pending Evaluations should able to  copy email from options",
              "timedOut": false,
              "duration": 6679,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nawait utilFun.wait(3000);\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "f90af007-f7a3-4fb4-8690-b51d0035f740",
              "parentUUID": "0f8b0cbf-07cd-4d13-b20f-c1671d2a0be9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Pending Evaluations should able to Send Email from options",
              "timedOut": false,
              "duration": 9402,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "3b896780-ebe3-4cf7-90a6-de589bae1c36",
              "parentUUID": "0f8b0cbf-07cd-4d13-b20f-c1671d2a0be9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Pending Evaluations should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 7353,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "9ab07336-86fb-4233-aa6e-fa7ea781b334",
              "parentUUID": "0f8b0cbf-07cd-4d13-b20f-c1671d2a0be9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Pending Evaluations should able to see Email from options",
              "timedOut": false,
              "duration": 6340,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(3000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "b63390a6-a74d-4b4f-8dac-25965ff4ad93",
              "parentUUID": "0f8b0cbf-07cd-4d13-b20f-c1671d2a0be9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Pending Evaluations should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 6892,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "8312530a-0771-4917-98f3-3a726b3ecc40",
              "parentUUID": "0f8b0cbf-07cd-4d13-b20f-c1671d2a0be9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Pending Evaluations should able to see Resource Details from options",
              "timedOut": false,
              "duration": 4556,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'http://localhost:3000/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "358aa567-880f-48dd-9324-006e29202614",
              "parentUUID": "0f8b0cbf-07cd-4d13-b20f-c1671d2a0be9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Pending Evaluations should able to see employee history",
              "timedOut": false,
              "duration": 3166,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "d2eecadd-f0d6-4158-af89-c89c88823110",
              "parentUUID": "0f8b0cbf-07cd-4d13-b20f-c1671d2a0be9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to request a review",
              "fullTitle": "Pending Evaluations should able to request a review",
              "timedOut": false,
              "duration": 7215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait evaluation.clickReqReviewBtn();\nawait utilFun.wait(1000);\nawait evaluation.clickHod('Muhammad Bilal Rafaqat');\nawait evaluation.clickSendReqBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Request is send successfully.');",
              "err": {},
              "uuid": "4e5d97df-9e5d-45b2-bcf6-c3b83d00ae89",
              "parentUUID": "0f8b0cbf-07cd-4d13-b20f-c1671d2a0be9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to give a review",
              "fullTitle": "Pending Evaluations should able to give a review",
              "timedOut": false,
              "duration": 13093,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait utilFun.wait(1000);\nawait evaluation.clickAddFeedback();\n// await feedbackForm.enterDate('03092023');\nawait feedbackForm.selectFeedbackDuration('6 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.selectRevisedDesignationCategory('Automation');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('testingggg');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "38baa5c2-dade-4fa4-a15f-ccb82a985695",
              "parentUUID": "0f8b0cbf-07cd-4d13-b20f-c1671d2a0be9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit review form",
              "fullTitle": "Pending Evaluations should able to edit review form",
              "timedOut": false,
              "duration": 9097,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickEditForm();\nawait utilFun.wait(1000);\n// await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('updated');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "0dc6d4ca-954d-49e5-af82-22adaf13c366",
              "parentUUID": "0f8b0cbf-07cd-4d13-b20f-c1671d2a0be9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to defer review",
              "fullTitle": "Pending Evaluations should able to defer review",
              "timedOut": false,
              "duration": 7150,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickDefer();\nawait evaluation.clickDeferType();\nawait utilFun.wait(1000);\nawait evaluation.selectDeferType('2 Weeks');\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "ce0bd478-31e3-4850-bdf5-1bf9064e2838",
              "parentUUID": "0f8b0cbf-07cd-4d13-b20f-c1671d2a0be9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to complete review",
              "fullTitle": "Pending Evaluations should able to complete review",
              "timedOut": false,
              "duration": 10192,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickComplete();\n//await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "9232dff8-9de2-4cc6-b508-646a0f807647",
              "parentUUID": "0f8b0cbf-07cd-4d13-b20f-c1671d2a0be9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7c385687-b898-4db0-a3c8-6c10f9c17826",
            "e3d5381e-c5b0-486c-8a7b-51d5aec485a6",
            "5bb99459-6507-43ea-b085-bc10323bca66",
            "84103ba3-c47f-4f33-ae28-6d65e619f34a",
            "f90af007-f7a3-4fb4-8690-b51d0035f740",
            "3b896780-ebe3-4cf7-90a6-de589bae1c36",
            "9ab07336-86fb-4233-aa6e-fa7ea781b334",
            "b63390a6-a74d-4b4f-8dac-25965ff4ad93",
            "8312530a-0771-4917-98f3-3a726b3ecc40",
            "358aa567-880f-48dd-9324-006e29202614",
            "d2eecadd-f0d6-4158-af89-c89c88823110",
            "4e5d97df-9e5d-45b2-bcf6-c3b83d00ae89",
            "38baa5c2-dade-4fa4-a15f-ccb82a985695",
            "0dc6d4ca-954d-49e5-af82-22adaf13c366",
            "ce0bd478-31e3-4850-bdf5-1bf9064e2838",
            "9232dff8-9de2-4cc6-b508-646a0f807647"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 96386,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "13734398-2c26-4d69-af05-a046fa993bd3",
          "title": "Performance Base Evaluations",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_2_performance.js",
          "file": "/test/e2e/evaluation/spec_2_performance.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Performance Base Evaluations\"",
              "fullTitle": "Performance Base Evaluations \"before all\" hook in \"Performance Base Evaluations\"",
              "timedOut": false,
              "duration": 9296,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'performance' WHERE id = 26;`,\n  `UPDATE employees SET \"designation\" = 'Software Engineer' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 138 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "d94f8ecf-9a5f-47bc-8c6a-8b45a95ccd77",
              "parentUUID": "13734398-2c26-4d69-af05-a046fa993bd3",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Performance Base Evaluations\"",
              "fullTitle": "Performance Base Evaluations \"before each\" hook in \"Performance Base Evaluations\"",
              "timedOut": false,
              "duration": 4483,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation-performance');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "b8c0cb39-69ad-4cbc-b03b-b4717f907adc",
              "parentUUID": "13734398-2c26-4d69-af05-a046fa993bd3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if performance evaluations are showing",
              "fullTitle": "Performance Base Evaluations should check if performance evaluations are showing",
              "timedOut": false,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "3acbe7a6-4771-473a-ac3c-fae04df95220",
              "parentUUID": "13734398-2c26-4d69-af05-a046fa993bd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Performance Base Evaluations should able to filter resoures by name",
              "timedOut": false,
              "duration": 1870,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "3ead1441-d9e6-48e6-a99e-bc394d491614",
              "parentUUID": "13734398-2c26-4d69-af05-a046fa993bd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Performance Base Evaluations should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 1597,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "c8dfa1af-b9f9-4599-bcc9-8bce716ae617",
              "parentUUID": "13734398-2c26-4d69-af05-a046fa993bd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Performance Base Evaluations should able to  copy email from options",
              "timedOut": false,
              "duration": 4047,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "64e8dbc1-be2c-4779-a214-6369224857f5",
              "parentUUID": "13734398-2c26-4d69-af05-a046fa993bd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Performance Base Evaluations should able to Send Email from options",
              "timedOut": false,
              "duration": 7571,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "526640a2-4ac2-465c-acfb-8b4ad53b14a4",
              "parentUUID": "13734398-2c26-4d69-af05-a046fa993bd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Performance Base Evaluations should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 8206,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "97ad5027-873a-4755-a1da-6467fe7ae81a",
              "parentUUID": "13734398-2c26-4d69-af05-a046fa993bd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Performance Base Evaluations should able to see Email from options",
              "timedOut": false,
              "duration": 7149,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(4000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "3d392ad0-57cb-4691-aa36-98bdeb463afc",
              "parentUUID": "13734398-2c26-4d69-af05-a046fa993bd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Performance Base Evaluations should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 6757,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "4284627a-1f95-4fbd-bfaf-25a59db3e0cd",
              "parentUUID": "13734398-2c26-4d69-af05-a046fa993bd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Performance Base Evaluations should able to see Resource Details from options",
              "timedOut": false,
              "duration": 4286,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "1add2825-684f-45cd-91cc-244a08ff50e5",
              "parentUUID": "13734398-2c26-4d69-af05-a046fa993bd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Performance Base Evaluations should able to see employee history",
              "timedOut": false,
              "duration": 3131,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "a9e44def-5152-422b-8475-743e9e0054af",
              "parentUUID": "13734398-2c26-4d69-af05-a046fa993bd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to request a review",
              "fullTitle": "Performance Base Evaluations should able to request a review",
              "timedOut": false,
              "duration": 7371,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();4\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait evaluation.clickReqReviewBtn();\nawait utilFun.wait(1000);\nawait evaluation.clickHod('Muhammad Bilal Rafaqat');\nawait evaluation.clickSendReqBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Request is send successfully.');",
              "err": {},
              "uuid": "f42bba42-5477-43bc-8101-e9a1009c5dcb",
              "parentUUID": "13734398-2c26-4d69-af05-a046fa993bd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to give a review",
              "fullTitle": "Performance Base Evaluations should able to give a review",
              "timedOut": false,
              "duration": 12979,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait utilFun.wait(1000);\nawait evaluation.clickAddFeedback();\nawait feedbackForm.enterDate('03092023');\nawait feedbackForm.selectFeedbackDuration('6 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('testingggg');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "72f217e2-ddb2-4fd8-9a6f-66cbe814ae58",
              "parentUUID": "13734398-2c26-4d69-af05-a046fa993bd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit review form",
              "fullTitle": "Performance Base Evaluations should able to edit review form",
              "timedOut": false,
              "duration": 9680,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickEditForm();\nawait utilFun.wait(1000);\nawait feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('updated');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "c53f259b-8974-4eed-9be3-f471749ec552",
              "parentUUID": "13734398-2c26-4d69-af05-a046fa993bd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to defer review",
              "fullTitle": "Performance Base Evaluations should able to defer review",
              "timedOut": false,
              "duration": 6514,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickDefer();\nawait evaluation.clickDeferType();\nawait utilFun.wait(1000);\nawait evaluation.selectDeferType('2 Weeks');\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "84775e85-aa3b-4f6a-b3e6-da4300a1e3dd",
              "parentUUID": "13734398-2c26-4d69-af05-a046fa993bd3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to complete review",
              "fullTitle": "Performance Base Evaluations should able to complete review",
              "timedOut": false,
              "duration": 10667,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickComplete();\nawait feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "a5e96aed-786b-407a-9c41-afe8c3638252",
              "parentUUID": "13734398-2c26-4d69-af05-a046fa993bd3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3acbe7a6-4771-473a-ac3c-fae04df95220",
            "3ead1441-d9e6-48e6-a99e-bc394d491614",
            "c8dfa1af-b9f9-4599-bcc9-8bce716ae617",
            "64e8dbc1-be2c-4779-a214-6369224857f5",
            "526640a2-4ac2-465c-acfb-8b4ad53b14a4",
            "97ad5027-873a-4755-a1da-6467fe7ae81a",
            "3d392ad0-57cb-4691-aa36-98bdeb463afc",
            "4284627a-1f95-4fbd-bfaf-25a59db3e0cd",
            "1add2825-684f-45cd-91cc-244a08ff50e5",
            "a9e44def-5152-422b-8475-743e9e0054af",
            "f42bba42-5477-43bc-8101-e9a1009c5dcb",
            "72f217e2-ddb2-4fd8-9a6f-66cbe814ae58",
            "c53f259b-8974-4eed-9be3-f471749ec552",
            "84775e85-aa3b-4f6a-b3e6-da4300a1e3dd",
            "a5e96aed-786b-407a-9c41-afe8c3638252"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 91862,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "4b865d32-865c-4e9c-a3c7-efbe779770a5",
          "title": "Retention Base Evaluations",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_3_retention.js",
          "file": "/test/e2e/evaluation/spec_3_retention.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Retention Base Evaluations\"",
              "fullTitle": "Retention Base Evaluations \"before all\" hook in \"Retention Base Evaluations\"",
              "timedOut": false,
              "duration": 9788,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'retention' WHERE id = 26;`,\n  `UPDATE employees SET \"designation\" = 'Software Engineer' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 138 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "ed687898-4b41-4d47-8fc3-3c50dbc0e570",
              "parentUUID": "4b865d32-865c-4e9c-a3c7-efbe779770a5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Retention Base Evaluations\"",
              "fullTitle": "Retention Base Evaluations \"before each\" hook in \"Retention Base Evaluations\"",
              "timedOut": false,
              "duration": 4738,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation-retention');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "d340d219-c8f8-4fe7-8c83-8ca698d1246a",
              "parentUUID": "4b865d32-865c-4e9c-a3c7-efbe779770a5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if retention evaluations are showing",
              "fullTitle": "Retention Base Evaluations should check if retention evaluations are showing",
              "timedOut": false,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "a319284d-5faa-4fc3-a74d-b660724d57a8",
              "parentUUID": "4b865d32-865c-4e9c-a3c7-efbe779770a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Retention Base Evaluations should able to filter resoures by name",
              "timedOut": false,
              "duration": 1977,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "3975aee2-dfca-4779-904e-3467ae96d368",
              "parentUUID": "4b865d32-865c-4e9c-a3c7-efbe779770a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Retention Base Evaluations should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 1563,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "e4118f6d-a901-485d-b684-428ac25a363e",
              "parentUUID": "4b865d32-865c-4e9c-a3c7-efbe779770a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Retention Base Evaluations should able to  copy email from options",
              "timedOut": false,
              "duration": 3954,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "de3b89c9-0c28-4707-9358-3572549cb1a3",
              "parentUUID": "4b865d32-865c-4e9c-a3c7-efbe779770a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Retention Base Evaluations should able to Send Email from options",
              "timedOut": false,
              "duration": 9180,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "ce343f58-b67a-4d88-adfe-a93a3680388c",
              "parentUUID": "4b865d32-865c-4e9c-a3c7-efbe779770a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Retention Base Evaluations should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 7524,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "33fcbfd2-dca3-4080-8a9b-bba7915182c8",
              "parentUUID": "4b865d32-865c-4e9c-a3c7-efbe779770a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Retention Base Evaluations should able to see Email from options",
              "timedOut": false,
              "duration": 7152,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(4000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "460f2f30-e90e-4c6d-b002-681969f03e0b",
              "parentUUID": "4b865d32-865c-4e9c-a3c7-efbe779770a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Retention Base Evaluations should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 6756,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "17552b87-c6f2-4b95-b781-aad15fbd0c68",
              "parentUUID": "4b865d32-865c-4e9c-a3c7-efbe779770a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Retention Base Evaluations should able to see Resource Details from options",
              "timedOut": false,
              "duration": 5167,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "91b0b05e-0b3f-4d5d-9677-cc59e688cb2f",
              "parentUUID": "4b865d32-865c-4e9c-a3c7-efbe779770a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Retention Base Evaluations should able to see employee history",
              "timedOut": false,
              "duration": 3013,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "5bb23c5e-b40d-4196-91d0-d737c1144008",
              "parentUUID": "4b865d32-865c-4e9c-a3c7-efbe779770a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to request a review",
              "fullTitle": "Retention Base Evaluations should able to request a review",
              "timedOut": false,
              "duration": 7236,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait evaluation.clickReqReviewBtn();\nawait utilFun.wait(1000);\nawait evaluation.clickHod('Muhammad Bilal Rafaqat');\nawait evaluation.clickSendReqBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Request is send successfully.');",
              "err": {},
              "uuid": "165f1f69-83ee-440a-8b6e-2a821e79cc6f",
              "parentUUID": "4b865d32-865c-4e9c-a3c7-efbe779770a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to give a review",
              "fullTitle": "Retention Base Evaluations should able to give a review",
              "timedOut": false,
              "duration": 12312,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait utilFun.wait(1000);\nawait evaluation.clickAddFeedback();\n// await feedbackForm.enterDate('03092023');\nawait feedbackForm.selectFeedbackDuration('6 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('testingggg');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "942f583b-26ca-4eae-b790-220eee368227",
              "parentUUID": "4b865d32-865c-4e9c-a3c7-efbe779770a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit review form",
              "fullTitle": "Retention Base Evaluations should able to edit review form",
              "timedOut": false,
              "duration": 8915,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickEditForm();\nawait utilFun.wait(1000);\n// await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('updated');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "3af5c330-cf1c-4206-b75a-53b127296d71",
              "parentUUID": "4b865d32-865c-4e9c-a3c7-efbe779770a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to defer review",
              "fullTitle": "Retention Base Evaluations should able to defer review",
              "timedOut": false,
              "duration": 7297,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickDefer();\nawait evaluation.clickDeferType();\nawait utilFun.wait(1000);\nawait evaluation.selectDeferType('2 Weeks');\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "3eade669-9bb4-42e5-aab7-925e68901610",
              "parentUUID": "4b865d32-865c-4e9c-a3c7-efbe779770a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to complete review",
              "fullTitle": "Retention Base Evaluations should able to complete review",
              "timedOut": false,
              "duration": 10344,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickComplete();\n   // await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "7a1765df-5fa0-4162-a6b7-0c245d40bca6",
              "parentUUID": "4b865d32-865c-4e9c-a3c7-efbe779770a5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a319284d-5faa-4fc3-a74d-b660724d57a8",
            "3975aee2-dfca-4779-904e-3467ae96d368",
            "e4118f6d-a901-485d-b684-428ac25a363e",
            "de3b89c9-0c28-4707-9358-3572549cb1a3",
            "ce343f58-b67a-4d88-adfe-a93a3680388c",
            "33fcbfd2-dca3-4080-8a9b-bba7915182c8",
            "460f2f30-e90e-4c6d-b002-681969f03e0b",
            "17552b87-c6f2-4b95-b781-aad15fbd0c68",
            "91b0b05e-0b3f-4d5d-9677-cc59e688cb2f",
            "5bb23c5e-b40d-4196-91d0-d737c1144008",
            "165f1f69-83ee-440a-8b6e-2a821e79cc6f",
            "942f583b-26ca-4eae-b790-220eee368227",
            "3af5c330-cf1c-4206-b75a-53b127296d71",
            "3eade669-9bb4-42e5-aab7-925e68901610",
            "7a1765df-5fa0-4162-a6b7-0c245d40bca6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 92424,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "6832677f-a4a2-4486-9195-fdf621f62607",
          "title": "Evaluations History",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_4_history.js",
          "file": "/test/e2e/evaluation/spec_4_history.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Evaluations History\"",
              "fullTitle": "Evaluations History \"before all\" hook in \"Evaluations History\"",
              "timedOut": false,
              "duration": 10133,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query = [\n  `UPDATE employee_evaluations SET \"processType\" = 'COMPLETE' WHERE id = 26;`,\n  `DELETE FROM employee_evaluations WHERE \"employeeId\" = 9742 AND \"incrementType\" = 'designation';`,\n  `UPDATE employee_evaluations SET \"processDate\" = '2023-03-28 17:32:33.501+05' WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "3ca45eb4-9a1a-4a83-bd20-51b9036df4da",
              "parentUUID": "6832677f-a4a2-4486-9195-fdf621f62607",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Evaluations History\"",
              "fullTitle": "Evaluations History \"before each\" hook in \"Evaluations History\"",
              "timedOut": false,
              "duration": 4413,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation-history');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "7023d995-7e29-41ae-b78e-678e317534e9",
              "parentUUID": "6832677f-a4a2-4486-9195-fdf621f62607",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if evaluations history is showing",
              "fullTitle": "Evaluations History should check if evaluations history is showing",
              "timedOut": false,
              "duration": 45,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "e9997f5f-5a2c-45bf-bc30-80780fe46d46",
              "parentUUID": "6832677f-a4a2-4486-9195-fdf621f62607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Evaluations History should able to filter resoures by name",
              "timedOut": false,
              "duration": 2295,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "92858bfe-51a6-46d0-99f5-1aea7d8d6fda",
              "parentUUID": "6832677f-a4a2-4486-9195-fdf621f62607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check review is completed",
              "fullTitle": "Evaluations History should able to check review is completed",
              "timedOut": false,
              "duration": 2228,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.checkProcessState()\nutilFun.assertEql(name, 'Complete');",
              "err": {},
              "uuid": "9e948627-4ce9-4b0d-ac6e-1dd4db04659d",
              "parentUUID": "6832677f-a4a2-4486-9195-fdf621f62607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Review Type",
              "fullTitle": "Evaluations History should able to filter resoures by Review Type",
              "timedOut": false,
              "duration": 1870,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "dff053a5-a39b-4de2-91bf-ee5e08d0c485",
              "parentUUID": "6832677f-a4a2-4486-9195-fdf621f62607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Evaluations History should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 1722,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "0ec8c24a-322b-4183-ac16-69f94f3206a2",
              "parentUUID": "6832677f-a4a2-4486-9195-fdf621f62607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Evaluations History should able to  copy email from options",
              "timedOut": false,
              "duration": 5211,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "4dc26034-b4ef-493c-b7dd-71e4eca946b3",
              "parentUUID": "6832677f-a4a2-4486-9195-fdf621f62607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Evaluations History should able to Send Email from options",
              "timedOut": false,
              "duration": 7908,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "c2a83a15-2a16-4ca9-9e62-af69746d9c19",
              "parentUUID": "6832677f-a4a2-4486-9195-fdf621f62607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Evaluations History should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 8181,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "9de41b89-29c3-412d-8a45-6dfd099b1140",
              "parentUUID": "6832677f-a4a2-4486-9195-fdf621f62607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Evaluations History should able to see Email from options",
              "timedOut": false,
              "duration": 7496,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(4000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "cefe600f-18b6-43d7-9414-224e7fe93d7d",
              "parentUUID": "6832677f-a4a2-4486-9195-fdf621f62607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Evaluations History should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 7165,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "3d4c3207-6a9b-4eb5-b2de-83ab925a9de5",
              "parentUUID": "6832677f-a4a2-4486-9195-fdf621f62607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Evaluations History should able to see Resource Details from options",
              "timedOut": false,
              "duration": 4344,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "a96c9244-ccbc-4e07-8a79-2f30e97e26ee",
              "parentUUID": "6832677f-a4a2-4486-9195-fdf621f62607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Evaluations History should able to see employee history",
              "timedOut": false,
              "duration": 3519,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "dfe77ee8-63c8-4015-bdbd-e514c8364894",
              "parentUUID": "6832677f-a4a2-4486-9195-fdf621f62607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Initiate a Revised Designation",
              "fullTitle": "Evaluations History should able to Initiate a Revised Designation",
              "timedOut": false,
              "duration": 6800,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Initiate a Revised Designation');\nawait utilFun.wait(3000);\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Review is initiated successfully.');",
              "err": {},
              "uuid": "f23c1697-92c8-4169-9a32-29bf69ea3363",
              "parentUUID": "6832677f-a4a2-4486-9195-fdf621f62607",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able check if revised Designation evaluation is showing",
              "fullTitle": "Evaluations History should able check if revised Designation evaluation is showing",
              "timedOut": false,
              "duration": 21246,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nawait evaluation.selectReviewType('Rev. Designation');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 20088ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[aria-label=\"Filters\"])\nWait timed out after 20088ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "49e8d657-7b1f-442c-99f0-20200513f307",
              "parentUUID": "6832677f-a4a2-4486-9195-fdf621f62607",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e9997f5f-5a2c-45bf-bc30-80780fe46d46",
            "92858bfe-51a6-46d0-99f5-1aea7d8d6fda",
            "9e948627-4ce9-4b0d-ac6e-1dd4db04659d",
            "dff053a5-a39b-4de2-91bf-ee5e08d0c485",
            "0ec8c24a-322b-4183-ac16-69f94f3206a2",
            "4dc26034-b4ef-493c-b7dd-71e4eca946b3",
            "c2a83a15-2a16-4ca9-9e62-af69746d9c19",
            "9de41b89-29c3-412d-8a45-6dfd099b1140",
            "cefe600f-18b6-43d7-9414-224e7fe93d7d",
            "3d4c3207-6a9b-4eb5-b2de-83ab925a9de5",
            "a96c9244-ccbc-4e07-8a79-2f30e97e26ee",
            "dfe77ee8-63c8-4015-bdbd-e514c8364894",
            "f23c1697-92c8-4169-9a32-29bf69ea3363"
          ],
          "failures": [
            "49e8d657-7b1f-442c-99f0-20200513f307"
          ],
          "pending": [],
          "skipped": [],
          "duration": 80030,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "dda59349-3ce8-493b-835c-437d593b1298",
          "title": "Evaluations Review Types",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_5_reviewTypes.js",
          "file": "/test/e2e/evaluation/spec_5_reviewTypes.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"should check if annual evaluations are showing\"",
              "fullTitle": "Evaluations Review Types \"before all\" hook for \"should check if annual evaluations are showing\"",
              "timedOut": false,
              "duration": 20902,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, button[type=\"button\"])\nWait timed out after 20035ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, button[type=\"button\"])\nWait timed out after 20035ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "7b9a9731-534a-4798-a78e-90f618fa7547",
              "parentUUID": "dda59349-3ce8-493b-835c-437d593b1298",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Evaluations Review Types \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.wait(3000);",
              "err": {},
              "uuid": "09b5a5d1-9c41-42cf-a533-c3cbd5a83f90",
              "parentUUID": "dda59349-3ce8-493b-835c-437d593b1298",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if annual evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if annual evaluations are showing",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'annual' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Annual'), `Expected text not found.`);",
              "err": {},
              "uuid": "7bca2d38-f735-419e-b0c5-c056ec1f3cfe",
              "parentUUID": "dda59349-3ce8-493b-835c-437d593b1298",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Annual'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "610d9bfc-d768-459e-975d-5ad477d80f0e",
              "parentUUID": "dda59349-3ce8-493b-835c-437d593b1298",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Bi Annual evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if Bi Annual evaluations are showing",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'bi-annual' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Bi Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Bi Annual'), `Expected text not found.`);",
              "err": {},
              "uuid": "02afe598-e1c5-4839-a3a4-b4f820b91781",
              "parentUUID": "dda59349-3ce8-493b-835c-437d593b1298",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Bi Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Bi Annual'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "87fb06d1-f54c-496a-9b11-47575d3dc79c",
              "parentUUID": "dda59349-3ce8-493b-835c-437d593b1298",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Internship evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if Internship evaluations are showing",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'internship' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Internship');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Internship'), `Expected text not found.`);",
              "err": {},
              "uuid": "ab174941-28a1-489d-a99d-8d383b63e259",
              "parentUUID": "dda59349-3ce8-493b-835c-437d593b1298",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Internship');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Internship'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "326616f3-3da1-4abb-8feb-99c75f21b205",
              "parentUUID": "dda59349-3ce8-493b-835c-437d593b1298",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should confirm Hr have Access of extend Btn and can extend Evaluation",
              "fullTitle": "Evaluations Review Types should confirm Hr have Access of extend Btn and can extend Evaluation",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Internship');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Internship'), `Expected text not found.`);\nawait evaluation.checkIfExtenfBtnIsLocated()\nawait utilFun.wait(1000);\nawait evaluation.clickExtendBtn()\nawait utilFun.wait(1000);\nawait evaluation.clickDeferType()\nawait evaluation.selectDeferType('2 Weeks');\nawait utilFun.wait(1000);\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "9a4adee6-006d-4162-a4a9-dadb61742ce7",
              "parentUUID": "dda59349-3ce8-493b-835c-437d593b1298",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if End of Probation evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if End of Probation evaluations are showing",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'end_of_probation' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('End of Probation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('End of Probation'), `Expected text not found.`);",
              "err": {},
              "uuid": "ade5d7f7-97d5-4b13-922b-3863397d346e",
              "parentUUID": "dda59349-3ce8-493b-835c-437d593b1298",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('End of Probation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('End of Probation'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "eea31ea1-1621-44ac-afe4-fa0392739b4c",
              "parentUUID": "dda59349-3ce8-493b-835c-437d593b1298",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should confirm Hr have Access of extend Btn and can extend Evaluation",
              "fullTitle": "Evaluations Review Types should confirm Hr have Access of extend Btn and can extend Evaluation",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('End of Probation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('End of Probation'), `Expected text not found.`);\nawait evaluation.checkIfExtenfBtnIsLocated()\nawait utilFun.wait(1000);\nawait evaluation.clickExtendBtn()\nawait utilFun.wait(1000);\nawait evaluation.clickDeferType()\nawait evaluation.selectDeferType('2 Weeks');\nawait utilFun.wait(1000);\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "141b565b-b5dd-49e0-b5e2-7a945bb8c0e3",
              "parentUUID": "dda59349-3ce8-493b-835c-437d593b1298",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Revised Designation evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if Revised Designation evaluations are showing",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'designation' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Rev. Designation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Rev. Designation'), `Expected text not found.`);",
              "err": {},
              "uuid": "5eaeff32-0592-4ffd-8de3-9a759ae6511d",
              "parentUUID": "dda59349-3ce8-493b-835c-437d593b1298",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Rev. Designation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Rev. Designation'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "f9d81d5d-2bc8-4313-8084-86f40548a02f",
              "parentUUID": "dda59349-3ce8-493b-835c-437d593b1298",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "7bca2d38-f735-419e-b0c5-c056ec1f3cfe",
            "610d9bfc-d768-459e-975d-5ad477d80f0e",
            "02afe598-e1c5-4839-a3a4-b4f820b91781",
            "87fb06d1-f54c-496a-9b11-47575d3dc79c",
            "ab174941-28a1-489d-a99d-8d383b63e259",
            "326616f3-3da1-4abb-8feb-99c75f21b205",
            "9a4adee6-006d-4162-a4a9-dadb61742ce7",
            "ade5d7f7-97d5-4b13-922b-3863397d346e",
            "eea31ea1-1621-44ac-afe4-fa0392739b4c",
            "141b565b-b5dd-49e0-b5e2-7a945bb8c0e3",
            "5eaeff32-0592-4ffd-8de3-9a759ae6511d",
            "f9d81d5d-2bc8-4313-8084-86f40548a02f"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
          "title": "My Leaves",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/leaves/spec_1_myleaves.js",
          "file": "/test/e2e/leaves/spec_1_myleaves.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"should should able to view employee leave\"",
              "fullTitle": "My Leaves \"before all\" hook for \"should should able to view employee leave\"",
              "timedOut": false,
              "duration": 20734,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\n// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query1 = [\n  `UPDATE employee_leaves_count SET \"carryForwardedLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesEarned\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalRemainingLeaves\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"availedUnPaidLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `DELETE FROM employee_leaves WHERE \"employeeId\" = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query1);",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, button[type=\"button\"])\nWait timed out after 20152ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, button[type=\"button\"])\nWait timed out after 20152ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "f6657996-ac4e-4a53-929d-9699c4105eb2",
              "parentUUID": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "My Leaves \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);",
              "err": {},
              "uuid": "6133ddb3-4b2b-4d23-9840-d4558fd362b1",
              "parentUUID": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should should able to view employee leave",
              "fullTitle": "My Leaves should should able to view employee leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_reporting_managers SET \"approvedLeaveStatus\" = 'PENDING' WHERE id = 45;`,\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE id = 32;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE id = 32;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE id = 32;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {},
              "uuid": "2c0698e8-470d-4de2-8c4a-9f039f0ac5f8",
              "parentUUID": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should should able to Approve employee leave",
              "fullTitle": "My Leaves should should able to Approve employee leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nawait myLeaves.clickApproveBtn()\nawait myLeaves.clickSubmitBtn()\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "451298c5-7fa2-485b-8b80-94c8f26bbff3",
              "parentUUID": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to view employee leave in Approved Tab",
              "fullTitle": "My Leaves should able to view employee leave in Approved Tab",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Approved Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {},
              "uuid": "42be3836-bd49-47ab-8be4-6f7965125e3c",
              "parentUUID": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Reject employee leave in Approved Tab",
              "fullTitle": "My Leaves should able to Reject employee leave in Approved Tab",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Approved Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);\nawait myLeaves.clickRejectBtn()\nawait myLeaves.typeRejectReasonAndReject('testing')\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "c0e0266f-edbf-4eb9-9bde-743efc91ac8a",
              "parentUUID": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to view employee leave in Reject Tab",
              "fullTitle": "My Leaves should able to view employee leave in Reject Tab",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Rejected Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {},
              "uuid": "39bbc06e-9132-442e-b275-c137b472dd12",
              "parentUUID": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should should able to Reject employee leave",
              "fullTitle": "My Leaves should should able to Reject employee leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_reporting_managers SET \"approvedLeaveStatus\" = 'PENDING' WHERE id = 45;`,\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE id = 32;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE id = 32;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE id = 32;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nawait myLeaves.clickRejectBtn()\nawait myLeaves.typeRejectReasonAndReject('testing')\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "698e1333-29c8-4704-9d53-2fd0726f0f8b",
              "parentUUID": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to view employee leave in Reject Tab",
              "fullTitle": "My Leaves should able to view employee leave in Reject Tab",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Rejected Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {},
              "uuid": "4274df4f-e14b-4dff-a420-29816b9f9be3",
              "parentUUID": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Approve employee leave in Reject Tab",
              "fullTitle": "My Leaves should able to Approve employee leave in Reject Tab",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Rejected Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);\nawait myLeaves.clickApproveBtn()\nawait myLeaves.clickSubmitBtn()\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "0eec2ccc-5c47-4f8f-b61f-6214f794ccba",
              "parentUUID": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to view employee leave in Approved Tab",
              "fullTitle": "My Leaves should able to view employee leave in Approved Tab",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Approved Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {},
              "uuid": "b8d94a8d-2412-48fa-8d82-5170bbccd387",
              "parentUUID": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Leaves counts are showing Correct",
              "fullTitle": "My Leaves should check if Leaves counts are showing Correct",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '10/');\nlet leaves1 = await myLeaves.getSickLeaves();\nassert.equal(leaves1, '10/');\nlet leaves2 = await myLeaves.getCarryForwardLeaves();\nassert.equal(leaves2, '0/');\nlet leaves3 = await myLeaves.getUnpaidLeaves();\nassert.equal(leaves3, '0');",
              "err": {},
              "uuid": "02dd4f9e-6e9b-4829-b5ec-b39aa8b8aeb4",
              "parentUUID": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to apply Casual full leave",
              "fullTitle": "My Leaves should able to apply Casual full leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('05-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('05-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "05fbf352-0677-42af-a58e-f25e58adbf91",
              "parentUUID": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to apply Casual First Half leave",
              "fullTitle": "My Leaves should able to apply Casual First Half leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('First Half');\nawait myLeaves.setStartDate('06-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('06-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "faa8023d-17c6-4f52-946e-9c1a7ec448be",
              "parentUUID": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to apply Casual Second Half leave",
              "fullTitle": "My Leaves should able to apply Casual Second Half leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('Second Half');\nawait myLeaves.setStartDate('07-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('07-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "2385eb71-e068-41ca-b460-3699c12e0523",
              "parentUUID": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to apply Sick full leave",
              "fullTitle": "My Leaves should able to apply Sick full leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Sick Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('08-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('08-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "581decd2-d4c9-44b7-861f-3779700c53da",
              "parentUUID": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to apply Sick First Half leave",
              "fullTitle": "My Leaves should able to apply Sick First Half leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Sick Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('First Half');\nawait myLeaves.setStartDate('09-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('09-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "0a71f646-e563-41a3-b632-56de2bfd0cff",
              "parentUUID": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to apply Sick Second Half leave",
              "fullTitle": "My Leaves should able to apply Sick Second Half leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Sick Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('Second Half');\nawait myLeaves.setStartDate('10-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('10-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "a73a29b7-2178-4077-b692-c786849ea794",
              "parentUUID": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to apply Un-Paid full leave",
              "fullTitle": "My Leaves should able to apply Un-Paid full leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Un-Paid Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('11-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('11-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "b9be64be-3042-4a00-a326-dc973eb21395",
              "parentUUID": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to apply Un-Paid First Half leave",
              "fullTitle": "My Leaves should able to apply Un-Paid First Half leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Un-Paid Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('First Half');\nawait myLeaves.setStartDate('12-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('12-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "93ce1fc0-0d4b-4b74-b6ae-838a90667c65",
              "parentUUID": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to apply Un-Paid Second Half leave",
              "fullTitle": "My Leaves should able to apply Un-Paid Second Half leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Un-Paid Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('Second Half');\nawait myLeaves.setStartDate('13-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('13-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "3527eee3-f074-4957-b5d4-ed48713cd64d",
              "parentUUID": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Leaves counts are showing Correct",
              "fullTitle": "My Leaves should check if Leaves counts are showing Correct",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '8/');\nlet leaves1 = await myLeaves.getSickLeaves();\nassert.equal(leaves1, '8/');\nlet leaves2 = await myLeaves.getCarryForwardLeaves();\nassert.equal(leaves2, '0/');\nlet leaves3 = await myLeaves.getUnpaidLeaves();\nassert.equal(leaves3, '2');",
              "err": {},
              "uuid": "b88d4484-fe36-4291-a6b4-fba1fcdca488",
              "parentUUID": "23c9c24c-c33b-4405-9662-6a37c87cc30b",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "2c0698e8-470d-4de2-8c4a-9f039f0ac5f8",
            "451298c5-7fa2-485b-8b80-94c8f26bbff3",
            "42be3836-bd49-47ab-8be4-6f7965125e3c",
            "c0e0266f-edbf-4eb9-9bde-743efc91ac8a",
            "39bbc06e-9132-442e-b275-c137b472dd12",
            "698e1333-29c8-4704-9d53-2fd0726f0f8b",
            "4274df4f-e14b-4dff-a420-29816b9f9be3",
            "0eec2ccc-5c47-4f8f-b61f-6214f794ccba",
            "b8d94a8d-2412-48fa-8d82-5170bbccd387",
            "02dd4f9e-6e9b-4829-b5ec-b39aa8b8aeb4",
            "05fbf352-0677-42af-a58e-f25e58adbf91",
            "faa8023d-17c6-4f52-946e-9c1a7ec448be",
            "2385eb71-e068-41ca-b460-3699c12e0523",
            "581decd2-d4c9-44b7-861f-3779700c53da",
            "0a71f646-e563-41a3-b632-56de2bfd0cff",
            "a73a29b7-2178-4077-b692-c786849ea794",
            "b9be64be-3042-4a00-a326-dc973eb21395",
            "93ce1fc0-0d4b-4b74-b6ae-838a90667c65",
            "3527eee3-f074-4957-b5d4-ed48713cd64d",
            "b88d4484-fe36-4291-a6b4-fba1fcdca488"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "637be026-64e0-4d2d-a084-5238a4daa310",
          "title": "hr dashboard",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/leaves/spec_2_hrLeavesDashboard.js",
          "file": "/test/e2e/leaves/spec_2_hrLeavesDashboard.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"should check if Leaves counts are showing Correct\"",
              "fullTitle": "hr dashboard \"before all\" hook for \"should check if Leaves counts are showing Correct\"",
              "timedOut": false,
              "duration": 20710,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, button[type=\"button\"])\nWait timed out after 20186ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, button[type=\"button\"])\nWait timed out after 20186ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "37e734d3-6fd6-4481-aff9-8332d1b102d3",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"hr dashboard\"",
              "fullTitle": "hr dashboard \"after all\" hook in \"hr dashboard\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `DELETE FROM employee_leaves WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "aa7fac0c-6f8b-4fc1-b62c-f164edf47568",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should check if Leaves counts are showing Correct",
              "fullTitle": "hr dashboard should check if Leaves counts are showing Correct",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_count SET \"carryForwardedLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesEarned\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalRemainingLeaves\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"availedUnPaidLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `DELETE FROM employee_leaves WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nlet leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '10/');\nlet leaves1 = await myLeaves.getSickLeaves();\nassert.equal(leaves1, '10/');\nlet leaves2 = await myLeaves.getCarryForwardLeaves();\nassert.equal(leaves2, '0/');\nlet leaves3 = await myLeaves.getUnpaidLeaves();\nassert.equal(leaves3, '0');",
              "err": {},
              "uuid": "cc4ed547-6a59-4349-a0c6-fff3bab102a9",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to apply Casual full leave",
              "fullTitle": "hr dashboard should able to apply Casual full leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nawait myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('05-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('05-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "86f2666e-5fec-40cc-a4fb-77390f0f2c09",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to check if leave is showing in Hr Dashboard",
              "fullTitle": "hr dashboard should able to check if leave is showing in Hr Dashboard",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "e8102d9a-1862-463d-8883-a8415cd98207",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Approve Leave",
              "fullTitle": "hr dashboard should able to Approve Leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.clickApproveBtn()\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.clickSubmitBtn()\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "3a566458-b353-48ac-9a9a-bcb849ec7e3f",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to view employee leave in Approved Tab",
              "fullTitle": "hr dashboard should able to view employee leave in Approved Tab",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickTab('Approved Leaves')\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "68ca6b5d-58f7-41dc-a9d8-6e2c8b449cd0",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Reject Leave",
              "fullTitle": "hr dashboard should able to Reject Leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickRejectBtn()\nawait hrLeaveDashboard.typeRejectReasonAndReject('testing')\nawait utilFun.wait(1000);\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "72ea2e42-aacc-4cea-a6a6-d0ebf92b768c",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to view employee leave in Rejected Tab",
              "fullTitle": "hr dashboard should able to view employee leave in Rejected Tab",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickTab('Rejected Leaves')\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "8adb370f-5fa1-46dd-878c-1d41eb613d31",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to send leave notification to PMs",
              "fullTitle": "hr dashboard should able to send leave notification to PMs",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickSendNotificationBtn()\nawait utilFun.wait(1000);\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Notification sent to PMs from which leave is pending');",
              "err": {},
              "uuid": "75e75385-8aa0-40a4-87be-d759be268bab",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to delete Employee leave",
              "fullTitle": "hr dashboard should able to delete Employee leave",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickDeleteBtn()\nawait hrLeaveDashboard.typeDeleteReason('testing')\nawait hrLeaveDashboard.clickSubmitDeleteBtn()\nawait utilFun.wait(1000);\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request deleted successfully.');",
              "err": {},
              "uuid": "3a23f6a3-e4cf-47ba-9c48-082d9df2ffb6",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able check if delete leave is showing in Deleted Section",
              "fullTitle": "hr dashboard should able check if delete leave is showing in Deleted Section",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickSeeDeletedLeaves()\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "5e229b54-c0db-49ff-b801-ae7b4f7ccb47",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to add Compensatory leave to specific employee",
              "fullTitle": "hr dashboard should able to add Compensatory leave to specific employee",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `DELETE FROM employee_gift_leaves WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCompLeaveBtn()\nawait hrLeaveDashboard.selectResource('Muhammad Bilal Rafaqat')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('21-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('21-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Compensatory leave added successfully');",
              "err": {},
              "uuid": "c1120d8d-af37-4149-b9fc-af6588f6a237",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Leave is Added",
              "fullTitle": "hr dashboard should check if Leave is Added",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nlet leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '11/');",
              "err": {},
              "uuid": "a6b0e2e4-bf0f-4ff4-a092-8570f0b43d04",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to add Compensatory leave to all employee",
              "fullTitle": "hr dashboard should able to add Compensatory leave to all employee",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCompLeaveBtn()\nawait hrLeaveDashboard.clickSelectAllRadioBtn()\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('20-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('20-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Compensatory leave added successfully');",
              "err": {},
              "uuid": "c6c0dda5-cb3b-41d6-8525-a4ef2a008413",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should check if Leave is Added",
              "fullTitle": "hr dashboard should check if Leave is Added",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nlet leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '11/');",
              "err": {},
              "uuid": "ef17e946-8f3c-4933-8821-f8f46a0adbf3",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to create Casual full leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Casual full leave from Hr Dashboard",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Casual Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Full Leave')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('10-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('10-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "b7491820-903e-4e49-b549-28a4ddd3ddc3",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to create Casual First Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Casual First Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Casual Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('First Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('11-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('11-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "9ded08e7-6252-487c-8114-9c89a42e518f",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to create Casual Second Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Casual Second Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Casual Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('Second Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('12-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('12-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "e60b7032-b7c9-4b42-b0e4-ad9f6af22c6b",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to create Sick full leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Sick full leave from Hr Dashboard",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Sick Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Full Leave')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('13-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('13-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "ec9eb1a6-2cab-40e4-9a99-c1e0a0e79901",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to create Sick First Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Sick First Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Sick Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('First Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('14-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('14-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "52a77ef0-04be-4f28-890c-add4e34eb6ef",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to create Sick Second Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Sick Second Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Sick Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('Second Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('15-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('15-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "8c212790-3220-4c63-920f-ad4f07f93284",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to create Un-Paid full leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Un-Paid full leave from Hr Dashboard",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Un-Paid Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Full Leave')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('16-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('16-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "356868a9-d13d-4d51-bf4e-7544a935cb75",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to create Un-Paid First Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Un-Paid First Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Un-Paid Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('First Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('17-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('17-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "4d695b90-ac5c-4b52-a81b-8221ba7a7421",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to create Un-Paid Second Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Un-Paid Second Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Un-Paid Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('Second Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('18-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('18-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "a3f98c83-7a1b-42e6-9240-c4872dfc85ba",
              "parentUUID": "637be026-64e0-4d2d-a084-5238a4daa310",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "cc4ed547-6a59-4349-a0c6-fff3bab102a9",
            "86f2666e-5fec-40cc-a4fb-77390f0f2c09",
            "e8102d9a-1862-463d-8883-a8415cd98207",
            "3a566458-b353-48ac-9a9a-bcb849ec7e3f",
            "68ca6b5d-58f7-41dc-a9d8-6e2c8b449cd0",
            "72ea2e42-aacc-4cea-a6a6-d0ebf92b768c",
            "8adb370f-5fa1-46dd-878c-1d41eb613d31",
            "75e75385-8aa0-40a4-87be-d759be268bab",
            "3a23f6a3-e4cf-47ba-9c48-082d9df2ffb6",
            "5e229b54-c0db-49ff-b801-ae7b4f7ccb47",
            "c1120d8d-af37-4149-b9fc-af6588f6a237",
            "a6b0e2e4-bf0f-4ff4-a092-8570f0b43d04",
            "c6c0dda5-cb3b-41d6-8525-a4ef2a008413",
            "ef17e946-8f3c-4933-8821-f8f46a0adbf3",
            "b7491820-903e-4e49-b549-28a4ddd3ddc3",
            "9ded08e7-6252-487c-8114-9c89a42e518f",
            "e60b7032-b7c9-4b42-b0e4-ad9f6af22c6b",
            "ec9eb1a6-2cab-40e4-9a99-c1e0a0e79901",
            "52a77ef0-04be-4f28-890c-add4e34eb6ef",
            "8c212790-3220-4c63-920f-ad4f07f93284",
            "356868a9-d13d-4d51-bf4e-7544a935cb75",
            "4d695b90-ac5c-4b52-a81b-8221ba7a7421",
            "a3f98c83-7a1b-42e6-9240-c4872dfc85ba"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
          "title": "Monthly Claims -> Child Claims",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-child.js",
          "file": "/test/e2e/monthlyclaim/myclaims-child.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"should be able to Upload Photo and click Close Button\"",
              "fullTitle": "Monthly Claims -> Child Claims \"before all\" hook for \"should be able to Upload Photo and click Close Button\"",
              "timedOut": false,
              "duration": 20712,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [\n    `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9429;`,\n    `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9474;`,\n  ];\n  await utilFun.udpateDatabase(query);\n  await utilFun.loginAccount()\n//   await utilFun.login(email, password)",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, button[type=\"button\"])\nWait timed out after 20144ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, button[type=\"button\"])\nWait timed out after 20144ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "4a254d9d-7fc0-4b4e-9557-e2a612046925",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Upload Photo and click Close Button",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "55f07166-d52d-4fc5-833e-ea7c2b6f5861",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Upload Photo and Delete Photos ",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Upload Photo and Delete Photos ",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(1);",
              "err": {},
              "uuid": "278c4d09-fb13-4683-8265-1780c7b16350",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Add New Row and Delete Row ",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Add New Row and Delete Row ",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(1);",
              "err": {},
              "uuid": "796e18e2-50a9-4910-a407-ce46b7b351b0",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Check Cancel Button",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Check Cancel Button",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "a1a31e5f-0eac-4868-8918-eb14be43ff17",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "2124ba98-01c4-469a-8f01-734cca9b820f",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Edit Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Edit Child Claim",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MyClaims_EditBtn();\nawait child_claims.MyClaims_AddClaim_Child_Name('ALI', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-06-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(1);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(2);\nawait utilFun.wait(3000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit();\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is updated successfully');",
              "err": {},
              "uuid": "fe70a47e-3d01-47b5-8f6b-eb8770afd582",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able Show Attachment",
              "fullTitle": "Monthly Claims -> Child Claims should be able Show Attachment",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "1e84db0d-097b-46d5-a866-7cf8ce7dcff6",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able Review Icon",
              "fullTitle": "Monthly Claims -> Child Claims should be able Review Icon",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "8b980511-7913-43ba-9217-64a6c3e16417",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Delete Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Delete Child Claim",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_DeleteBtn();\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "a4559b22-7bbf-4aa6-b750-79037f1ebd45",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "92f08a53-b319-4de2-b4f5-265745a6f9e7",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be HR Role Show Attachment & Close Button",
              "fullTitle": "Monthly Claims -> Child Claims should be HR Role Show Attachment & Close Button",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(2000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "8fe8095a-a114-4feb-8d11-7371e8b3cb42",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Edit Amount in Show Attachment",
              "fullTitle": "Monthly Claims -> Child Claims should be Edit Amount in Show Attachment",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_ShowAttachment_EditAmount_Hover();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ShowAttachment_EditAmount();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ClaimsRequest_EditBtn_RecieptAmount('3500');\nawait claims.MyClaims_ClaimsRequest_EditBtn_Reason('Extra budget');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();",
              "err": {},
              "uuid": "37b32dfd-f661-4b94-a017-1b7d9c02e113",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Child Claims should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(4000);\nawait claims.MyClaims_FilterBtn();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\nawait claims.HRFilterSearchByClaimType('Personal Development Allowance');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Filter_HR_SearchByClaim_CrossIcon();\nawait claims.HRFilterSearchByClaimType('Fitness/Gym Allowance');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_HR_SearchByClaim_CrossIcon();\nawait claims.HRFilterSearchByClaimType('Child Education Support');\nawait utilFun.wait(4000);\n/// Start and End Date Filter\nawait claims.MyClaims_Filter_StartDate('2023-11-14');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2023-12-15')\nawait utilFun.wait(4000);\n/// Verify Results\nawait claims.Row_Assertion()\nawait claims.MyClaims_Filter_ClearBtn();",
              "err": {},
              "uuid": "a672e223-0ede-4614-9d18-ec0e30687db9",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be HR Role Review Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be HR Role Review Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet query =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "bdfc2687-afba-4b3c-b4a5-2721941756bd",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit One Child Claim for Approve Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim for Approve Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "6f2ebad9-ebca-4f2d-9937-a0b786218f8e",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Approve One Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Approve One Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Receipt status updated successfully!');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "4b709bf5-0da8-4c0f-b444-9d7966e4ee8c",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit One Child Claim for Reject Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim for Reject Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "cf3b2ed5-7370-4841-abf7-0dc65f8f7385",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Reject Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Reject Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait utilFun.wait(3000)\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Receipt status updated successfully!');\nawait utilFun.wait(3000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "05c60964-0757-4fcc-959b-c20746a165c9",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be  Verify Reject Tab and check Show Attachment ",
              "fullTitle": "Monthly Claims -> Child Claims should be  Verify Reject Tab and check Show Attachment ",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "9a222449-a724-449f-9325-9a0cebb9b466",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be  Verify Reject Tab and Check Review Icon  ",
              "fullTitle": "Monthly Claims -> Child Claims should be  Verify Reject Tab and Check Review Icon  ",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000);\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion();\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "877408d6-aed7-4ede-b93f-01fdb4d63a6e",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Child Claims should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "d24ada39-0520-4bc0-92eb-91d7838280bb",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit Two Child Claim for Review Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Two Child Claim for Review Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "0ec1193c-ae90-4040-a1b2-ca14ad8883d4",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be HR Role Show Attachment & Close Button",
              "fullTitle": "Monthly Claims -> Child Claims should be HR Role Show Attachment & Close Button",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.wait(10000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "b5f82f09-3d15-4cff-a287-06e6c7852592",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Edit Amount in Show Attachment",
              "fullTitle": "Monthly Claims -> Child Claims should be Edit Amount in Show Attachment",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_ShowAttachment_EditAmount_Hover();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ShowAttachment_EditAmount();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ClaimsRequest_EditBtn_RecieptAmount('3500');\nawait claims.MyClaims_ClaimsRequest_EditBtn_Reason('Extra budget');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();",
              "err": {},
              "uuid": "6648b5eb-03be-4b69-9310-de04f89d6974",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Review Flow for Two Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Review Flow for Two Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// const query = [\n//     `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n//     `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n//     `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n//     `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n// ];\n// await utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages1 = await claims.checkAlert();\nutilFun.assertEql(flashMessages1, 'Claim status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(1);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages2 = await claims.checkAlert();\nutilFun.assertEql(flashMessages2, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "e1922fde-0aa0-46cb-9111-e18e73d9e531",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit Two Child Claim for Approve Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Two Child Claim for Approve Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "b54ecd35-6b0f-41f6-b8cb-230f21439402",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Approve Two Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Approve Two Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "b8c39cc3-ab6d-4dd3-933b-ba61a25dd450",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit Two Child Claim for Reject Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Two Child Claim for Reject Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "9a97c278-6f55-4066-853d-d3c5f0a5403a",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Reject Two Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Reject Two Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(3000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim status updated successfully!');\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion();\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "baa020df-c8dd-4ce8-aa0e-a1dd3606a339",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit Three Child Claim for Review Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Three Child Claim for Review Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Noman', 2);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 2);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('6000', 2);\nconst validationMessage3 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage3, 'Max amount limit is 5000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 2);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "b433afcd-4105-4f3b-a84c-5ce8aaf97b24",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Review Flow for Three Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Review Flow for Three Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages1 = await claims.checkAlert();\nutilFun.assertEql(flashMessages1, 'Claim status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(1);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages2 = await claims.checkAlert();\nutilFun.assertEql(flashMessages2, 'Claim status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(2);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages3 = await claims.checkAlert();\nutilFun.assertEql(flashMessages3, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "ad7a7406-e845-4b7b-ae3a-9bc2db40f2b2",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit Three Child Claim for Approve Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Three Child Claim for Approve Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Noman', 2);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 2);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('6000', 2);\nconst validationMessage3 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage3, 'Max amount limit is 5000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 2);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "d86fa9fe-5152-4985-be9b-1759436252bd",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Approve Three Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Approve Three Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage3 = await claims.checkAlert();\nutilFun.assertEql(flashMessage3, 'Receipt status updated successfully!');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "57cba248-087a-4907-b4f5-03ef19504fed",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit Three Child Claim for Reject Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Three Child Claim for Reject Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Noman', 2);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 2);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('6000', 2);\nconst validationMessage3 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage3, 'Max amount limit is 5000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 2);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "d7abaed5-baf0-4982-a22d-83d4486bad7a",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Reject Three Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Reject Three Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage3 = await claims.checkAlert();\nutilFun.assertEql(flashMessage3, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim status updated successfully!');\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion();\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "a3a3336a-7042-40c3-ae3b-cb4844c030a0",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Child Claims should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Deadline_Date('2023-02-05 22:40:20');\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "90efc209-83ea-4416-ba59-1cb17a08cd1a",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'You are not able to claim as the claim time is over.');",
              "err": {},
              "uuid": "acdd0097-6e16-4cea-9017-b9ebbab1f5c7",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Child Claims should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        'DELETE FROM employee_claim_deadlines;',\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Deadline_Date('2024-12-05 22:40:20');\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "4c5566ee-64e5-470b-86ad-09f91b413b07",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');\nlet querys =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n        'DELETE FROM employee_claim_deadlines;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "2f8dc8e9-4cf8-42e7-acbe-631f45207fa0",
              "parentUUID": "cc952d38-d5ba-4d3e-9a41-8e85c48dba4b",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "55f07166-d52d-4fc5-833e-ea7c2b6f5861",
            "278c4d09-fb13-4683-8265-1780c7b16350",
            "796e18e2-50a9-4910-a407-ce46b7b351b0",
            "a1a31e5f-0eac-4868-8918-eb14be43ff17",
            "2124ba98-01c4-469a-8f01-734cca9b820f",
            "fe70a47e-3d01-47b5-8f6b-eb8770afd582",
            "1e84db0d-097b-46d5-a866-7cf8ce7dcff6",
            "8b980511-7913-43ba-9217-64a6c3e16417",
            "a4559b22-7bbf-4aa6-b750-79037f1ebd45",
            "92f08a53-b319-4de2-b4f5-265745a6f9e7",
            "8fe8095a-a114-4feb-8d11-7371e8b3cb42",
            "37b32dfd-f661-4b94-a017-1b7d9c02e113",
            "a672e223-0ede-4614-9d18-ec0e30687db9",
            "bdfc2687-afba-4b3c-b4a5-2721941756bd",
            "6f2ebad9-ebca-4f2d-9937-a0b786218f8e",
            "4b709bf5-0da8-4c0f-b444-9d7966e4ee8c",
            "cf3b2ed5-7370-4841-abf7-0dc65f8f7385",
            "05c60964-0757-4fcc-959b-c20746a165c9",
            "9a222449-a724-449f-9325-9a0cebb9b466",
            "877408d6-aed7-4ede-b93f-01fdb4d63a6e",
            "d24ada39-0520-4bc0-92eb-91d7838280bb",
            "0ec1193c-ae90-4040-a1b2-ca14ad8883d4",
            "b5f82f09-3d15-4cff-a287-06e6c7852592",
            "6648b5eb-03be-4b69-9310-de04f89d6974",
            "e1922fde-0aa0-46cb-9111-e18e73d9e531",
            "b54ecd35-6b0f-41f6-b8cb-230f21439402",
            "b8c39cc3-ab6d-4dd3-933b-ba61a25dd450",
            "9a97c278-6f55-4066-853d-d3c5f0a5403a",
            "baa020df-c8dd-4ce8-aa0e-a1dd3606a339",
            "b433afcd-4105-4f3b-a84c-5ce8aaf97b24",
            "ad7a7406-e845-4b7b-ae3a-9bc2db40f2b2",
            "d86fa9fe-5152-4985-be9b-1759436252bd",
            "57cba248-087a-4907-b4f5-03ef19504fed",
            "d7abaed5-baf0-4982-a22d-83d4486bad7a",
            "a3a3336a-7042-40c3-ae3b-cb4844c030a0",
            "90efc209-83ea-4416-ba59-1cb17a08cd1a",
            "acdd0097-6e16-4cea-9017-b9ebbab1f5c7",
            "4c5566ee-64e5-470b-86ad-09f91b413b07",
            "2f8dc8e9-4cf8-42e7-acbe-631f45207fa0"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "94c8f11e-9ed8-46d2-a14c-2a521b1116b3",
          "title": "Monthly Claims -> Gym Allowance",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-gym.js",
          "file": "/test/e2e/monthlyclaim/myclaims-gym.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button in Gym Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be able to Upload Photo and click Close Button in Gym Allowance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "90a4ad12-051d-4779-be39-ad1fa0104efe",
              "parentUUID": "94c8f11e-9ed8-46d2-a14c-2a521b1116b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able multiple File Upload & Cancel Button in GYM Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be able multiple File Upload & Cancel Button in GYM Allowance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8fe3a68a-c1d4-4515-9bce-5a076f4e53ff",
              "parentUUID": "94c8f11e-9ed8-46d2-a14c-2a521b1116b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Gym Allowance ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be add claim in Gym Allowance ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "7eec8c8a-60fe-46ef-b99f-0cabe6e642c7",
              "parentUUID": "94c8f11e-9ed8-46d2-a14c-2a521b1116b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Delete Claim in Gym Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Delete Claim in Gym Allowance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "b295920d-df5a-4af9-9132-d65ab5169e08",
              "parentUUID": "94c8f11e-9ed8-46d2-a14c-2a521b1116b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit Gym Allowance ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Submit Gym Allowance ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e85826cf-e9da-4b7c-bf60-f4544aa19a68",
              "parentUUID": "94c8f11e-9ed8-46d2-a14c-2a521b1116b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "d628eb7a-8ae7-4330-9668-9e82f928a91f",
              "parentUUID": "94c8f11e-9ed8-46d2-a14c-2a521b1116b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Edit Claim of Gym Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Edit Claim of Gym Allowance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "f567cf85-d13e-4184-9244-ad094979f730",
              "parentUUID": "94c8f11e-9ed8-46d2-a14c-2a521b1116b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reviews Chart",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Reviews Chart",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "2fb4d64c-eae9-4a0d-afe1-985af1a3fba0",
              "parentUUID": "94c8f11e-9ed8-46d2-a14c-2a521b1116b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Add Reviews",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Add Reviews",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "20ead90d-fe5e-4dc6-9f23-4e7514d8e30f",
              "parentUUID": "94c8f11e-9ed8-46d2-a14c-2a521b1116b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Approve Button",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Approve Button",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "520c1c48-41a5-48c3-bc96-19f9edba93d2",
              "parentUUID": "94c8f11e-9ed8-46d2-a14c-2a521b1116b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review See Button in Approve Tab",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Review See Button in Approve Tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e58f7719-d1cd-45bc-abda-5a7b4c634ffe",
              "parentUUID": "94c8f11e-9ed8-46d2-a14c-2a521b1116b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reject Button",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Reject Button",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "dc6a5c65-1aba-4bb7-aa05-068e270ac6c6",
              "parentUUID": "94c8f11e-9ed8-46d2-a14c-2a521b1116b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reason See in Reject Tab ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Reason See in Reject Tab ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "f673516d-986d-4fd4-941d-f823f73ba557",
              "parentUUID": "94c8f11e-9ed8-46d2-a14c-2a521b1116b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "a03ea84d-2f98-490a-99c6-12aee7369d0d",
              "parentUUID": "94c8f11e-9ed8-46d2-a14c-2a521b1116b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "7235a62c-0085-4e2f-af17-dc030b297948",
              "parentUUID": "94c8f11e-9ed8-46d2-a14c-2a521b1116b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Gym Allowance to Verify Incorrect Date ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be add claim in Gym Allowance to Verify Incorrect Date ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "68ee08a9-c7bd-45e3-abb2-dc131df82b41",
              "parentUUID": "94c8f11e-9ed8-46d2-a14c-2a521b1116b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Gym Allowance should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "53e3f9f4-df65-4dfe-84c2-f4802dc02936",
              "parentUUID": "94c8f11e-9ed8-46d2-a14c-2a521b1116b3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Gym Allowance to Verify Correct Date ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be add claim in Gym Allowance to Verify Correct Date ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "918adfaa-a3f0-4933-8a53-0ca7e4fb08e5",
              "parentUUID": "94c8f11e-9ed8-46d2-a14c-2a521b1116b3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "90a4ad12-051d-4779-be39-ad1fa0104efe",
            "8fe3a68a-c1d4-4515-9bce-5a076f4e53ff",
            "7eec8c8a-60fe-46ef-b99f-0cabe6e642c7",
            "b295920d-df5a-4af9-9132-d65ab5169e08",
            "e85826cf-e9da-4b7c-bf60-f4544aa19a68",
            "d628eb7a-8ae7-4330-9668-9e82f928a91f",
            "f567cf85-d13e-4184-9244-ad094979f730",
            "2fb4d64c-eae9-4a0d-afe1-985af1a3fba0",
            "20ead90d-fe5e-4dc6-9f23-4e7514d8e30f",
            "520c1c48-41a5-48c3-bc96-19f9edba93d2",
            "e58f7719-d1cd-45bc-abda-5a7b4c634ffe",
            "dc6a5c65-1aba-4bb7-aa05-068e270ac6c6",
            "f673516d-986d-4fd4-941d-f823f73ba557",
            "a03ea84d-2f98-490a-99c6-12aee7369d0d",
            "7235a62c-0085-4e2f-af17-dc030b297948",
            "68ee08a9-c7bd-45e3-abb2-dc131df82b41",
            "53e3f9f4-df65-4dfe-84c2-f4802dc02936",
            "918adfaa-a3f0-4933-8a53-0ca7e4fb08e5"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "1d902210-48f4-4828-ada8-04b3e075ff37",
          "title": "Monthly Claims -> Marriage Bonus",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-marriage.js",
          "file": "/test/e2e/monthlyclaim/myclaims-marriage.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Upload Photo and click Close Button",
              "timedOut": false,
              "duration": 10590,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "5562b671-140b-4d16-aef4-4147bdd50de7",
              "parentUUID": "1d902210-48f4-4828-ada8-04b3e075ff37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Upload Mulitiple Photos and click Close Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Upload Mulitiple Photos and click Close Button",
              "timedOut": false,
              "duration": 11208,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "0c3867f7-4bb9-4777-b12e-7c46e6afa90e",
              "parentUUID": "1d902210-48f4-4828-ada8-04b3e075ff37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus",
              "timedOut": false,
              "duration": 12425,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "9f5a3de0-eeef-45a5-aae7-85ca3537f0dc",
              "parentUUID": "1d902210-48f4-4828-ada8-04b3e075ff37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Edit Medical Claims",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Edit Medical Claims",
              "timedOut": false,
              "duration": 10642,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_EditBtn();\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0)\nawait utilFun.wait(1000);\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is updated successfully');",
              "err": {},
              "uuid": "116900ad-36b8-4780-838d-324113d2c2aa",
              "parentUUID": "1d902210-48f4-4828-ada8-04b3e075ff37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 22110,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Employee_FilterBtn();\nawait utilFun.wait(2000);\n// ///// Search By Claim Type\n// await claims.FilterSearchByClaimType('Personal Development Allowance');\n// await utilFun.wait(2000);\nawait claims.FilterSearchByClaimType('Fitness/Gym Allowance');\nawait utilFun.wait(2000);\nawait claims.FilterSearchByClaimType('Marriage Bonus');\n///// Search By Status\nawait claims.FilterSearchByStatus('Approved');\nawait claims.FilterSearchByStatus('Review');\nawait claims.FilterSearchByStatus('Pending');\nawait marriage_claims.Row_Assertion()\nawait utilFun.wait(4000);\nawait claims.MyClaims_Filter_ClearBtn()",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"d-flex pt-1\"]/div[1]/div/div[2]/div/div)\nWait timed out after 10102ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"d-flex pt-1\"]/div[1]/div/div[2]/div/div)\nWait timed out after 10102ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "11577004-e485-4d57-89bd-ba1e9f11144c",
              "parentUUID": "1d902210-48f4-4828-ada8-04b3e075ff37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Show Attachment",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Show Attachment",
              "timedOut": false,
              "duration": 6933,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "ad504a88-e5c2-4150-84d5-29857cf4557a",
              "parentUUID": "1d902210-48f4-4828-ada8-04b3e075ff37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Review Icon",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Review Icon",
              "timedOut": false,
              "duration": 6769,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon()\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "c02b126b-89aa-4282-8de1-9b4a8d95f080",
              "parentUUID": "1d902210-48f4-4828-ada8-04b3e075ff37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Delete Marriage Claims",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Delete Marriage Claims",
              "timedOut": false,
              "duration": 7772,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_DeleteBtn();\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "8c56644a-674a-45c8-b5e9-7edb6b300a5a",
              "parentUUID": "1d902210-48f4-4828-ada8-04b3e075ff37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus",
              "timedOut": false,
              "duration": 12477,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "f3a273bd-1521-48a9-8014-8665c444c652",
              "parentUUID": "1d902210-48f4-4828-ada8-04b3e075ff37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 5778,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "1584c3b7-482c-4a50-bff2-25962363a3b3",
              "parentUUID": "1d902210-48f4-4828-ada8-04b3e075ff37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 6721,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(4000);\nawait claims.MyClaims_FilterBtn();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\nawait claims.HRFilterSearchByClaimType('Personal Development Allowance');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Filter_HR_SearchByClaim_CrossIcon();\nawait claims.HRFilterSearchByClaimType('Fitness/Gym Allowance');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_HR_SearchByClaim_CrossIcon();\nawait claims.HRFilterSearchByClaimType('Marriage Bonus');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Filter_StartDate('2023-11-08');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2023-11-11')\nawait utilFun.wait(4000);\n/// Verify Results\nawait claims.Row_Assertion()\nawait claims.MyClaims_Filter_ClearBtn();",
              "err": {
                "message": "ElementNotInteractableError: element not interactable\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "ElementNotInteractableError: element not interactable\n  (Session info: headless chrome=119.0.6045.159)\n    at Object.throwDecodedError (node_modules/selenium-webdriver/lib/error.js:524:15)\n    at parseHttpResponse (node_modules/selenium-webdriver/lib/http.js:601:13)\n    at Executor.execute (node_modules/selenium-webdriver/lib/http.js:529:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async thenableWebDriverProxy.execute (node_modules/selenium-webdriver/lib/webdriver.js:745:17)\n    at async claims.MyClaims_Filter_SearchByName (test/support/pages/monthlyclaim/claims-pdf.js:326:9)\n    at async Context.<anonymous> (test/e2e/monthlyclaim/myclaims-marriage.js:164:9)",
                "diff": null
              },
              "uuid": "72b45853-68c8-4fb5-9ed3-81a73eaef1ae",
              "parentUUID": "1d902210-48f4-4828-ada8-04b3e075ff37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Add Reviews",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role Add Reviews",
              "timedOut": false,
              "duration": 11479,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait marriage_claims.MyClaims_ClaimRequest_AddReview()\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim request is reviewed successfully!');\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "603f15e7-8b38-4087-8f7a-d8b025554ea2",
              "parentUUID": "1d902210-48f4-4828-ada8-04b3e075ff37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role in Approve Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role in Approve Button",
              "timedOut": false,
              "duration": 11221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait marriage_claims.MyClaims_ClaimRequest_ApproveBtn();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Button for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is approved successfully!');\n///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "62c1b85d-2e9a-4de0-b861-ef88639a5b65",
              "parentUUID": "1d902210-48f4-4828-ada8-04b3e075ff37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Approve Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be Verify Approve Claim in Applicant Side",
              "timedOut": false,
              "duration": 7908,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_CheckHRStatus_Scroll();\nawait claims.MyClaims_CheckHRStatus();\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "7622f952-00dd-4829-b2df-457834df464e",
              "parentUUID": "1d902210-48f4-4828-ada8-04b3e075ff37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role in Rejection Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role in Rejection Button",
              "timedOut": false,
              "duration": 15324,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait marriage_claims.MyClaims_ClaimRequest_RejectBtn();\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Button for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is rejected successfully!');\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "8f442626-6db1-4f54-8240-f2aefe6084ce",
              "parentUUID": "1d902210-48f4-4828-ada8-04b3e075ff37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Reject Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be Verify Reject Claim in Applicant Side",
              "timedOut": false,
              "duration": 9896,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "00c041f8-69ea-49cd-9611-965040449d67",
              "parentUUID": "1d902210-48f4-4828-ada8-04b3e075ff37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 16079,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9474;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2023-02-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "131c88b2-a4aa-4d9f-aeea-7e747b0f0445",
              "parentUUID": "1d902210-48f4-4828-ada8-04b3e075ff37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus for Verify Incorrect Deadline",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus for Verify Incorrect Deadline",
              "timedOut": false,
              "duration": 12415,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'You are not able to claim as the claim time is over.');",
              "err": {},
              "uuid": "3c4fbdf6-26d3-4f68-9fc8-f7ebb1f6fa40",
              "parentUUID": "1d902210-48f4-4828-ada8-04b3e075ff37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 15897,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n[\n    'DELETE FROM employee_claim_deadlines;',\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9474;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2024-12-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "dd6b5865-8184-4281-b74a-66bc1bbe9419",
              "parentUUID": "1d902210-48f4-4828-ada8-04b3e075ff37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus for Verify Correct Deadline",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus for Verify Correct Deadline",
              "timedOut": false,
              "duration": 12422,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');\nlet querys =\n[\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n    'DELETE FROM employee_claim_deadlines;'\n];\n    await utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "e9496b49-e8d2-4eb2-af19-b968f867ebd5",
              "parentUUID": "1d902210-48f4-4828-ada8-04b3e075ff37",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5562b671-140b-4d16-aef4-4147bdd50de7",
            "0c3867f7-4bb9-4777-b12e-7c46e6afa90e",
            "9f5a3de0-eeef-45a5-aae7-85ca3537f0dc",
            "116900ad-36b8-4780-838d-324113d2c2aa",
            "ad504a88-e5c2-4150-84d5-29857cf4557a",
            "c02b126b-89aa-4282-8de1-9b4a8d95f080",
            "8c56644a-674a-45c8-b5e9-7edb6b300a5a",
            "f3a273bd-1521-48a9-8014-8665c444c652",
            "1584c3b7-482c-4a50-bff2-25962363a3b3",
            "603f15e7-8b38-4087-8f7a-d8b025554ea2",
            "62c1b85d-2e9a-4de0-b861-ef88639a5b65",
            "7622f952-00dd-4829-b2df-457834df464e",
            "8f442626-6db1-4f54-8240-f2aefe6084ce",
            "00c041f8-69ea-49cd-9611-965040449d67",
            "131c88b2-a4aa-4d9f-aeea-7e747b0f0445",
            "3c4fbdf6-26d3-4f68-9fc8-f7ebb1f6fa40",
            "dd6b5865-8184-4281-b74a-66bc1bbe9419",
            "e9496b49-e8d2-4eb2-af19-b968f867ebd5"
          ],
          "failures": [
            "11577004-e485-4d57-89bd-ba1e9f11144c",
            "72b45853-68c8-4fb5-9ed3-81a73eaef1ae"
          ],
          "pending": [],
          "skipped": [],
          "duration": 226066,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "56f21f3d-4892-4799-a834-cdac3150ea4b",
          "title": "Monthly Claims -> Medicals",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-medical.js",
          "file": "/test/e2e/monthlyclaim/myclaims-medical.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button",
              "fullTitle": "Monthly Claims -> Medicals should be able to Upload Photo and click Close Button",
              "timedOut": false,
              "duration": 10390,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "0dbe590d-7c1a-40d2-90f8-2494b03b1e74",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Upload Multiple Photos and click Close Button",
              "fullTitle": "Monthly Claims -> Medicals should be able to Upload Multiple Photos and click Close Button",
              "timedOut": false,
              "duration": 14147,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0);\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1500', 1);\nawait medical_claims.MyClaims_AddClaim_AddRow(1);\nawait medical_claims.MyClaims_AddClaim_AddRow(2);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_DeleteRow(1);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "41257843-f2ec-4db8-a485-756a4b49075c",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Add New Row and Delete Row",
              "fullTitle": "Monthly Claims -> Medicals should be able to Add New Row and Delete Row",
              "timedOut": false,
              "duration": 15320,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait utilFun.wait(5000);\nawait medical_claims.Row_Assertion();\nawait medical_claims.MyClaims_AddClaim_DeleteRow(1)",
              "err": {},
              "uuid": "98f701aa-0c1c-47a8-a92f-bd68b2a33b71",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Add and Delete Attachments",
              "fullTitle": "Monthly Claims -> Medicals should be able to Add and Delete Attachments",
              "timedOut": false,
              "duration": 12362,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(5000);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0)",
              "err": {},
              "uuid": "10adaa90-4031-49e5-8230-33e8d163ee04",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to click Cancel Button",
              "fullTitle": "Monthly Claims -> Medicals should be able to click Cancel Button",
              "timedOut": false,
              "duration": 12169,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(5000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "0faf1489-20ad-4fd4-bb77-88fdae6ba6ae",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims",
              "timedOut": false,
              "duration": 17079,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "b2aba423-d7c4-45ac-b479-21b4f6a67e8e",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Edit Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Edit Medical Claims",
              "timedOut": false,
              "duration": 8922,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_EditBtn();\nawait medical_claims.MyClaims_AddClaim_DeleteRow(1)\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is updated successfully');",
              "err": {},
              "uuid": "ad55bc6c-d2c1-483c-aacc-d321b39ce2b5",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Medicals should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 33686,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Employee_FilterBtn();\nawait utilFun.wait(4000);\nawait claims.FilterSearchByClaimType('Medical Coverage');\nawait utilFun.wait(4000);\nawait claims.FilterSearchByClaimType('Fitness/Gym Allowance');\nawait utilFun.wait(4000);\nawait claims.FilterSearchByClaimType('Personal Development Allowance');\nawait claims.FilterSearchByStatus('Approved');\nawait claims.FilterSearchByStatus('Review');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Filter_ClearBtn()",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"d-flex pt-1\"]/div[1]/div/div[2]/div/div)\nWait timed out after 10185ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"d-flex pt-1\"]/div[1]/div/div[2]/div/div)\nWait timed out after 10185ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d6074fd2-10f8-4042-86eb-c840a154c5b1",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Delete Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Delete Medical Claims",
              "timedOut": false,
              "duration": 7977,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_DeleteBtn();\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "8ba4e9af-44d2-49b1-a809-bd3d0bdd6178",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims",
              "timedOut": false,
              "duration": 15550,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "1d1855dc-103a-47a5-991e-49a72d8a08f1",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 2571,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();",
              "err": {},
              "uuid": "0627a3e2-fdb6-4f48-b615-a4b1f0d8400a",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review Flow",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Review Flow",
              "timedOut": false,
              "duration": 20273,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(1);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim request is reviewed successfully!');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet query =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "7d64b9b6-f65e-4c69-8bb2-e9c64fa83290",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims for Approve Flow",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims for Approve Flow",
              "timedOut": false,
              "duration": 15575,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "de5d050a-7127-41aa-ae38-b5faaa448162",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Edit Reciept Amount",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Show Edit Reciept Amount",
              "timedOut": false,
              "duration": 41742,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_FirstChildClaim_EditAmount_Hover()\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_EditAmount(0);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_RecieptAmount('2500')\nawait utilFun.wait(1000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_Reason('Reason for edit amount')\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'The receipt amount has been updated successfully!');\nawait utilFun.wait(3000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_SecondChildClaim_EditAmount_Hover();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_EditAmount(0);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_RecieptAmount('5000')\nawait utilFun.wait(1000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_Reason('Reason for edit amount')\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox()\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'The receipt amount has been updated successfully!');",
              "err": {},
              "uuid": "0202f63a-65e7-4e91-833a-70ed65f6c5f5",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Approve Medicals",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Approve Medicals",
              "timedOut": false,
              "duration": 26651,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'The status has been updated successfully!');\nawait utilFun.wait(3000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'The status has been updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nawait utilFun.wait(3000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "b1920602-0844-4b15-9470-e763713b4a7d",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims for Reject Flow",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims for Reject Flow",
              "timedOut": false,
              "duration": 15506,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "ecfe82d4-e422-4654-8b85-126c5df7ff99",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reject Medicals",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Reject Medicals",
              "timedOut": false,
              "duration": 28331,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'The status has been updated successfully!');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'The status has been updated successfully!');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "f58351d9-adb9-4dc9-8d72-a6e96846fbea",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be  Verify Reject Tab and check Show Attachment ",
              "fullTitle": "Monthly Claims -> Medicals should be  Verify Reject Tab and check Show Attachment ",
              "timedOut": false,
              "duration": 9003,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "bcb6d193-3cdd-4184-936c-cb1fece218a7",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be  Verify Reject Tab and Check Review Icon  ",
              "fullTitle": "Monthly Claims -> Medicals should be  Verify Reject Tab and Check Review Icon  ",
              "timedOut": false,
              "duration": 9091,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "54fa1aea-67a0-47eb-9b97-dcb1790325d6",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Medicals should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 7856,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "5f29d572-adeb-43fc-8a5f-6a99150c4476",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Medicals should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 16005,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2023-02-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "688490f6-83a4-4e1d-b55a-7a186c3ef107",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims Verify Incorrect Deadline",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims Verify Incorrect Deadline",
              "timedOut": false,
              "duration": 17275,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'You are not able to claim as the claim time is over.');",
              "err": {},
              "uuid": "0485d096-8f0e-439d-b97d-f9795cbec7e2",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Medicals should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 16031,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        'DELETE FROM employee_claim_deadlines;',\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2024-12-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "0d4461c7-13f2-49e0-b31f-7cbd9b20c585",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims Verify Correct Deadline",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims Verify Correct Deadline",
              "timedOut": false,
              "duration": 17505,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');\nlet querys =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n        'DELETE FROM employee_claim_deadlines;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "818f74a1-4aa0-46d0-98d3-1d8c28d49de3",
              "parentUUID": "56f21f3d-4892-4799-a834-cdac3150ea4b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0dbe590d-7c1a-40d2-90f8-2494b03b1e74",
            "41257843-f2ec-4db8-a485-756a4b49075c",
            "98f701aa-0c1c-47a8-a92f-bd68b2a33b71",
            "10adaa90-4031-49e5-8230-33e8d163ee04",
            "0faf1489-20ad-4fd4-bb77-88fdae6ba6ae",
            "b2aba423-d7c4-45ac-b479-21b4f6a67e8e",
            "ad55bc6c-d2c1-483c-aacc-d321b39ce2b5",
            "8ba4e9af-44d2-49b1-a809-bd3d0bdd6178",
            "1d1855dc-103a-47a5-991e-49a72d8a08f1",
            "0627a3e2-fdb6-4f48-b615-a4b1f0d8400a",
            "7d64b9b6-f65e-4c69-8bb2-e9c64fa83290",
            "de5d050a-7127-41aa-ae38-b5faaa448162",
            "0202f63a-65e7-4e91-833a-70ed65f6c5f5",
            "b1920602-0844-4b15-9470-e763713b4a7d",
            "ecfe82d4-e422-4654-8b85-126c5df7ff99",
            "f58351d9-adb9-4dc9-8d72-a6e96846fbea",
            "bcb6d193-3cdd-4184-936c-cb1fece218a7",
            "54fa1aea-67a0-47eb-9b97-dcb1790325d6",
            "5f29d572-adeb-43fc-8a5f-6a99150c4476",
            "688490f6-83a4-4e1d-b55a-7a186c3ef107",
            "0485d096-8f0e-439d-b97d-f9795cbec7e2",
            "0d4461c7-13f2-49e0-b31f-7cbd9b20c585",
            "818f74a1-4aa0-46d0-98d3-1d8c28d49de3"
          ],
          "failures": [
            "d6074fd2-10f8-4042-86eb-c840a154c5b1"
          ],
          "pending": [],
          "skipped": [],
          "duration": 391017,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "001003e8-224d-4aae-bcf6-063a73193cc6",
          "title": "Monthly Claims -> OverTime Claims",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-overtime.js",
          "file": "/test/e2e/monthlyclaim/myclaims-overtime.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Check Close Button ",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Check Close Button ",
              "timedOut": false,
              "duration": 11680,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn_Assertion()",
              "err": {},
              "uuid": "c2f15e48-89cf-4b6f-9003-639d8a387295",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Check Cancel Button ",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Check Cancel Button ",
              "timedOut": false,
              "duration": 11735,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-11' where id = 1;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 780 , \"date\" = '2023-09-12' where id = 2;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-13' where id = 3;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-14' where id = 4;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-15' where id = 5;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-15' where id = 6;`\n\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "62386d44-5fd6-498a-80f1-4649e4b3b0ad",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to submit Overtime",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to submit Overtime",
              "timedOut": false,
              "duration": 31972,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\nawait overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {
                "message": "AssertionError: '' == 'Claim submitted successfully!'",
                "estack": "AssertionError [ERR_ASSERTION]: '' == 'Claim submitted successfully!'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/monthlyclaim/myclaims-overtime.js:99:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "+ Claim submitted successfully!\n"
              },
              "uuid": "88b95868-1bb6-4ba9-adb3-b7087a6cbee0",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details and Plus Icon",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details and Plus Icon",
              "timedOut": false,
              "duration": 13690,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10206ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10206ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "12587449-d0c5-4347-8ce6-5083cadeca6a",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Delete Button",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Delete Button",
              "timedOut": false,
              "duration": 13694,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_DeleteButton(0)\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, button[aria-label='Delete'])\nWait timed out after 10207ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, button[aria-label='Delete'])\nWait timed out after 10207ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "22fedd10-f66b-4425-8a2d-aed97b9d2775",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Overtime",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Submit Overtime",
              "timedOut": false,
              "duration": 31820,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\nawait overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {
                "message": "AssertionError: '' == 'Claim submitted successfully!'",
                "estack": "AssertionError [ERR_ASSERTION]: '' == 'Claim submitted successfully!'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/monthlyclaim/myclaims-overtime.js:152:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "+ Claim submitted successfully!\n"
              },
              "uuid": "a432d7c6-2781-4b71-b357-003f76c084ad",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to click Show Details",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to click Show Details",
              "timedOut": false,
              "duration": 24571,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"managerId\" = 9429 WHERE \"employeeId\" = 9429;`,\n    `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'project_manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 118 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = 2 WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.wait(5000)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(8000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10004ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10004ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d004365b-33ee-4d40-ab45-87544e8d9e86",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Filter Button",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Filter Button",
              "timedOut": false,
              "duration": 20928,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_PMSide_FilterButton();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\nawait claims.HRFilterSearchByClaimType('Overtime');\nawait utilFun.wait(1000);\n/// Start and End Date Filter\nawait claims.MyClaims_Filter_StartDate('2023-01-04');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2024-01-04')\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "2a2d3644-8864-4fd2-b59c-701585577728",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Review Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Review Flow",
              "timedOut": false,
              "duration": 13702,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Action_ReviewIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(5000)\n/// Verify Data in Review Tab\nawait overtime_claims.MyClaims_ReviewTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, [aria-label=\"Add Review\"])\nWait timed out after 10196ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, [aria-label=\"Add Review\"])\nWait timed out after 10196ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "2305a9e5-ac7e-4952-81a2-ee392073118e",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Reject Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Reject Flow",
              "timedOut": false,
              "duration": 13653,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Action_RejectIcon()\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Data in Reject Tab\nawait overtime_claims.MyClaims_RejectTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Reject\"])\nWait timed out after 10186ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Reject\"])\nWait timed out after 10186ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "c51554cd-4d7e-4640-92b9-81ade264b326",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Approve Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Approve Flow",
              "timedOut": false,
              "duration": 15762,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(5000);\nawait overtime_claims.MyClaims_Action_ApproveIcon();\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n/// Verify Data in Approve Tab\nawait overtime_claims.MyClaims_ApproveTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Approve\"])\nWait timed out after 10189ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Approve\"])\nWait timed out after 10189ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "9a5d5506-c1de-454c-bb42-bd95bdd67478",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details",
              "timedOut": false,
              "duration": 15489,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10023ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10023ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d1c31bbb-080f-4303-8799-7978e0f1c93e",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be HR Role Review Flow",
              "timedOut": false,
              "duration": 12576,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\n        await utilFun.wait(2000)\n        await overtime_claims.MyClaims_Action_ReviewIcon(0);\n        await claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\n        await claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\n        const flashMessages = await claims.checkAlert();\n        utilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\n        await utilFun.wait(3000)\n        /// Verify Data in Review Tab\n        await claims.MyClaims_ClaimsRequest_ReviewTab();\n        await claims.Row_Assertion()\n        await utilFun.wait(3000)",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, [aria-label=\"Add Review\"])\nWait timed out after 10093ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, [aria-label=\"Add Review\"])\nWait timed out after 10093ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "cf731b17-6845-40ad-acb7-a5b289f8b13d",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Approve Claim by HR",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Approve Claim by HR",
              "timedOut": false,
              "duration": 20669,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(5000);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_ApproveIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Approve\"])\nWait timed out after 10168ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Approve\"])\nWait timed out after 10168ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "e2bb3ae4-c273-4c01-984c-9aa2fcf24084",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Reject Claim by HR",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Reject Claim by HR",
              "timedOut": false,
              "duration": 15505,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_RejectIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait utilFun.wait(3000)\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Reject\"])\nWait timed out after 10002ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Reject\"])\nWait timed out after 10002ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "b69cc121-a663-4b95-bb91-fd741f3a51f9",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Reject Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Verify Reject Claim in Applicant Side",
              "timedOut": false,
              "duration": 6490,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nconst flashMessages = await overtime_claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Reject for Test Automation');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\nlet query =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);",
              "err": {
                "message": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".ant-table-cell > .MuiButtonBase-root\"}\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".ant-table-cell > .MuiButtonBase-root\"}\n  (Session info: headless chrome=119.0.6045.159)\n    at Object.throwDecodedError (node_modules/selenium-webdriver/lib/error.js:524:15)\n    at parseHttpResponse (node_modules/selenium-webdriver/lib/http.js:601:13)\n    at Executor.execute (node_modules/selenium-webdriver/lib/http.js:529:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async thenableWebDriverProxy.execute (node_modules/selenium-webdriver/lib/webdriver.js:745:17)\n    at async claims.MyClaims_CheckHRStatus_Scroll (test/support/pages/monthlyclaim/claims-pdf.js:270:28)\n    at async Context.<anonymous> (test/e2e/monthlyclaim/myclaims-overtime.js:318:9)",
                "diff": null
              },
              "uuid": "799975b7-c7c7-416c-bbb6-e5cdbbc9a7f5",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit OverTime as a Project Manager (Employee)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Submit OverTime as a Project Manager (Employee)",
              "timedOut": false,
              "duration": 34784,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'project_manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 118 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = 2 WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Sumera Shaikh')\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\nawait overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {
                "message": "AssertionError: '' == 'Claim submitted successfully!'",
                "estack": "AssertionError [ERR_ASSERTION]: '' == 'Claim submitted successfully!'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/monthlyclaim/myclaims-overtime.js:367:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "+ Claim submitted successfully!\n"
              },
              "uuid": "38f9a20d-8a79-44d6-a7b3-cc66d5398ab6",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details (HOD Side)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details (HOD Side)",
              "timedOut": false,
              "duration": 15580,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"managerId\" = 9429 WHERE \"employeeId\" = 9429;`,\n    `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'dev' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 83 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = 9429 WHERE id = 9;',\n    //// change manager id\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(5000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(3000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(2000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10054ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10054ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "caad3030-1c60-482f-a7d1-3a0241d9ca1a",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Filter Button (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Filter Button (HOD Scenario)",
              "timedOut": false,
              "duration": 20747,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_PMSide_FilterButton();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\nawait claims.HRFilterSearchByClaimType('Overtime');\nawait utilFun.wait(1000);\n/// Start and End Date Filter\nawait claims.MyClaims_Filter_StartDate('2024-01-04');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2024-01-04')\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "cdc7b9a0-849b-4387-94a5-a62a091ba04e",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Review Flow (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Review Flow (HOD Scenario)",
              "timedOut": false,
              "duration": 17660,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(3000);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_Action_ReviewIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(5000)\n/// Verify Data in Review Tab\nawait overtime_claims.MyClaims_ReviewTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, [aria-label=\"Add Review\"])\nWait timed out after 10212ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, [aria-label=\"Add Review\"])\nWait timed out after 10212ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "dae05a0c-3a5c-4e16-8ce9-fc21912e9e7b",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Reject Flow (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Reject Flow (HOD Scenario)",
              "timedOut": false,
              "duration": 13625,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Action_RejectIcon()\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Data in Reject Tab\nawait overtime_claims.MyClaims_RejectTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Reject\"])\nWait timed out after 10163ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Reject\"])\nWait timed out after 10163ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "84b0294c-d9b8-412b-97b7-b93057fc852b",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Approve Flow (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Approve Flow (HOD Scenario)",
              "timedOut": false,
              "duration": 15538,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(5000);\nawait overtime_claims.MyClaims_Action_ApproveIcon();\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n/// Verify Data in Approve Tab\nawait overtime_claims.MyClaims_ApproveTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Approve\"])\nWait timed out after 10081ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Approve\"])\nWait timed out after 10081ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "b12e57db-c012-4bd9-aed4-c317a41ede3c",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details (HR Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details (HR Scenario)",
              "timedOut": false,
              "duration": 12642,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10160ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10160ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "4493d3a5-ca48-4ca6-9f41-815c6763489a",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review Flow (HR Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be HR Role Review Flow (HR Scenario)",
              "timedOut": false,
              "duration": 12479,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait overtime_claims.MyClaims_Action_ReviewIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(3000)\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nawait utilFun.wait(3000)",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, [aria-label=\"Add Review\"])\nWait timed out after 10019ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, [aria-label=\"Add Review\"])\nWait timed out after 10019ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "c1592f1f-4fd8-4fbd-9ccd-6136c429bd11",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Approve Claim by HR (HR Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Approve Claim by HR (HR Scenario)",
              "timedOut": false,
              "duration": 20861,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(5000);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_ApproveIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Approve\"])\nWait timed out after 10186ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Approve\"])\nWait timed out after 10186ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "01802585-73e5-4e8d-8d61-393edd426cd1",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Reject Claim by HR",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Reject Claim by HR",
              "timedOut": false,
              "duration": 15740,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_RejectIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait utilFun.wait(3000)\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Reject\"])\nWait timed out after 10165ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Reject\"])\nWait timed out after 10165ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "ef0fec77-8ce7-4f91-a7ab-50e21105ca9a",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Reject Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Verify Reject Claim in Applicant Side",
              "timedOut": false,
              "duration": 6499,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'project_manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 118 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = 2 WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nconst flashMessages = await overtime_claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Reject for Test Automation');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".ant-table-cell > .MuiButtonBase-root\"}\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".ant-table-cell > .MuiButtonBase-root\"}\n  (Session info: headless chrome=119.0.6045.159)\n    at Object.throwDecodedError (node_modules/selenium-webdriver/lib/error.js:524:15)\n    at parseHttpResponse (node_modules/selenium-webdriver/lib/http.js:601:13)\n    at Executor.execute (node_modules/selenium-webdriver/lib/http.js:529:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async thenableWebDriverProxy.execute (node_modules/selenium-webdriver/lib/webdriver.js:745:17)\n    at async claims.MyClaims_CheckHRStatus_Scroll (test/support/pages/monthlyclaim/claims-pdf.js:270:28)\n    at async Context.<anonymous> (test/e2e/monthlyclaim/myclaims-overtime.js:545:9)",
                "diff": null
              },
              "uuid": "08018287-4182-476f-a47e-0984a5de0939",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Download CSV",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Download CSV",
              "timedOut": false,
              "duration": 21177,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_ClaimRequest_DownloadBtn()\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Filter_StartDate('2024-01-01');\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_Filter_EndDate('2024-01-15');\nawait claims.ClaimStatus('Pending');\nawait utilFun.wait(1000);\nawait claims.ClaimStatus('Rejected');\nawait claims.MyClaims_ClaimRequest_DownloadBtn_MainDownloadBtn()\nawait utilFun.wait(1000);\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "6ec3622c-1ffb-4cc6-bcbe-43ee40ed89e5",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 17824,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineDate_ClearHover();\nawait overtime_claims.MyClaims_DeadlineDate_ClearBtn();\nawait overtime_claims.MyClaims_Deadline_Date('2023-03-12 20:48:11');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "636adf01-ef6c-4181-93e0-0109cdbe0758",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit OverTime with Wrong Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Submit OverTime with Wrong Deadline Date",
              "timedOut": false,
              "duration": 22558,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Furqan Aziz')\nawait utilFun.wait(1000);\n// await overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\n// await overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Overtime claim is only allow for current month');\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);",
              "err": {},
              "uuid": "737474dd-d2a0-4380-a8a6-13ac69e050e9",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Set Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Set Deadline Date",
              "timedOut": false,
              "duration": 17826,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        'DELETE FROM employee_claim_deadlines;',\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineDate_ClearHover();\nawait overtime_claims.MyClaims_DeadlineDate_ClearBtn();\nawait overtime_claims.MyClaims_Deadline_Date('2024-03-12 20:48:11');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "a7f04a77-33a2-4d38-8ecf-d539264cc35c",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit OverTime as a SQA Automation(Employee) to Verify with Correct Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Submit OverTime as a SQA Automation(Employee) to Verify with Correct Deadline Date",
              "timedOut": false,
              "duration": 30070,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Furqan Aziz')\n// await utilFun.wait(1000);\n// await overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\n// await overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');\n let querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n        'DELETE FROM employee_claim_deadlines;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "b8792670-74da-41d7-b6a3-ca40ac67ba2b",
              "parentUUID": "001003e8-224d-4aae-bcf6-063a73193cc6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c2f15e48-89cf-4b6f-9003-639d8a387295",
            "62386d44-5fd6-498a-80f1-4649e4b3b0ad",
            "2a2d3644-8864-4fd2-b59c-701585577728",
            "cdc7b9a0-849b-4387-94a5-a62a091ba04e",
            "6ec3622c-1ffb-4cc6-bcbe-43ee40ed89e5",
            "636adf01-ef6c-4181-93e0-0109cdbe0758",
            "737474dd-d2a0-4380-a8a6-13ac69e050e9",
            "a7f04a77-33a2-4d38-8ecf-d539264cc35c",
            "b8792670-74da-41d7-b6a3-ca40ac67ba2b"
          ],
          "failures": [
            "88b95868-1bb6-4ba9-adb3-b7087a6cbee0",
            "12587449-d0c5-4347-8ce6-5083cadeca6a",
            "22fedd10-f66b-4425-8a2d-aed97b9d2775",
            "a432d7c6-2781-4b71-b357-003f76c084ad",
            "d004365b-33ee-4d40-ab45-87544e8d9e86",
            "2305a9e5-ac7e-4952-81a2-ee392073118e",
            "c51554cd-4d7e-4640-92b9-81ade264b326",
            "9a5d5506-c1de-454c-bb42-bd95bdd67478",
            "d1c31bbb-080f-4303-8799-7978e0f1c93e",
            "cf731b17-6845-40ad-acb7-a5b289f8b13d",
            "e2bb3ae4-c273-4c01-984c-9aa2fcf24084",
            "b69cc121-a663-4b95-bb91-fd741f3a51f9",
            "799975b7-c7c7-416c-bbb6-e5cdbbc9a7f5",
            "38f9a20d-8a79-44d6-a7b3-cc66d5398ab6",
            "caad3030-1c60-482f-a7d1-3a0241d9ca1a",
            "dae05a0c-3a5c-4e16-8ce9-fc21912e9e7b",
            "84b0294c-d9b8-412b-97b7-b93057fc852b",
            "b12e57db-c012-4bd9-aed4-c317a41ede3c",
            "4493d3a5-ca48-4ca6-9f41-815c6763489a",
            "c1592f1f-4fd8-4fbd-9ccd-6136c429bd11",
            "01802585-73e5-4e8d-8d61-393edd426cd1",
            "ef0fec77-8ce7-4f91-a7ab-50e21105ca9a",
            "08018287-4182-476f-a47e-0984a5de0939"
          ],
          "pending": [],
          "skipped": [],
          "duration": 569546,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "69edac50-f142-4669-bac2-0e9b4186765d",
          "title": "Monthly Claims -> Personal Development Fund",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-pdf.js",
          "file": "/test/e2e/monthlyclaim/myclaims-pdf.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able one File Upload and close button in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be able one File Upload and close button in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "a12f1cd9-d040-4baa-9666-1632f7a557d7",
              "parentUUID": "69edac50-f142-4669-bac2-0e9b4186765d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able multiple File Upload & Cancel Button in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be able multiple File Upload & Cancel Button in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "0d7d6545-cb66-41d6-a650-8f0d91014135",
              "parentUUID": "69edac50-f142-4669-bac2-0e9b4186765d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "6fdfa072-4489-47bc-b3ba-b2f88883aac4",
              "parentUUID": "69edac50-f142-4669-bac2-0e9b4186765d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Delete Claim in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be Delete Claim in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "6bd54899-c94c-45cb-9eac-787834f8b9d1",
              "parentUUID": "69edac50-f142-4669-bac2-0e9b4186765d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "3afc3943-a0be-4b51-9186-122043693dfb",
              "parentUUID": "69edac50-f142-4669-bac2-0e9b4186765d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "499a956a-0e4e-4d07-8909-662e4b165689",
              "parentUUID": "69edac50-f142-4669-bac2-0e9b4186765d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Edit Claim of Personal Development Allowance",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Edit Claim of Personal Development Allowance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "47debdb0-8f48-4b9b-9622-4e5e0e327a50",
              "parentUUID": "69edac50-f142-4669-bac2-0e9b4186765d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reviews Chart",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Reviews Chart",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "0fcf9097-ddd8-41f4-84fe-d4d8185ce176",
              "parentUUID": "69edac50-f142-4669-bac2-0e9b4186765d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Add Reviews",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Add Reviews",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e439f99d-4098-461e-a9d8-9f383a40187e",
              "parentUUID": "69edac50-f142-4669-bac2-0e9b4186765d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Approve Button",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Approve Button",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "a5259455-94c7-4a80-8ccc-15f924057553",
              "parentUUID": "69edac50-f142-4669-bac2-0e9b4186765d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review See Button in Approve Tab",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Review See Button in Approve Tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "2736412c-0972-4a6f-a3c2-c142b9fb5eec",
              "parentUUID": "69edac50-f142-4669-bac2-0e9b4186765d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reject Button",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Reject Button",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "68c8af64-a3a0-4e8f-9ba3-eda9fd855273",
              "parentUUID": "69edac50-f142-4669-bac2-0e9b4186765d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reason See in Reject Tab ",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Reason See in Reject Tab ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "ecae9dce-df4a-40dc-9794-87d737d3080a",
              "parentUUID": "69edac50-f142-4669-bac2-0e9b4186765d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "038cfbb4-4400-4057-ae55-328dbf3d16af",
              "parentUUID": "69edac50-f142-4669-bac2-0e9b4186765d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "72ab5e80-963e-44ef-ad92-8c7740494b22",
              "parentUUID": "69edac50-f142-4669-bac2-0e9b4186765d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund for Verify Incorrect Deadline",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund for Verify Incorrect Deadline",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "702741e7-58e5-47b4-8203-fcae1fd17b22",
              "parentUUID": "69edac50-f142-4669-bac2-0e9b4186765d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "0b3b2c88-e24e-4dfa-9cca-199f9ad6bb50",
              "parentUUID": "69edac50-f142-4669-bac2-0e9b4186765d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund for Verify Correct Deadline",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund for Verify Correct Deadline",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e84da686-c69d-4bf9-89cb-86f99e2c910b",
              "parentUUID": "69edac50-f142-4669-bac2-0e9b4186765d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "a12f1cd9-d040-4baa-9666-1632f7a557d7",
            "0d7d6545-cb66-41d6-a650-8f0d91014135",
            "6fdfa072-4489-47bc-b3ba-b2f88883aac4",
            "6bd54899-c94c-45cb-9eac-787834f8b9d1",
            "3afc3943-a0be-4b51-9186-122043693dfb",
            "499a956a-0e4e-4d07-8909-662e4b165689",
            "47debdb0-8f48-4b9b-9622-4e5e0e327a50",
            "0fcf9097-ddd8-41f4-84fe-d4d8185ce176",
            "e439f99d-4098-461e-a9d8-9f383a40187e",
            "a5259455-94c7-4a80-8ccc-15f924057553",
            "2736412c-0972-4a6f-a3c2-c142b9fb5eec",
            "68c8af64-a3a0-4e8f-9ba3-eda9fd855273",
            "ecae9dce-df4a-40dc-9794-87d737d3080a",
            "038cfbb4-4400-4057-ae55-328dbf3d16af",
            "72ab5e80-963e-44ef-ad92-8c7740494b22",
            "702741e7-58e5-47b4-8203-fcae1fd17b22",
            "0b3b2c88-e24e-4dfa-9cca-199f9ad6bb50",
            "e84da686-c69d-4bf9-89cb-86f99e2c910b"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
          "title": "Portfolio Module",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/portfolio/spec-1-portfolio.js",
          "file": "/test/e2e/portfolio/spec-1-portfolio.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Portfolio Module\"",
              "fullTitle": "Portfolio Module \"before all\" hook in \"Portfolio Module\"",
              "timedOut": false,
              "duration": 10174,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet portfolioId = await utilFun.getFromDatabase(`SELECT id FROM project_portfolios WHERE \"name\" = '${portfolioName}';`)\nif(portfolioId.rowCount !== 0){\nconst query = [\n  `DELETE FROM project_portfolio_attachments WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n  `DELETE FROM project_portfolio_skills WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n  `DELETE FROM project_portfolio_employees WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n  `DELETE FROM project_portfolios WHERE id = ${portfolioId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n  }",
              "err": {},
              "uuid": "2cced502-936d-4f3c-a3d0-b9db04a6b7e9",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Portfolio Module\"",
              "fullTitle": "Portfolio Module \"before each\" hook in \"Portfolio Module\"",
              "timedOut": false,
              "duration": 4397,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/portfolio');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "4442decb-f1ec-48c8-9314-26a974a307a7",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if Portfolio is showing",
              "fullTitle": "Portfolio Module should check if Portfolio is showing",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/portfolio');",
              "err": {},
              "uuid": "3612056c-32e5-4c94-84f3-85cf953d0ec3",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add Portfolio",
              "fullTitle": "Portfolio Module should able to Add Portfolio",
              "timedOut": false,
              "duration": 22969,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickAddPorfolioBtn()\nawait portfolio.typeProjectName(portfolioName)\nawait portfolio.pasteLiveLink('http://google.com')\nawait portfolio.selectProjectStatus('Active')\nawait portfolio.selectPOC('Muhammad Bilal Rafaqat')\nawait portfolio.selectIndustry('Gaming')\nawait portfolio.selectProjectNature('Web App')\nawait portfolio.typeProjectDescription('testing')\nawait portfolio.clickYesCheckbox()\nawait portfolio.clickNotNowCheckbox()\nawait portfolio.clickFormNxtBtn()\nawait portfolio.clickFormNewNxtBtn()\nawait portfolio.selectEngagementModel('Fixed Term')\nawait portfolio.selectClientRegion('Germany')\nawait portfolio.selectDivision('InvoTeams')\nawait portfolio.selectTechStack('Node Js')\nawait portfolio.typeTag('testing')\nawait portfolio.selectResource('Hello')\nawait portfolio.selectRole('Lead Developer')\nawait portfolio.clickForm1NxtBtn()\nawait portfolio.selectDemoLinkUpdate('Web App')\nawait portfolio.typeDemoLinkLink('link')\nawait portfolio.typeDemoLinkDetails('testing')\nawait portfolio.selectAchievementsUpdate('Awards')\nawait portfolio.typeAchievementsLink('Link')\nawait portfolio.typeAchievementsDetails('testing')\nawait portfolio.typeGitUpdate('test')\nawait portfolio.typeGitLink('link')\nawait portfolio.typeGitDetails('testing')\nawait portfolio.clickForm2NxtBtn()\nawait portfolio.typeVideoTitle('Video Title')\nawait portfolio.uploadVideoFile()\nawait portfolio.typeDocTitle('Doc Title')\nawait portfolio.uploadDocFile()\nawait portfolio.typeProblemsOrChallenges('testing')\nawait portfolio.typeSolutions('testing')\nawait portfolio.clickForm3SubmitBtn()\nconst alertText = await portfolio.checkAlert();\nutilFun.assertEql(alertText, 'Portfolio has been saved successfully');",
              "err": {},
              "uuid": "0797198c-9386-4ef2-ad08-138d3c871aeb",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if Portfolio is Added or Not",
              "fullTitle": "Portfolio Module should able to check if Portfolio is Added or Not",
              "timedOut": false,
              "duration": 1169,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.selectPortfolioName(portfolioName)\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {},
              "uuid": "fcfaf8ef-d2c0-4009-9528-3af77844ba28",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Update Portfolio",
              "fullTitle": "Portfolio Module should able to Update Portfolio",
              "timedOut": false,
              "duration": 27692,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.selectPortfolioName(portfolioName)\nawait portfolio.clickEditButton()\nawait portfolio.pasteLiveLink('http://google2.com')\nawait portfolio.selectProjectStatus('Closing')\nawait portfolio.selectPOC('Muhammad Bilal Rafaqat')\nawait portfolio.selectIndustry('Education')\nawait portfolio.selectProjectNature('IOS App')\nawait portfolio.typeProjectDescription('testing updated')\nawait portfolio.clickYesCheckbox()\nawait portfolio.clickNotNowCheckbox()\nawait portfolio.clickFormNxtBtn()\nawait portfolio.clickFormNewNxtBtn()\nawait portfolio.selectEngagementModel('Fixed Term')\nawait portfolio.selectClientRegion('Pakistan')\nawait portfolio.selectDivision('Invogame')\nawait portfolio.selectTechStack('Frontend')\nawait portfolio.typeTag('Updated Tag')\nawait portfolio.selectResource('Hello')\nawait portfolio.selectRole('Lead Developer')\nawait portfolio.clickForm1NxtBtn()\nawait portfolio.selectDemoLinkUpdate('Desktop App')\nawait portfolio.typeDemoLinkLink('updated')\nawait portfolio.typeDemoLinkDetails('update')\nawait portfolio.selectAchievementsUpdate('Shoutouts')\nawait portfolio.typeAchievementsLink('Link updated')\nawait portfolio.typeAchievementsDetails('testing updated')\nawait portfolio.typeGitUpdate('test updated')\nawait portfolio.typeGitLink('link updated')\nawait portfolio.typeGitDetails('testing updated')\nawait portfolio.clickForm2NxtBtn()\nawait portfolio.typeVideoTitle('Video Title Updated')\nawait portfolio.uploadVideoFile()\nawait portfolio.typeDocTitle('Doc Title updated')\nawait portfolio.uploadDocFile()\nawait portfolio.typeProblemsOrChallenges('testing updated')\nawait portfolio.typeSolutions('testing updated')\nawait portfolio.clickForm3SubmitBtn()\nconst alertText = await portfolio.checkAlert();\nutilFun.assertEql(alertText, 'Portfolio has been updated successfully');",
              "err": {},
              "uuid": "84b59d59-c39a-45f1-b69c-ba21cd64b3b4",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Name",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Name",
              "timedOut": false,
              "duration": 1153,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.selectPortfolioName(portfolioName)\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {},
              "uuid": "68364a84-8ec6-43ca-898f-5196deb65c9b",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by POC",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by POC",
              "timedOut": false,
              "duration": 1181,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByPOC('Muhammad Bilal Rafaqat')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/portfolio/spec-1-portfolio.js:142:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "beb28a27-6924-475e-af6a-980a04560484",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Industry",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Industry",
              "timedOut": false,
              "duration": 1244,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByIndustry('Gaming')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Gaming'), `Expected text not found.`);",
              "err": {},
              "uuid": "e57d2b44-dccb-4cd8-819e-8347ea0bc2cd",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Tech Stack",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Tech Stack",
              "timedOut": false,
              "duration": 1723,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByTechstack('Node Js')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Node Js'), `Expected text not found.`);",
              "err": {},
              "uuid": "130a362c-c287-4b05-984c-4d11db734f8a",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Resource",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Resource",
              "timedOut": false,
              "duration": 4356,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByResources('Hello')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {},
              "uuid": "cf0eb3fa-b99f-4573-a517-bc84acc8c0e3",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Tags",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Tags",
              "timedOut": false,
              "duration": 1083,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByTags('testing')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('testing'), `Expected text not found.`);",
              "err": {},
              "uuid": "2078bca6-4203-48bb-8d76-f54275b22f1a",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Project Nature",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Project Nature",
              "timedOut": false,
              "duration": 1412,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByProjectNature('Web App')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Web App'), `Expected text not found.`);",
              "err": {},
              "uuid": "6b7b4a27-3c42-4df3-a27e-724ebfb71982",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Region",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Region",
              "timedOut": false,
              "duration": 4255,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByRegion('Pakistan')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Pakistan'), `Expected text not found.`);",
              "err": {},
              "uuid": "5e59c4cb-d738-4b8a-a498-36c5e20943a9",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Date",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Date",
              "timedOut": false,
              "duration": 1235,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByDate('Last 2 Weeks')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/portfolio/spec-1-portfolio.js:184:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "6b942457-bd6b-4246-ba48-bcca902c08aa",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Division Colum",
              "fullTitle": "Portfolio Module should able to Hide Division Colum",
              "timedOut": false,
              "duration": 949,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Division')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 14, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Division'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "ecd95d85-2361-4631-af8d-3d831895323b",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Project Nature Colum",
              "fullTitle": "Portfolio Module should able to Hide Project Nature Colum",
              "timedOut": false,
              "duration": 1012,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Project Nature')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 13, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Project Nature'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "84d376f3-45df-4da5-92c1-53babb44307d",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Tech Stack Colum",
              "fullTitle": "Portfolio Module should able to Hide Tech Stack Colum",
              "timedOut": false,
              "duration": 914,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Tech Stack')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 12, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Tech Stack'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "d713b9ce-51d6-4d04-a41a-a2500016d710",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide POC Colum",
              "fullTitle": "Portfolio Module should able to Hide POC Colum",
              "timedOut": false,
              "duration": 813,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('POC')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 11, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('POC'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "b2f866ed-fe0c-4619-9a36-3e7058f69061",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Resources Colum",
              "fullTitle": "Portfolio Module should able to Hide Resources Colum",
              "timedOut": false,
              "duration": 869,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Resources')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 10, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Resources'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "6ae4963c-cfcf-4351-b216-b83dc375ab8e",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Tags Colum",
              "fullTitle": "Portfolio Module should able to Hide Tags Colum",
              "timedOut": false,
              "duration": 791,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Tags')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 9, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Tags'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "b7dabb6a-900c-4f99-af8a-9966ea18bc10",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Industry Colum",
              "fullTitle": "Portfolio Module should able to Hide Industry Colum",
              "timedOut": false,
              "duration": 772,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Industry')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 8, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Industry'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "963e0232-60e9-450c-a290-1d8392e7f60e",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Region Colum",
              "fullTitle": "Portfolio Module should able to Hide Region Colum",
              "timedOut": false,
              "duration": 657,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Region')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 7, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Region'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "0c84b413-fbc5-4984-82c1-561ae539434d",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Attachments Colum",
              "fullTitle": "Portfolio Module should able to Hide Attachments Colum",
              "timedOut": false,
              "duration": 647,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Attachments')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 6, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Attachments'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "8929650f-4970-43e8-8b57-8603b85ec014",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Achievements Colum",
              "fullTitle": "Portfolio Module should able to Hide Achievements Colum",
              "timedOut": false,
              "duration": 637,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Achievements')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 5, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Achievements'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "8edc1a2a-09ff-4175-81d0-9f4b86b4e23b",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Git Access Colum",
              "fullTitle": "Portfolio Module should able to Hide Git Access Colum",
              "timedOut": false,
              "duration": 631,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Git Access')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 4, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Git Access'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "02130c4b-1f15-4dca-891a-e366f1f8fb02",
              "parentUUID": "5ad641e8-ae11-4741-9151-c4fed59d2f2d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3612056c-32e5-4c94-84f3-85cf953d0ec3",
            "0797198c-9386-4ef2-ad08-138d3c871aeb",
            "fcfaf8ef-d2c0-4009-9528-3af77844ba28",
            "84b59d59-c39a-45f1-b69c-ba21cd64b3b4",
            "68364a84-8ec6-43ca-898f-5196deb65c9b",
            "e57d2b44-dccb-4cd8-819e-8347ea0bc2cd",
            "130a362c-c287-4b05-984c-4d11db734f8a",
            "cf0eb3fa-b99f-4573-a517-bc84acc8c0e3",
            "2078bca6-4203-48bb-8d76-f54275b22f1a",
            "6b7b4a27-3c42-4df3-a27e-724ebfb71982",
            "5e59c4cb-d738-4b8a-a498-36c5e20943a9",
            "ecd95d85-2361-4631-af8d-3d831895323b",
            "84d376f3-45df-4da5-92c1-53babb44307d",
            "d713b9ce-51d6-4d04-a41a-a2500016d710",
            "b2f866ed-fe0c-4619-9a36-3e7058f69061",
            "6ae4963c-cfcf-4351-b216-b83dc375ab8e",
            "b7dabb6a-900c-4f99-af8a-9966ea18bc10",
            "963e0232-60e9-450c-a290-1d8392e7f60e",
            "0c84b413-fbc5-4984-82c1-561ae539434d",
            "8929650f-4970-43e8-8b57-8603b85ec014",
            "8edc1a2a-09ff-4175-81d0-9f4b86b4e23b",
            "02130c4b-1f15-4dca-891a-e366f1f8fb02"
          ],
          "failures": [
            "beb28a27-6924-475e-af6a-980a04560484",
            "6b942457-bd6b-4246-ba48-bcca902c08aa"
          ],
          "pending": [],
          "skipped": [],
          "duration": 78173,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "3071d9a8-45c1-4a19-b036-66738f2bc525",
          "title": "Projects -> All Projects",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/projects/spec-1-allprojects.js",
          "file": "/test/e2e/projects/spec-1-allprojects.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Projects -> All Projects\"",
              "fullTitle": "Projects -> All Projects \"before all\" hook in \"Projects -> All Projects\"",
              "timedOut": false,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\n// await utilFun.login(email, password);",
              "err": {},
              "uuid": "daf048c9-d686-4e48-865b-bfb5bcaea60b",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to check Add Project Button Clickable ",
              "fullTitle": "Projects -> All Projects should able to check Add Project Button Clickable ",
              "timedOut": false,
              "duration": 4180,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9429;`,\n  `UPDATE employees SET \"workAs\" = 'dev' WHERE id = 9429;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9429;`,\n  `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n  `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n  'UPDATE departments SET \"hodId\" = 9429 WHERE id = 9;',\n  //// change manager id\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_AddProject_Btn();\nawait projects.checkModelIsVisible();",
              "err": {},
              "uuid": "f252dcbd-7876-4c56-893b-217f94afba99",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Add Button is Disable ",
              "fullTitle": "Projects -> All Projects should able to Verify Add Button is Disable ",
              "timedOut": false,
              "duration": 4986,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_AddProject_Btn();\nawait utilFun.wait(1000);\nawait projects.Projects_AddProject_AddBtn_Disable();",
              "err": {},
              "uuid": "3c0d1566-eb8f-4e44-86fd-29a5f4e8d03d",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add Project",
              "fullTitle": "Projects -> All Projects should able to Add Project",
              "timedOut": false,
              "duration": 11487,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM projects WHERE \"name\" = 'Appeo';`);\nlet portfolioId = await utilFun.getFromDatabase(`SELECT id FROM project_portfolios WHERE \"name\" = 'Appeo';`);\nif (resourceId.rowCount !== 0) {\n  let query = [\n    `DELETE FROM \"project_portfolio_skills\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n    `DELETE FROM \"project_timelines\" WHERE \"projectId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"project_portfolio_employees\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n    `DELETE FROM \"project_portfolios\" WHERE \"projectId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"projects\" WHERE \"id\" = ${resourceId.rows[0].id};`,\n  ];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_AddProject_Btn();\nawait projects.Projects_AddProject_ProjectName('Appeo');\nawait projects.Projects_AddProject_Divison('InvoLane');\nawait projects.Projects_AddProject_Status('Closing');\nawait projects.Projects_AddProject_AddBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project is created successfully.');",
              "err": {},
              "uuid": "80635aee-008a-4bac-b579-804db35d7186",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify if Project is added",
              "fullTitle": "Projects -> All Projects should able to Verify if Project is added",
              "timedOut": false,
              "duration": 6805,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Appeo'), `Expected text not found.`);",
              "err": {},
              "uuid": "c50c9f2e-4f2d-4868-986e-8eecf04361c3",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Division",
              "fullTitle": "Projects -> All Projects should able to Edit Division",
              "timedOut": false,
              "duration": 11041,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditDivision_Hover();\nawait projects.Projects_ProjectDetail_EditDivision();\nawait projects.selectInput('Invogame');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "52b9f28a-b298-43a5-b77d-d34af2950cb0",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Country",
              "fullTitle": "Projects -> All Projects should able to Edit Country",
              "timedOut": false,
              "duration": 10970,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditCountry_Hover();\nawait projects.Projects_ProjectDetail_EditCountryClick();\nawait projects.selectInput('Egypt');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "4958979f-2efa-4184-90d8-31e1edc815a4",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Status",
              "fullTitle": "Projects -> All Projects should able to Edit Status",
              "timedOut": false,
              "duration": 10975,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditStatusHover();\nawait projects.Projects_ProjectDetail_EditStatusClick();\nawait projects.selectInput('Closing');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "68f964c4-a518-4ee6-a122-1cce83cfd374",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Project Manager",
              "fullTitle": "Projects -> All Projects should able to Edit Project Manager",
              "timedOut": false,
              "duration": 11101,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditProjectManagerHover();\nawait projects.Projects_ProjectDetail_EditProjectManagerClick();\nawait projects.selectInput('Muhammad Bilal Rafaqat');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {
                "message": "AssertionError: '' == 'Updated successfully.'",
                "estack": "AssertionError [ERR_ASSERTION]: '' == 'Updated successfully.'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/projects/spec-1-allprojects.js:113:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "+ Updated successfully.\n"
              },
              "uuid": "c89fe2a4-78c7-488f-a4eb-5e3c2dd208de",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Contract",
              "fullTitle": "Projects -> All Projects should able to Edit Contract",
              "timedOut": false,
              "duration": 10924,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditContractHover();\nawait projects.Projects_ProjectDetail_EditContractClick();\nawait projects.selectInput('Agency to Client');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "47c38bf4-a6aa-43d7-a8ad-e6dab8ea4ce8",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit PM Introduced",
              "fullTitle": "Projects -> All Projects should able to Edit PM Introduced",
              "timedOut": false,
              "duration": 10986,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditPMIntroHover();\nawait projects.Projects_ProjectDetail_EditPMIntroClick();\nawait projects.selectInput('No');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "16b6ba51-0aec-4d70-b131-907606de3563",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Dev Introduced",
              "fullTitle": "Projects -> All Projects should able to Edit Dev Introduced",
              "timedOut": false,
              "duration": 11093,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditDevIntroHover();\nawait projects.Projects_ProjectDetail_EditDevIntroClick();\nawait projects.selectInput('Yes');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "45b10181-edef-4968-bc07-d8a53a2d4705",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Engagement",
              "fullTitle": "Projects -> All Projects should able to Edit Engagement",
              "timedOut": false,
              "duration": 10370,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditEngagementHover();\nawait projects.Projects_ProjectDetail_EditEngagementClick();\nawait projects.selectInput('Hourly');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "fd16ca08-e09d-4821-938a-300345f99945",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Billing Cycle",
              "fullTitle": "Projects -> All Projects should able to Edit Billing Cycle",
              "timedOut": false,
              "duration": 10888,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditBillingCycleHover();\nawait projects.Projects_ProjectDetail_EditBillingCycleClick();\nawait projects.selectInput('Weekly');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "1d14b72d-cc50-4d7d-9950-a7e728fe71d1",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit BD Member",
              "fullTitle": "Projects -> All Projects should able to Edit BD Member",
              "timedOut": false,
              "duration": 11095,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditBDMemberHover();\nawait projects.Projects_ProjectDetail_EditBDMember();\nawait projects.selectInput('Ahsan Butt');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "5aac8866-ba4b-451d-9ba0-e85010c7bef6",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Communication Mode",
              "fullTitle": "Projects -> All Projects should able to Edit Communication Mode",
              "timedOut": false,
              "duration": 10889,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditCommunicationModeHover();\nawait projects.Projects_ProjectDetail_EditCommunicationModeClick();\nawait projects.selectInput('Email');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "a98cb1f4-c725-473b-b447-b6599711d5eb",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Billing Profile",
              "fullTitle": "Projects -> All Projects should able to Edit Billing Profile",
              "timedOut": false,
              "duration": 10877,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditBillingProfileHover();\nawait projects.Projects_ProjectDetail_EditBillingProfile();\nawait projects.selectInput('Cash');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "682bd18f-feb5-4a43-b672-69380e7d9cd4",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Billing Channel",
              "fullTitle": "Projects -> All Projects should able to Edit Billing Channel",
              "timedOut": false,
              "duration": 11050,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditBillingChannelHover();\nawait projects.Projects_ProjectDetail_EditBillingChannelClick();\nawait projects.selectInput('Upwork Profile');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');\n//'Billing profile is required for this billing channel!!');",
              "err": {},
              "uuid": "2a5ffc36-7cd0-4217-a72e-7b1ec891cf02",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document & Cancel Button",
              "fullTitle": "Projects -> All Projects should able to Upload Document & Cancel Button",
              "timedOut": false,
              "duration": 10704,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadPhoto(0);\nawait projects.Projects_ProjectDetail_UploadDocument_AddRow(0);\nawait projects.Projects_ProjectDetail_UploadDocument_RemoveRow(1);\nawait projects.Projects_CancelBtn();",
              "err": {},
              "uuid": "17e91131-56cc-4a8a-9eb0-6364309aae99",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document  & Disable Submit Button ",
              "fullTitle": "Projects -> All Projects should able to Upload Document  & Disable Submit Button ",
              "timedOut": false,
              "duration": 10152,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_DisableSubmitBtn();",
              "err": {},
              "uuid": "d596ca03-c298-47df-acd4-254133887901",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document Photo & Submit Button ",
              "fullTitle": "Projects -> All Projects should able to Upload Document Photo & Submit Button ",
              "timedOut": false,
              "duration": 14632,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadPhoto(0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');",
              "err": {},
              "uuid": "ebe7c942-f09c-4fbb-b518-37e7d9a8cda3",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Download Documents ",
              "fullTitle": "Projects -> All Projects should able to Download Documents ",
              "timedOut": false,
              "duration": 6806,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_DownloadDocumentBtn(0);\nawait projects.Projects_DownloadDocumentBtn(1);",
              "err": {},
              "uuid": "7d3782b2-c9f1-43cb-a4a6-b429de8b7196",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document Link & Cancel Button",
              "fullTitle": "Projects -> All Projects should able to Upload Document Link & Cancel Button",
              "timedOut": false,
              "duration": 10617,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('Link', 1);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_ProjectDetail_UploadDocument_Field('www.invohub.com', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_AddRow(0);\nawait projects.Projects_ProjectDetail_UploadDocument_RemoveRow(1);\nawait projects.Projects_CancelBtn();",
              "err": {},
              "uuid": "4331c051-4622-46b0-b0d8-63b53f6bbdb1",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document Link & Submit Button ",
              "fullTitle": "Projects -> All Projects should able to Upload Document Link & Submit Button ",
              "timedOut": false,
              "duration": 14719,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('Link', 1);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_ProjectDetail_UploadDocument_Field('www.invohub.com', 0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');",
              "err": {},
              "uuid": "f18c3571-cb67-4383-ac4e-ac991f1b7c31",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete Documents & Cancel Button ",
              "fullTitle": "Projects -> All Projects should able to Delete Documents & Cancel Button ",
              "timedOut": false,
              "duration": 6924,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_CancelBtn();",
              "err": {},
              "uuid": "8a6bfb56-703c-4c46-9559-90cc1ca64b8f",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete Documents & Ok Button ",
              "fullTitle": "Projects -> All Projects should able to Delete Documents & Ok Button ",
              "timedOut": false,
              "duration": 14953,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Document removed from project successfully.');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Document removed from project successfully.');",
              "err": {},
              "uuid": "4df223c3-2ee3-4bbb-85b3-eee8c8708e0d",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document PDF & Submit Button & Delete PDF ",
              "fullTitle": "Projects -> All Projects should able to Upload Document PDF & Submit Button & Delete PDF ",
              "timedOut": false,
              "duration": 19102,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document PDF Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadPDF(0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Document removed from project successfully.');",
              "err": {},
              "uuid": "6ee220a9-05b2-4f22-8b23-33a609325995",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document Doc & Submit Button & Delete Doc ",
              "fullTitle": "Projects -> All Projects should able to Upload Document Doc & Submit Button & Delete Doc ",
              "timedOut": false,
              "duration": 18709,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Doc Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadDoc(0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Document removed from project successfully.');",
              "err": {},
              "uuid": "86c5ce51-2511-4b45-9c1b-7c22fc99b77b",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document xlsx & Submit Button & Delete xlsx ",
              "fullTitle": "Projects -> All Projects should able to Upload Document xlsx & Submit Button & Delete xlsx ",
              "timedOut": false,
              "duration": 18907,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Xlsx Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadXlsx(0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Document removed from project successfully.');",
              "err": {},
              "uuid": "2038bd9e-39c8-4ec9-91a1-3f4c7ace823d",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add Resource in Project ",
              "fullTitle": "Projects -> All Projects should able to Add Resource in Project ",
              "timedOut": false,
              "duration": 28095,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(1);\nawait projects.RoleProject('Lead SQA');\nawait projects.ResourceName('Ahmed Ali');\nawait projects.EngagementCapicity('5~6 hours');\nawait projects.EngagementMode('Parked');\nawait projects.Projects_ProjectDetail_AddResource_Alias('Input Alias');\nawait projects.Projects_SubmitBtns();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Resource added successfully.');",
              "err": {},
              "uuid": "05bc872d-fc3a-4a87-bbdf-af5b58720665",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Resource Engagement Mode ",
              "fullTitle": "Projects -> All Projects should able to Edit Resource Engagement Mode ",
              "timedOut": false,
              "duration": 10995,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_Resource_EngagementModeHover();\nawait projects.Projects_Resource_EngagementModeEdit();\nawait projects.ResourceEngagementMode('Training');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "396e7b12-6b01-4253-b227-6faa9d0fca72",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Resource Engagement Capicity ",
              "fullTitle": "Projects -> All Projects should able to Edit Resource Engagement Capicity ",
              "timedOut": false,
              "duration": 11077,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.ResourceEngagementCapicity('Fully Occupied');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "8f01f6c0-b4f8-48d5-943a-2b7869e34136",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Alias",
              "fullTitle": "Projects -> All Projects should able to Edit Alias",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "1eb33729-08b7-4b7e-906b-55da81d2faf9",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete Resource",
              "fullTitle": "Projects -> All Projects should able to Delete Resource",
              "timedOut": false,
              "duration": 10668,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Resource removed from project successfully.');",
              "err": {},
              "uuid": "ef7eb511-b2ea-4c2f-8863-7a100a7a4fed",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Project",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Project",
              "timedOut": false,
              "duration": 6693,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Appeo'), `Expected text not found.`);",
              "err": {},
              "uuid": "7f576cb4-e1fd-401e-8bf5-59a83b160f85",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Manager ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Manager ",
              "timedOut": false,
              "duration": 6909,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Manager', 'Muhammad Bilal Rafaqat');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/projects/spec-1-allprojects.js:399:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "9ec4e075-938c-481c-9e1f-1f4ad49051c1",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Division ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Division ",
              "timedOut": false,
              "duration": 6841,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Division', 'InvoTeams');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('InvoTeams'), `Expected text not found.`);",
              "err": {},
              "uuid": "30ceebc0-3cbd-4631-a13e-3c83e30a2a96",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Status ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Status ",
              "timedOut": false,
              "duration": 6972,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Status', 'Active');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Active'), `Expected text not found.`);",
              "err": {},
              "uuid": "2cca7ce2-2040-48ed-8881-509938215ab0",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by BD Team ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by BD Team ",
              "timedOut": false,
              "duration": 6928,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by BD Team', 'Bd F');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Bd F'), `Expected text not found.`);",
              "err": {},
              "uuid": "9507f60c-8660-4021-bb2d-2bbb318bc7ea",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by BD Member ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by BD Member ",
              "timedOut": false,
              "duration": 6928,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by BD Member', 'Ahsan Butt');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Ahsan Butt'), `Expected text not found.`);",
              "err": {},
              "uuid": "7872e2d3-a725-4ac1-9664-3ab8c567fbbd",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Contract ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Contract ",
              "timedOut": false,
              "duration": 6860,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Contract', 'Agency to Client');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Agency to Client'), `Expected text not found.`);",
              "err": {},
              "uuid": "0ab405d5-b499-4bbd-a900-eaba999fad1a",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Country ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Country ",
              "timedOut": false,
              "duration": 6878,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Country', 'Egypt');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Egypt'), `Expected text not found.`);",
              "err": {},
              "uuid": "d8728fcf-94e1-4a77-9c22-5c27ea423099",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Billing Channel ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Billing Channel ",
              "timedOut": false,
              "duration": 7146,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Billing Channel', 'Upwork Profile');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Upwork Profile'), `Expected text not found.`);",
              "err": {},
              "uuid": "ef6743f2-7066-4cb2-8c6b-01d7a2043aef",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Click Clear Button ",
              "fullTitle": "Projects -> All Projects should able Click Clear Button ",
              "timedOut": false,
              "duration": 6271,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Billing Channel', 'InvoZone Pvt. Ltd. Meezan');\nawait projects.selectFilter_ProjectDetail_Assert('InvoZone Pvt. Ltd. Meezan');\nawait projects.Projects_Filter_ClearBtn();",
              "err": {},
              "uuid": "17857ed4-35ed-432c-92cc-fdf56cb576ae",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Filter Fields ",
              "fullTitle": "Projects -> All Projects should able to Verify Filter Fields ",
              "timedOut": false,
              "duration": 28161,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.selectFilter('Search by Manager', 'Muhammad Bilal Rafaqat');\nawait projects.selectFilter('Search by Division', 'InvoTeams');\nawait projects.selectFilter('Search by Status', 'Active');\nawait projects.selectFilter('Search by BD Team', 'BD F');\nawait projects.selectFilter('Search by BD Member', 'Ahmed Irtza');\nawait projects.selectFilter('Search by Contract', 'Individual to Client');\nawait projects.selectFilter('Search by Country', 'Egypt');\nawait projects.selectFilter('Search by Billing Channel', 'InvoZone Pvt. Ltd. Meezan');\nawait projects.Projects_Filter_ClearBtn();",
              "err": {},
              "uuid": "1ad2c9a4-7123-42b0-8e3e-24d8af8e5314",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Apply Multiple Searches ",
              "fullTitle": "Projects -> All Projects should able to Verify Apply Multiple Searches ",
              "timedOut": false,
              "duration": 49637,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.selectFilter('Search by Manager', 'Muhammad Bilal Rafaqat');\nawait projects.selectFilter('Search by Manager', 'Ali Ahmad');\nawait projects.selectFilter('Search by Division', 'InvoTeams');\nawait projects.selectFilter('Search by Division', 'Invogame');\nawait projects.selectFilter('Search by Status', 'Active');\nawait projects.selectFilter('Search by Status', 'Paused');\nawait projects.selectFilter('Search by BD Team', 'BD F');\nawait projects.selectFilter('Search by BD Team', 'N/A');\nawait projects.selectFilter('Search by BD Member', 'Ahmed Irtza');\nawait projects.selectFilter('Search by BD Member', 'Ahsan Butt');\nawait projects.selectFilter('Search by CSM', 'Areeba Tariq');\nawait projects.selectFilter('Search by CSM', 'Fiza Murad');\nawait projects.selectFilter('Search by Contract', 'Individual to Client');\nawait projects.selectFilter('Search by Contract', 'Agency to Client');\nawait projects.selectFilter('Search by Country', 'Egypt');\nawait projects.selectFilter('Search by Country', 'Pakistan');\nawait projects.selectFilter('Search by Billing Channel', 'InvoZone Pvt. Ltd. Meezan');\nawait projects.selectFilter('Search by Billing Channel', 'N/A');",
              "err": {},
              "uuid": "e5a85487-71d2-468d-ba8a-e8b08e09fcb3",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Click Project Detail",
              "fullTitle": "Projects -> All Projects should able Click Project Detail",
              "timedOut": false,
              "duration": 8015,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "965dc2dc-422e-40e3-91a1-2d8b6a12034b",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Edit Project Name",
              "fullTitle": "Projects -> All Projects should able Edit Project Name",
              "timedOut": false,
              "duration": 24233,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait utilFun.wait(3000)\nawait projects.clickToggleIcon()\nawait projects.Projects_ProjectsDetail_EditProject();\nawait projects.Projects_ProjectsDetail_InputName('test');\nawait projects.Projects_ProjectsDetail_UpdateButton();\nlet flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');\nawait utilFun.wait(2000)\nawait projects.Projects_ProjectsDetail_EditProject();\nawait projects.Projects_ProjectsDetail_InputName_Clear();\nawait projects.Projects_ProjectsDetail_InputName('Appeo');\nawait projects.Projects_ProjectsDetail_UpdateButton();\nflashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "0bb9e5f5-3369-48ea-a0b2-b3526ee54d96",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify if Project is added",
              "fullTitle": "Projects -> All Projects should able to Verify if Project is added",
              "timedOut": false,
              "duration": 7085,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Appeo'), `Expected text not found.`);",
              "err": {},
              "uuid": "c2ef4f0b-3a26-4248-b58f-a18ac48e7d5f",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Click Cancel Btn in Project Detail",
              "fullTitle": "Projects -> All Projects should able Click Cancel Btn in Project Detail",
              "timedOut": false,
              "duration": 11838,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectsDetail_EditProject();\nawait projects.Projects_ProjectsDetail_InputName('test');\nawait projects.Projects_ProjectsDetail_CancelBtn();\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "6bfcb95a-eb71-46e3-9b6d-4f6d9cf89f05",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Add Description in Project Detail",
              "fullTitle": "Projects -> All Projects should able Add Description in Project Detail",
              "timedOut": false,
              "duration": 16087,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectsDetail_Description('Add New Description');\nawait projects.Projects_ProjectsDetail_UpdateBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "e332138d-c93e-435a-a9c1-139660f66de4",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Search Stack in Project Detail",
              "fullTitle": "Projects -> All Projects should able Search Stack in Project Detail",
              "timedOut": false,
              "duration": 10216,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectDetail_Search('Admin');\nawait projects.ProjectDetail_TextAssertion();",
              "err": {},
              "uuid": "f9695dc8-9ceb-4c7a-b3e1-86ada3b46243",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Add Stack in Project Detail",
              "fullTitle": "Projects -> All Projects should able Add Stack in Project Detail",
              "timedOut": false,
              "duration": 4146,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// await projects.Projects_ProjectDetail_Search('Admin');\nawait projects.Projects_ProjectDetail_AddStack();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Skills are updated successfully.');",
              "err": {},
              "uuid": "6d42589d-55a7-4bf9-9e6a-7f09693fa043",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Delete Stack and Click No Btutton",
              "fullTitle": "Projects -> All Projects should able Delete Stack and Click No Btutton",
              "timedOut": false,
              "duration": 322,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await projects.Projects_ProjectDetail_DeleteStack();\nawait projects.Projects_NoBtn();",
              "err": {},
              "uuid": "2823f46d-4b5c-4dab-873b-c72b22ab97d7",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Delete Stack in Project Detail",
              "fullTitle": "Projects -> All Projects should able Delete Stack in Project Detail",
              "timedOut": false,
              "duration": 4582,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await projects.Projects_ProjectDetail_DeleteStack();\nawait projects.Projects_ProjectDetail_YesBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Tech Stack is deleted successfully.');\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "4118b5e0-b999-4610-9b50-e1fc7938fc2e",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Check Filter Btn in Timeline",
              "fullTitle": "Projects -> All Projects should able to Check Filter Btn in Timeline",
              "timedOut": false,
              "duration": 14655,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectDetail_TimelineTab();\nawait projects.Projects_ProjectDetail_TimelineStartDate('28-11-2023');\nawait projects.Projects_ProjectDetail_TimelineEndDate('28-12-2024');\nawait projects.Projects_ProjectDetail_ApplyFilterBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Filtered successfully.');\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "13fc5d52-c9aa-4770-b4f5-be0099e36554",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Clear Button in Project Timeline",
              "fullTitle": "Projects -> All Projects should able Clear Button in Project Timeline",
              "timedOut": false,
              "duration": 14616,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectDetail_TimelineTab();\nawait projects.Projects_ProjectDetail_TimelineStartDate('28-11-2023');\nawait projects.Projects_ProjectDetail_TimelineEndDate('28-12-2024');\nawait projects.Projects_ProjectDetail_ApplyFilterBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Filtered successfully.');\nawait projects.Projects_ProjectDetail_Timeline_ClearBtn();\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "2ad9eee7-75f9-4b0d-b4f7-3a33c4f45d92",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Verify Status in Timeline",
              "fullTitle": "Projects -> All Projects should able Verify Status in Timeline",
              "timedOut": false,
              "duration": 12260,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectDetail_TimelineTab();\nawait utilFun.wait(2000)\nconst name = await projects.Projects_ProjectDetail_Timeline_StatusAssert();\nassert.ok(name.includes('Removed'), `Expected text not found.`);\nconst names = await projects.Projects_ProjectDetail_Timeline_StatusAssert();\nassert.ok(names.includes('Muhammad Zeeshan Ullah'), `Expected text not found.`);",
              "err": {},
              "uuid": "ffc14f60-912b-4939-a992-6713751ad22d",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click History Tab",
              "fullTitle": "Projects -> All Projects should able to Click History Tab",
              "timedOut": false,
              "duration": 3193,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.wait(3000);\nawait projects.Projects_ProjectDetail_HistoryBtn();",
              "err": {},
              "uuid": "5b0c9e21-460a-41fc-8f40-a5c35c59d582",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify notification History Tab",
              "fullTitle": "Projects -> All Projects should able to Verify notification History Tab",
              "timedOut": false,
              "duration": 150,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = await projects.Projects_ProjectDetail_History_Assert();\nassert.ok(\n  name.includes('bilal.rafaqat@invozone.dev has updated the Project Tech Stack by removing the technology named Admin.'),\n  `Expected text not found.`,\n);\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "abff5f1d-cea9-4111-ad84-32e758f29959",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Division in Hide Columns ",
              "fullTitle": "Projects -> All Projects should able to Click Division in Hide Columns ",
              "timedOut": false,
              "duration": 6217,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await login.switchWindow(0);\nawait utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Division');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 18, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Division');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "5423bc51-ac24-46c8-8f71-e949df8ba428",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Tech Stack in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Tech Stack in Hide Columns",
              "timedOut": false,
              "duration": 5979,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Tech Stack');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 17, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Tech Stack');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "3ff7edc0-5a5d-4f8d-8447-5ed30c4a67b5",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Country in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Country in Hide Columns",
              "timedOut": false,
              "duration": 5863,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Country');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 16, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Country');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "06540b70-42cb-4bd0-bc6b-aa8b631a4869",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Status in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Status in Hide Columns",
              "timedOut": false,
              "duration": 6022,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Status');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 15, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Status');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "bf0c904b-65c2-42d6-b44c-a4320d3d8cc8",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Project Manager in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Project Manager in Hide Columns",
              "timedOut": false,
              "duration": 5871,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Project Manager');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 14, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Project Manager');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "daec47b6-16c1-456c-8438-53eb56608d8c",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Contract in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Contract in Hide Columns",
              "timedOut": false,
              "duration": 5747,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Contract');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 13, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Contract');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "6990dcbe-c068-4557-9b80-8aff9f35d294",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click PM Introduced in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click PM Introduced in Hide Columns",
              "timedOut": false,
              "duration": 5839,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('PM Introduced');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 12, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('PM Introduced');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "f8bc4ed5-f758-44f1-a834-20f8d202c66d",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Dev Introduced in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Dev Introduced in Hide Columns",
              "timedOut": false,
              "duration": 5680,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Dev Introduced');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 11, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Dev Introduced');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "7b7c86a1-c90f-46ad-85f8-f15dde742a28",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Engagement in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Engagement in Hide Columns",
              "timedOut": false,
              "duration": 5917,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Engagement');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 10, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Engagement');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "f5fd4ae9-03d7-4cff-b9a4-270d94abcecf",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Billing Cycle in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Billing Cycle in Hide Columns",
              "timedOut": false,
              "duration": 5695,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Billing Cycle');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 9, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Billing Cycle');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "b9a011f4-ea84-43fd-83b3-00a65ebdce4b",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click BD Member in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click BD Member in Hide Columns",
              "timedOut": false,
              "duration": 5936,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('BD Member');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 8, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('BD Member');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "88bc9ff1-bf16-43d8-ba84-07bd9710f3ae",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click BD Team in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click BD Team in Hide Columns",
              "timedOut": false,
              "duration": 5635,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('BD Team');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 7, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('BD Team');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "5d0eac63-ec4d-48b8-bbd4-930bfc8a2ee6",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Communication in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Communication in Hide Columns",
              "timedOut": false,
              "duration": 5516,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Communication');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 6, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Communication');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "0b236292-f66c-4c67-a4dc-fc9f41ddc450",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Billing Profile in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Billing Profile in Hide Columns",
              "timedOut": false,
              "duration": 5493,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Billing Profile');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 5, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Billing Profile');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "0e5a11a7-3c19-4633-b2b2-68889d75ad39",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Billing Channel in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Billing Channel in Hide Columns",
              "timedOut": false,
              "duration": 5597,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Billing Channel');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 4, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Billing Channel');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "a31cd9fe-c53d-4bf6-8f25-cb997b05a3b9",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Engineers in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Engineers in Hide Columns",
              "timedOut": false,
              "duration": 5539,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Engineers');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 3, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Engineers');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "6097a46f-5e40-4d80-8855-459858bc0a55",
              "parentUUID": "3071d9a8-45c1-4a19-b036-66738f2bc525",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f252dcbd-7876-4c56-893b-217f94afba99",
            "3c0d1566-eb8f-4e44-86fd-29a5f4e8d03d",
            "80635aee-008a-4bac-b579-804db35d7186",
            "c50c9f2e-4f2d-4868-986e-8eecf04361c3",
            "52b9f28a-b298-43a5-b77d-d34af2950cb0",
            "4958979f-2efa-4184-90d8-31e1edc815a4",
            "68f964c4-a518-4ee6-a122-1cce83cfd374",
            "47c38bf4-a6aa-43d7-a8ad-e6dab8ea4ce8",
            "16b6ba51-0aec-4d70-b131-907606de3563",
            "45b10181-edef-4968-bc07-d8a53a2d4705",
            "fd16ca08-e09d-4821-938a-300345f99945",
            "1d14b72d-cc50-4d7d-9950-a7e728fe71d1",
            "5aac8866-ba4b-451d-9ba0-e85010c7bef6",
            "a98cb1f4-c725-473b-b447-b6599711d5eb",
            "682bd18f-feb5-4a43-b672-69380e7d9cd4",
            "2a5ffc36-7cd0-4217-a72e-7b1ec891cf02",
            "17e91131-56cc-4a8a-9eb0-6364309aae99",
            "d596ca03-c298-47df-acd4-254133887901",
            "ebe7c942-f09c-4fbb-b518-37e7d9a8cda3",
            "7d3782b2-c9f1-43cb-a4a6-b429de8b7196",
            "4331c051-4622-46b0-b0d8-63b53f6bbdb1",
            "f18c3571-cb67-4383-ac4e-ac991f1b7c31",
            "8a6bfb56-703c-4c46-9559-90cc1ca64b8f",
            "4df223c3-2ee3-4bbb-85b3-eee8c8708e0d",
            "6ee220a9-05b2-4f22-8b23-33a609325995",
            "86c5ce51-2511-4b45-9c1b-7c22fc99b77b",
            "2038bd9e-39c8-4ec9-91a1-3f4c7ace823d",
            "05bc872d-fc3a-4a87-bbdf-af5b58720665",
            "396e7b12-6b01-4253-b227-6faa9d0fca72",
            "8f01f6c0-b4f8-48d5-943a-2b7869e34136",
            "ef7eb511-b2ea-4c2f-8863-7a100a7a4fed",
            "7f576cb4-e1fd-401e-8bf5-59a83b160f85",
            "30ceebc0-3cbd-4631-a13e-3c83e30a2a96",
            "2cca7ce2-2040-48ed-8881-509938215ab0",
            "9507f60c-8660-4021-bb2d-2bbb318bc7ea",
            "7872e2d3-a725-4ac1-9664-3ab8c567fbbd",
            "0ab405d5-b499-4bbd-a900-eaba999fad1a",
            "d8728fcf-94e1-4a77-9c22-5c27ea423099",
            "ef6743f2-7066-4cb2-8c6b-01d7a2043aef",
            "17857ed4-35ed-432c-92cc-fdf56cb576ae",
            "1ad2c9a4-7123-42b0-8e3e-24d8af8e5314",
            "e5a85487-71d2-468d-ba8a-e8b08e09fcb3",
            "965dc2dc-422e-40e3-91a1-2d8b6a12034b",
            "0bb9e5f5-3369-48ea-a0b2-b3526ee54d96",
            "c2ef4f0b-3a26-4248-b58f-a18ac48e7d5f",
            "6bfcb95a-eb71-46e3-9b6d-4f6d9cf89f05",
            "e332138d-c93e-435a-a9c1-139660f66de4",
            "f9695dc8-9ceb-4c7a-b3e1-86ada3b46243",
            "6d42589d-55a7-4bf9-9e6a-7f09693fa043",
            "2823f46d-4b5c-4dab-873b-c72b22ab97d7",
            "4118b5e0-b999-4610-9b50-e1fc7938fc2e",
            "13fc5d52-c9aa-4770-b4f5-be0099e36554",
            "2ad9eee7-75f9-4b0d-b4f7-3a33c4f45d92",
            "ffc14f60-912b-4939-a992-6713751ad22d",
            "5b0c9e21-460a-41fc-8f40-a5c35c59d582",
            "abff5f1d-cea9-4111-ad84-32e758f29959",
            "5423bc51-ac24-46c8-8f71-e949df8ba428",
            "3ff7edc0-5a5d-4f8d-8447-5ed30c4a67b5",
            "06540b70-42cb-4bd0-bc6b-aa8b631a4869",
            "bf0c904b-65c2-42d6-b44c-a4320d3d8cc8",
            "daec47b6-16c1-456c-8438-53eb56608d8c",
            "6990dcbe-c068-4557-9b80-8aff9f35d294",
            "f8bc4ed5-f758-44f1-a834-20f8d202c66d",
            "7b7c86a1-c90f-46ad-85f8-f15dde742a28",
            "f5fd4ae9-03d7-4cff-b9a4-270d94abcecf",
            "b9a011f4-ea84-43fd-83b3-00a65ebdce4b",
            "88bc9ff1-bf16-43d8-ba84-07bd9710f3ae",
            "5d0eac63-ec4d-48b8-bbd4-930bfc8a2ee6",
            "0b236292-f66c-4c67-a4dc-fc9f41ddc450",
            "0e5a11a7-3c19-4633-b2b2-68889d75ad39",
            "a31cd9fe-c53d-4bf6-8f25-cb997b05a3b9",
            "6097a46f-5e40-4d80-8855-459858bc0a55"
          ],
          "failures": [
            "c89fe2a4-78c7-488f-a4eb-5e3c2dd208de",
            "9ec4e075-938c-481c-9e1f-1f4ad49051c1"
          ],
          "pending": [
            "1eb33729-08b7-4b7e-906b-55da81d2faf9"
          ],
          "skipped": [],
          "duration": 746945,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "046904d3-988c-4a56-8f01-68287dbf5803",
          "title": "Projects -> OnBoarding",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/projects/spec-2-actualProejct.js",
          "file": "/test/e2e/projects/spec-2-actualProejct.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to check Actual Prject Form is Showing by clicking Add btn  ",
              "fullTitle": "Projects -> OnBoarding should able to check Actual Prject Form is Showing by clicking Add btn  ",
              "timedOut": false,
              "duration": 3547,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'BD F' WHERE id = 9429;`,\n  `UPDATE employees SET \"workAs\" = 'dev' WHERE id = 9429;`,\n  `UPDATE employees SET \"departmentId\" = 3 WHERE id = 9429;`,\n  `UPDATE employees SET \"designationId\" = 13 WHERE id = 9429;`,\n  `UPDATE employees SET \"subDepartmentId\" = 13 WHERE id = 9429;`,\n  `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n  'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n  'UPDATE departments SET \"hodId\" = NULL WHERE id = 3;',\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProject();\nawait projectOnBoarding.checkActualProjectModel();",
              "err": {},
              "uuid": "9e7a8e2c-6e81-4cfb-9725-da78b66a52eb",
              "parentUUID": "046904d3-988c-4a56-8f01-68287dbf5803",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check Cross Button ",
              "fullTitle": "Projects -> OnBoarding should able to check Cross Button ",
              "timedOut": false,
              "duration": 3868,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProject();\nawait projectOnBoarding.checkActualProjectModel();\nawait projectOnBoarding.ProjectOnBoarding_CrossBtn();\nawait projectOnBoarding.checkActualProjectModelNotVisible();",
              "err": {},
              "uuid": "45791e5e-d035-47e5-b86c-1f1734d08e7e",
              "parentUUID": "046904d3-988c-4a56-8f01-68287dbf5803",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Add Actual Project  ",
              "fullTitle": "Projects -> OnBoarding should able Add Actual Project  ",
              "timedOut": false,
              "duration": 53587,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM projects WHERE \"name\" = 'InvoChain';`);\nlet portfolioId = await utilFun.getFromDatabase(`SELECT id FROM project_portfolios WHERE \"name\" = 'InvoChain';`);\nif (resourceId.rowCount !== 0) {\n  let query = [\n    `DELETE FROM \"project_portfolio_skills\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n    `DELETE FROM \"project_timelines\" WHERE \"projectId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"project_portfolio_employees\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n    `DELETE FROM \"project_portfolios\" WHERE \"projectId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"projects\" WHERE \"id\" = ${resourceId.rows[0].id};`,\n  ];\n  await utilFun.udpateDatabase(query);\n}\nlet query = [`DELETE FROM \"project_onboardings\" WHERE \"name\" = 'InvoChain'`,`DELETE FROM \"project_onboardings\" WHERE \"name\" = 'InvoBlog'`, `DELETE FROM \"project_onboardings\" WHERE \"name\" = 'InvoBlogUpdated'`,];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait utilFun.wait(3000);\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProject();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectName('InvoBlog');\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectReferenceNo('12344321');\nawait projectOnBoarding.OnBoarding_AddActualProject_StartDate('02-01-2024');\nawait projectOnBoarding.OnBoarding_AddActualProject_TentavieDuration('2 year');\nawait projectOnBoarding.selectValue('Select Division', 'Dtest');\nawait projectOnBoarding.selectValue('Select Source', 'International Event');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactName('Alia');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactPersonEmail('abc@info.com');\nawait projectOnBoarding.clickNextBtnPage1();\nawait projectOnBoarding.selectField('BD Member *\\nSelect resource', 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField('Actual Resource(s)\\nSelect resources', 'Abdul Wakeel');\nawait projectOnBoarding.selectField('Resource Name (Shared with Client)', 'Tariq');\nawait projectOnBoarding.selectField('Tech Stack *\\nSelect Tech Stack', 'Admin');\nawait projectOnBoarding.selectField('Communication Mode\\nSelect mode', 'Email');\nawait projectOnBoarding.selectField('Project Manager\\nSelect Project Manager', 'amna hussain');\nawait projectOnBoarding.selectField('Service Mode*\\nSelect service mode', 'Yet To Be Decided');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.selectField('Company Name', 'InvoZone USA');\nawait projectOnBoarding.selectField('Company Address', 'Lahore');\nawait projectOnBoarding.selectField('Client Side Billing Representative Name*', 'Abdul Wakeel');\nawait projectOnBoarding.selectField('Client Side Billing Representative Email', '123@invozone.com');\nawait projectOnBoarding.selectField('Billing Cycle*\\nSelect billing cycle', 'Monthly');\nawait projectOnBoarding.selectField('Billing Start Date *', '01-01-2024');\nawait projectOnBoarding.selectField('Currency *\\nUnited States Dollar', 'United States Dollar');\nawait projectOnBoarding.selectField('Billing Rates/ Total Project Cost*', '20024');\nawait projectOnBoarding.selectField('Billing Platform *', 'Cash');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn3();\nawait projectOnBoarding.selectField('Reference thread\\nNo', 'No');\nawait projectOnBoarding.selectField('Are we introduced as Agency or Individual?*\\nSelect introduction', 'Individual to Client');\nawait projectOnBoarding.selectField('Rate Concluded*', '15');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration', 'No Trial');\nawait projectOnBoarding.selectField(\n  'Any Future Upsells which client gave a heads up for near future?*\\n' + 'Select option',\n  'Nothing at the moment',\n);\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_AddActualProject_AddRequest();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project onboarding request is completed successfuly!');",
              "err": {},
              "uuid": "63947b9e-96ce-4041-8f13-b8edff763690",
              "parentUUID": "046904d3-988c-4a56-8f01-68287dbf5803",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Actual project is created or not",
              "fullTitle": "Projects -> OnBoarding should check if Actual project is created or not",
              "timedOut": false,
              "duration": 4787,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoBlog');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoBlog');",
              "err": {},
              "uuid": "eac4e531-3d45-4a9a-b6c2-a1450aa76962",
              "parentUUID": "046904d3-988c-4a56-8f01-68287dbf5803",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Actual project",
              "fullTitle": "Projects -> OnBoarding should able to Edit Actual project",
              "timedOut": false,
              "duration": 62741,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.OnBoarding_AddActualProject_EditHover();\nawait projectOnBoarding.OnBoarding_AddActualProject_Edit();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectName('Updated');\nawait utilFun.wait(1000);\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectReferenceNo('12344321');\nawait projectOnBoarding.OnBoarding_AddActualProject_StartDate('03-01-2024');\nawait projectOnBoarding.OnBoarding_AddActualProject_TentavieDuration('3 year');\nawait projectOnBoarding.selectValue('Select Division', 'Atest');\nawait projectOnBoarding.selectValue('Select Source', 'Upwork');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactName('Ali');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactPersonEmail('abcd@info.com');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn1();\nawait projectOnBoarding.selectField('BD Member *\\nSelect resource', 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField('Actual Resource(s)\\nAbdul Wakeel', 'Abid Ali');\nawait projectOnBoarding.selectField('Resource Name (Shared with Client)', 'Ahmed');\nawait projectOnBoarding.selectField('Tech Stack *\\nAdmin', 'BA');\nawait projectOnBoarding.selectField('Communication Mode\\nEmail', 'InvoChat');\nawait projectOnBoarding.selectField('Project Manager\\nSelect Project Manager', 'amna hussain');\nawait projectOnBoarding.selectField('Service Mode*\\nYet To Be Decided', 'Augmentation / Dedicated Resource');\nawait projectOnBoarding.selectField('Augmentation*\\nSelect augmentation', 'Monthly');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.selectField('Company Name', 'InvoZone PAK');\nawait projectOnBoarding.selectField('Company Address', 'Faisalabad');\nawait projectOnBoarding.selectField('Client Side Billing Representative Name*', 'Uzair Arbab');\nawait projectOnBoarding.selectField('Client Side Billing Representative Email', '1234@invozone.com');\nawait projectOnBoarding.selectField('Billing Cycle*\\nSelect billing cycle', 'Weekly');\nawait projectOnBoarding.selectField('Billing Start Date *', '02-01-2024');\nawait projectOnBoarding.selectField('Currency *\\nUnited States Dollar', 'Pounds');\nawait projectOnBoarding.selectField('Billing Rates/ Total Project Cost*', '20025');\nawait projectOnBoarding.selectField('Billing Platform *', 'Check');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn3();\nawait projectOnBoarding.selectField('Reference thread\\nNo', 'Yes');\nawait projectOnBoarding.selectField('BA Names - Created/ Approved the estimation Doc *\\nSelect option', 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField(\"PM's Names - Created/ Approved the estimation Doc*\\nSelect option\", 'Muhammad Bilal Rafaqat');\nawait projectOnBoarding.selectField('Reference Internal Thread Link*', 'www.invo-zone.com');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration', 'Free Trial');\nawait projectOnBoarding.selectField('Trial Duration*', '2 Weeks');\nawait projectOnBoarding.selectField('Are we introduced as Agency or Individual?*\\nSelect introduction', 'Individual to Client');\nawait projectOnBoarding.selectField('Rate Concluded*', '15');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration', 'No Trial');\nawait projectOnBoarding.selectField(\n  'Any Future Upsells which client gave a heads up for near future?*\\n' + 'Select option',\n  'Nothing at the moment',\n);\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_AddActualProject_AddRequest();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project is updated Successfully!');",
              "err": {},
              "uuid": "8a2df571-ea8d-4880-bcf1-96e615e4fb93",
              "parentUUID": "046904d3-988c-4a56-8f01-68287dbf5803",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if actual project is updated or not",
              "fullTitle": "Projects -> OnBoarding should check if actual project is updated or not",
              "timedOut": false,
              "duration": 4505,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoBlogUpdated');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoBlogUpdated');",
              "err": {},
              "uuid": "b1e2d2c3-77e0-4f2f-99de-812e8f6ee92c",
              "parentUUID": "046904d3-988c-4a56-8f01-68287dbf5803",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete Project",
              "fullTitle": "Projects -> OnBoarding should able to Delete Project",
              "timedOut": false,
              "duration": 11484,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.filterField('Search by Project', 'InvoBlogUpdated');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoBlogUpdated');\nawait projectOnBoarding.OnBoarding_AddActualProject_DeleteBtn();\nawait projectOnBoarding.OnBoarding_AddActualProject_Delete_YesBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project is archived successfully.');",
              "err": {},
              "uuid": "c7860137-ec2d-4f83-8c75-4369e864402d",
              "parentUUID": "046904d3-988c-4a56-8f01-68287dbf5803",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if deleted project is showing in Archived Project",
              "fullTitle": "Projects -> OnBoarding should check if deleted project is showing in Archived Project",
              "timedOut": false,
              "duration": 6032,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickArchiveBtn();\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoBlogUpdated');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoBlogUpdated');",
              "err": {},
              "uuid": "1f295792-6e66-4a5f-ac33-c92f4f286bd3",
              "parentUUID": "046904d3-988c-4a56-8f01-68287dbf5803",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Add Actual Project  ",
              "fullTitle": "Projects -> OnBoarding should able Add Actual Project  ",
              "timedOut": false,
              "duration": 53020,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [`DELETE FROM \"project_onboardings\" WHERE \"name\" = 'InvoChain'`];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait utilFun.wait(3000);\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProject();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectName('InvoChain');\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectReferenceNo('12344321');\nawait projectOnBoarding.OnBoarding_AddActualProject_StartDate('02-01-2024');\nawait projectOnBoarding.OnBoarding_AddActualProject_TentavieDuration('2 year');\nawait projectOnBoarding.selectValue('Select Division', 'Dtest');\nawait projectOnBoarding.selectValue('Select Source', 'International Event');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactName('Alia');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactPersonEmail('abc@info.com');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn1();\nawait projectOnBoarding.selectField('BD Member *\\nSelect resource', 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField('Actual Resource(s)\\nSelect resources', 'Abdul Wakeel');\nawait projectOnBoarding.selectField('Resource Name (Shared with Client)', 'Tariq');\nawait projectOnBoarding.selectField('Tech Stack *\\nSelect Tech Stack', 'Admin');\nawait projectOnBoarding.selectField('Communication Mode\\nSelect mode', 'Email');\nawait projectOnBoarding.selectField('Project Manager\\nSelect Project Manager', 'amna hussain');\nawait projectOnBoarding.selectField('Service Mode*\\nSelect service mode', 'Yet To Be Decided');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.selectField('Company Name', 'InvoZone USA');\nawait projectOnBoarding.selectField('Company Address', 'Lahore');\nawait projectOnBoarding.selectField('Client Side Billing Representative Name*', 'Abdul Wakeel');\nawait projectOnBoarding.selectField('Client Side Billing Representative Email', '123@invozone.com');\nawait projectOnBoarding.selectField('Billing Cycle*\\nSelect billing cycle', 'Monthly');\nawait projectOnBoarding.selectField('Billing Start Date *', '01-01-2024');\nawait projectOnBoarding.selectField('Currency *\\nUnited States Dollar', 'United States Dollar');\nawait projectOnBoarding.selectField('Billing Rates/ Total Project Cost*', '20024');\nawait projectOnBoarding.selectField('Billing Platform *', 'Cash');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn3();\nawait projectOnBoarding.selectField('Reference thread\\nNo', 'No');\nawait projectOnBoarding.selectField('Are we introduced as Agency or Individual?*\\nSelect introduction', 'Individual to Client');\nawait projectOnBoarding.selectField('Rate Concluded*', '15');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration', 'No Trial');\nawait projectOnBoarding.selectField(\n  'Any Future Upsells which client gave a heads up for near future?*\\n' + 'Select option',\n  'Nothing at the moment',\n);\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_AddActualProject_AddRequest();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project onboarding request is completed successfuly!');",
              "err": {},
              "uuid": "f08fdc8b-8be5-4345-9d1c-9beb14cdff28",
              "parentUUID": "046904d3-988c-4a56-8f01-68287dbf5803",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Actual project is created or not",
              "fullTitle": "Projects -> OnBoarding should check if Actual project is created or not",
              "timedOut": false,
              "duration": 4427,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoChain');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoChain');",
              "err": {},
              "uuid": "221854a9-8f5c-438d-997a-596c7e54d090",
              "parentUUID": "046904d3-988c-4a56-8f01-68287dbf5803",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check OnBoard Icon is Clickable",
              "fullTitle": "Projects -> OnBoarding should able to check OnBoard Icon is Clickable",
              "timedOut": false,
              "duration": 6121,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = ['UPDATE departments SET \"hodId\" = 9429 WHERE id = 3;'];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoChain');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoChain');\nawait projectOnBoarding.OnBoarding_AddActualProject_OnBoardIcon();\nawait projectOnBoarding.checkActualProjectModel();",
              "err": {},
              "uuid": "91ca7036-6415-4f09-a227-afb64008d28b",
              "parentUUID": "046904d3-988c-4a56-8f01-68287dbf5803",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check Cancel Btn is Clickable ",
              "fullTitle": "Projects -> OnBoarding should able to check Cancel Btn is Clickable ",
              "timedOut": false,
              "duration": 9394,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoChain');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoChain');\nawait projectOnBoarding.OnBoarding_AddActualProject_OnBoardIcon();\nawait projectOnBoarding.checkActualProjectModel();\nawait projectOnBoarding.OnBoarding_AddActualProject_CancelBtn();\nawait projectOnBoarding.checkActualProjectModelNotVisible();",
              "err": {
                "message": "Error: Model is visible -> error message =stale element reference: stale element not found\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "Error: Model is visible -> error message =stale element reference: stale element not found\n  (Session info: headless chrome=119.0.6045.159)\n    at projectOnBoarding.checkActualProjectModelNotVisible (test/support/pages/projects/onboarding.js:247:19)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/projects/spec-2-actualProejct.js:264:5)",
                "diff": null
              },
              "uuid": "eaafe390-e285-4a06-8302-3ba146805b1f",
              "parentUUID": "046904d3-988c-4a56-8f01-68287dbf5803",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to onboard project",
              "fullTitle": "Projects -> OnBoarding should able to onboard project",
              "timedOut": false,
              "duration": 11586,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoChain');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoChain');\nawait projectOnBoarding.OnBoarding_AddActualProject_OnBoardIcon();\nawait projectOnBoarding.OnBoarding_AddActualProject_OnBoardBtn();\nconst alert = await projects.checkAlert();\nutilFun.assertEql(alert, 'Project is onboarded successfully.');",
              "err": {},
              "uuid": "e9f26c1c-74dd-45f3-b15d-820ec38edfbc",
              "parentUUID": "046904d3-988c-4a56-8f01-68287dbf5803",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify if Project is added",
              "fullTitle": "Projects -> OnBoarding should able to Verify if Project is added",
              "timedOut": false,
              "duration": 5689,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'InvoChain');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('InvoChain'), `Expected text not found.`);",
              "err": {},
              "uuid": "289735e7-a439-4cc3-880c-fceedc191002",
              "parentUUID": "046904d3-988c-4a56-8f01-68287dbf5803",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9e7a8e2c-6e81-4cfb-9725-da78b66a52eb",
            "45791e5e-d035-47e5-b86c-1f1734d08e7e",
            "63947b9e-96ce-4041-8f13-b8edff763690",
            "eac4e531-3d45-4a9a-b6c2-a1450aa76962",
            "8a2df571-ea8d-4880-bcf1-96e615e4fb93",
            "b1e2d2c3-77e0-4f2f-99de-812e8f6ee92c",
            "c7860137-ec2d-4f83-8c75-4369e864402d",
            "1f295792-6e66-4a5f-ac33-c92f4f286bd3",
            "f08fdc8b-8be5-4345-9d1c-9beb14cdff28",
            "221854a9-8f5c-438d-997a-596c7e54d090",
            "91ca7036-6415-4f09-a227-afb64008d28b",
            "e9f26c1c-74dd-45f3-b15d-820ec38edfbc",
            "289735e7-a439-4cc3-880c-fceedc191002"
          ],
          "failures": [
            "eaafe390-e285-4a06-8302-3ba146805b1f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 240788,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "7f660774-3ea5-4509-855f-387bb5c505a5",
          "title": "Per-Sale Project Onboarding",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/projects/spec-3-presale.js",
          "file": "/test/e2e/projects/spec-3-presale.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Per-Sale Project Onboarding\"",
              "fullTitle": "Per-Sale Project Onboarding \"before all\" hook in \"Per-Sale Project Onboarding\"",
              "timedOut": false,
              "duration": 21,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let projectId = await utilFun.getFromDatabase(`SELECT id FROM projects WHERE \"name\" = 'PreSaleTesting';`)\nlet portfolioId = await utilFun.getFromDatabase(`SELECT id FROM project_portfolios WHERE \"name\" = 'PreSaleTesting';`)\nif(projectId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"project_portfolio_skills\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n  `DELETE FROM \"project_portfolios\" WHERE id = ${portfolioId.rows[0].id};`,\n  `DELETE FROM \"project_timelines\" WHERE \"projectId\" = ${projectId.rows[0].id};`,\n  `DELETE FROM \"projects\" WHERE id = ${projectId.rows[0].id};`\n];\nawait utilFun.udpateDatabase(query);\n}\n// await utilFun.login(email, password);",
              "err": {},
              "uuid": "889128d5-5bc6-406c-8a62-7b4adde3c38f",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to Add Pre-Sale project onboarding request",
              "fullTitle": "Per-Sale Project Onboarding should able to Add Pre-Sale project onboarding request",
              "timedOut": false,
              "duration": 51859,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n    `DELETE FROM \"project_onboardings\" WHERE \"name\" = 'PreSaleTest';`,\n    `DELETE FROM \"project_onboardings\" WHERE \"name\" = 'PreSaleTesting';`\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.OnBoarding_PreSaleBtn();\nawait projectOnBoarding.selectField('Project Name *', 'PreSaleTest');\nawait projectOnBoarding.selectField('Lead Reference Number/ Name *' , '1232123');\nawait projectOnBoarding.selectField('Division *\\nSelect Division' , 'Dtest');\nawait projectOnBoarding.selectField('Source*\\nSelect Source' , 'Upwork');\nawait projectOnBoarding.selectField('Offer Received on Upwork? (BD-F Only)*\\nSelect option' , 'Yes');\nawait projectOnBoarding.selectField('Offer Accepted on Upwork? (BD-F Only)*\\nSelect option' , 'Yes');\nawait projectOnBoarding.selectField('Offer Expiry Date (BD-F Only)' , '24-5-2025');\nawait projectOnBoarding.selectField('Profile Name*' , 'Furqan Aziz');\nawait projectOnBoarding.selectField('Lead Upwork Reference Link*' , 'www.furqan/upwork.com');\nawait projectOnBoarding.selectField('Client Side Contact Person Name(s) *' , 'Ali');\nawait projectOnBoarding.selectField('Client Side Point of Contact Email(s)' , 'abcd@gmail.com');\nawait projectOnBoarding.OnBoarding_PreSale_TextArea('Reason');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn1();\nawait projectOnBoarding.selectField('BD Member *' , 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField('Actual Resource(s)\\nSelect resources' , 'Awais Shaukat');\nawait projectOnBoarding.selectField('Resource Name (Shared with Client)' , 'Furqan Aziz');\nawait projectOnBoarding.selectField('Tech Stack *\\nSelect Tech Stack' , 'Admin');\nawait projectOnBoarding.selectField('Communication Mode\\nSelect mode' , 'InvoZone Slack');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.selectField('Service Mode*\\nSelect service mode' , 'Yet To Be Decided');\nawait projectOnBoarding.selectField('Introduced as*\\nSelect option' , 'Agency');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration' , 'Free Trial');\nawait projectOnBoarding.selectField('Trial Duration *' , '6');\nawait projectOnBoarding.selectField('Are there Reference thread?*\\nNo' , 'Yes');\nawait projectOnBoarding.selectField('BA Names - Created/ Approved the estimation Doc*\\nSelect option' , 'Muhammad Zeeshan Ullah');\nawait utilFun.wait(2000);\nawait projectOnBoarding.selectField(\"PM's Names - Created/ Approved the estimation Doc*\\nSelect resource\" , 'Muhammad Bilal');\nawait projectOnBoarding.selectField('Reference internal thread link*' , 'www.google.com');\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_PreSale_AddRequest();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project onboarding request is completed successfuly!');",
              "err": {},
              "uuid": "849d9596-d529-4205-b718-4059e7ab06f7",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if pre-sale project is created or not",
              "fullTitle": "Per-Sale Project Onboarding should check if pre-sale project is created or not",
              "timedOut": false,
              "duration": 4365,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTest')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTest');",
              "err": {},
              "uuid": "df7eaeea-4895-44b5-9643-4d550ccdd844",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shold able to archive project",
              "fullTitle": "Per-Sale Project Onboarding shold able to archive project",
              "timedOut": false,
              "duration": 12359,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTest')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTest');\nawait projectOnBoarding.clickArchiveChannelBtn()\nawait projectOnBoarding.clickYesBtn()\nconst alert = await projects.checkAlert()\nutilFun.assertEql(alert, 'Project is archived successfully.');",
              "err": {},
              "uuid": "b6b6cb20-cde0-4c03-807a-276ad43ea738",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if project is showing in Archived Project",
              "fullTitle": "Per-Sale Project Onboarding should check if project is showing in Archived Project",
              "timedOut": false,
              "duration": 5783,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickArchiveBtn()\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTest')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTest');",
              "err": {},
              "uuid": "4f5358de-d8a0-467f-8544-db1655eded26",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add Pre-Sale project onboarding request",
              "fullTitle": "Per-Sale Project Onboarding should able to Add Pre-Sale project onboarding request",
              "timedOut": false,
              "duration": 52214,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n    `DELETE FROM \"project_onboardings\" WHERE \"name\" = 'PreSaleTest';`,\n    `DELETE FROM \"project_onboardings\" WHERE \"name\" = 'PreSaleTesting';`\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.OnBoarding_PreSaleBtn();\nawait projectOnBoarding.selectField('Project Name *', 'PreSaleTest');\nawait projectOnBoarding.selectField('Lead Reference Number/ Name *' , '1232123');\nawait projectOnBoarding.selectField('Division *\\nSelect Division' , 'Dtest');\nawait projectOnBoarding.selectField('Source*\\nSelect Source' , 'Upwork');\nawait projectOnBoarding.selectField('Offer Received on Upwork? (BD-F Only)*\\nSelect option' , 'Yes');\nawait projectOnBoarding.selectField('Offer Accepted on Upwork? (BD-F Only)*\\nSelect option' , 'Yes');\nawait projectOnBoarding.selectField('Offer Expiry Date (BD-F Only)' , '24-5-2025');\nawait projectOnBoarding.selectField('Profile Name*' , 'Furqan Aziz');\nawait projectOnBoarding.selectField('Lead Upwork Reference Link*' , 'www.furqan/upwork.com');\nawait projectOnBoarding.selectField('Client Side Contact Person Name(s) *' , 'Ali');\nawait projectOnBoarding.selectField('Client Side Point of Contact Email(s)' , 'abcd@gmail.com');\nawait projectOnBoarding.OnBoarding_PreSale_TextArea('Reason');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn1();\nawait projectOnBoarding.selectField('BD Member *' , 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField('Actual Resource(s)\\nSelect resources' , 'Awais Shaukat');\nawait projectOnBoarding.selectField('Resource Name (Shared with Client)' , 'Furqan Aziz');\nawait projectOnBoarding.selectField('Tech Stack *\\nSelect Tech Stack' , 'Admin');\nawait projectOnBoarding.selectField('Communication Mode\\nSelect mode' , 'InvoZone Slack');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.selectField('Service Mode*\\nSelect service mode' , 'Yet To Be Decided');\nawait projectOnBoarding.selectField('Introduced as*\\nSelect option' , 'Agency');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration' , 'Free Trial');\nawait projectOnBoarding.selectField('Trial Duration *' , '6');\nawait projectOnBoarding.selectField('Are there Reference thread?*\\nNo' , 'Yes');\nawait projectOnBoarding.selectField('BA Names - Created/ Approved the estimation Doc*\\nSelect option' , 'Muhammad Zeeshan Ullah');\nawait utilFun.wait(2000);\nawait projectOnBoarding.selectField(\"PM's Names - Created/ Approved the estimation Doc*\\nSelect resource\" , 'Muhammad Bilal');\nawait projectOnBoarding.selectField('Reference internal thread link*' , 'www.google.com');\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_PreSale_AddRequest();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project onboarding request is completed successfuly!');",
              "err": {},
              "uuid": "3035abb8-c5f8-417f-82d0-76e70afefedb",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if pre-sale project is created or not",
              "fullTitle": "Per-Sale Project Onboarding should check if pre-sale project is created or not",
              "timedOut": false,
              "duration": 4383,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTest')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTest');",
              "err": {},
              "uuid": "3f7ccb68-7b6b-4d53-a738-dadf177291b0",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit pre-sale project",
              "fullTitle": "Per-Sale Project Onboarding should able to edit pre-sale project",
              "timedOut": false,
              "duration": 23618,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTest')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTest');\nawait projectOnBoarding.clickEditProject()\nawait projectOnBoarding.selectField('Project Name *', 'PreSaleTesting');\nawait projectOnBoarding.selectField('Lead Reference Number/ Name *' , '12345');\nawait projectOnBoarding.selectField('Profile Name*' , 'TestProfile');\nawait projectOnBoarding.selectField('Lead Upwork Reference Link*' , 'www.test/upwork.com');\nawait projectOnBoarding.selectField('Client Side Contact Person Name(s) *' , 'James');\nawait projectOnBoarding.selectField('Client Side Point of Contact Email(s)' , 'james@gmail.com');\nawait projectOnBoarding.OnBoarding_PreSale_TextArea('Reason updated');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn1();\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_PreSale_AddRequest();\nconst alert = await projects.checkAlert();\nutilFun.assertEql(alert, 'Project is updated Successfully!');",
              "err": {},
              "uuid": "e3cfcf35-aab6-4126-8890-aaa1b99c0673",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if pre-sale project is updated or not",
              "fullTitle": "Per-Sale Project Onboarding should check if pre-sale project is updated or not",
              "timedOut": false,
              "duration": 4320,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTesting')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTesting');",
              "err": {},
              "uuid": "93bca15e-8e7d-4419-9271-38d15af8cb79",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to add billing details by clicking manage channel button",
              "fullTitle": "Per-Sale Project Onboarding should able to add billing details by clicking manage channel button",
              "timedOut": true,
              "duration": 100005,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTesting')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTesting');\nawait projectOnBoarding.clickManageChannelBtn()\nawait projectOnBoarding.manageChannelInput('Project Manager *\\nSelect Project Manager','Bilal Rafaqat')\nawait projectOnBoarding.manageChannelInput('Start Date *','10-02-2024')\nawait projectOnBoarding.manageChannelInput('Company Name','xyz')\nawait projectOnBoarding.manageChannelInput('Company Address','xyz')\nawait projectOnBoarding.manageChannelInput('Client Side Billing Representative Name*','James')\nawait projectOnBoarding.manageChannelInput('Client Side Billing Representative Email','james@email.com')\nawait projectOnBoarding.manageChannelInput('Billing Cycle*\\nSelect billing cycle','weekly')\nawait projectOnBoarding.manageChannelInput('Billing Start Date *','15-02-2024')\nawait projectOnBoarding.manageChannelInput('Billing Rates/ Total Project Cost*','5000')\nawait projectOnBoarding.manageChannelInput('Billing Platform *','paypal')\nawait projectOnBoarding.clickUpdateBillingBtn()\nconst alert = await projects.checkAlert()\nutilFun.assertEql(alert, 'Project billing details are updated successfully');",
              "err": {
                "message": "Error: Timeout of 100000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/devops/invohub/resource-engagement/test/e2e/projects/spec-3-presale.js)",
                "estack": "Error: Timeout of 100000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/devops/invohub/resource-engagement/test/e2e/projects/spec-3-presale.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                "diff": null
              },
              "uuid": "291c9871-c4bc-4ddc-8fa1-56f5ec2ca3d5",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create a channel",
              "fullTitle": "Per-Sale Project Onboarding should able to create a channel",
              "timedOut": false,
              "duration": 11910,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTesting')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTesting');\nawait projectOnBoarding.clickCreateChannelBtn();\nconst alert = await projects.checkAlert()\nutilFun.assertEql(alert, 'Channel is created successfully!');\nawait projectOnBoarding.clickCreateChannelBtn();\nconst alert1 = await projects.checkAlert()\nutilFun.assertEql(alert1, 'Channel is not created!');\nawait projectOnBoarding.clickCreateChannelBtn();\nconst alert3 = await projects.checkAlert()\nutilFun.assertEql(alert3, 'Channel is created successfully!');",
              "err": {
                "message": "AssertionError: 'Please add billing details to create channel' == 'Channel is created successfully!'",
                "estack": "AssertionError [ERR_ASSERTION]: 'Please add billing details to create channel' == 'Channel is created successfully!'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:203:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Please add billing details to create channel\n+ Channel is created successfully!\n"
              },
              "uuid": "3483ac58-f498-4f28-8c61-666f42aa1749",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shold check if project is showing in mark as channel created",
              "fullTitle": "Per-Sale Project Onboarding shold check if project is showing in mark as channel created",
              "timedOut": false,
              "duration": 15384,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickMarkAsChannelCreatedCheckbox()\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTesting')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTesting');",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, [data-row-key=\"0\"] > td:nth-child(1) a)\nWait timed out after 10003ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, [data-row-key=\"0\"] > td:nth-child(1) a)\nWait timed out after 10003ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "90bda1da-76f4-49ef-b15a-2ddac52e0e75",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should should able to onboard project",
              "fullTitle": "Per-Sale Project Onboarding should should able to onboard project",
              "timedOut": false,
              "duration": 14641,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// let query = [\n//     `UPDATE project_onboardings SET \"isArchived\" = false WHERE \"name\" = 'PreSaleTesting';`\n// ]\n// await utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTesting')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTesting');\nawait projectOnBoarding.clickOnboardProjectBtn()\nawait projectOnBoarding.clickOnboardBtn()\nconst alert = await projects.checkAlert()\nutilFun.assertEql(alert, 'Project is onboarded successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"btn btn-success\"])\nWait timed out after 10083ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"btn btn-success\"])\nWait timed out after 10083ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "98d91711-75a8-4862-aaf9-3968e501bbb9",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check is pre-sale project is showing in all Projects",
              "fullTitle": "Per-Sale Project Onboarding should check is pre-sale project is showing in all Projects",
              "timedOut": false,
              "duration": 6266,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'PreSaleTesting');\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTesting');",
              "err": {
                "message": "AssertionError: 'Cartpanda' == 'PreSaleTesting'",
                "estack": "AssertionError [ERR_ASSERTION]: 'Cartpanda' == 'PreSaleTesting'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:239:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Cartpanda\n+ PreSaleTesting\n"
              },
              "uuid": "27909244-9480-40af-8646-29848ffde86e",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide submitted at column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide submitted at column",
              "timedOut": false,
              "duration": 5383,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Submitted At')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 37, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Submitted At'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "AssertionError: Colums count is not Correct.",
                "estack": "AssertionError [ERR_ASSERTION]: Colums count is not Correct.\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:249:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 35\n+ 37\n"
              },
              "uuid": "d6f549f6-fd6b-45a9-b365-4f4ce72d9524",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide type column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide type column",
              "timedOut": false,
              "duration": 5208,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Type')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 36, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Type'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "AssertionError: Colums count is not Correct.",
                "estack": "AssertionError [ERR_ASSERTION]: Colums count is not Correct.\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:259:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 34\n+ 36\n"
              },
              "uuid": "236e13c9-78a0-417b-8d1b-cf196b1cf5f4",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Lead Reference column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Lead Reference column",
              "timedOut": false,
              "duration": 5252,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Lead Reference')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 35, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Lead Reference'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "AssertionError: Colums count is not Correct.",
                "estack": "AssertionError [ERR_ASSERTION]: Colums count is not Correct.\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:269:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 33\n+ 35\n"
              },
              "uuid": "bad8278d-73fa-4f25-af41-ee80ee21a02b",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Reason for Pre-sale column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Reason for Pre-sale column",
              "timedOut": false,
              "duration": 4992,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Reason For Presale')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 34, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Reason For Presale'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "AssertionError: Colums count is not Correct.",
                "estack": "AssertionError [ERR_ASSERTION]: Colums count is not Correct.\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:279:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 32\n+ 34\n"
              },
              "uuid": "51b96b13-0a05-4266-b6cd-44d17531b009",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Division column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Division column",
              "timedOut": false,
              "duration": 5077,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Division')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 33, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Division'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "AssertionError: Colums count is not Correct.",
                "estack": "AssertionError [ERR_ASSERTION]: Colums count is not Correct.\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:289:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 32\n+ 33\n"
              },
              "uuid": "da7104b6-1bce-4348-ad7c-34e83bda21c6",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Source column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Source column",
              "timedOut": false,
              "duration": 5001,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Source')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 32, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Source'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "AssertionError: Colums count is not Correct.",
                "estack": "AssertionError [ERR_ASSERTION]: Colums count is not Correct.\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:299:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 31\n+ 32\n"
              },
              "uuid": "25c29c5c-3679-4fec-8904-36744f6f2799",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Profile Name column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Profile Name column",
              "timedOut": false,
              "duration": 5116,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Profile Name')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 31, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Profile Name'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "AssertionError: Colums count is not Correct.",
                "estack": "AssertionError [ERR_ASSERTION]: Colums count is not Correct.\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:309:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 30\n+ 31\n"
              },
              "uuid": "74583a36-87b7-4e5e-ada4-81e7754e3132",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Lead Upwork Reference Link column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Lead Upwork Reference Link column",
              "timedOut": false,
              "duration": 5105,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Lead Upwork Reference Link')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 30, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Lead Upwork Reference Link'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "AssertionError: Colums count is not Correct.",
                "estack": "AssertionError [ERR_ASSERTION]: Colums count is not Correct.\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:319:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 29\n+ 30\n"
              },
              "uuid": "9f727e26-d7f7-49d0-bb9d-16844a374235",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Offer Received on Upwork? column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Offer Received on Upwork? column",
              "timedOut": false,
              "duration": 5607,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Offer Received on Upwork?')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 29, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Offer Received on Upwork?'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "AssertionError: Colums count is not Correct.",
                "estack": "AssertionError [ERR_ASSERTION]: Colums count is not Correct.\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:329:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 28\n+ 29\n"
              },
              "uuid": "35ad3725-1f8a-4b69-940d-e37405141b04",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Offer Accepted on Upwork? column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Offer Accepted on Upwork? column",
              "timedOut": false,
              "duration": 5135,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Offer Accepted on Upwork?')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 28, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Offer Accepted on Upwork?'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "AssertionError: Colums count is not Correct.",
                "estack": "AssertionError [ERR_ASSERTION]: Colums count is not Correct.\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:339:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 27\n+ 28\n"
              },
              "uuid": "018ca5b0-4e4d-4cdf-a4a5-c34136f0affc",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Tech Stack column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Tech Stack column",
              "timedOut": false,
              "duration": 5691,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Tech Stack')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 27, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Tech Stack'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "c293b100-dbc1-4c23-8295-c9b5a82da4e4",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Client Side Contact Person Name(s) column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Client Side Contact Person Name(s) column",
              "timedOut": false,
              "duration": 5706,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Client Side Contact Person Name(s)')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 26, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Client Side Contact Person Name(s)'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "5095274f-3f9d-4f2f-a760-18d541a6bddc",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Client Side Point of Contact Email(s) column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Client Side Point of Contact Email(s) column",
              "timedOut": false,
              "duration": 5955,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Client Side Point of Contact Email(s)')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 25, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Client Side Point of Contact Email(s)'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "e94307c8-867f-4c69-b6f7-ded23cb96dcc",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Tentative Duration column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Tentative Duration column",
              "timedOut": false,
              "duration": 5523,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Tentative Duration')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 24, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Tentative Duration'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "9e8065d5-06b3-4990-9569-3745818d001e",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Start Date column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Start Date column",
              "timedOut": false,
              "duration": 5532,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Start Date')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 23, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Start Date'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "fd33cbec-03e3-490d-bb81-61ed7dfd3bc2",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide BD Member column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide BD Member column",
              "timedOut": false,
              "duration": 5433,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('BD Member')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 22, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('BD Member'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "8de8256c-b005-4ce0-ba38-7d02e43f2cb0",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Service Mode column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Service Mode column",
              "timedOut": false,
              "duration": 5654,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Service Mode')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 21, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Service Mode'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "458e46ad-37b0-4b00-8808-8e50df142aa8",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Trial Period column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Trial Period column",
              "timedOut": false,
              "duration": 5569,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Trial Period')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 20, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Trial Period'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "69a28c4d-2ddf-4dbf-86f2-331c7bfbd5c1",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Resource Name (Shared with Client) column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Resource Name (Shared with Client) column",
              "timedOut": false,
              "duration": 5368,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Resource Name (Shared with Client)')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 19, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Resource Name (Shared with Client)'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "d7d914e2-38b7-43bd-b014-787c0dcfd24f",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Actual Resource(s) column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Actual Resource(s) column",
              "timedOut": false,
              "duration": 5910,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Actual Resource(s)')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 18, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Actual Resource(s)'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "47294510-478a-4368-83a5-63f6b59835bd",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Communication Mode column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Communication Mode column",
              "timedOut": false,
              "duration": 5296,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Communication Mode')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 17, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Communication Mode'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "77bb3077-d0d5-4c7f-a717-b5786f27e38a",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Company Name column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Company Name column",
              "timedOut": false,
              "duration": 5240,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Company Name')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 16, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Company Name'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "8fe476b9-d485-4e23-a132-244922158eec",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Company Address column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Company Address column",
              "timedOut": false,
              "duration": 5351,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Company Address')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 15, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Company Address'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "9bd76dfc-c813-477b-84f2-97c21bdcd873",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Client Side Billing Representative Name column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Client Side Billing Representative Name column",
              "timedOut": false,
              "duration": 5288,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Client Side Billing Representative Name')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 14, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Client Side Billing Representative Name'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "e377f5cc-7dfe-4857-bde9-2ce6796756ac",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Client Side Billing Representative Email column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Client Side Billing Representative Email column",
              "timedOut": false,
              "duration": 5341,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Client Side Billing Representative Email')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 13, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Client Side Billing Representative Email'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "c6ad94f7-b5f6-4348-a960-329370c1ed1b",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Billing Cycle column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Billing Cycle column",
              "timedOut": false,
              "duration": 5180,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Billing Cycle')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 12, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Billing Cycle'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "d641c637-82bd-4ebd-889e-f8737a50c9a9",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Billing Start Date column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Billing Start Date column",
              "timedOut": false,
              "duration": 5233,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Billing Start Date')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 11, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Billing Start Date'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "b9ddd824-532f-42f7-85b9-0eea57bf1e50",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Billing Rates/ Total Project Cost column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Billing Rates/ Total Project Cost column",
              "timedOut": false,
              "duration": 5138,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Billing Rates/ Total Project Cost')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 10, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Billing Rates/ Total Project Cost'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "a4016ce6-703a-41a4-a324-efc0aca44ad1",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Currency column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Currency column",
              "timedOut": false,
              "duration": 5147,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Currency')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 9, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Currency'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "71704fc5-6e83-4715-8578-b4273c6d45ba",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Reference BO Placement Link column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Reference BO Placement Link column",
              "timedOut": false,
              "duration": 5060,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Reference BO Placement Link')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 8, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Reference BO Placement Link'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "407fb686-f98d-408d-9719-db4a82ed78ec",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Introduced As column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Introduced As column",
              "timedOut": false,
              "duration": 5116,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Introduced As')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 7, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Introduced As'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "1db606a8-0dfc-4efd-abc9-494a56efd957",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Offer Expiry Date column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Offer Expiry Date column",
              "timedOut": false,
              "duration": 5012,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Offer Expiry Date')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 6, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Offer Expiry Date'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "1c988032-5814-402a-9c80-7d46734788c2",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Business Analyst column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Business Analyst column",
              "timedOut": false,
              "duration": 4981,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Business Analyst')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 5, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Business Analyst'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "cb79b6d2-9da2-4b9b-bf9e-e794107ef65e",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Project Manager column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Project Manager column",
              "timedOut": false,
              "duration": 5016,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Project Manager')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 4, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Project Manager'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "92129bfb-c206-4dfd-899d-3234aa67f637",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Future Upsells column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Future Upsells column",
              "timedOut": false,
              "duration": 4857,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Future Upsells')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 3, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Future Upsells'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "eec54f77-192f-4444-8842-89f6bef7a487",
              "parentUUID": "7f660774-3ea5-4509-855f-387bb5c505a5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "849d9596-d529-4205-b718-4059e7ab06f7",
            "df7eaeea-4895-44b5-9643-4d550ccdd844",
            "b6b6cb20-cde0-4c03-807a-276ad43ea738",
            "4f5358de-d8a0-467f-8544-db1655eded26",
            "3035abb8-c5f8-417f-82d0-76e70afefedb",
            "3f7ccb68-7b6b-4d53-a738-dadf177291b0",
            "e3cfcf35-aab6-4126-8890-aaa1b99c0673",
            "93bca15e-8e7d-4419-9271-38d15af8cb79",
            "c293b100-dbc1-4c23-8295-c9b5a82da4e4",
            "5095274f-3f9d-4f2f-a760-18d541a6bddc",
            "e94307c8-867f-4c69-b6f7-ded23cb96dcc",
            "9e8065d5-06b3-4990-9569-3745818d001e",
            "fd33cbec-03e3-490d-bb81-61ed7dfd3bc2",
            "8de8256c-b005-4ce0-ba38-7d02e43f2cb0",
            "458e46ad-37b0-4b00-8808-8e50df142aa8",
            "69a28c4d-2ddf-4dbf-86f2-331c7bfbd5c1",
            "d7d914e2-38b7-43bd-b014-787c0dcfd24f",
            "47294510-478a-4368-83a5-63f6b59835bd",
            "77bb3077-d0d5-4c7f-a717-b5786f27e38a",
            "8fe476b9-d485-4e23-a132-244922158eec",
            "9bd76dfc-c813-477b-84f2-97c21bdcd873",
            "e377f5cc-7dfe-4857-bde9-2ce6796756ac",
            "c6ad94f7-b5f6-4348-a960-329370c1ed1b",
            "d641c637-82bd-4ebd-889e-f8737a50c9a9",
            "b9ddd824-532f-42f7-85b9-0eea57bf1e50",
            "a4016ce6-703a-41a4-a324-efc0aca44ad1",
            "71704fc5-6e83-4715-8578-b4273c6d45ba",
            "407fb686-f98d-408d-9719-db4a82ed78ec",
            "1db606a8-0dfc-4efd-abc9-494a56efd957",
            "1c988032-5814-402a-9c80-7d46734788c2",
            "cb79b6d2-9da2-4b9b-bf9e-e794107ef65e",
            "92129bfb-c206-4dfd-899d-3234aa67f637",
            "eec54f77-192f-4444-8842-89f6bef7a487"
          ],
          "failures": [
            "291c9871-c4bc-4ddc-8fa1-56f5ec2ca3d5",
            "3483ac58-f498-4f28-8c61-666f42aa1749",
            "90bda1da-76f4-49ef-b15a-2ddac52e0e75",
            "98d91711-75a8-4862-aaf9-3968e501bbb9",
            "27909244-9480-40af-8646-29848ffde86e",
            "d6f549f6-fd6b-45a9-b365-4f4ce72d9524",
            "236e13c9-78a0-417b-8d1b-cf196b1cf5f4",
            "bad8278d-73fa-4f25-af41-ee80ee21a02b",
            "51b96b13-0a05-4266-b6cd-44d17531b009",
            "da7104b6-1bce-4348-ad7c-34e83bda21c6",
            "25c29c5c-3679-4fec-8904-36744f6f2799",
            "74583a36-87b7-4e5e-ada4-81e7754e3132",
            "9f727e26-d7f7-49d0-bb9d-16844a374235",
            "35ad3725-1f8a-4b69-940d-e37405141b04",
            "018ca5b0-4e4d-4cdf-a4a5-c34136f0affc"
          ],
          "pending": [],
          "skipped": [],
          "duration": 492580,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "19123429-0c1d-4d86-811e-09da47206bf7",
          "title": "All Resources",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/resources/spec-1-all-resources.js",
          "file": "/test/e2e/resources/spec-1-all-resources.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"All Resources\"",
              "fullTitle": "All Resources \"before all\" hook in \"All Resources\"",
              "timedOut": false,
              "duration": 9527,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE departments SET \"hodId\" = 9474 WHERE id = 9;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\n// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "b42443c6-cec6-467f-bce2-641e436c264f",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"All Resources\"",
              "fullTitle": "All Resources \"before each\" hook in \"All Resources\"",
              "timedOut": false,
              "duration": 3659,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resources');\nawait utilFun.wait(3000);\nawait utilFun.waitForPageLoad();",
              "err": {},
              "uuid": "e3ebc1d9-7e0c-4941-a298-e125425b552d",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if all-resources tab is click-able",
              "fullTitle": "All Resources should check if all-resources tab is click-able",
              "timedOut": false,
              "duration": 3928,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/home');\nawait utilFun.waitForPageLoad();\nawait resources.clickResourcesTab();\nawait resources.clickResourcesSubTab('All Resources');\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resources');",
              "err": {},
              "uuid": "25a2cdc1-25aa-4c21-b4b5-6e1f0db6892a",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by name.",
              "fullTitle": "All Resources should able to search resources by name.",
              "timedOut": false,
              "duration": 4602,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('James Salinas');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "5c62ddd2-86c4-41e9-a834-65c59f9a5555",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by their allocated Project.",
              "fullTitle": "All Resources should able to search resources by their allocated Project.",
              "timedOut": false,
              "duration": 3082,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Project');\nawait resources.selectFilterValue('automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "c00ed65c-96c3-433f-bb90-a71a0dd23589",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by their Job status.",
              "fullTitle": "All Resources should able to search resources by their Job status.",
              "timedOut": false,
              "duration": 3095,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Job Status');\nawait resources.selectFilterValue('Permanent');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "6966e7b1-6d93-4b15-82f5-29bbd7d6a459",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Job status filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Job status filter.",
              "timedOut": false,
              "duration": 6325,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Project');\nawait resources.selectFilterValue('automation');\nawait resources.selectFilter('Search by Job Status');\nawait resources.selectFilterValue('Permanent');\nawait resources.selectFilter('Permanent');\nawait resources.selectFilterValue('Internship');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "e41c639f-57fc-4e06-b98c-47734afc1a91",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by their Availability.",
              "fullTitle": "All Resources should able to search resources by their Availability.",
              "timedOut": false,
              "duration": 4765,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Project');\nawait resources.selectFilterValue('automation');\nawait resources.selectFilter('Search by Availability');\nawait resources.selectFilterValue('Fully Available');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "85d4a346-9308-4048-8e4d-0029e1ac58b5",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by this month.",
              "fullTitle": "All Resources should able to search resources by this month.",
              "timedOut": false,
              "duration": 12702,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by this Month');\nawait resources.selectFilterValue('Increments');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10209ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10209ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3aa27ab2-bcd7-43d9-9fb9-eab468e79340",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on this month filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on this month filter.",
              "timedOut": false,
              "duration": 13961,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by this Month');\nawait resources.selectFilterValue('Probations');\nawait resources.selectFilter('Probations');\nawait resources.selectFilterValue('Increments');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10008ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10008ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "1537ff00-36c8-4dd3-a710-d43cf4e15c6b",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Location.",
              "fullTitle": "All Resources should able to search resources by Location.",
              "timedOut": false,
              "duration": 2876,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Location');\nawait resources.selectFilterValue('Remote');\nawait utilFun.waitForPageLoad();\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "0a55d719-0e9b-4e55-8350-3e674756a2a0",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Location filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Location filter.",
              "timedOut": false,
              "duration": 4791,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Location');\nawait resources.selectFilterValue('Remote');\nawait resources.selectFilter('Remote');\nawait resources.selectFilterValue('Karachi');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "42ed510c-cd02-48b4-be72-aff238c9b199",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Skill.",
              "fullTitle": "All Resources should able to search resources by Skill.",
              "timedOut": false,
              "duration": 3307,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Skills\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "2989cc96-a257-4b85-9a10-0fc742798f64",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Skills filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Skills filter.",
              "timedOut": false,
              "duration": 6131,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Skills\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation');\nawait resources.selectFilter('Automation\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation1');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "f9e9ff9e-b372-4816-933e-a96b8cb6d64c",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Show resources with all selected skills.",
              "fullTitle": "All Resources should able to Show resources with all selected skills.",
              "timedOut": false,
              "duration": 5983,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Skills\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation');\nawait resources.selectFilter('Automation\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation1');\nawait resources.clickAllSelectedSkillsCheckbox();\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "c5d35ea5-144d-41d6-bfe2-ae56a99fdbe7",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Department.",
              "fullTitle": "All Resources should able to search resources by Department.",
              "timedOut": false,
              "duration": 3203,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {},
              "uuid": "5175c62f-9342-47c9-85d0-966dc0cc6ec6",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Department filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Department filter.",
              "timedOut": false,
              "duration": 4784,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nawait resources.selectFilter('Engineering');\nawait resources.selectFilterValue('Automation1');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {},
              "uuid": "48c87421-8340-4c5e-bbf3-6686a1947720",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Sub-Department.",
              "fullTitle": "All Resources should able to search resources by Sub-Department.",
              "timedOut": false,
              "duration": 4883,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nawait resources.clickSubDepartment();\nawait resources.selectFilterValue('SQA Ib Support');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:195:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "7dfe3ce7-14aa-4dd3-ab1d-333145aa038f",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Sub-Department filter..",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Sub-Department filter..",
              "timedOut": false,
              "duration": 6462,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nawait resources.clickSubDepartment();\nawait resources.selectFilterValue('SQA Ib Support');\nawait resources.clickSubDepartment();\nawait resources.selectFilterValue('DevOps Support');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:207:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "ca0d5072-ea3a-43ec-a46c-deafaa9b4078",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Designation.",
              "fullTitle": "All Resources should able to search resources by Designation.",
              "timedOut": false,
              "duration": 4859,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation');\nawait resources.selectDesignation('Software Engineer');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "e58854ba-c62a-4eca-9b7f-68e8f720fb38",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Designation filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Designation filter.",
              "timedOut": false,
              "duration": 8839,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation');\nawait resources.selectDesignation('Software Engineer');\nawait resources.selectFilter('Software Engineer');\nawait resources.selectDesignation('HR');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "552239ab-4231-446a-bbb0-bc160dc8f3ee",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Designation Category.",
              "fullTitle": "All Resources should able to search resources by Designation Category.",
              "timedOut": false,
              "duration": 2750,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation Category');\nawait resources.selectDesignationCategory('Automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "45fd275c-a49f-4d00-904f-6b45eba2ad13",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that when user click on clear button then all his search should be clear.",
              "fullTitle": "All Resources should able to Verify that when user click on clear button then all his search should be clear.",
              "timedOut": false,
              "duration": 2752,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation Category');\nawait resources.selectDesignationCategory('Automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.length == 4, `Expected length not found.`);\nawait resources.clickClearButton();\nconst names1 = await resources.getResourceNameTag();\nassert.ok(names1.length > 4, `Expected length not found.`);",
              "err": {
                "message": "AssertionError: Expected length not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected length not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:241:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "db718b2f-f710-47e9-8497-89c22136e873",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add new resource",
              "fullTitle": "All Resources should able to Add new resource",
              "timedOut": false,
              "duration": 17885,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_skills\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `UPDATE employee_assets SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_resumes\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_timeLines\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"project_portfolio_employees\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM employees WHERE id = ${resourceId.rows[0].id};`,\n  ];\n  await utilFun.udpateDatabase(query);\n}\nawait addResources.clickAddResourceBtn();\n//   Form 1\nawait addResources.clickInputField('Employee Name *', 'Steve');\nawait addResources.clickInputField('Work Phone Number', '123456');\nawait addResources.clickInputField('Work Email *', 'steve@email.com');\nawait addResources.clickInputField('Work Shift\\nSelect Work Shift', 'morning');\nawait addResources.clickOption();\nawait addResources.clickInputField('Work Location\\nSelect Work Location', 'remote');\nawait addResources.clickOption();\nawait addResources.clickInputField('Primary Manager\\nPrimary Manager', 'bilal rafaqat');\nawait addResources.clickOption();\nawait addResources.clickInputField('Attendance Mode\\nSelect Attendance Mode', 'invodesk');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation *\\nSelect Designation', 'automation');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation Category*\\nSelect Designation Category', 'automation');\nawait addResources.clickOption();\nawait addResources.clickNextButton();\n//   Form 2\nawait addResources.clickInputField2('Father Name', 'James');\nawait addResources.clickInputField2('Personal Email', 'personal@email.com');\nawait addResources.clickInputField2('Personal Phone', '12345');\nawait addResources.clickInputField2('Address', 'xyz');\nawait addResources.clickInputField2('National ID Number', '1122');\nawait addResources.setDOB('01-01-2000');\nawait addResources.clickInputField2('Gender\\nSelect Gender', 'other');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Marital Status\\nSelect Marital Status', 'single');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Emergency Contact Name', 'James');\nawait addResources.clickInputField2('Emergency Contact Number', '54321');\nawait addResources.clickInputField2('Emergency Contact Relation', 'Father');\nawait addResources.clickNextButton2();\n//   Form 3\nawait addResources.clickInputField3('Bank Name', 'MyBank');\nawait addResources.clickInputField3('Account Title', 'current');\nawait addResources.clickInputField3('IBAN Number', '3344');\nawait addResources.clickInputField3('Bank Address', 'qwerty');\nawait addResources.clickNextButton3();\n//   Form 4\nawait addResources.clickInputField4('Certification Level\\nSelect Certification Level', 'graduation');\nawait addResources.clickOption4();\nawait addResources.clickInputField4('Field of Study', 'SE');\nawait addResources.clickInputField4('School/University', 'MIT');\nawait addResources.clickInputField4('Score/Percentage', '70');\nawait addResources.clickInputField4('Passing Year\\nSelect Degree Passing Year', '2020');\nawait addResources.clickOption4();\nawait addResources.clickNextButton4();\n//   Form 5\nawait addResources.clickInputFieldForm5('Department\\nDepartment', 'Engineering');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Sub Department\\nSub Department', 'DevOps Support');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Contract Type*\\nSelect Contract Type', 'Full Time');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Date of Joining*', '01-11-2023');\nawait addResources.selectJobStatus('Probation');\nawait addResources.selectEndOfProbation('2 Months');\nawait addResources.clickInputFieldForm5('Total Working Hours*\\nSelect Total Working Hours', '4 Hrs');\nawait addResources.clickOptionForm5();\nawait addResources.clickNextButton5();\n//   Form 6\nawait addResources.clickInputFieldForm6('Current Salary (PKR)', '50000');\nawait addResources.clickInputFieldForm6('Last Salary (PKR)', '30000');\nawait addResources.clickInputFieldForm6('Last Increment Date', '01-01-2023');\nawait addResources.clickSubmitButton();\nconst alertText = await addResources.checkAlert();\nassert.equal(alertText, 'Resource Created Successfully!');",
              "err": {
                "message": "TimeoutError: Waiting until element is visible\nWait timed out after 10058ms",
                "estack": "TimeoutError: Waiting until element is visible\nWait timed out after 10058ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "daa678c1-42c0-42ed-a3e2-e5bba19af765",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if Resource is added.",
              "fullTitle": "All Resources should able to check if Resource is added.",
              "timedOut": false,
              "duration": 3041,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:336:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "313ae37c-30a7-4042-b112-20e972112ac5",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "All Resources should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "0bbe227f-237b-492c-9fcd-a784dcd88864",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "All Resources should able to  copy email from options",
              "timedOut": false,
              "duration": 2864,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Copy Email');\nconst alertText = await utilFun.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:361:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "3623892b-285d-406b-abe4-29472478639d",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "All Resources should able to Send Email from options",
              "timedOut": false,
              "duration": 2857,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=steve@email.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:372:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "023fa561-45c8-4f12-a5ee-82c54de0d13a",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "All Resources should able to see Email from options",
              "timedOut": false,
              "duration": 2875,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('See Email');\nconst email = await resources.copyEmail();\nassert.equal(email, 'Email: steve@email.com');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:388:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "c5025e9e-fd3c-4baf-b95e-72082c243402",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "All Resources should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 2889,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Phone Number');\nconst phnNo = await resources.copyEmail();\nassert.equal(phnNo, 'Phone: 12345');\nawait resources.copyPhoneNumber();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:399:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "dfabd4b6-76a6-45d8-aa42-e144e74cb748",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to update Resource from options",
              "fullTitle": "All Resources should able to update Resource from options",
              "timedOut": false,
              "duration": 3126,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Update Resource');\nawait addResources.clickInputField('Work Phone Number', '8');\nawait addResources.clickNextButton();\nawait addResources.clickNextButton2();\nawait addResources.clickNextButton3();\nawait addResources.clickNextButton4();\nawait addResources.clickNextButton5();\nawait addResources.clickSubmitButton();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource Job Status is updated Successfully!');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:413:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "a6aa2ed7-a5a5-464e-ac29-df080e1453cc",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to initiate a Performance Review from options",
              "fullTitle": "All Resources should able to initiate a Performance Review from options",
              "timedOut": false,
              "duration": 2934,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [`DELETE FROM employee_evaluations WHERE \"employeeId\" = ${resourceId.rows[0].id};`];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Initiate a Performance Review');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Review is initiated successfully.');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:436:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "e03db525-7d88-44cd-a9dd-1eb46afd333e",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if Performance review is initiated or not",
              "fullTitle": "All Resources should able to check if Performance review is initiated or not",
              "timedOut": false,
              "duration": 13315,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/evaluation-performance');\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10179ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10179ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "16788e5b-3d7b-47c8-b89e-26a2c93afba7",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Initiate a Revised Designation from options",
              "fullTitle": "All Resources should able to Initiate a Revised Designation from options",
              "timedOut": false,
              "duration": 2918,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [`DELETE FROM employee_evaluations WHERE \"employeeId\" = ${resourceId.rows[0].id};`];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Initiate a Revised Designation');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Review is initiated successfully.');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:461:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "152714da-166c-48b0-bc1f-c1f964eadfb3",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if Performance review is initiated or not",
              "fullTitle": "All Resources should able to check if Performance review is initiated or not",
              "timedOut": false,
              "duration": 13327,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10174ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10174ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "41790916-ae62-4475-8b63-6115f75df659",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to to add project from resource details",
              "fullTitle": "All Resources should able to to add project from resource details",
              "timedOut": false,
              "duration": 2921,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickAddproject();\nawait resources.selectAddProjectInputField('Projects', 'automation');\nawait resources.selectAddProjectInputField('Role in this project', 'Main Developer');\nawait resources.selectAddProjectInputField('Not Set', 'Fully Available');\nawait resources.selectAddProjectInputField('Engagement Mode', 'Billed');\nawait resources.selectAddProjectInputField('Add', '');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource added in project successfully.');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:481:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "1c675077-5711-4d6c-b32b-e2b5fad048fa",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to to delete project from resource details",
              "fullTitle": "All Resources should able to to delete project from resource details",
              "timedOut": false,
              "duration": 3076,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickDeleteProject();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource removed from project successfully.');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:496:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "3ba6b172-0d8d-4e1a-b7c8-64daf31eab80",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Create Employee Resume",
              "fullTitle": "All Resources should able to Create Employee Resume",
              "timedOut": false,
              "duration": 3022,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [`DELETE FROM \"employee_resumes\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceResume.clickCreateResumeBtn();\nawait resourceResume.enterLable('Steve Resume');\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterSummary('testing');\nawait resourceResume.clickNextBtn();\nawait resourceResume.clickSkillDropdown();\nawait resourceResume.selectSkill('Automation');\nawait resourceResume.giveSkillRating(4);\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterTitle('Project1');\nawait resourceResume.enterDescription('Testing');\nawait resourceResume.enterResponsibilities('Testing');\nawait resourceResume.selectTechnologies('Automation1');\nawait resourceResume.selectTools('okokok');\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterDegree('BS Software Engineering');\nawait resourceResume.enterInstitution('UOL');\nawait resourceResume.clickCalendar();\nawait resourceResume.selectMonth('Sep');\nawait resourceResume.selectYear('2017');\nawait resourceResume.clickCalendar();\nawait resourceResume.selectMonth('Jan');\nawait resourceResume.selectYear('2022');\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterTitle('Js Developer');\nawait resourceResume.enterOrganization('Invozone');\nawait resourceResume.clickIssueDateCalendar();\nawait resourceResume.selectDate('22');\nawait resourceResume.selectMonth('Jan');\nawait resourceResume.selectYear('2022');\nawait resourceResume.clickNextBtn();\nawait resourceResume.clickNextBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resume is created successfully.');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:513:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "21fec164-81da-429f-95ab-52883af3e44a",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Department Colum",
              "fullTitle": "All Resources should able to Hide Department Colum",
              "timedOut": false,
              "duration": 2210,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Department');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 12, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Department');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "5740ab93-1f89-4c72-a741-4e4df21cc409",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Sub-Department Colum",
              "fullTitle": "All Resources should able to Hide Sub-Department Colum",
              "timedOut": false,
              "duration": 2089,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Sub-Department');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 11, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Sub-Department');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "726ada34-24a3-4ee9-84fb-a8ae717aa3ae",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Skills Colum",
              "fullTitle": "All Resources should able to Hide Skills Colum",
              "timedOut": false,
              "duration": 2406,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Skills');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 10, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Skills');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "471e94ce-7bda-4e22-b23f-8b9e5401657f",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Exp Years Colum",
              "fullTitle": "All Resources should able to Hide Exp Years Colum",
              "timedOut": false,
              "duration": 1969,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Exp Years');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 9, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Exp Years');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "745efa88-8a62-4e5b-9a60-cf2a59ae77a2",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Location Colum",
              "fullTitle": "All Resources should able to Hide Location Colum",
              "timedOut": false,
              "duration": 2055,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Location');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 8, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Location');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "5c1d79dd-bb0b-4fd8-81ea-1f8e43b9852a",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Projects Colum",
              "fullTitle": "All Resources should able to Hide Projects Colum",
              "timedOut": false,
              "duration": 1869,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Projects');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 7, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Projects');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "a330f2a7-d2b1-48ef-a44d-a0d5258fe7a8",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Availablility Colum",
              "fullTitle": "All Resources should able to Hide Availablility Colum",
              "timedOut": false,
              "duration": 1795,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Availability');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 6, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Availablility');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "df0fd357-835b-4512-b098-57194b24912d",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Resume Colum",
              "fullTitle": "All Resources should able to Hide Resume Colum",
              "timedOut": false,
              "duration": 1673,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Resume');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 5, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Resume');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "e7bf6fa3-3f16-4622-94b8-bded7a962688",
              "parentUUID": "19123429-0c1d-4d86-811e-09da47206bf7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "25a2cdc1-25aa-4c21-b4b5-6e1f0db6892a",
            "5c62ddd2-86c4-41e9-a834-65c59f9a5555",
            "c00ed65c-96c3-433f-bb90-a71a0dd23589",
            "6966e7b1-6d93-4b15-82f5-29bbd7d6a459",
            "e41c639f-57fc-4e06-b98c-47734afc1a91",
            "85d4a346-9308-4048-8e4d-0029e1ac58b5",
            "0a55d719-0e9b-4e55-8350-3e674756a2a0",
            "42ed510c-cd02-48b4-be72-aff238c9b199",
            "2989cc96-a257-4b85-9a10-0fc742798f64",
            "f9e9ff9e-b372-4816-933e-a96b8cb6d64c",
            "c5d35ea5-144d-41d6-bfe2-ae56a99fdbe7",
            "5175c62f-9342-47c9-85d0-966dc0cc6ec6",
            "48c87421-8340-4c5e-bbf3-6686a1947720",
            "e58854ba-c62a-4eca-9b7f-68e8f720fb38",
            "552239ab-4231-446a-bbb0-bc160dc8f3ee",
            "45fd275c-a49f-4d00-904f-6b45eba2ad13",
            "5740ab93-1f89-4c72-a741-4e4df21cc409",
            "726ada34-24a3-4ee9-84fb-a8ae717aa3ae",
            "471e94ce-7bda-4e22-b23f-8b9e5401657f",
            "745efa88-8a62-4e5b-9a60-cf2a59ae77a2",
            "5c1d79dd-bb0b-4fd8-81ea-1f8e43b9852a",
            "a330f2a7-d2b1-48ef-a44d-a0d5258fe7a8",
            "df0fd357-835b-4512-b098-57194b24912d",
            "e7bf6fa3-3f16-4622-94b8-bded7a962688"
          ],
          "failures": [
            "3aa27ab2-bcd7-43d9-9fb9-eab468e79340",
            "1537ff00-36c8-4dd3-a710-d43cf4e15c6b",
            "7dfe3ce7-14aa-4dd3-ab1d-333145aa038f",
            "ca0d5072-ea3a-43ec-a46c-deafaa9b4078",
            "db718b2f-f710-47e9-8497-89c22136e873",
            "daa678c1-42c0-42ed-a3e2-e5bba19af765",
            "313ae37c-30a7-4042-b112-20e972112ac5",
            "3623892b-285d-406b-abe4-29472478639d",
            "023fa561-45c8-4f12-a5ee-82c54de0d13a",
            "c5025e9e-fd3c-4baf-b95e-72082c243402",
            "dfabd4b6-76a6-45d8-aa42-e144e74cb748",
            "a6aa2ed7-a5a5-464e-ac29-df080e1453cc",
            "e03db525-7d88-44cd-a9dd-1eb46afd333e",
            "16788e5b-3d7b-47c8-b89e-26a2c93afba7",
            "152714da-166c-48b0-bc1f-c1f964eadfb3",
            "41790916-ae62-4475-8b63-6115f75df659",
            "1c675077-5711-4d6c-b32b-e2b5fad048fa",
            "3ba6b172-0d8d-4e1a-b7c8-64daf31eab80",
            "21fec164-81da-429f-95ab-52883af3e44a"
          ],
          "pending": [
            "0bbe227f-237b-492c-9fcd-a784dcd88864"
          ],
          "skipped": [],
          "duration": 207196,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "626da90e-6a4f-46c5-8b7e-f29ef5f12814",
          "title": "Resource Offboarding",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/resources/spec-2-resource-offboarding.js",
          "file": "/test/e2e/resources/spec-2-resource-offboarding.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Resource Offboarding\"",
              "fullTitle": "Resource Offboarding \"before all\" hook in \"Resource Offboarding\"",
              "timedOut": false,
              "duration": 9206,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "c6f9accc-5377-402b-8aa3-fbf8eb3d8759",
              "parentUUID": "626da90e-6a4f-46c5-8b7e-f29ef5f12814",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Resource Offboarding\"",
              "fullTitle": "Resource Offboarding \"before each\" hook in \"Resource Offboarding\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad()",
              "err": {},
              "uuid": "8eff69ee-a64e-4129-bda9-e455f6524c5d",
              "parentUUID": "626da90e-6a4f-46c5-8b7e-f29ef5f12814",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to OffBoard Resource by Resignation without Pending Discussion",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by Resignation without Pending Discussion",
              "timedOut": false,
              "duration": 4212,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('Resignation')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.clickPendingCheckbox()\nawait resourceOffBoarding.setConntractEndDate('14122024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource job status is updated and email has been sent to PM & HOD!!');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-2-resource-offboarding.js:42:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "4f848068-b00b-442f-ab29-37910b11fa37",
              "parentUUID": "626da90e-6a4f-46c5-8b7e-f29ef5f12814",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 13324,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10144ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10144ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "053f8d2e-b88c-483c-9e5b-9101dd3997e9",
              "parentUUID": "626da90e-6a4f-46c5-8b7e-f29ef5f12814",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to OffBoard Resource by Resignation Pending Discussion",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by Resignation Pending Discussion",
              "timedOut": false,
              "duration": 4530,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('Resignation')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource job status is updated and email has been sent to PM & HOD!!');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-2-resource-offboarding.js:81:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "76d77f66-705d-484f-b0e5-2e18f2e8a908",
              "parentUUID": "626da90e-6a4f-46c5-8b7e-f29ef5f12814",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 13486,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10184ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10184ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "0b1ba2ba-7b2b-43a8-b201-cc1c996a043b",
              "parentUUID": "626da90e-6a4f-46c5-8b7e-f29ef5f12814",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should able to approve Pending resource offBoarding",
              "fullTitle": "Resource Offboarding Should able to approve Pending resource offBoarding",
              "timedOut": false,
              "duration": 13609,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);\nawait resourceOffBoarding.selectOffBoardingResponse('Approved')\nawait resourceOffBoarding.setLastDate('14122024')\nawait resourceOffBoarding.clickUpdateBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resignation request has been approved succesfully!');\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10169ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10169ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "314070c3-6c78-4511-b601-e5034b85a1a5",
              "parentUUID": "626da90e-6a4f-46c5-8b7e-f29ef5f12814",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should able to Reject Pending resource offBoarding",
              "fullTitle": "Resource Offboarding Should able to Reject Pending resource offBoarding",
              "timedOut": false,
              "duration": 13619,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `UPDATE boarding_requests SET \"status\" = 'PENDING' WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE boarding_requests SET \"noticeEndDate\" = NULL WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE boarding_requests SET \"deletedAt\" = NULL WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);\nawait resourceOffBoarding.selectOffBoardingResponse('Rejected')\nawait resourceOffBoarding.enterReason('testing')\nawait resourceOffBoarding.clickUpdateBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resignation request has been rejected succesfully!');\nawait resourceOffBoarding.confirmRejectStatus()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10158ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10158ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "06cf385e-f769-4d7c-96ea-363fede5c30b",
              "parentUUID": "626da90e-6a4f-46c5-8b7e-f29ef5f12814",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to OffBoard Resource by Termination",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by Termination",
              "timedOut": false,
              "duration": 4780,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('Termination')\nawait resourceOffBoarding.enterReason('testing')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.setConntractEndDate('14122024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Termination request has been approved succesfully!');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-2-resource-offboarding.js:161:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "8b96957f-7419-454b-8e3c-fbf6a4912a46",
              "parentUUID": "626da90e-6a4f-46c5-8b7e-f29ef5f12814",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 13421,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Termination'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10146ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10146ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "6db2cf5d-863d-4db4-93a3-1f89bc69ccf1",
              "parentUUID": "626da90e-6a4f-46c5-8b7e-f29ef5f12814",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource upcoming offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource upcoming offBoarding is showning or not",
              "timedOut": false,
              "duration": 13006,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Termination'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10146ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10146ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "caa39c1c-bc2c-4aa3-b30a-189d4951eb5a",
              "parentUUID": "626da90e-6a4f-46c5-8b7e-f29ef5f12814",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to OffBoard Resource by End of Service",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by End of Service",
              "timedOut": false,
              "duration": 4618,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('End of Service')\nawait resourceOffBoarding.enterReason('testing')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.setConntractEndDate('14122024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'End of Service request has been approved succesfully!');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-2-resource-offboarding.js:212:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "a40d993e-428a-43e4-914c-8f6f2e725449",
              "parentUUID": "626da90e-6a4f-46c5-8b7e-f29ef5f12814",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 13414,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('End of Service'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10155ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10155ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "e2e71b40-3b75-4d5d-8f07-8a4709097aa2",
              "parentUUID": "626da90e-6a4f-46c5-8b7e-f29ef5f12814",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource upcoming offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource upcoming offBoarding is showning or not",
              "timedOut": false,
              "duration": 13882,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('End of Service'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10139ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10139ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "27de1de9-eeee-4574-be2c-14265ea8156b",
              "parentUUID": "626da90e-6a4f-46c5-8b7e-f29ef5f12814",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4f848068-b00b-442f-ab29-37910b11fa37",
            "053f8d2e-b88c-483c-9e5b-9101dd3997e9",
            "76d77f66-705d-484f-b0e5-2e18f2e8a908",
            "0b1ba2ba-7b2b-43a8-b201-cc1c996a043b",
            "314070c3-6c78-4511-b601-e5034b85a1a5",
            "06cf385e-f769-4d7c-96ea-363fede5c30b",
            "8b96957f-7419-454b-8e3c-fbf6a4912a46",
            "6db2cf5d-863d-4db4-93a3-1f89bc69ccf1",
            "caa39c1c-bc2c-4aa3-b30a-189d4951eb5a",
            "a40d993e-428a-43e4-914c-8f6f2e725449",
            "e2e71b40-3b75-4d5d-8f07-8a4709097aa2",
            "27de1de9-eeee-4574-be2c-14265ea8156b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 125901,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "cd66a2aa-199f-43ba-8e1f-9af3cb27760d",
          "title": "Position Openings",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/resources/spec-3-position-opening.js",
          "file": "/test/e2e/resources/spec-3-position-opening.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Position Openings\"",
              "fullTitle": "Position Openings \"before all\" hook in \"Position Openings\"",
              "timedOut": false,
              "duration": 8776,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "9657ab97-5eb3-4784-802d-e2bcf2cbfe1c",
              "parentUUID": "cd66a2aa-199f-43ba-8e1f-9af3cb27760d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Position Openings\"",
              "fullTitle": "Position Openings \"before each\" hook in \"Position Openings\"",
              "timedOut": false,
              "duration": 442,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/position-openings');\nawait utilFun.waitForPageLoad();",
              "err": {},
              "uuid": "069c40af-b799-46d2-ae85-9fee3acf5986",
              "parentUUID": "cd66a2aa-199f-43ba-8e1f-9af3cb27760d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Position Openings\"",
              "fullTitle": "Position Openings \"after all\" hook in \"Position Openings\"",
              "timedOut": false,
              "duration": 20,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9171;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\n// await utilFun.quit()",
              "err": {},
              "uuid": "574c64f8-f28e-499e-8317-6c32c2849858",
              "parentUUID": "cd66a2aa-199f-43ba-8e1f-9af3cb27760d",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should able to Apply Request For Position opening",
              "fullTitle": "Position Openings should able to Apply Request For Position opening",
              "timedOut": false,
              "duration": 20254,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9474;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9171;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9429;`,\n  `DELETE FROM \"position_openings\" WHERE \"employeeId\" = 9429;`,\n];\nawait utilFun.udpateDatabase(query);\nawait positionOpenings.clickAddBtn();\nawait positionOpenings.selectField1AndEnterValue('Department*\\nSelect Department', 'Engineering');\nawait positionOpenings.selectField1AndEnterValue('Name of Position*\\nSelect Position', 'Software Engineer');\nawait positionOpenings.selectField2AndEnterValue('Position Level*\\nSelect Level', 'Automation');\nawait positionOpenings.selectField2AndEnterValue('No. of Resources*', '3');\nawait positionOpenings.selectField2AndEnterValue(`Year's of Experience*\\nSelect Years`, '0 - 1');\nawait positionOpenings.selectField1AndEnterValue('Tech Stack*\\nSelect Tech Stack', 'Automation');\nawait positionOpenings.selectField1AndEnterValue('Minimum Education*\\nSelect Education', 'Matric');\nawait positionOpenings.selectField1AndEnterValue('Gender*\\nSelect Gender', 'Male');\nawait positionOpenings.selectField1AndEnterValue('Budget*\\nSelect Budget', '0 - 25');\nawait positionOpenings.selectField1AndEnterValue('Office Location*\\nSelect Location', 'Remote');\nawait positionOpenings.selectField1AndEnterValue('Priorty Level*\\nSelect Priorty', 'High');\nawait positionOpenings.uploadDescription();\nawait positionOpenings.enterInstructions('Testing');\nawait positionOpenings.clickConfirmAddBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position request is created successfully!');",
              "err": {},
              "uuid": "09cf8cb9-524d-4afe-ba8e-e7d3fcedc0da",
              "parentUUID": "cd66a2aa-199f-43ba-8e1f-9af3cb27760d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if request id Added",
              "fullTitle": "Position Openings should able to check if request id Added",
              "timedOut": false,
              "duration": 1643,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {},
              "uuid": "08d3c422-9722-40fd-a578-f634d7edda61",
              "parentUUID": "cd66a2aa-199f-43ba-8e1f-9af3cb27760d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit request",
              "fullTitle": "Position Openings should able to edit request",
              "timedOut": false,
              "duration": 3424,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickEditBtn();\nawait positionOpenings.enterInstructions(' Updated');\nawait positionOpenings.clickConfirmAddBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been updated successfully');",
              "err": {},
              "uuid": "a95067a7-6927-4b1d-a48a-222f957f7e6c",
              "parentUUID": "cd66a2aa-199f-43ba-8e1f-9af3cb27760d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete request",
              "fullTitle": "Position Openings should able to Delete request",
              "timedOut": false,
              "duration": 2387,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickDeleteBtn();\nawait positionOpenings.enterReason('testing');\nawait positionOpenings.clickYesBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been deleted successfully!');",
              "err": {},
              "uuid": "1a9a478b-b550-4620-84aa-62624db48c88",
              "parentUUID": "cd66a2aa-199f-43ba-8e1f-9af3cb27760d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if request is visible by HOD",
              "fullTitle": "Position Openings should check if request is visible by HOD",
              "timedOut": false,
              "duration": 10029,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE \"position_openings\" SET \"deletedAt\" = NULL WHERE \"employeeId\" = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-body\"] .ant-table-row)\nWait timed out after 10007ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-body\"] .ant-table-row)\nWait timed out after 10007ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "87b01580-550d-4aee-8e4c-bb80a720f012",
              "parentUUID": "cd66a2aa-199f-43ba-8e1f-9af3cb27760d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if HOD can edit request",
              "fullTitle": "Position Openings should able to check if HOD can edit request",
              "timedOut": false,
              "duration": 10149,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickEditBtn();\nawait positionOpenings.enterInstructions(' Updated By HOD');\nawait positionOpenings.clickConfirmAddBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been updated successfully');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Edit\"])\nWait timed out after 10148ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Edit\"])\nWait timed out after 10148ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "104a3047-60cd-4806-8adf-9de3b58435cf",
              "parentUUID": "cd66a2aa-199f-43ba-8e1f-9af3cb27760d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to reject request by hod",
              "fullTitle": "Position Openings should able to reject request by hod",
              "timedOut": false,
              "duration": 10029,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickRejectBtn();\nawait positionOpenings.enterReason('testing');\nawait positionOpenings.clickYesBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been rejected successfully');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Reject\"])\nWait timed out after 10028ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Reject\"])\nWait timed out after 10028ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "6291cb68-e9c6-4741-b26b-abe09da87771",
              "parentUUID": "cd66a2aa-199f-43ba-8e1f-9af3cb27760d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in reject tab",
              "fullTitle": "Position Openings should verify the request is showing in reject tab",
              "timedOut": false,
              "duration": 11203,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.selectReqTblSubTab('Rejected');\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(xpath, (//*[@class=\"myProjectIcon tableHeight pt-0 card\"])[2])\nWait timed out after 10200ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(xpath, (//*[@class=\"myProjectIcon tableHeight pt-0 card\"])[2])\nWait timed out after 10200ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3d1c8f9a-0938-4076-b2b2-96e85b8491b6",
              "parentUUID": "cd66a2aa-199f-43ba-8e1f-9af3cb27760d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to approve request by hod",
              "fullTitle": "Position Openings should able to approve request by hod",
              "timedOut": false,
              "duration": 10065,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [`UPDATE \"position_openings\" SET \"isApprovedByHod\" = 'PENDING' WHERE \"employeeId\" = 9429;`];\nawait utilFun.udpateDatabase(query);\nawait positionOpenings.clickApproveBtn();\nawait positionOpenings.enterReason('testing');\nawait positionOpenings.clickYesBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been approved successfully');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Approve\"])\nWait timed out after 10037ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Approve\"])\nWait timed out after 10037ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "accc2c1f-f0c2-492f-9c8e-d80f8a113209",
              "parentUUID": "cd66a2aa-199f-43ba-8e1f-9af3cb27760d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in approve tab",
              "fullTitle": "Position Openings should verify the request is showing in approve tab",
              "timedOut": false,
              "duration": 11008,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.selectReqTblSubTab('Approved');\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(xpath, (//*[@class=\"myProjectIcon tableHeight pt-0 card\"])[2])\nWait timed out after 10006ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(xpath, (//*[@class=\"myProjectIcon tableHeight pt-0 card\"])[2])\nWait timed out after 10006ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "9f9f3a86-0cf8-423c-907e-77ec8816d629",
              "parentUUID": "cd66a2aa-199f-43ba-8e1f-9af3cb27760d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if request is visible by CEO",
              "fullTitle": "Position Openings should check if request is visible by CEO",
              "timedOut": false,
              "duration": 1616,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9474;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9171;`,\n];\nawait utilFun.udpateDatabase(query);\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {},
              "uuid": "e47b7dc6-4e1e-4977-b165-b77addbc479f",
              "parentUUID": "cd66a2aa-199f-43ba-8e1f-9af3cb27760d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if CEO can edit request",
              "fullTitle": "Position Openings should able to check if CEO can edit request",
              "timedOut": false,
              "duration": 3859,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickEditBtn();\nawait positionOpenings.enterInstructions(' Updated By CEO');\nawait positionOpenings.clickConfirmAddBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been updated successfully');",
              "err": {},
              "uuid": "bde689a4-af45-4edf-81b8-eb2b22ff42cb",
              "parentUUID": "cd66a2aa-199f-43ba-8e1f-9af3cb27760d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to reject request by hod",
              "fullTitle": "Position Openings should able to reject request by hod",
              "timedOut": false,
              "duration": 2489,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickRejectBtn();\nawait positionOpenings.enterReason('testing');\nawait positionOpenings.clickYesBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been rejected successfully');",
              "err": {},
              "uuid": "bc91ec45-4e39-4ba3-964e-739b16dd50a0",
              "parentUUID": "cd66a2aa-199f-43ba-8e1f-9af3cb27760d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in reject tab",
              "fullTitle": "Position Openings should verify the request is showing in reject tab",
              "timedOut": false,
              "duration": 1358,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.selectSubTab('Rejected');\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {},
              "uuid": "fd5cfe1a-d2dd-4a58-ad52-3638e15e4279",
              "parentUUID": "cd66a2aa-199f-43ba-8e1f-9af3cb27760d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to approve request by hod",
              "fullTitle": "Position Openings should able to approve request by hod",
              "timedOut": false,
              "duration": 2575,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [`UPDATE \"position_openings\" SET \"requestStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`];\nawait utilFun.udpateDatabase(query);\nawait positionOpenings.clickApproveBtn();\nawait positionOpenings.enterReason('testing');\nawait positionOpenings.clickYesBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been approved successfully');",
              "err": {},
              "uuid": "7173cfe2-9631-49d6-92d7-90f987e01988",
              "parentUUID": "cd66a2aa-199f-43ba-8e1f-9af3cb27760d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in approve tab",
              "fullTitle": "Position Openings should verify the request is showing in approve tab",
              "timedOut": false,
              "duration": 11771,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.selectSubTab('Approved');\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-body\"] .ant-table-row)\nWait timed out after 10173ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-body\"] .ant-table-row)\nWait timed out after 10173ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "45c850f1-a7c5-4b3d-b33d-acf69e34d85c",
              "parentUUID": "cd66a2aa-199f-43ba-8e1f-9af3cb27760d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in approve tab for Applicant",
              "fullTitle": "Position Openings should verify the request is showing in approve tab for Applicant",
              "timedOut": false,
              "duration": 11773,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9171;`,\n];\nawait utilFun.udpateDatabase(query);\nawait positionOpenings.selectSubTab('Approved');\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-body\"] .ant-table-row)\nWait timed out after 10004ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-body\"] .ant-table-row)\nWait timed out after 10004ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "653cc18f-5f0e-483c-8dfc-62646031c8e6",
              "parentUUID": "cd66a2aa-199f-43ba-8e1f-9af3cb27760d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "09cf8cb9-524d-4afe-ba8e-e7d3fcedc0da",
            "08d3c422-9722-40fd-a578-f634d7edda61",
            "a95067a7-6927-4b1d-a48a-222f957f7e6c",
            "1a9a478b-b550-4620-84aa-62624db48c88",
            "e47b7dc6-4e1e-4977-b165-b77addbc479f",
            "bde689a4-af45-4edf-81b8-eb2b22ff42cb",
            "bc91ec45-4e39-4ba3-964e-739b16dd50a0",
            "fd5cfe1a-d2dd-4a58-ad52-3638e15e4279",
            "7173cfe2-9631-49d6-92d7-90f987e01988"
          ],
          "failures": [
            "87b01580-550d-4aee-8e4c-bb80a720f012",
            "104a3047-60cd-4806-8adf-9de3b58435cf",
            "6291cb68-e9c6-4741-b26b-abe09da87771",
            "3d1c8f9a-0938-4076-b2b2-96e85b8491b6",
            "accc2c1f-f0c2-492f-9c8e-d80f8a113209",
            "9f9f3a86-0cf8-423c-907e-77ec8816d629",
            "45c850f1-a7c5-4b3d-b33d-acf69e34d85c",
            "653cc18f-5f0e-483c-8dfc-62646031c8e6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 125632,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
          "title": "Resource Details",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/resources/spec-4-resourse-details.js",
          "file": "/test/e2e/resources/spec-4-resourse-details.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Resource Details\"",
              "fullTitle": "Resource Details \"before all\" hook in \"Resource Details\"",
              "timedOut": false,
              "duration": 9109,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nlet resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  detailsPageUrl = `/resource-detail/${resourceId.rows[0].id}?tab=Basic_Information`;\n  attendanceTabUrl = `/resource-detail/${resourceId.rows[0].id}?tab=Attendance`;\n  oldId = resourceId.rows[0].id;\n  newId = resourceId.rows[0].id;\n}\n// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "cd462a74-e0da-4593-a4dc-8f1c4d729f5e",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to Add new resource",
              "fullTitle": "Resource Details should able to Add new resource",
              "timedOut": false,
              "duration": 21946,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_skills\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `UPDATE employee_assets SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_resumes\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_timeLines\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"project_portfolio_employees\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM employees WHERE id = ${resourceId.rows[0].id};`,\n  ];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.wait(3000);\nawait utilFun.waitForPageLoad();\nawait addResources.clickAddResourceBtn();\n//   Form 1\nawait addResources.clickInputField('Employee Name *', 'Stevee');\nawait addResources.clickInputField('Work Phone Number', '123456');\nawait addResources.clickInputField('Work Email *', 'steve@email.com');\nawait addResources.clickInputField('Work Shift\\nSelect Work Shift', 'morning');\nawait addResources.clickOption();\nawait addResources.clickInputField('Work Location\\nSelect Work Location', 'remote');\nawait addResources.clickOption();\nawait addResources.clickInputField('Primary Manager\\nPrimary Manager', 'bilal rafaqat');\nawait addResources.clickOption();\nawait addResources.clickInputField('Attendance Mode\\nSelect Attendance Mode', 'invodesk');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation *\\nSelect Designation', 'automation');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation Category*\\nSelect Designation Category', 'automation');\nawait addResources.clickOption();\nawait addResources.clickNextButton();\n//   Form 2\nawait addResources.clickInputField2('Father Name', 'James');\nawait addResources.clickInputField2('Personal Email', 'personal@email.com');\nawait addResources.clickInputField2('Personal Phone', '12345');\nawait addResources.clickInputField2('Address', 'xyz');\nawait addResources.clickInputField2('National ID Number', '1122');\nawait addResources.setDOB('01-01-2000');\nawait addResources.clickInputField2('Gender\\nSelect Gender', 'other');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Marital Status\\nSelect Marital Status', 'single');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Emergency Contact Name', 'James');\nawait addResources.clickInputField2('Emergency Contact Number', '54321');\nawait addResources.clickInputField2('Emergency Contact Relation', 'Father');\nawait addResources.clickNextButton2();\n//   Form 3\nawait addResources.clickInputField3('Bank Name', 'MyBank');\nawait addResources.clickInputField3('Account Title', 'current');\nawait addResources.clickInputField3('IBAN Number', '3344');\nawait addResources.clickInputField3('Bank Address', 'qwerty');\nawait addResources.clickNextButton3();\n//   Form 4\nawait addResources.clickInputField4('Certification Level\\nSelect Certification Level', 'graduation');\nawait addResources.clickOption4();\nawait addResources.clickInputField4('Field of Study', 'SE');\nawait addResources.clickInputField4('School/University', 'MIT');\nawait addResources.clickInputField4('Score/Percentage', '70');\nawait addResources.clickInputField4('Passing Year\\nSelect Degree Passing Year', '2020');\nawait addResources.clickOption4();\nawait addResources.clickNextButton4();\n//   Form 5\nawait addResources.clickInputFieldForm5('Department\\nDepartment', 'HR');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Sub Department\\nSub Department', 'DevOps Support');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Contract Type*\\nSelect Contract Type', 'Full Time');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Date of Joining*', '11-01-2023');\nawait addResources.selectJobStatus('Probation');\nawait addResources.selectEndOfProbation('2 Months');\nawait addResources.clickInputFieldForm5('Total Working Hours*\\nSelect Total Working Hours', '4 Hrs');\nawait addResources.clickOptionForm5();\nawait addResources.clickNextButton5();\n//   Form 6\nawait addResources.clickInputFieldForm6('Current Salary (PKR)', '50000');\nawait addResources.clickInputFieldForm6('Last Salary (PKR)', '30000');\nawait addResources.clickInputFieldForm6('Last Increment Date', '01-01-2024');\nawait addResources.clickSubmitButton();\nconst alertText = await addResources.checkAlert();\nassert.equal(alertText, 'Resource Created Successfully!');\nlet resourceId1 = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId1.rowCount !== 0) {\n  detailsPageUrl = `/resource-detail/${resourceId1.rows[0].id}?tab=Basic_Information`;\n  attendanceTabUrl = `/resource-detail/${resourceId1.rows[0].id}?tab=Attendance`;\n  newId = resourceId1.rows[0].id;\n}",
              "err": {
                "message": "TimeoutError: Waiting until element is visible\nWait timed out after 10077ms",
                "estack": "TimeoutError: Waiting until element is visible\nWait timed out after 10077ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "175ce5aa-581c-4d76-bb5b-2baad216bde8",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to to add project from resource details",
              "fullTitle": "Resource Details should able to to add project from resource details",
              "timedOut": false,
              "duration": 15938,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resources');\nawait utilFun.wait(3000);\nawait resources.clickFilterBtn();\nawait resources.searchName('Stevee');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Stevee'), `Expected text not found.`);\nawait resources.clickAddproject();\nawait resources.selectAddProjectInputField('Projects', 'automation');\nawait resources.selectAddProjectInputField('Role in this project', 'Main Developer');\nawait resources.selectAddProjectInputField('Not Set', 'Fully Available');\nawait resources.selectAddProjectInputField('Engagement Mode', 'Billed');\nawait resources.selectAddProjectInputField('Add', '');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource added in project successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10023ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10023ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "301d862c-c305-49db-a3ec-47ab12cc15a4",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource is showing.",
              "fullTitle": "Resource Details should check if Resource is showing.",
              "timedOut": false,
              "duration": 4787,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/resources');\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Stevee'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:151:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "a4e3d633-26c9-4086-9ccc-8f4bbc62f88c",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if clicking on resource name redirecting to resoure details page.",
              "fullTitle": "Resource Details should check if clicking on resource name redirecting to resoure details page.",
              "timedOut": false,
              "duration": 4579,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/resources');\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Stevee'), `Expected text not found.`);\nawait resources.ClickResourceNameTag();\nawait utilFun.switchWindow(1);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:159:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "e9e8797e-b2d6-45e3-8cb3-c163e895e4aa",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource name is showing on Details page.",
              "fullTitle": "Resource Details should check if Resource name is showing on Details page.",
              "timedOut": false,
              "duration": 961,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nconst name = await resourceDetails.getResourceNameTxt();\nassert.equal(name, 'Stevee', `Expected text not found.`);",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:169:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "58d1ef50-70fb-4a59-91e5-537ad5a9df5a",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Avatar is showing on Details page.",
              "fullTitle": "Resource Details should check if Resource Avatar is showing on Details page.",
              "timedOut": false,
              "duration": 11472,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nconst name = await resourceDetails.checkAvatarIcon();\nassert.equal(name, 'S', `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10085ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10085ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "7891cef9-069c-40e4-a023-eb8755a5789b",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Father Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Father Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 1020,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Father Name', 'James');\nawait resourceDetails.editValue('Father Name', 'James Salinas');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Father Name', 'James salinas');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:187:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "8943f0aa-ad78-4941-825e-617b953fd55e",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Personal Email is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Personal Email is Shownig and is editable.",
              "timedOut": false,
              "duration": 442,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Personal Email', 'personal@email.com');\nawait resourceDetails.editValue('Personal Email', 'personalUpdated@email.com');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Personal Email', 'personalUpdated@email.com');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:198:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "7ca23647-1f41-4bc1-b217-9189a97ab00a",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Address is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Address is Shownig and is editable.",
              "timedOut": false,
              "duration": 382,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Address', 'xyz');\nawait resourceDetails.editValue('Address', 'xyzUpdated');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Address', 'xyzUpdated');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:209:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "a223ca61-1247-4b17-a4b8-3d586cdd2d37",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Nationality is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Nationality is Shownig and is editable.",
              "timedOut": false,
              "duration": 592,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Nationality', 'Pakistan');\nawait resourceDetails.editValue('Nationality', 'United arab emirates');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Nationality', 'United arab emirates');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:220:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "6e5e9b60-563a-46ae-9ccf-5ea9906ce846",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource National ID Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource National ID Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 454,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('National ID Number', '1122');\nawait resourceDetails.editValue('National ID Number', '2233');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('National ID Number', '2233');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:231:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "d155b629-4691-4248-9f3a-d31faf138a71",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Date of Birth is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Date of Birth is Shownig and is editable.",
              "timedOut": false,
              "duration": 393,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Date of Birth', '01-01-2000');\nawait resourceDetails.editValue('Date of Birth', '01-01-2001');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Date of Birth', '01-01-2001');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:242:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "6ff40968-6c5d-4fe1-90bf-7fbaa3253f65",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Gender is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Gender is Shownig and is editable.",
              "timedOut": false,
              "duration": 360,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Gender', 'Other');\nawait resourceDetails.editValue('Gender', 'Female');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Gender', 'Female');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:253:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "48da26ce-aa6b-4f72-acd7-866eddf1dd71",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Marital Status is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Marital Status is Shownig and is editable.",
              "timedOut": false,
              "duration": 394,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Marital Status', 'Single');\nawait resourceDetails.editValue('Marital Status', 'Married');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Marital Status', 'Married');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:264:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "ed914b30-777b-4d62-b1e8-87b250902e26",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Emergency Contact Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Emergency Contact Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 363,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Emergency Contact Name', 'James');\nawait resourceDetails.editValue('Emergency Contact Name', 'James Salinas');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Emergency Contact Name', 'James Salinas');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:275:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "78461b5f-7787-463a-9413-49f52e99a575",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Emergency Contact Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Emergency Contact Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 401,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Emergency Contact Number', '54321');\nawait resourceDetails.editValue('Emergency Contact Number', '654321');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Emergency Contact Number', '654321');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:286:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "068b2834-3da8-4e0d-bda5-ff1cf8095a4c",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Emergency Contact Relation is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Emergency Contact Relation is Shownig and is editable.",
              "timedOut": false,
              "duration": 382,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Emergency Contact Relation', 'Father');\nawait resourceDetails.editValue('Emergency Contact Relation', 'Brother');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Emergency Contact Relation', 'Brother');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:297:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "601e803a-f6e7-4649-b4ca-0eeeb48d926c",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Bank Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Bank Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 348,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Bank Name', 'Mybank');\nawait resourceDetails.editValue('Bank Name', 'Bankname');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Bank Name', 'Bankname');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:308:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "87993650-1b51-45b2-90ea-c15e0b21f8c6",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Account Title is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Account Title is Shownig and is editable.",
              "timedOut": false,
              "duration": 368,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Account Title', 'Current');\nawait resourceDetails.editValue('Account Title', 'Saving');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Account Title', 'Saving');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:319:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "da7411a7-cf73-4b2f-a16a-d82fa0a84e82",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource IBAN Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource IBAN Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 338,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('IBAN Number', '3344');\nawait resourceDetails.editValue('IBAN Number', '4455');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('IBAN Number', '4455');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:330:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "76d1af1c-40ea-4e95-a2a9-0afe0291eed3",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Bank Address is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Bank Address is Shownig and is editable.",
              "timedOut": false,
              "duration": 368,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Bank Address', 'qwerty');\nawait resourceDetails.editValue('Bank Address', 'street14');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Bank Address', 'street14');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:341:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "9557d961-778a-432c-99b1-6bd93240c191",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Certification Level is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Certification Level is Shownig and is editable.",
              "timedOut": false,
              "duration": 337,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Certification Level', 'Graduation');\nawait resourceDetails.editValue('Certification Level', 'Master');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Certification Level', 'Master');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:352:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "dba7898f-2bcf-47f0-8689-b6ebaeb113a6",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Field of Study is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Field of Study is Shownig and is editable.",
              "timedOut": false,
              "duration": 356,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Field of Study', 'SE');\nawait resourceDetails.editValue('Field of Study', 'CS');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Field of Study', 'CS');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:363:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "76b93446-d697-45bc-93b4-45976162266b",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource School/University is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource School/University is Shownig and is editable.",
              "timedOut": false,
              "duration": 383,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('School/University', 'Mit');\nawait resourceDetails.editValue('School/University', 'Uol');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('School/University', 'Uol');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:374:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "e3b540e7-a280-4c7a-b336-1967dc7bfb7c",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Score/Percentage is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Score/Percentage is Shownig and is editable.",
              "timedOut": false,
              "duration": 354,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Score/Percentage', '70');\nawait resourceDetails.editValue('Score/Percentage', '80');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Score/Percentage', '80');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:385:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "430f7315-2cdb-4f3b-aca1-d61ce24dc255",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Passing Year is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Passing Year is Shownig and is editable.",
              "timedOut": false,
              "duration": 361,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Passing Year', '2020');\nawait resourceDetails.editValue('Passing Year', '2022');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Passing Year', '2022');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:396:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "89f81b67-5665-4715-b5f2-af8206403e13",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 377,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Employee Name', 'Stevee');\nawait resourceDetails.editValue('Employee Name', 'Steve');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Employee Name', 'Steve');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:409:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "712b7845-9964-476f-8954-5badafbd4268",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Work Phone Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Work Phone Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 364,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Work Phone Number', '123456');\nawait resourceDetails.editValue('Work Phone Number', '1234');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Work Phone Number', '1234');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:420:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "580c256d-d15c-4e06-be1d-cb1c351d385f",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Designation is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Designation is Shownig and is editable.",
              "timedOut": false,
              "duration": 379,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Designation', 'Automation Associate SQA Automation');\nawait resourceDetails.editValue('Designation', 'Associate Software Engineer');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Designation', 'Automation Software Engineer');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:431:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "2db7a572-0109-413d-b184-6546c77c0c3a",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Work Shift is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Work Shift is Shownig and is editable.",
              "timedOut": false,
              "duration": 343,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Work Shift', 'Morning (9am-6pm)');\nawait resourceDetails.editValue('Work Shift', 'Evening (3pm-12pm)');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Work Shift', 'Evening (3pm-12pm)');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:442:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "b5c40510-7fe4-4436-b6a0-0b9e8d06550d",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Work Location is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Work Location is Shownig and is editable.",
              "timedOut": false,
              "duration": 373,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Work Location', 'Remote');\nawait resourceDetails.editValue('Work Location', 'Lahore');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Work Location', 'Lahore');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:453:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "8434c811-ddab-4bdd-b0ba-7135232bfff3",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Attendance Mode is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Attendance Mode is Shownig and is editable.",
              "timedOut": false,
              "duration": 353,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Attendance Mode', 'Invodesk');\nawait resourceDetails.editValue('Attendance Mode', 'Tahometer');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Attendance Mode', 'Tahometer');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:464:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "cb86a1be-c9e4-45d1-adde-aba97c85df03",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Employee Id is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Employee Id is Shownig and is editable.",
              "timedOut": false,
              "duration": 389,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Employee ID', 'IZ-2023-11-01');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:475:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "6ba452cf-adc4-4f35-8065-e06ca2468f2a",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Experience is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Experience is Shownig and is editable.",
              "timedOut": false,
              "duration": 366,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Experience', '0');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:482:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "c59632ad-6a05-4883-9470-805a0192bdfe",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availability is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availability is Shownig and is editable.",
              "timedOut": false,
              "duration": 359,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Availability', 'Fully Available');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:489:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "b6235599-8ca0-4058-aa3c-9de2851ce4fc",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Current Salary (PKR) is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Current Salary (PKR) is Shownig and is editable.",
              "timedOut": false,
              "duration": 354,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Current Salary (PKR)', '50000');\nawait resourceDetails.editValue('Current Salary (PKR)', '60000');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Current Salary (PKR)', '60000');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:496:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "aedf8b05-c24c-4e8e-afd6-ad7250a26054",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Last Salary is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Last Salary is Shownig and is editable.",
              "timedOut": false,
              "duration": 381,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Last Salary', '30000');\nawait resourceDetails.editValue('Last Salary', '35000');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Last Salary', '35000');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:507:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "da17167c-1519-45c5-a96e-ebf330dcb0a0",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Last Increment Date is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Last Increment Date is Shownig and is editable.",
              "timedOut": false,
              "duration": 339,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Last Increment Date', 'Jan 01, 2024');\nawait resourceDetails.editValue('Last Increment Date', '01-10-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Last Increment Date', 'Jan 10, 2024');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:518:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "ae96d8a1-f95f-4a60-bd3e-b6019596cd56",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Department is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Department is Shownig and is editable.",
              "timedOut": false,
              "duration": 346,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Department', 'HR');\nawait resourceDetails.editValue('Department', 'Engineering');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Department', 'Engineering');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:529:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "b7f2cf0e-b703-4fce-92aa-38c5a3ab955f",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Sub Department is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Sub Department is Shownig and is editable.",
              "timedOut": false,
              "duration": 349,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Sub Department', 'N/A');\nawait resourceDetails.editValue('Sub Department', 'DevOps Support');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Sub Department', 'DevOps Support');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:540:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "82c6c20b-78bf-47d1-bea7-9806aeb1ea90",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Contract Type is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Contract Type is Shownig and is editable.",
              "timedOut": false,
              "duration": 371,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Contract Type', 'Full Time');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:551:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "0dfb11b7-577d-421e-90ca-f8e70607a596",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Job Status is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Job Status is Shownig and is editable.",
              "timedOut": false,
              "duration": 345,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Job Status', 'Probation');\nawait resourceDetails.editValue('Job Status', 'Permanent');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Job Status', 'Permanent');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:558:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "82ffbba5-fe2b-4fd7-9cf2-45adf3c0ef85",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Date of Joining is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Date of Joining is Shownig and is editable.",
              "timedOut": false,
              "duration": 355,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Date of Joining', 'Nov 01, 2023');\nawait resourceDetails.editValue('Date of Joining', '11-10-2023');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Date of Joining', 'Nov 10, 2023');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:569:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "d7cecbf1-df02-4854-ab1d-e1ceefdc8a2b",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Expected End of Probation Date is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Expected End of Probation Date is Shownig and is editable.",
              "timedOut": false,
              "duration": 342,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.editValue('Expected End of Probation Date', '01-10-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Expected End of Probation Date', 'Jan 10, 2024');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:580:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "f9e8050d-2cc0-468b-a027-2076e6e61098",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Probation Completed is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Probation Completed is Shownig and is editable.",
              "timedOut": false,
              "duration": 380,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.editValue('Probation Completed', '01-10-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Probation Completed', 'Jan 10, 2024');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:590:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "798b26b6-694b-4ca6-a489-219613fb4ef5",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Permanent Date is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Permanent Date is Shownig and is editable.",
              "timedOut": false,
              "duration": 340,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.editValue('Permanent Date', '01-11-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Permanent Date', 'Jan 11, 2024');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:600:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "85e91d0c-e6d0-4702-8628-56b5c1d8bdfd",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Total Working Hours is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Working Hours is Shownig and is editable.",
              "timedOut": false,
              "duration": 353,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Working Hours', '4');\nawait resourceDetails.editValue('Total Working Hours', '6');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Total Working Hours', '6');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:610:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "b684e5ae-18e2-4114-a0f0-768d6a2ba910",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Earned Casual Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Earned Casual Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 342,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Earned Casual Leaves', '13');\nawait resourceDetails.editValue('Earned Casual Leaves', '12');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Leave quota updated successfully');\nawait resourceDetails.checkValue('Earned Casual Leaves', '12');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:623:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "f004e269-aa85-4528-9fed-990f9d9ddd30",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Earned Sick Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Earned Sick Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 358,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Earned Sick Leaves', '5');\nawait resourceDetails.editValue('Earned Sick Leaves', '4');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Leave quota updated successfully');\nawait resourceDetails.checkValue('Earned Sick Leaves', '4');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:634:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "51876270-af95-461c-a7b0-a8b2ac034d7d",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Total Leaves Earned (Casual/Sick) is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Leaves Earned (Casual/Sick) is Shownig and is editable.",
              "timedOut": false,
              "duration": 357,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Leaves Earned (Casual/Sick)', '16');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:645:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "3c1ddaa8-957c-4f79-b56f-48a812737149",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availed Casual Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Casual Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 368,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Availed Casual Leaves', '0');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:652:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "2a882017-30b8-4253-9851-48949710efa9",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availed Sick Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Sick Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 364,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Availed Sick Leaves', '0');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:659:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "5956c17c-14cc-444c-aeae-a2f1ac61f3c2",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Total Leaves Availed (Casual/Sick) is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Leaves Availed (Casual/Sick) is Shownig and is editable.",
              "timedOut": false,
              "duration": 381,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Leaves Availed (Casual/Sick)', '0');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:666:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "f9664fa9-b3c6-4801-b846-fcce79e25fc7",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Total Remaining Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Remaining Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 334,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Remaining Leaves', '16');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:673:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "351f3b01-e4eb-49b8-9a5e-17b16ded19b1",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availed Paid Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Paid Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 393,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkOtherLeaves('Availed Paid Leaves', '0');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:680:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "8bcc8ed9-8578-4023-8d42-3a25048304d1",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availed Unpaid Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Unpaid Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 342,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkOtherLeaves('Availed Unpaid Leaves', '0');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:687:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "d29418a3-7007-4f1d-99c5-d3292354bd04",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Carry Forward Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Carry Forward Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 380,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkOtherLeaves('Carry Forward Leaves', '0');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:694:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "58813fda-736a-4d9f-92c9-446ad6557af7",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Project is Showing.",
              "fullTitle": "Resource Details should check if Resource Project is Showing.",
              "timedOut": false,
              "duration": 335,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nconst projectData = await resourceDetails.checkProjectDetails();\nassert.ok(projectData.includes('automation'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:703:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "11ddbb54-20c5-4233-9fb6-bcdf9039c334",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to delete project from details page.",
              "fullTitle": "Resource Details should able to delete project from details page.",
              "timedOut": false,
              "duration": 369,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickDelProjectBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource removed from project successfully.');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:711:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "b252d634-e19f-4cf1-950b-4687577b2d7a",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Hardware records are showing correctly.",
              "fullTitle": "Resource Details should check if Hardware records are showing correctly.",
              "timedOut": false,
              "duration": 736,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [`UPDATE employee_assets SET \"employeeId\" = ${newId} WHERE \"employeeId\" = 9429;`];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nlet records = await resourceDetails.getAssetRecords();\nassert.ok(records.includes('Steve'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:724:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "dba262d8-a241-469c-8bd4-a42fa1053acb",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add skills from Resource details page.",
              "fullTitle": "Resource Details should add skills from Resource details page.",
              "timedOut": false,
              "duration": 689,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickEditSkillBtn()\nawait resourceDetails.searchSkill('automation')\nawait resourceDetails.clickAddIcon()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Skills updated successfully.');\nawait resourceDetails.clickDoneBtn()",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:734:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "b184ae50-22de-4440-b33d-eb37ba91bd88",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if skills records are showing correctly.",
              "fullTitle": "Resource Details should check if skills records are showing correctly.",
              "timedOut": false,
              "duration": 687,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nlet records = await resourceDetails.getSkillRecords();\nassert.ok(records.includes('Automation'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:746:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "b5f43e9b-a831-4e46-8f59-a210422a9a5d",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to remove skill by editing.",
              "fullTitle": "Resource Details should able to remove skill by editing.",
              "timedOut": false,
              "duration": 495,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickEditSkillBtn()\nawait resourceDetails.clickRemoveSkillBtn()\nawait resourceDetails.clickYesBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Skill is deleted successfully');\nawait resourceDetails.clickDoneBtn()\nlet records = await resourceDetails.getSkillRecordsEmpty();\nconsole.log(records);\nassert.equal(records, 'No Data');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:754:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "f099db27-8c0f-4394-9914-dd6c6dc4916a",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if attendence is showing correctly.",
              "fullTitle": "Resource Details should check if attendence is showing correctly.",
              "timedOut": false,
              "duration": 818,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [`UPDATE employee_attendances SET \"employeeId\" = ${newId} WHERE \"employeeId\" = 9429;`];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickAttendanceTab();\nconst url1 = await utilFun.getUrl();\nassert.equal(url1, baseUrl + attendanceTabUrl);\nawait resourceDetails.selectAttendanceYear(2024);\nawait resourceDetails.selectAttendanceMonth('Jan');\nawait utilFun.wait(2000)\nlet time = await resourceDetails.getTimeByDate('2024-01-22');\nassert.equal(time, '08:00');\ntime = await resourceDetails.getTimeByDate('2024-01-23');\nassert.equal(time, '08:00');\ntime = await resourceDetails.getTimeByDate('2024-01-24');\nassert.equal(time, '08:20');\ntime = await resourceDetails.getTimeByDate('2024-01-25');\nassert.equal(time, '07:30');\ntime = await resourceDetails.getTimeByDate('2024-01-26');\nassert.equal(time, '06:40');\nlet weekTime = await resourceDetails.getWeekTime(4);\nassert.equal(weekTime, '38:30');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:773:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "241ee083-46bc-4a94-9aec-388ce90815ec",
              "parentUUID": "44ad0068-d051-4884-a563-d4bf4c6f85f8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "175ce5aa-581c-4d76-bb5b-2baad216bde8",
            "301d862c-c305-49db-a3ec-47ab12cc15a4",
            "a4e3d633-26c9-4086-9ccc-8f4bbc62f88c",
            "e9e8797e-b2d6-45e3-8cb3-c163e895e4aa",
            "58d1ef50-70fb-4a59-91e5-537ad5a9df5a",
            "7891cef9-069c-40e4-a023-eb8755a5789b",
            "8943f0aa-ad78-4941-825e-617b953fd55e",
            "7ca23647-1f41-4bc1-b217-9189a97ab00a",
            "a223ca61-1247-4b17-a4b8-3d586cdd2d37",
            "6e5e9b60-563a-46ae-9ccf-5ea9906ce846",
            "d155b629-4691-4248-9f3a-d31faf138a71",
            "6ff40968-6c5d-4fe1-90bf-7fbaa3253f65",
            "48da26ce-aa6b-4f72-acd7-866eddf1dd71",
            "ed914b30-777b-4d62-b1e8-87b250902e26",
            "78461b5f-7787-463a-9413-49f52e99a575",
            "068b2834-3da8-4e0d-bda5-ff1cf8095a4c",
            "601e803a-f6e7-4649-b4ca-0eeeb48d926c",
            "87993650-1b51-45b2-90ea-c15e0b21f8c6",
            "da7411a7-cf73-4b2f-a16a-d82fa0a84e82",
            "76d1af1c-40ea-4e95-a2a9-0afe0291eed3",
            "9557d961-778a-432c-99b1-6bd93240c191",
            "dba7898f-2bcf-47f0-8689-b6ebaeb113a6",
            "76b93446-d697-45bc-93b4-45976162266b",
            "e3b540e7-a280-4c7a-b336-1967dc7bfb7c",
            "430f7315-2cdb-4f3b-aca1-d61ce24dc255",
            "89f81b67-5665-4715-b5f2-af8206403e13",
            "712b7845-9964-476f-8954-5badafbd4268",
            "580c256d-d15c-4e06-be1d-cb1c351d385f",
            "2db7a572-0109-413d-b184-6546c77c0c3a",
            "b5c40510-7fe4-4436-b6a0-0b9e8d06550d",
            "8434c811-ddab-4bdd-b0ba-7135232bfff3",
            "cb86a1be-c9e4-45d1-adde-aba97c85df03",
            "6ba452cf-adc4-4f35-8065-e06ca2468f2a",
            "c59632ad-6a05-4883-9470-805a0192bdfe",
            "b6235599-8ca0-4058-aa3c-9de2851ce4fc",
            "aedf8b05-c24c-4e8e-afd6-ad7250a26054",
            "da17167c-1519-45c5-a96e-ebf330dcb0a0",
            "ae96d8a1-f95f-4a60-bd3e-b6019596cd56",
            "b7f2cf0e-b703-4fce-92aa-38c5a3ab955f",
            "82c6c20b-78bf-47d1-bea7-9806aeb1ea90",
            "0dfb11b7-577d-421e-90ca-f8e70607a596",
            "82ffbba5-fe2b-4fd7-9cf2-45adf3c0ef85",
            "d7cecbf1-df02-4854-ab1d-e1ceefdc8a2b",
            "f9e8050d-2cc0-468b-a027-2076e6e61098",
            "798b26b6-694b-4ca6-a489-219613fb4ef5",
            "85e91d0c-e6d0-4702-8628-56b5c1d8bdfd",
            "b684e5ae-18e2-4114-a0f0-768d6a2ba910",
            "f004e269-aa85-4528-9fed-990f9d9ddd30",
            "51876270-af95-461c-a7b0-a8b2ac034d7d",
            "3c1ddaa8-957c-4f79-b56f-48a812737149",
            "2a882017-30b8-4253-9851-48949710efa9",
            "5956c17c-14cc-444c-aeae-a2f1ac61f3c2",
            "f9664fa9-b3c6-4801-b846-fcce79e25fc7",
            "351f3b01-e4eb-49b8-9a5e-17b16ded19b1",
            "8bcc8ed9-8578-4023-8d42-3a25048304d1",
            "d29418a3-7007-4f1d-99c5-d3292354bd04",
            "58813fda-736a-4d9f-92c9-446ad6557af7",
            "11ddbb54-20c5-4233-9fb6-bcdf9039c334",
            "b252d634-e19f-4cf1-950b-4687577b2d7a",
            "dba262d8-a241-469c-8bd4-a42fa1053acb",
            "b184ae50-22de-4440-b33d-eb37ba91bd88",
            "b5f43e9b-a831-4e46-8f59-a210422a9a5d",
            "f099db27-8c0f-4394-9914-dd6c6dc4916a",
            "241ee083-46bc-4a94-9aec-388ce90815ec"
          ],
          "pending": [],
          "skipped": [],
          "duration": 83385,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 100000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "test/report"
      },
      "version": "6.2.0"
    }
  }
}