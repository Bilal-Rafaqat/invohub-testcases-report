{
  "stats": {
    "suites": 21,
    "tests": 501,
    "passes": 348,
    "pending": 109,
    "failures": 44,
    "start": "2024-03-17T14:34:18.332Z",
    "end": "2024-03-17T15:47:10.413Z",
    "duration": 4372081,
    "testsRegistered": 564,
    "passPercent": 76.48351648351648,
    "pendingPercent": 19.326241134751772,
    "other": 2,
    "hasOther": true,
    "skipped": 63,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "f722bebc-c2d8-4fc6-8485-e18fe6290a62",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3b9a8fb9-a085-4854-994f-f0073ffc7ae3",
          "title": "Pending Evaluations",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/1-Evaluation/spec_1_pendings.js",
          "file": "/test/e2e/1-Evaluation/spec_1_pendings.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pending Evaluations\"",
              "fullTitle": "Pending Evaluations \"before all\" hook in \"Pending Evaluations\"",
              "timedOut": false,
              "duration": 44317,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE departments SET \"hodId\" = 9474 WHERE id = 9;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.login(email, password);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query1 =[\n    `UPDATE employee_evaluations SET \"incrementType\" = 'annual' WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n    `DELETE FROM employee_evaluations WHERE \"employeeId\" = 9742 AND \"incrementType\" = 'designation';`,\n    ];\n    await utilFun.udpateDatabase(query1);",
              "err": {},
              "uuid": "9fca7205-cda7-4753-9a16-a73e9cd66315",
              "parentUUID": "3b9a8fb9-a085-4854-994f-f0073ffc7ae3",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Pending Evaluations\"",
              "fullTitle": "Pending Evaluations \"before each\" hook in \"Pending Evaluations\"",
              "timedOut": false,
              "duration": 3605,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.wait(3000);",
              "err": {},
              "uuid": "a114a3d3-763d-4104-9287-faea114d40f6",
              "parentUUID": "3b9a8fb9-a085-4854-994f-f0073ffc7ae3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if pending evaluations are showing",
              "fullTitle": "Pending Evaluations should check if pending evaluations are showing",
              "timedOut": false,
              "duration": 42,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "39db600b-c1fb-4f2f-8eab-36c00e4717b8",
              "parentUUID": "3b9a8fb9-a085-4854-994f-f0073ffc7ae3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Pending Evaluations should able to filter resoures by name",
              "timedOut": false,
              "duration": 2035,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "4e1a18bf-9349-4ad8-bb26-269375b2df59",
              "parentUUID": "3b9a8fb9-a085-4854-994f-f0073ffc7ae3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Review Type",
              "fullTitle": "Pending Evaluations should able to filter resoures by Review Type",
              "timedOut": false,
              "duration": 1585,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "d2a6ac00-33bd-436a-b72d-2ddf4d87dcdc",
              "parentUUID": "3b9a8fb9-a085-4854-994f-f0073ffc7ae3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Pending Evaluations should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 1524,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "bbab9a7d-6e21-404f-b1d6-a341c64c6a85",
              "parentUUID": "3b9a8fb9-a085-4854-994f-f0073ffc7ae3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Pending Evaluations should able to  copy email from options",
              "timedOut": false,
              "duration": 6549,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nawait utilFun.wait(3000);\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "a4aecfdf-08d1-4c51-8855-9c0101f1cd14",
              "parentUUID": "3b9a8fb9-a085-4854-994f-f0073ffc7ae3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Pending Evaluations should able to Send Email from options",
              "timedOut": false,
              "duration": 9071,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "43bf00de-63e1-42d5-9dde-c66ce18b3f63",
              "parentUUID": "3b9a8fb9-a085-4854-994f-f0073ffc7ae3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Pending Evaluations should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 7420,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "fb086bac-d22e-43ff-909d-f762e71f1f83",
              "parentUUID": "3b9a8fb9-a085-4854-994f-f0073ffc7ae3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Pending Evaluations should able to see Email from options",
              "timedOut": false,
              "duration": 6241,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(3000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "430c2a2e-afdd-43ab-b19f-9600f522af46",
              "parentUUID": "3b9a8fb9-a085-4854-994f-f0073ffc7ae3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Pending Evaluations should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 6842,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "3fd5968c-f405-43b2-a661-b5f8ecaac3ff",
              "parentUUID": "3b9a8fb9-a085-4854-994f-f0073ffc7ae3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Pending Evaluations should able to see Resource Details from options",
              "timedOut": false,
              "duration": 4384,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'http://localhost:3000/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "fbc9d2be-7c5d-42f6-bf2d-62d070b87677",
              "parentUUID": "3b9a8fb9-a085-4854-994f-f0073ffc7ae3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Pending Evaluations should able to see employee history",
              "timedOut": false,
              "duration": 3201,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "bdea82b4-c849-45aa-88ce-16db967b0ab9",
              "parentUUID": "3b9a8fb9-a085-4854-994f-f0073ffc7ae3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to request a review",
              "fullTitle": "Pending Evaluations should able to request a review",
              "timedOut": false,
              "duration": 7266,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait evaluation.clickReqReviewBtn();\nawait utilFun.wait(1000);\nawait evaluation.clickHod('Muhammad Bilal Rafaqat');\nawait evaluation.clickSendReqBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Request is send successfully.');",
              "err": {},
              "uuid": "ecb1ba4b-cf44-422f-b905-5a8a06880bec",
              "parentUUID": "3b9a8fb9-a085-4854-994f-f0073ffc7ae3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to give a review",
              "fullTitle": "Pending Evaluations should able to give a review",
              "timedOut": false,
              "duration": 16037,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait utilFun.wait(1000);\nawait evaluation.clickAddFeedback();\n// await feedbackForm.enterDate('03092023');\nawait feedbackForm.selectFeedbackDuration('6 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.selectRevisedDesignationCategory('Automation');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('testingggg');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "f45e9a95-e5b2-4427-bf02-d7c1d35c2c28",
              "parentUUID": "3b9a8fb9-a085-4854-994f-f0073ffc7ae3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit review form",
              "fullTitle": "Pending Evaluations should able to edit review form",
              "timedOut": false,
              "duration": 9270,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickEditForm();\nawait utilFun.wait(1000);\n// await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('updated');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "5b84bd6f-290a-42f2-bfcf-c1b1312ef2a1",
              "parentUUID": "3b9a8fb9-a085-4854-994f-f0073ffc7ae3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to defer review",
              "fullTitle": "Pending Evaluations should able to defer review",
              "timedOut": false,
              "duration": 7136,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickDefer();\nawait evaluation.clickDeferType();\nawait utilFun.wait(1000);\nawait evaluation.selectDeferType('2 Weeks');\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "4e8899f2-488b-412a-9fb2-1fd869391d1a",
              "parentUUID": "3b9a8fb9-a085-4854-994f-f0073ffc7ae3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to complete review",
              "fullTitle": "Pending Evaluations should able to complete review",
              "timedOut": false,
              "duration": 10396,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickComplete();\n// await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "672583cc-9e52-48d9-8bc3-c481831ae829",
              "parentUUID": "3b9a8fb9-a085-4854-994f-f0073ffc7ae3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "39db600b-c1fb-4f2f-8eab-36c00e4717b8",
            "4e1a18bf-9349-4ad8-bb26-269375b2df59",
            "d2a6ac00-33bd-436a-b72d-2ddf4d87dcdc",
            "bbab9a7d-6e21-404f-b1d6-a341c64c6a85",
            "a4aecfdf-08d1-4c51-8855-9c0101f1cd14",
            "43bf00de-63e1-42d5-9dde-c66ce18b3f63",
            "fb086bac-d22e-43ff-909d-f762e71f1f83",
            "430c2a2e-afdd-43ab-b19f-9600f522af46",
            "3fd5968c-f405-43b2-a661-b5f8ecaac3ff",
            "fbc9d2be-7c5d-42f6-bf2d-62d070b87677",
            "bdea82b4-c849-45aa-88ce-16db967b0ab9",
            "ecb1ba4b-cf44-422f-b905-5a8a06880bec",
            "f45e9a95-e5b2-4427-bf02-d7c1d35c2c28",
            "5b84bd6f-290a-42f2-bfcf-c1b1312ef2a1",
            "4e8899f2-488b-412a-9fb2-1fd869391d1a",
            "672583cc-9e52-48d9-8bc3-c481831ae829"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 98999,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "1738ecf0-370e-423d-b150-21239ac5574f",
          "title": "Performance Base Evaluations",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/1-Evaluation/spec_2_performance.js",
          "file": "/test/e2e/1-Evaluation/spec_2_performance.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Performance Base Evaluations\"",
              "fullTitle": "Performance Base Evaluations \"before all\" hook in \"Performance Base Evaluations\"",
              "timedOut": false,
              "duration": 11398,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'performance' WHERE id = 26;`,\n  `UPDATE employees SET \"designation\" = 'Software Engineer' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 138 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "4032c001-77e3-4b42-966c-53260270d8fd",
              "parentUUID": "1738ecf0-370e-423d-b150-21239ac5574f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Performance Base Evaluations\"",
              "fullTitle": "Performance Base Evaluations \"before each\" hook in \"Performance Base Evaluations\"",
              "timedOut": false,
              "duration": 4534,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation-performance');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "141e71c4-2eab-46e8-b2b5-90bab5c6e4b0",
              "parentUUID": "1738ecf0-370e-423d-b150-21239ac5574f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if performance evaluations are showing",
              "fullTitle": "Performance Base Evaluations should check if performance evaluations are showing",
              "timedOut": false,
              "duration": 40,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "5a876387-e46d-401b-bff8-a6904dc016a3",
              "parentUUID": "1738ecf0-370e-423d-b150-21239ac5574f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Performance Base Evaluations should able to filter resoures by name",
              "timedOut": false,
              "duration": 1945,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "41234c69-3bb7-4f13-9d3c-3b48eb030a45",
              "parentUUID": "1738ecf0-370e-423d-b150-21239ac5574f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Performance Base Evaluations should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 1559,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "0c213c87-c9b6-4bf2-8057-70c5b6812d8f",
              "parentUUID": "1738ecf0-370e-423d-b150-21239ac5574f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Performance Base Evaluations should able to  copy email from options",
              "timedOut": false,
              "duration": 3971,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "7e4fe5aa-a9ad-4343-b55c-427c88520175",
              "parentUUID": "1738ecf0-370e-423d-b150-21239ac5574f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Performance Base Evaluations should able to Send Email from options",
              "timedOut": false,
              "duration": 7721,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "eef24a81-dade-40b2-ae1f-7d3be70218ad",
              "parentUUID": "1738ecf0-370e-423d-b150-21239ac5574f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Performance Base Evaluations should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 8366,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "d271f205-87ef-4aca-b418-3bf05c32ecee",
              "parentUUID": "1738ecf0-370e-423d-b150-21239ac5574f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Performance Base Evaluations should able to see Email from options",
              "timedOut": false,
              "duration": 7281,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(4000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "79d67408-b820-4530-bbe6-34b9bbf1a51b",
              "parentUUID": "1738ecf0-370e-423d-b150-21239ac5574f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Performance Base Evaluations should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 6811,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "f9e57ddd-40d7-4c19-8dde-d0c1315b057b",
              "parentUUID": "1738ecf0-370e-423d-b150-21239ac5574f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Performance Base Evaluations should able to see Resource Details from options",
              "timedOut": false,
              "duration": 4276,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "85068667-b70a-43bd-88fc-ca5c3b01ffb6",
              "parentUUID": "1738ecf0-370e-423d-b150-21239ac5574f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Performance Base Evaluations should able to see employee history",
              "timedOut": false,
              "duration": 3070,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "1e931442-2b57-486e-8fac-80a55a3b61c2",
              "parentUUID": "1738ecf0-370e-423d-b150-21239ac5574f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to request a review",
              "fullTitle": "Performance Base Evaluations should able to request a review",
              "timedOut": false,
              "duration": 7306,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();4\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait evaluation.clickReqReviewBtn();\nawait utilFun.wait(1000);\nawait evaluation.clickHod('Muhammad Bilal Rafaqat');\nawait evaluation.clickSendReqBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Request is send successfully.');",
              "err": {},
              "uuid": "843fb560-d40a-4616-98bd-5e20e2503980",
              "parentUUID": "1738ecf0-370e-423d-b150-21239ac5574f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to give a review",
              "fullTitle": "Performance Base Evaluations should able to give a review",
              "timedOut": false,
              "duration": 13301,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait utilFun.wait(1000);\nawait evaluation.clickAddFeedback();\nawait feedbackForm.enterDate('03092023');\nawait feedbackForm.selectFeedbackDuration('6 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('testingggg');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "04639ef7-b350-4707-896c-b2b01e639551",
              "parentUUID": "1738ecf0-370e-423d-b150-21239ac5574f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit review form",
              "fullTitle": "Performance Base Evaluations should able to edit review form",
              "timedOut": false,
              "duration": 9189,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickEditForm();\nawait utilFun.wait(1000);\n// await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('updated');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "55ee06bb-7438-47c4-90c8-a6063fead062",
              "parentUUID": "1738ecf0-370e-423d-b150-21239ac5574f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to defer review",
              "fullTitle": "Performance Base Evaluations should able to defer review",
              "timedOut": false,
              "duration": 6708,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickDefer();\nawait evaluation.clickDeferType();\nawait utilFun.wait(1000);\nawait evaluation.selectDeferType('2 Weeks');\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "d35b3e02-ca76-4cf4-9bab-1d8e24e867ca",
              "parentUUID": "1738ecf0-370e-423d-b150-21239ac5574f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to complete review",
              "fullTitle": "Performance Base Evaluations should able to complete review",
              "timedOut": false,
              "duration": 9872,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickComplete();\n// await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "fe42ebca-b613-44e5-9cf5-0138eb1462b8",
              "parentUUID": "1738ecf0-370e-423d-b150-21239ac5574f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5a876387-e46d-401b-bff8-a6904dc016a3",
            "41234c69-3bb7-4f13-9d3c-3b48eb030a45",
            "0c213c87-c9b6-4bf2-8057-70c5b6812d8f",
            "7e4fe5aa-a9ad-4343-b55c-427c88520175",
            "eef24a81-dade-40b2-ae1f-7d3be70218ad",
            "d271f205-87ef-4aca-b418-3bf05c32ecee",
            "79d67408-b820-4530-bbe6-34b9bbf1a51b",
            "f9e57ddd-40d7-4c19-8dde-d0c1315b057b",
            "85068667-b70a-43bd-88fc-ca5c3b01ffb6",
            "1e931442-2b57-486e-8fac-80a55a3b61c2",
            "843fb560-d40a-4616-98bd-5e20e2503980",
            "04639ef7-b350-4707-896c-b2b01e639551",
            "55ee06bb-7438-47c4-90c8-a6063fead062",
            "d35b3e02-ca76-4cf4-9bab-1d8e24e867ca",
            "fe42ebca-b613-44e5-9cf5-0138eb1462b8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 91416,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "9509ed4f-ba14-457f-bc18-68e7a71ed8cb",
          "title": "Retention Base Evaluations",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/1-Evaluation/spec_3_retention.js",
          "file": "/test/e2e/1-Evaluation/spec_3_retention.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Retention Base Evaluations\"",
              "fullTitle": "Retention Base Evaluations \"before all\" hook in \"Retention Base Evaluations\"",
              "timedOut": false,
              "duration": 10697,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'retention' WHERE id = 26;`,\n  `UPDATE employees SET \"designation\" = 'Software Engineer' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 138 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "05b6d089-bf77-4c65-ad85-f2448de83e46",
              "parentUUID": "9509ed4f-ba14-457f-bc18-68e7a71ed8cb",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Retention Base Evaluations\"",
              "fullTitle": "Retention Base Evaluations \"before each\" hook in \"Retention Base Evaluations\"",
              "timedOut": false,
              "duration": 4407,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation-retention');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "46f63975-0d92-4101-99b8-11b73c8de637",
              "parentUUID": "9509ed4f-ba14-457f-bc18-68e7a71ed8cb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if retention evaluations are showing",
              "fullTitle": "Retention Base Evaluations should check if retention evaluations are showing",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "bdddd4e4-fc40-4424-9f55-947968263c10",
              "parentUUID": "9509ed4f-ba14-457f-bc18-68e7a71ed8cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Retention Base Evaluations should able to filter resoures by name",
              "timedOut": false,
              "duration": 1860,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "4cff6bac-b06b-42a9-bbb4-66b43f52a4cd",
              "parentUUID": "9509ed4f-ba14-457f-bc18-68e7a71ed8cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Retention Base Evaluations should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 1508,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "920c213d-412b-467e-9893-aeaf7bcb77dd",
              "parentUUID": "9509ed4f-ba14-457f-bc18-68e7a71ed8cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Retention Base Evaluations should able to  copy email from options",
              "timedOut": false,
              "duration": 3990,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "b903badf-ff96-4e7c-8eba-d91302f584a4",
              "parentUUID": "9509ed4f-ba14-457f-bc18-68e7a71ed8cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Retention Base Evaluations should able to Send Email from options",
              "timedOut": false,
              "duration": 8481,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "e556be1b-b7f9-45d6-9bdd-2283eb973679",
              "parentUUID": "9509ed4f-ba14-457f-bc18-68e7a71ed8cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Retention Base Evaluations should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 7539,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "aa9fd298-605f-4c88-9edf-3da7c360d568",
              "parentUUID": "9509ed4f-ba14-457f-bc18-68e7a71ed8cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Retention Base Evaluations should able to see Email from options",
              "timedOut": false,
              "duration": 7273,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(4000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "38c0c9b0-38eb-41d7-999d-3d5733eac2ec",
              "parentUUID": "9509ed4f-ba14-457f-bc18-68e7a71ed8cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Retention Base Evaluations should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 6744,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "ae0c9169-0df3-4c0d-891f-30d1f1d0f35b",
              "parentUUID": "9509ed4f-ba14-457f-bc18-68e7a71ed8cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Retention Base Evaluations should able to see Resource Details from options",
              "timedOut": false,
              "duration": 4285,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "a3d1738f-cb3b-4ad1-9df0-eab595bd9dc3",
              "parentUUID": "9509ed4f-ba14-457f-bc18-68e7a71ed8cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Retention Base Evaluations should able to see employee history",
              "timedOut": false,
              "duration": 3050,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "c9ff727c-f33e-49ec-ab9f-d4c13bd792d1",
              "parentUUID": "9509ed4f-ba14-457f-bc18-68e7a71ed8cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to request a review",
              "fullTitle": "Retention Base Evaluations should able to request a review",
              "timedOut": false,
              "duration": 7265,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait evaluation.clickReqReviewBtn();\nawait utilFun.wait(1000);\nawait evaluation.clickHod('Muhammad Bilal Rafaqat');\nawait evaluation.clickSendReqBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Request is send successfully.');",
              "err": {},
              "uuid": "810bde81-4adf-4cec-ab7f-509960b3e2b0",
              "parentUUID": "9509ed4f-ba14-457f-bc18-68e7a71ed8cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to give a review",
              "fullTitle": "Retention Base Evaluations should able to give a review",
              "timedOut": false,
              "duration": 12365,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait utilFun.wait(1000);\nawait evaluation.clickAddFeedback();\n// await feedbackForm.enterDate('03092023');\nawait feedbackForm.selectFeedbackDuration('6 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('testingggg');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "5ea4bd38-ae2e-4c37-aa0c-5d3634708068",
              "parentUUID": "9509ed4f-ba14-457f-bc18-68e7a71ed8cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit review form",
              "fullTitle": "Retention Base Evaluations should able to edit review form",
              "timedOut": false,
              "duration": 8998,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickEditForm();\nawait utilFun.wait(1000);\n// await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('updated');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "3b9a7b75-79a9-47ef-8b2b-049a4cd31d52",
              "parentUUID": "9509ed4f-ba14-457f-bc18-68e7a71ed8cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to defer review",
              "fullTitle": "Retention Base Evaluations should able to defer review",
              "timedOut": false,
              "duration": 7117,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickDefer();\nawait evaluation.clickDeferType();\nawait utilFun.wait(1000);\nawait evaluation.selectDeferType('2 Weeks');\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "57e777e7-e382-4aca-bad0-f141969f4fa3",
              "parentUUID": "9509ed4f-ba14-457f-bc18-68e7a71ed8cb",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to complete review",
              "fullTitle": "Retention Base Evaluations should able to complete review",
              "timedOut": false,
              "duration": 9706,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickComplete();\n// await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "b85179df-e2dd-4e79-8b1d-e86d161620e4",
              "parentUUID": "9509ed4f-ba14-457f-bc18-68e7a71ed8cb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bdddd4e4-fc40-4424-9f55-947968263c10",
            "4cff6bac-b06b-42a9-bbb4-66b43f52a4cd",
            "920c213d-412b-467e-9893-aeaf7bcb77dd",
            "b903badf-ff96-4e7c-8eba-d91302f584a4",
            "e556be1b-b7f9-45d6-9bdd-2283eb973679",
            "aa9fd298-605f-4c88-9edf-3da7c360d568",
            "38c0c9b0-38eb-41d7-999d-3d5733eac2ec",
            "ae0c9169-0df3-4c0d-891f-30d1f1d0f35b",
            "a3d1738f-cb3b-4ad1-9df0-eab595bd9dc3",
            "c9ff727c-f33e-49ec-ab9f-d4c13bd792d1",
            "810bde81-4adf-4cec-ab7f-509960b3e2b0",
            "5ea4bd38-ae2e-4c37-aa0c-5d3634708068",
            "3b9a7b75-79a9-47ef-8b2b-049a4cd31d52",
            "57e777e7-e382-4aca-bad0-f141969f4fa3",
            "b85179df-e2dd-4e79-8b1d-e86d161620e4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 90219,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "7608dd4f-1cd3-4a8e-8b64-633e90e5aa89",
          "title": "Evaluations History",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/1-Evaluation/spec_4_history.js",
          "file": "/test/e2e/1-Evaluation/spec_4_history.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Evaluations History\"",
              "fullTitle": "Evaluations History \"before all\" hook in \"Evaluations History\"",
              "timedOut": false,
              "duration": 10693,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query = [\n  `UPDATE employee_evaluations SET \"processType\" = 'COMPLETE' WHERE id = 26;`,\n  `DELETE FROM employee_evaluations WHERE \"employeeId\" = 9742 AND \"incrementType\" = 'designation';`,\n  `UPDATE employee_evaluations SET \"processDate\" = '2023-03-28 17:32:33.501+05' WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "9e544e60-f27b-41b3-844c-8db950bccca4",
              "parentUUID": "7608dd4f-1cd3-4a8e-8b64-633e90e5aa89",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Evaluations History\"",
              "fullTitle": "Evaluations History \"before each\" hook in \"Evaluations History\"",
              "timedOut": false,
              "duration": 4443,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation-history');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "8b0899eb-ac27-45a5-8cff-02b64ad9e8f0",
              "parentUUID": "7608dd4f-1cd3-4a8e-8b64-633e90e5aa89",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if evaluations history is showing",
              "fullTitle": "Evaluations History should check if evaluations history is showing",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "3f8a55aa-b48c-4cc6-9d82-28ea23ef91a6",
              "parentUUID": "7608dd4f-1cd3-4a8e-8b64-633e90e5aa89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Evaluations History should able to filter resoures by name",
              "timedOut": false,
              "duration": 2137,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "1ed535b7-ecc4-4590-ac1a-80ec417e38d1",
              "parentUUID": "7608dd4f-1cd3-4a8e-8b64-633e90e5aa89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check review is completed",
              "fullTitle": "Evaluations History should able to check review is completed",
              "timedOut": false,
              "duration": 2136,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.checkProcessState()\nutilFun.assertEql(name, 'Complete');",
              "err": {},
              "uuid": "178f2202-e7a2-4c86-8642-c94c3ef7322f",
              "parentUUID": "7608dd4f-1cd3-4a8e-8b64-633e90e5aa89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Review Type",
              "fullTitle": "Evaluations History should able to filter resoures by Review Type",
              "timedOut": false,
              "duration": 1856,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "533b5a1f-b7f2-42cb-b739-597e8232f783",
              "parentUUID": "7608dd4f-1cd3-4a8e-8b64-633e90e5aa89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Evaluations History should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 1790,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "6b9cdf8b-b52b-48fe-a878-342b5ba67554",
              "parentUUID": "7608dd4f-1cd3-4a8e-8b64-633e90e5aa89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Evaluations History should able to  copy email from options",
              "timedOut": false,
              "duration": 4093,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "8b643878-f6ef-4384-89b5-d8593c1bf7a3",
              "parentUUID": "7608dd4f-1cd3-4a8e-8b64-633e90e5aa89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Evaluations History should able to Send Email from options",
              "timedOut": false,
              "duration": 8792,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "77cac2e3-023c-4b0b-8fe8-4c373e3b5253",
              "parentUUID": "7608dd4f-1cd3-4a8e-8b64-633e90e5aa89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Evaluations History should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 8021,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "328dff22-bf10-4584-92e5-305102a6200f",
              "parentUUID": "7608dd4f-1cd3-4a8e-8b64-633e90e5aa89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Evaluations History should able to see Email from options",
              "timedOut": false,
              "duration": 7435,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(4000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "b32c8876-87a1-4438-b963-a1d096738361",
              "parentUUID": "7608dd4f-1cd3-4a8e-8b64-633e90e5aa89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Evaluations History should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 7095,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "b39e5736-4dce-47c2-99b2-8bd3173ab7f1",
              "parentUUID": "7608dd4f-1cd3-4a8e-8b64-633e90e5aa89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Evaluations History should able to see Resource Details from options",
              "timedOut": false,
              "duration": 4554,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "95f1db1a-c9b6-4ec2-be6c-613f8e544e05",
              "parentUUID": "7608dd4f-1cd3-4a8e-8b64-633e90e5aa89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Evaluations History should able to see employee history",
              "timedOut": false,
              "duration": 3329,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "19192ea4-65f9-4aa7-9165-7136ffcf3a25",
              "parentUUID": "7608dd4f-1cd3-4a8e-8b64-633e90e5aa89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Initiate a Revised Designation",
              "fullTitle": "Evaluations History should able to Initiate a Revised Designation",
              "timedOut": false,
              "duration": 6561,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Initiate a Revised Designation');\nawait utilFun.wait(3000);\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Review is initiated successfully.');",
              "err": {},
              "uuid": "1c754353-73ce-480b-82a2-c0906f2f27aa",
              "parentUUID": "7608dd4f-1cd3-4a8e-8b64-633e90e5aa89",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able check if revised Designation evaluation is showing",
              "fullTitle": "Evaluations History should able check if revised Designation evaluation is showing",
              "timedOut": false,
              "duration": 7138,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nawait evaluation.selectReviewType('Rev. Designation');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "56370999-fb62-47f7-ac08-26661853acf4",
              "parentUUID": "7608dd4f-1cd3-4a8e-8b64-633e90e5aa89",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3f8a55aa-b48c-4cc6-9d82-28ea23ef91a6",
            "1ed535b7-ecc4-4590-ac1a-80ec417e38d1",
            "178f2202-e7a2-4c86-8642-c94c3ef7322f",
            "533b5a1f-b7f2-42cb-b739-597e8232f783",
            "6b9cdf8b-b52b-48fe-a878-342b5ba67554",
            "8b643878-f6ef-4384-89b5-d8593c1bf7a3",
            "77cac2e3-023c-4b0b-8fe8-4c373e3b5253",
            "328dff22-bf10-4584-92e5-305102a6200f",
            "b32c8876-87a1-4438-b963-a1d096738361",
            "b39e5736-4dce-47c2-99b2-8bd3173ab7f1",
            "95f1db1a-c9b6-4ec2-be6c-613f8e544e05",
            "19192ea4-65f9-4aa7-9165-7136ffcf3a25",
            "1c754353-73ce-480b-82a2-c0906f2f27aa",
            "56370999-fb62-47f7-ac08-26661853acf4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 64975,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "b61e1c15-ed9e-4897-8252-cec9903a7a1d",
          "title": "Evaluations Review Types",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/1-Evaluation/spec_5_reviewTypes.js",
          "file": "/test/e2e/1-Evaluation/spec_5_reviewTypes.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Evaluations Review Types\"",
              "fullTitle": "Evaluations Review Types \"before all\" hook in \"Evaluations Review Types\"",
              "timedOut": false,
              "duration": 10505,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "6fa064dd-8b6d-41a3-aac9-2656de2bc569",
              "parentUUID": "b61e1c15-ed9e-4897-8252-cec9903a7a1d",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Evaluations Review Types\"",
              "fullTitle": "Evaluations Review Types \"before each\" hook in \"Evaluations Review Types\"",
              "timedOut": false,
              "duration": 3402,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.wait(3000);",
              "err": {},
              "uuid": "b171945a-e10b-4448-a6c1-6e37596b0349",
              "parentUUID": "b61e1c15-ed9e-4897-8252-cec9903a7a1d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if annual evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if annual evaluations are showing",
              "timedOut": false,
              "duration": 4994,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'annual' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Annual'), `Expected text not found.`);",
              "err": {},
              "uuid": "8a3058dd-11d3-4ab7-8e58-d957e1164629",
              "parentUUID": "b61e1c15-ed9e-4897-8252-cec9903a7a1d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 5978,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Annual'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "d8bfbd7e-a0ac-4749-9590-aad30d80e9ac",
              "parentUUID": "b61e1c15-ed9e-4897-8252-cec9903a7a1d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Bi Annual evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if Bi Annual evaluations are showing",
              "timedOut": false,
              "duration": 5488,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'bi-annual' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Bi Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Bi Annual'), `Expected text not found.`);",
              "err": {},
              "uuid": "ede06b82-ccb4-440e-865f-b6e567a10f65",
              "parentUUID": "b61e1c15-ed9e-4897-8252-cec9903a7a1d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 5864,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Bi Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Bi Annual'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "ddfd4f78-3cc6-48b3-888f-e01d5d40c873",
              "parentUUID": "b61e1c15-ed9e-4897-8252-cec9903a7a1d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Internship evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if Internship evaluations are showing",
              "timedOut": false,
              "duration": 4627,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'internship' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Internship');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Internship'), `Expected text not found.`);",
              "err": {},
              "uuid": "12a45b11-9b28-4c62-8e43-c23210c07c51",
              "parentUUID": "b61e1c15-ed9e-4897-8252-cec9903a7a1d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 5872,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Internship');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Internship'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "8ae19e47-c453-40ad-990f-7f9999053983",
              "parentUUID": "b61e1c15-ed9e-4897-8252-cec9903a7a1d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr have Access of extend Btn and can extend Evaluation",
              "fullTitle": "Evaluations Review Types should confirm Hr have Access of extend Btn and can extend Evaluation",
              "timedOut": false,
              "duration": 8515,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Internship');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Internship'), `Expected text not found.`);\nawait evaluation.checkIfExtenfBtnIsLocated()\nawait utilFun.wait(1000);\nawait evaluation.clickExtendBtn()\nawait utilFun.wait(1000);\nawait evaluation.clickDeferType()\nawait evaluation.selectDeferType('2 Weeks');\nawait utilFun.wait(1000);\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "3088e262-7d92-42b2-819b-20ae7941792a",
              "parentUUID": "b61e1c15-ed9e-4897-8252-cec9903a7a1d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if End of Probation evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if End of Probation evaluations are showing",
              "timedOut": false,
              "duration": 4800,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'end_of_probation' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('End of Probation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('End of Probation'), `Expected text not found.`);",
              "err": {},
              "uuid": "9ca751cf-f348-4411-bbb3-884bee2113c6",
              "parentUUID": "b61e1c15-ed9e-4897-8252-cec9903a7a1d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 5796,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('End of Probation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('End of Probation'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "03bf355f-a310-41be-8a32-245657eb7ed5",
              "parentUUID": "b61e1c15-ed9e-4897-8252-cec9903a7a1d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr have Access of extend Btn and can extend Evaluation",
              "fullTitle": "Evaluations Review Types should confirm Hr have Access of extend Btn and can extend Evaluation",
              "timedOut": false,
              "duration": 8496,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('End of Probation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('End of Probation'), `Expected text not found.`);\nawait evaluation.checkIfExtenfBtnIsLocated()\nawait utilFun.wait(1000);\nawait evaluation.clickExtendBtn()\nawait utilFun.wait(1000);\nawait evaluation.clickDeferType()\nawait evaluation.selectDeferType('2 Weeks');\nawait utilFun.wait(1000);\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "c73b20c7-dd3a-416e-b61f-0c94173aa0e5",
              "parentUUID": "b61e1c15-ed9e-4897-8252-cec9903a7a1d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Revised Designation evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if Revised Designation evaluations are showing",
              "timedOut": false,
              "duration": 4923,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'designation' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Rev. Designation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Rev. Designation'), `Expected text not found.`);",
              "err": {},
              "uuid": "e7325687-5c06-486a-9403-7b786eb9b636",
              "parentUUID": "b61e1c15-ed9e-4897-8252-cec9903a7a1d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 5950,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Rev. Designation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Rev. Designation'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "b884e0bd-402d-4c77-90c3-1d686d1fd74d",
              "parentUUID": "b61e1c15-ed9e-4897-8252-cec9903a7a1d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8a3058dd-11d3-4ab7-8e58-d957e1164629",
            "d8bfbd7e-a0ac-4749-9590-aad30d80e9ac",
            "ede06b82-ccb4-440e-865f-b6e567a10f65",
            "ddfd4f78-3cc6-48b3-888f-e01d5d40c873",
            "12a45b11-9b28-4c62-8e43-c23210c07c51",
            "8ae19e47-c453-40ad-990f-7f9999053983",
            "3088e262-7d92-42b2-819b-20ae7941792a",
            "9ca751cf-f348-4411-bbb3-884bee2113c6",
            "03bf355f-a310-41be-8a32-245657eb7ed5",
            "c73b20c7-dd3a-416e-b61f-0c94173aa0e5",
            "e7325687-5c06-486a-9403-7b786eb9b636",
            "b884e0bd-402d-4c77-90c3-1d686d1fd74d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 71303,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "79764c66-2bf3-4d50-8b30-004df16fe109",
          "title": "My Leaves",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/2-Leaves/spec_1_myleaves.js",
          "file": "/test/e2e/2-Leaves/spec_1_myleaves.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"My Leaves\"",
              "fullTitle": "My Leaves \"before all\" hook in \"My Leaves\"",
              "timedOut": false,
              "duration": 9116,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\n// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query1 = [\n  `UPDATE employee_leaves_count SET \"carryForwardedLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesEarned\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalRemainingLeaves\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"availedUnPaidLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `DELETE FROM employee_leaves WHERE \"employeeId\" = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query1);",
              "err": {},
              "uuid": "537d4952-ad51-40f7-a269-d894ba587312",
              "parentUUID": "79764c66-2bf3-4d50-8b30-004df16fe109",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"My Leaves\"",
              "fullTitle": "My Leaves \"before each\" hook in \"My Leaves\"",
              "timedOut": false,
              "duration": 3403,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);",
              "err": {},
              "uuid": "fb85a4c9-d8d7-43dc-9bca-7a6f20f55f5d",
              "parentUUID": "79764c66-2bf3-4d50-8b30-004df16fe109",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should should able to view employee leave",
              "fullTitle": "My Leaves should should able to view employee leave",
              "timedOut": false,
              "duration": 4142,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_reporting_managers SET \"approvedLeaveStatus\" = 'PENDING' WHERE id = 45;`,\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE id = 32;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE id = 32;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE id = 32;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {},
              "uuid": "765f19d0-4685-417a-827d-0fc34f426109",
              "parentUUID": "79764c66-2bf3-4d50-8b30-004df16fe109",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should should able to Approve employee leave",
              "fullTitle": "My Leaves should should able to Approve employee leave",
              "timedOut": false,
              "duration": 3674,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nawait myLeaves.clickApproveBtn()\nawait myLeaves.clickSubmitBtn()\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "0212341c-0363-46dc-9d71-a92eff17939f",
              "parentUUID": "79764c66-2bf3-4d50-8b30-004df16fe109",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Approved Tab",
              "fullTitle": "My Leaves should able to view employee leave in Approved Tab",
              "timedOut": false,
              "duration": 2814,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Approved Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {},
              "uuid": "b2ca553b-a8f8-401d-acef-7be49ffa5c72",
              "parentUUID": "79764c66-2bf3-4d50-8b30-004df16fe109",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Reject employee leave in Approved Tab",
              "fullTitle": "My Leaves should able to Reject employee leave in Approved Tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "154a6130-1746-41e3-b05c-f485a87146e1",
              "parentUUID": "79764c66-2bf3-4d50-8b30-004df16fe109",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Reject Tab",
              "fullTitle": "My Leaves should able to view employee leave in Reject Tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "1bd01258-cea8-46ed-b88e-47fefddbeb32",
              "parentUUID": "79764c66-2bf3-4d50-8b30-004df16fe109",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should should able to Reject employee leave",
              "fullTitle": "My Leaves should should able to Reject employee leave",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "cb65506c-4ce6-4f14-ab84-368f9bc956aa",
              "parentUUID": "79764c66-2bf3-4d50-8b30-004df16fe109",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Reject Tab",
              "fullTitle": "My Leaves should able to view employee leave in Reject Tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8de6f067-fe31-4f24-a20f-c36a80d87099",
              "parentUUID": "79764c66-2bf3-4d50-8b30-004df16fe109",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Approve employee leave in Reject Tab",
              "fullTitle": "My Leaves should able to Approve employee leave in Reject Tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "a87c50f8-5473-4330-a8ff-bdd80be96b44",
              "parentUUID": "79764c66-2bf3-4d50-8b30-004df16fe109",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Approved Tab",
              "fullTitle": "My Leaves should able to view employee leave in Approved Tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "ee9e7f87-cdb3-4745-9818-0e10fb3b4122",
              "parentUUID": "79764c66-2bf3-4d50-8b30-004df16fe109",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Leaves counts are showing Correct",
              "fullTitle": "My Leaves should check if Leaves counts are showing Correct",
              "timedOut": false,
              "duration": 225,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '10/');\nlet leaves1 = await myLeaves.getSickLeaves();\nassert.equal(leaves1, '10/');\nlet leaves2 = await myLeaves.getCarryForwardLeaves();\nassert.equal(leaves2, '0/');\nlet leaves3 = await myLeaves.getUnpaidLeaves();\nassert.equal(leaves3, '0');",
              "err": {},
              "uuid": "5380bbce-2379-49fb-aefd-34d138c71634",
              "parentUUID": "79764c66-2bf3-4d50-8b30-004df16fe109",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Casual full leave",
              "fullTitle": "My Leaves should able to apply Casual full leave",
              "timedOut": false,
              "duration": 6193,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('05-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('05-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "bb0f8be8-fb02-4549-be80-09706e832e96",
              "parentUUID": "79764c66-2bf3-4d50-8b30-004df16fe109",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Casual First Half leave",
              "fullTitle": "My Leaves should able to apply Casual First Half leave",
              "timedOut": false,
              "duration": 7420,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('First Half');\nawait myLeaves.setStartDate('06-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('06-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "2ad793c4-965d-459c-9652-2cf5192b4f6b",
              "parentUUID": "79764c66-2bf3-4d50-8b30-004df16fe109",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Casual Second Half leave",
              "fullTitle": "My Leaves should able to apply Casual Second Half leave",
              "timedOut": false,
              "duration": 7639,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('Second Half');\nawait myLeaves.setStartDate('07-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('07-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "06814f42-8b52-4d05-981c-188f23771ed1",
              "parentUUID": "79764c66-2bf3-4d50-8b30-004df16fe109",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Sick full leave",
              "fullTitle": "My Leaves should able to apply Sick full leave",
              "timedOut": false,
              "duration": 6444,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Sick Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('08-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('08-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "ca1c6921-f14c-47db-96dc-4ebb147cb34a",
              "parentUUID": "79764c66-2bf3-4d50-8b30-004df16fe109",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Sick First Half leave",
              "fullTitle": "My Leaves should able to apply Sick First Half leave",
              "timedOut": false,
              "duration": 7628,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Sick Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('First Half');\nawait myLeaves.setStartDate('09-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('09-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "52ea5699-fb2e-4739-b2b9-b2918f673031",
              "parentUUID": "79764c66-2bf3-4d50-8b30-004df16fe109",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Sick Second Half leave",
              "fullTitle": "My Leaves should able to apply Sick Second Half leave",
              "timedOut": false,
              "duration": 7570,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Sick Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('Second Half');\nawait myLeaves.setStartDate('10-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('10-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "ade1bfdc-7e65-420d-8269-5190dc6ef5a0",
              "parentUUID": "79764c66-2bf3-4d50-8b30-004df16fe109",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Un-Paid full leave",
              "fullTitle": "My Leaves should able to apply Un-Paid full leave",
              "timedOut": false,
              "duration": 6353,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Un-Paid Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('11-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('11-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "dd7c18e3-9557-4bdd-a7b7-7a1f56dd4371",
              "parentUUID": "79764c66-2bf3-4d50-8b30-004df16fe109",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Un-Paid First Half leave",
              "fullTitle": "My Leaves should able to apply Un-Paid First Half leave",
              "timedOut": false,
              "duration": 7484,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Un-Paid Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('First Half');\nawait myLeaves.setStartDate('12-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('12-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "2571e032-49da-40c0-8207-61e1e4f3c016",
              "parentUUID": "79764c66-2bf3-4d50-8b30-004df16fe109",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Un-Paid Second Half leave",
              "fullTitle": "My Leaves should able to apply Un-Paid Second Half leave",
              "timedOut": false,
              "duration": 7528,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Un-Paid Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('Second Half');\nawait myLeaves.setStartDate('13-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('13-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "3cffdae8-a3e0-49e9-a9d9-f3d8d5a895e8",
              "parentUUID": "79764c66-2bf3-4d50-8b30-004df16fe109",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Leaves counts are showing Correct",
              "fullTitle": "My Leaves should check if Leaves counts are showing Correct",
              "timedOut": false,
              "duration": 214,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '8/');\nlet leaves1 = await myLeaves.getSickLeaves();\nassert.equal(leaves1, '8/');\nlet leaves2 = await myLeaves.getCarryForwardLeaves();\nassert.equal(leaves2, '0/');\nlet leaves3 = await myLeaves.getUnpaidLeaves();\nassert.equal(leaves3, '2');",
              "err": {},
              "uuid": "bfce05b5-f2bf-4044-a68c-1dcf4037783d",
              "parentUUID": "79764c66-2bf3-4d50-8b30-004df16fe109",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "765f19d0-4685-417a-827d-0fc34f426109",
            "0212341c-0363-46dc-9d71-a92eff17939f",
            "b2ca553b-a8f8-401d-acef-7be49ffa5c72",
            "5380bbce-2379-49fb-aefd-34d138c71634",
            "bb0f8be8-fb02-4549-be80-09706e832e96",
            "2ad793c4-965d-459c-9652-2cf5192b4f6b",
            "06814f42-8b52-4d05-981c-188f23771ed1",
            "ca1c6921-f14c-47db-96dc-4ebb147cb34a",
            "52ea5699-fb2e-4739-b2b9-b2918f673031",
            "ade1bfdc-7e65-420d-8269-5190dc6ef5a0",
            "dd7c18e3-9557-4bdd-a7b7-7a1f56dd4371",
            "2571e032-49da-40c0-8207-61e1e4f3c016",
            "3cffdae8-a3e0-49e9-a9d9-f3d8d5a895e8",
            "bfce05b5-f2bf-4044-a68c-1dcf4037783d"
          ],
          "failures": [],
          "pending": [
            "154a6130-1746-41e3-b05c-f485a87146e1",
            "1bd01258-cea8-46ed-b88e-47fefddbeb32",
            "cb65506c-4ce6-4f14-ab84-368f9bc956aa",
            "8de6f067-fe31-4f24-a20f-c36a80d87099",
            "a87c50f8-5473-4330-a8ff-bdd80be96b44",
            "ee9e7f87-cdb3-4745-9818-0e10fb3b4122"
          ],
          "skipped": [],
          "duration": 75328,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
          "title": "hr dashboard",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/2-Leaves/spec_2_hrLeavesDashboard.js",
          "file": "/test/e2e/2-Leaves/spec_2_hrLeavesDashboard.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"hr dashboard\"",
              "fullTitle": "hr dashboard \"before all\" hook in \"hr dashboard\"",
              "timedOut": false,
              "duration": 11085,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "c13fcb98-fbd8-4983-8b14-dc68b0005b72",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"hr dashboard\"",
              "fullTitle": "hr dashboard \"after all\" hook in \"hr dashboard\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `DELETE FROM employee_leaves WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "35af9ab0-742d-44ce-9028-1ced38e9484c",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should check if Leaves counts are showing Correct",
              "fullTitle": "hr dashboard should check if Leaves counts are showing Correct",
              "timedOut": false,
              "duration": 3640,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_count SET \"carryForwardedLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesEarned\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalRemainingLeaves\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"availedUnPaidLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `DELETE FROM employee_leaves WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nlet leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '10/');\nlet leaves1 = await myLeaves.getSickLeaves();\nassert.equal(leaves1, '10/');\nlet leaves2 = await myLeaves.getCarryForwardLeaves();\nassert.equal(leaves2, '0/');\nlet leaves3 = await myLeaves.getUnpaidLeaves();\nassert.equal(leaves3, '0');",
              "err": {},
              "uuid": "5bf37aae-c1ed-46b3-b8ae-2808c268e3d0",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Casual full leave",
              "fullTitle": "hr dashboard should able to apply Casual full leave",
              "timedOut": false,
              "duration": 9951,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nawait myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('05-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('05-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "89f15d5b-8165-4065-8be2-fcc4f72ff0cf",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if leave is showing in Hr Dashboard",
              "fullTitle": "hr dashboard should able to check if leave is showing in Hr Dashboard",
              "timedOut": false,
              "duration": 5479,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "0835e4ae-a20f-40d5-ad89-00cc0865d6e4",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Approve Leave",
              "fullTitle": "hr dashboard should able to Approve Leave",
              "timedOut": false,
              "duration": 6910,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.clickApproveBtn()\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.clickSubmitBtn()\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "2b5d6546-7e1a-4739-b7dc-32363a3e77d2",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Approved Tab",
              "fullTitle": "hr dashboard should able to view employee leave in Approved Tab",
              "timedOut": false,
              "duration": 5907,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickTab('Approved Leaves')\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "4c05e574-980f-4097-88ad-86580761f942",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Reject Leave",
              "fullTitle": "hr dashboard should able to Reject Leave",
              "timedOut": false,
              "duration": 6371,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickRejectBtn()\nawait hrLeaveDashboard.typeRejectReasonAndReject('testing')\nawait utilFun.wait(1000);\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "7df5fec5-4cfa-4d56-bcd9-ea6f96331829",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Rejected Tab",
              "fullTitle": "hr dashboard should able to view employee leave in Rejected Tab",
              "timedOut": false,
              "duration": 5478,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickTab('Rejected Leaves')\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "b4d56dc2-f983-45a9-becb-57b9c41d3bf2",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to send leave notification to PMs",
              "fullTitle": "hr dashboard should able to send leave notification to PMs",
              "timedOut": false,
              "duration": 5490,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickSendNotificationBtn()\nawait utilFun.wait(1000);\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Notification sent to PMs from which leave is pending');",
              "err": {},
              "uuid": "0512a38d-7a87-42a9-89c6-8e39632c465b",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to delete Employee leave",
              "fullTitle": "hr dashboard should able to delete Employee leave",
              "timedOut": false,
              "duration": 6161,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickDeleteBtn()\nawait hrLeaveDashboard.typeDeleteReason('testing')\nawait hrLeaveDashboard.clickSubmitDeleteBtn()\nawait utilFun.wait(1000);\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request deleted successfully.');",
              "err": {},
              "uuid": "cc942b3a-0e24-458d-94ed-323a3151b9aa",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able check if delete leave is showing in Deleted Section",
              "fullTitle": "hr dashboard should able check if delete leave is showing in Deleted Section",
              "timedOut": false,
              "duration": 5199,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickSeeDeletedLeaves()\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "453109d3-775f-4d6e-8266-9d78fd565ab2",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to add Compensatory leave to specific employee",
              "fullTitle": "hr dashboard should able to add Compensatory leave to specific employee",
              "timedOut": false,
              "duration": 13641,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `DELETE FROM employee_gift_leaves WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCompLeaveBtn()\nawait hrLeaveDashboard.selectResource('Muhammad Bilal Rafaqat')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('21-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('21-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Compensatory leave added successfully');",
              "err": {},
              "uuid": "15790bdd-c4e3-49dd-9984-37d6ac624205",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Leave is Added",
              "fullTitle": "hr dashboard should check if Leave is Added",
              "timedOut": false,
              "duration": 3466,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nlet leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '11/');",
              "err": {},
              "uuid": "63f399d3-0802-4cb2-a5a9-bbd68ed73f60",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to add Compensatory leave to all employee",
              "fullTitle": "hr dashboard should able to add Compensatory leave to all employee",
              "timedOut": false,
              "duration": 8595,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCompLeaveBtn()\nawait hrLeaveDashboard.clickSelectAllRadioBtn()\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('20-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('20-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Compensatory leave added successfully');",
              "err": {},
              "uuid": "128668cc-b76a-4ea9-b4e1-9fb2eeb1c5d9",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Leave is Added",
              "fullTitle": "hr dashboard should check if Leave is Added",
              "timedOut": false,
              "duration": 3420,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nlet leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '11/');",
              "err": {},
              "uuid": "59b14414-2983-4eed-b2f4-ecb5a9f69917",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Casual full leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Casual full leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12302,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Casual Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Full Leave')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('10-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('10-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "67028993-092d-4354-a85b-8b18c6a062c9",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Casual First Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Casual First Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12576,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Casual Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('First Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('11-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('11-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "40095145-7808-4026-84fe-fb01ba0852fa",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Casual Second Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Casual Second Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12352,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Casual Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('Second Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('12-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('12-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "1c442b1f-3e40-441a-b1b6-7a2ddb89cdf5",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Sick full leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Sick full leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12320,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Sick Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Full Leave')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('13-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('13-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "476f5779-1136-4e00-89d4-d466cab02ae7",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Sick First Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Sick First Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12559,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Sick Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('First Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('14-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('14-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "d53fc2bc-1fa5-4157-93e2-7c38e5f9c1ec",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Sick Second Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Sick Second Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12467,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Sick Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('Second Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('15-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('15-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "7233078b-4774-4115-bffc-7e2de918a104",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Un-Paid full leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Un-Paid full leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12241,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Un-Paid Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Full Leave')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('16-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('16-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "b1f4d4e2-15f2-43f2-9363-b465a2a47470",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Un-Paid First Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Un-Paid First Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12533,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Un-Paid Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('First Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('17-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('17-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "16ec2e96-2e66-4265-92b3-89400e625d37",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Un-Paid Second Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Un-Paid Second Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12545,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Un-Paid Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('Second Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('18-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('18-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "876b5a0a-476c-490b-a8bc-2da91e5f9030",
              "parentUUID": "51bcba75-c5a0-4f4e-8924-d7f8d7bb433a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5bf37aae-c1ed-46b3-b8ae-2808c268e3d0",
            "89f15d5b-8165-4065-8be2-fcc4f72ff0cf",
            "0835e4ae-a20f-40d5-ad89-00cc0865d6e4",
            "2b5d6546-7e1a-4739-b7dc-32363a3e77d2",
            "4c05e574-980f-4097-88ad-86580761f942",
            "7df5fec5-4cfa-4d56-bcd9-ea6f96331829",
            "b4d56dc2-f983-45a9-becb-57b9c41d3bf2",
            "0512a38d-7a87-42a9-89c6-8e39632c465b",
            "cc942b3a-0e24-458d-94ed-323a3151b9aa",
            "453109d3-775f-4d6e-8266-9d78fd565ab2",
            "15790bdd-c4e3-49dd-9984-37d6ac624205",
            "63f399d3-0802-4cb2-a5a9-bbd68ed73f60",
            "128668cc-b76a-4ea9-b4e1-9fb2eeb1c5d9",
            "59b14414-2983-4eed-b2f4-ecb5a9f69917",
            "67028993-092d-4354-a85b-8b18c6a062c9",
            "40095145-7808-4026-84fe-fb01ba0852fa",
            "1c442b1f-3e40-441a-b1b6-7a2ddb89cdf5",
            "476f5779-1136-4e00-89d4-d466cab02ae7",
            "d53fc2bc-1fa5-4157-93e2-7c38e5f9c1ec",
            "7233078b-4774-4115-bffc-7e2de918a104",
            "b1f4d4e2-15f2-43f2-9363-b465a2a47470",
            "16ec2e96-2e66-4265-92b3-89400e625d37",
            "876b5a0a-476c-490b-a8bc-2da91e5f9030"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 201603,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
          "title": "All Resources",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/3-Resources/spec-1-all-resources.js",
          "file": "/test/e2e/3-Resources/spec-1-all-resources.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"All Resources\"",
              "fullTitle": "All Resources \"before all\" hook in \"All Resources\"",
              "timedOut": false,
              "duration": 9721,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE departments SET \"hodId\" = 9474 WHERE id = 9;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\n// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "4bc50a45-af3d-4040-949d-6846efaa3952",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"All Resources\"",
              "fullTitle": "All Resources \"before each\" hook in \"All Resources\"",
              "timedOut": false,
              "duration": 3512,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resources');\nawait utilFun.wait(3000);\nawait utilFun.waitForPageLoad();",
              "err": {},
              "uuid": "a6da98e4-d1bc-4f3d-be67-0062c8b6afb8",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if all-resources tab is click-able",
              "fullTitle": "All Resources should check if all-resources tab is click-able",
              "timedOut": false,
              "duration": 4108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/home');\nawait utilFun.waitForPageLoad();\nawait resources.clickResourcesTab();\nawait resources.clickResourcesSubTab('All Resources');\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resources');",
              "err": {},
              "uuid": "b0f994d8-def2-4471-8881-2fdf53c899f8",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by name.",
              "fullTitle": "All Resources should able to search resources by name.",
              "timedOut": false,
              "duration": 4652,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('James Salinas');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "506e240a-fb95-4b71-9820-9b480381ae19",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by their allocated Project.",
              "fullTitle": "All Resources should able to search resources by their allocated Project.",
              "timedOut": false,
              "duration": 2953,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Project');\nawait resources.selectFilterValue('automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "2599f0cb-9a6e-439b-a784-236686f39959",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by their Job status.",
              "fullTitle": "All Resources should able to search resources by their Job status.",
              "timedOut": false,
              "duration": 3186,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Job Status');\nawait resources.selectFilterValue('Permanent');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "f9ac9bf6-d145-4c7f-bc91-741598bbedc7",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Job status filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Job status filter.",
              "timedOut": false,
              "duration": 6483,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Project');\nawait resources.selectFilterValue('automation');\nawait resources.selectFilter('Search by Job Status');\nawait resources.selectFilterValue('Permanent');\nawait resources.selectFilter('Permanent');\nawait resources.selectFilterValue('Internship');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "b6ec54ae-1761-4d7b-8437-77f8892d62c5",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by their Availability.",
              "fullTitle": "All Resources should able to search resources by their Availability.",
              "timedOut": false,
              "duration": 4717,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Project');\nawait resources.selectFilterValue('automation');\nawait resources.selectFilter('Search by Availability');\nawait resources.selectFilterValue('Fully Available');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "c82c9eae-7657-433f-a5b9-a7a3ecece9e9",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by this month.",
              "fullTitle": "All Resources should able to search resources by this month.",
              "timedOut": false,
              "duration": 12471,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by this Month');\nawait resources.selectFilterValue('Increments');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10047ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10047ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "08c4f7c4-1ebc-4589-9cb5-959d08087753",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on this month filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on this month filter.",
              "timedOut": false,
              "duration": 14237,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by this Month');\nawait resources.selectFilterValue('Probations');\nawait resources.selectFilter('Probations');\nawait resources.selectFilterValue('Increments');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10099ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10099ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "1be12fa5-2d20-4b78-9198-5ea3398eea12",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Location.",
              "fullTitle": "All Resources should able to search resources by Location.",
              "timedOut": false,
              "duration": 2863,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Location');\nawait resources.selectFilterValue('Remote');\nawait utilFun.waitForPageLoad();\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "2aaaf7a9-2948-40fb-9f05-c9eaee72320f",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Location filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Location filter.",
              "timedOut": false,
              "duration": 5212,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Location');\nawait resources.selectFilterValue('Remote');\nawait resources.selectFilter('Remote');\nawait resources.selectFilterValue('Karachi');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "04f0283a-ff59-4aec-8406-79665bedbe4e",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Skill.",
              "fullTitle": "All Resources should able to search resources by Skill.",
              "timedOut": false,
              "duration": 3383,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Skills\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "1d0c6cff-ff29-47d4-bc0f-3a245d4f262d",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Skills filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Skills filter.",
              "timedOut": false,
              "duration": 5807,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Skills\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation');\nawait resources.selectFilter('Automation\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation1');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "19928c6f-58e5-4366-b6ea-c21d11770d3a",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Show resources with all selected skills.",
              "fullTitle": "All Resources should able to Show resources with all selected skills.",
              "timedOut": false,
              "duration": 6059,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Skills\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation');\nawait resources.selectFilter('Automation\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation1');\nawait resources.clickAllSelectedSkillsCheckbox();\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "df7e2b84-103f-4981-83f1-5a144f546063",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Department.",
              "fullTitle": "All Resources should able to search resources by Department.",
              "timedOut": false,
              "duration": 3204,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {},
              "uuid": "f4770028-a029-4bc4-83f0-e91cc016589c",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Department filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Department filter.",
              "timedOut": false,
              "duration": 4711,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nawait resources.selectFilter('Engineering');\nawait resources.selectFilterValue('Automation1');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {},
              "uuid": "eb9c7944-23e6-4b5b-a673-7b20f99f79c6",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Sub-Department.",
              "fullTitle": "All Resources should able to search resources by Sub-Department.",
              "timedOut": false,
              "duration": 4999,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nawait resources.clickSubDepartment();\nawait resources.selectFilterValue('SQA Ib Support');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "aaec78bc-a7e3-4fc0-a0f9-2872979acf17",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Sub-Department filter..",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Sub-Department filter..",
              "timedOut": false,
              "duration": 6831,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nawait resources.clickSubDepartment();\nawait resources.selectFilterValue('SQA Ib Support');\nawait resources.clickSubDepartment();\nawait resources.selectFilterValue('DevOps Support');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "e6bcd317-ed7d-43da-a212-f8987f5628a2",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Designation.",
              "fullTitle": "All Resources should able to search resources by Designation.",
              "timedOut": false,
              "duration": 5170,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation');\nawait resources.selectDesignation('Software Engineer');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "5e757ed7-0ba0-4220-810c-efa671633785",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Designation filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Designation filter.",
              "timedOut": false,
              "duration": 8998,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation');\nawait resources.selectDesignation('Software Engineer');\nawait resources.selectFilter('Software Engineer');\nawait resources.selectDesignation('HR');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "5b86f186-bfb7-42a2-af1c-2f8ba1ea87e4",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Designation Category.",
              "fullTitle": "All Resources should able to search resources by Designation Category.",
              "timedOut": false,
              "duration": 2781,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation Category');\nawait resources.selectDesignationCategory('Automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "834a4f93-68f5-401e-89a6-0ea7ec32e5bb",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that when user click on clear button then all his search should be clear.",
              "fullTitle": "All Resources should able to Verify that when user click on clear button then all his search should be clear.",
              "timedOut": false,
              "duration": 3703,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation Category');\nawait resources.selectDesignationCategory('Automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.length == 4, `Expected length not found.`);\nawait resources.clickClearButton();\nconst names1 = await resources.getResourceNameTag();\nassert.ok(names1.length > 4, `Expected length not found.`);",
              "err": {},
              "uuid": "92225f2f-8669-4d1c-849e-8859f10c1ec8",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add new resource",
              "fullTitle": "All Resources should able to Add new resource",
              "timedOut": false,
              "duration": 28442,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_skills\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `UPDATE employee_assets SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_resumes\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_timeLines\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"project_portfolio_employees\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM employees WHERE id = ${resourceId.rows[0].id};`,\n  ];\n  await utilFun.udpateDatabase(query);\n}\nawait addResources.clickAddResourceBtn();\n//   Form 1\nawait addResources.clickInputField('Employee Name *', 'Steve');\nawait addResources.clickInputField('Work Phone Number', '123456');\nawait addResources.clickInputField('Work Email *', 'steve@email.com');\nawait addResources.clickInputField('Work Shift\\nSelect Work Shift', 'morning');\nawait addResources.clickOption();\nawait addResources.clickInputField('Work Location\\nSelect Work Location', 'remote');\nawait addResources.clickOption();\nawait addResources.clickInputField('Primary Manager\\nPrimary Manager', 'bilal rafaqat');\nawait addResources.clickOption();\nawait addResources.clickInputField('Attendance Mode\\nSelect Attendance Mode', 'invodesk');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation *\\nSelect Designation', 'automation');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation Category*\\nSelect Designation Category', 'automation');\nawait addResources.clickOption();\nawait addResources.clickNextButton();\n//   Form 2\nawait addResources.clickInputField2('Father Name', 'James');\nawait addResources.clickInputField2('Personal Email', 'personal@email.com');\nawait addResources.clickInputField2('Personal Phone', '12345');\nawait addResources.clickInputField2('Address', 'xyz');\nawait addResources.clickInputField2('National ID Number', '1122');\nawait addResources.setDOB('01-01-2000');\nawait addResources.clickInputField2('Gender\\nSelect Gender', 'other');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Marital Status\\nSelect Marital Status', 'single');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Emergency Contact Name', 'James');\nawait addResources.clickInputField2('Emergency Contact Number', '54321');\nawait addResources.clickInputField2('Emergency Contact Relation', 'Father');\nawait addResources.clickNextButton2();\n//   Form 3\nawait addResources.clickInputField3('Bank Name', 'MyBank');\nawait addResources.clickInputField3('Account Title', 'current');\nawait addResources.clickInputField3('IBAN Number', '3344');\nawait addResources.clickInputField3('Bank Address', 'qwerty');\nawait addResources.clickNextButton3();\n//   Form 4\nawait addResources.clickInputField4('Certification Level\\nSelect Certification Level', 'graduation');\nawait addResources.clickOption4();\nawait addResources.clickInputField4('Field of Study', 'SE');\nawait addResources.clickInputField4('School/University', 'MIT');\nawait addResources.clickInputField4('Score/Percentage', '70');\nawait addResources.clickInputField4('Passing Year\\nSelect Degree Passing Year', '2020');\nawait addResources.clickOption4();\nawait addResources.clickNextButton4();\n//   Form 5\nawait addResources.clickInputFieldForm5('Department\\nDepartment', 'Engineering');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Sub Department\\nSub Department', 'DevOps Support');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Contract Type*\\nSelect Contract Type', 'Full Time');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Date of Joining*', '01-11-2023');\nawait addResources.selectJobStatus('Probation');\nawait addResources.selectEndOfProbation('2 Months');\nawait addResources.clickInputFieldForm5('Total Working Hours*\\nSelect Total Working Hours', '4 Hrs');\nawait addResources.clickOptionForm5();\nawait addResources.clickNextButton5();\n//   Form 6\nawait addResources.clickInputFieldForm6('Current Salary (PKR)', '50000');\nawait addResources.clickInputFieldForm6('Last Salary (PKR)', '30000');\nawait addResources.clickInputFieldForm6('Last Increment Date', '01-01-2023');\nawait addResources.clickSubmitButton();\nconst alertText = await addResources.checkAlert();\nassert.equal(alertText, 'Resource Created Successfully!');",
              "err": {},
              "uuid": "463e2fe0-4918-4415-ad8f-3f65de8f38b9",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if Resource is added.",
              "fullTitle": "All Resources should able to check if Resource is added.",
              "timedOut": false,
              "duration": 4341,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);",
              "err": {},
              "uuid": "c3d92e6a-b359-4cda-9e70-11f13a6a8673",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "All Resources should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "89713d5c-1a6a-4ee6-b8a9-a64620b6fbab",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "All Resources should able to  copy email from options",
              "timedOut": false,
              "duration": 5335,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Copy Email');\nconst alertText = await utilFun.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "04a67226-46d2-438a-b53a-6481813df5e0",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "All Resources should able to Send Email from options",
              "timedOut": false,
              "duration": 10555,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=steve@email.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "77fcab47-3215-4a4e-ad00-27be22764ca9",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "All Resources should able to see Email from options",
              "timedOut": false,
              "duration": 5686,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('See Email');\nconst email = await resources.copyEmail();\nassert.equal(email, 'Email: steve@email.com');",
              "err": {},
              "uuid": "1c1d1e23-1c82-4367-9d00-76809535fe2f",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "All Resources should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 6233,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Phone Number');\nconst phnNo = await resources.copyEmail();\nassert.equal(phnNo, 'Phone: 12345');\nawait resources.copyPhoneNumber();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "d9976a72-0508-4be3-8773-13e699c73992",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to update Resource from options",
              "fullTitle": "All Resources should able to update Resource from options",
              "timedOut": false,
              "duration": 11919,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Update Resource');\nawait addResources.clickInputField('Work Phone Number', '8');\nawait addResources.clickNextButton();\nawait addResources.clickNextButton2();\nawait addResources.clickNextButton3();\nawait addResources.clickNextButton4();\nawait addResources.clickNextButton5();\nawait addResources.clickSubmitButton();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource Job Status is updated Successfully!');",
              "err": {},
              "uuid": "6efe4752-340b-4108-a8ba-e2670cd70dd3",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to initiate a Performance Review from options",
              "fullTitle": "All Resources should able to initiate a Performance Review from options",
              "timedOut": false,
              "duration": 5291,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [`DELETE FROM employee_evaluations WHERE \"employeeId\" = ${resourceId.rows[0].id};`];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Initiate a Performance Review');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Review is initiated successfully.');",
              "err": {},
              "uuid": "4b1d7f7e-d6f5-40ce-85c0-df4e840dc17c",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if Performance review is initiated or not",
              "fullTitle": "All Resources should able to check if Performance review is initiated or not",
              "timedOut": false,
              "duration": 3130,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/evaluation-performance');\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);",
              "err": {},
              "uuid": "7d1a28e4-06c2-4d9d-935b-fcca07ee332d",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Initiate a Revised Designation from options",
              "fullTitle": "All Resources should able to Initiate a Revised Designation from options",
              "timedOut": false,
              "duration": 5370,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [`DELETE FROM employee_evaluations WHERE \"employeeId\" = ${resourceId.rows[0].id};`];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Initiate a Revised Designation');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Review is initiated successfully.');",
              "err": {},
              "uuid": "12843b18-0cb4-469b-8b3f-6174d6c3fe7b",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if Performance review is initiated or not",
              "fullTitle": "All Resources should able to check if Performance review is initiated or not",
              "timedOut": false,
              "duration": 3260,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);",
              "err": {},
              "uuid": "0d978e29-76de-4c32-bf9b-962b35b759be",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to to add project from resource details",
              "fullTitle": "All Resources should able to to add project from resource details",
              "timedOut": false,
              "duration": 11736,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickAddproject();\nawait resources.selectAddProjectInputField('Projects', 'automation');\nawait resources.selectAddProjectInputField('Role in this project', 'Main Developer');\nawait resources.selectAddProjectInputField('Not Set', 'Fully Available');\nawait resources.selectAddProjectInputField('Engagement Mode', 'Billed');\nawait resources.selectAddProjectInputField('Add', '');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource added in project successfully.');",
              "err": {},
              "uuid": "9022a957-649d-47d3-af68-e794b43636a3",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to to delete project from resource details",
              "fullTitle": "All Resources should able to to delete project from resource details",
              "timedOut": false,
              "duration": 4083,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickDeleteProject();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource removed from project successfully.');",
              "err": {},
              "uuid": "71bd7c88-e8f5-40d5-b63f-296528e1ae6f",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Create Employee Resume",
              "fullTitle": "All Resources should able to Create Employee Resume",
              "timedOut": false,
              "duration": 25043,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [`DELETE FROM \"employee_resumes\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceResume.clickCreateResumeBtn();\nawait resourceResume.enterLable('Steve Resume');\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterSummary('testing');\nawait resourceResume.clickNextBtn();\nawait resourceResume.clickSkillDropdown();\nawait resourceResume.selectSkill('Automation');\nawait resourceResume.giveSkillRating(4);\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterTitle('Project1');\nawait resourceResume.enterDescription('Testing');\nawait resourceResume.enterResponsibilities('Testing');\nawait resourceResume.selectTechnologies('Automation1');\nawait resourceResume.selectTools('okokok');\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterDegree('BS Software Engineering');\nawait resourceResume.enterInstitution('UOL');\nawait resourceResume.clickCalendar();\nawait resourceResume.selectMonth('Sep');\nawait resourceResume.selectYear('2017');\nawait resourceResume.clickCalendar();\nawait resourceResume.selectMonth('Jan');\nawait resourceResume.selectYear('2022');\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterTitle('Js Developer');\nawait resourceResume.enterOrganization('Invozone');\nawait resourceResume.clickIssueDateCalendar();\nawait resourceResume.selectDate('22');\nawait resourceResume.selectMonth('Jan');\nawait resourceResume.selectYear('2022');\nawait resourceResume.clickNextBtn();\nawait resourceResume.clickNextBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resume is created successfully.');",
              "err": {},
              "uuid": "0823e95a-5ad9-4b1b-9d1b-5d27a573f423",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Department Colum",
              "fullTitle": "All Resources should able to Hide Department Colum",
              "timedOut": false,
              "duration": 2180,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Department');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 12, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Department');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "55d19b02-e378-4505-be50-c120e6e3bc0e",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Sub-Department Colum",
              "fullTitle": "All Resources should able to Hide Sub-Department Colum",
              "timedOut": false,
              "duration": 2144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Sub-Department');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 11, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Sub-Department');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "9e58db16-aa54-410d-b69f-570c2c2862e3",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Skills Colum",
              "fullTitle": "All Resources should able to Hide Skills Colum",
              "timedOut": false,
              "duration": 2094,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Skills');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 10, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Skills');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "a966c523-05d0-4490-aed2-1592d0b64531",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Exp Years Colum",
              "fullTitle": "All Resources should able to Hide Exp Years Colum",
              "timedOut": false,
              "duration": 2070,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Exp Years');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 9, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Exp Years');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "1114f5d4-4497-41d5-8520-71aa9cf55e7b",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Location Colum",
              "fullTitle": "All Resources should able to Hide Location Colum",
              "timedOut": false,
              "duration": 2061,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Location');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 8, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Location');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "4b0e8dbe-8825-436c-aaa4-53551f473402",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Projects Colum",
              "fullTitle": "All Resources should able to Hide Projects Colum",
              "timedOut": false,
              "duration": 1942,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Projects');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 7, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Projects');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "6565d492-237f-42a2-bcae-c5b2aadd1ed3",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Availablility Colum",
              "fullTitle": "All Resources should able to Hide Availablility Colum",
              "timedOut": false,
              "duration": 1809,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Availability');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 6, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Availablility');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "d606d33f-83e3-48c2-8758-c21ee5c9089a",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Resume Colum",
              "fullTitle": "All Resources should able to Hide Resume Colum",
              "timedOut": false,
              "duration": 1940,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Resume');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 5, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Resume');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "4cbd5803-7f3c-4861-bb63-5371409ca822",
              "parentUUID": "52a9e1b7-b5f4-4ed6-bf0a-f94ba877c994",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b0f994d8-def2-4471-8881-2fdf53c899f8",
            "506e240a-fb95-4b71-9820-9b480381ae19",
            "2599f0cb-9a6e-439b-a784-236686f39959",
            "f9ac9bf6-d145-4c7f-bc91-741598bbedc7",
            "b6ec54ae-1761-4d7b-8437-77f8892d62c5",
            "c82c9eae-7657-433f-a5b9-a7a3ecece9e9",
            "2aaaf7a9-2948-40fb-9f05-c9eaee72320f",
            "04f0283a-ff59-4aec-8406-79665bedbe4e",
            "1d0c6cff-ff29-47d4-bc0f-3a245d4f262d",
            "19928c6f-58e5-4366-b6ea-c21d11770d3a",
            "df7e2b84-103f-4981-83f1-5a144f546063",
            "f4770028-a029-4bc4-83f0-e91cc016589c",
            "eb9c7944-23e6-4b5b-a673-7b20f99f79c6",
            "aaec78bc-a7e3-4fc0-a0f9-2872979acf17",
            "e6bcd317-ed7d-43da-a212-f8987f5628a2",
            "5e757ed7-0ba0-4220-810c-efa671633785",
            "5b86f186-bfb7-42a2-af1c-2f8ba1ea87e4",
            "834a4f93-68f5-401e-89a6-0ea7ec32e5bb",
            "92225f2f-8669-4d1c-849e-8859f10c1ec8",
            "463e2fe0-4918-4415-ad8f-3f65de8f38b9",
            "c3d92e6a-b359-4cda-9e70-11f13a6a8673",
            "04a67226-46d2-438a-b53a-6481813df5e0",
            "77fcab47-3215-4a4e-ad00-27be22764ca9",
            "1c1d1e23-1c82-4367-9d00-76809535fe2f",
            "d9976a72-0508-4be3-8773-13e699c73992",
            "6efe4752-340b-4108-a8ba-e2670cd70dd3",
            "4b1d7f7e-d6f5-40ce-85c0-df4e840dc17c",
            "7d1a28e4-06c2-4d9d-935b-fcca07ee332d",
            "12843b18-0cb4-469b-8b3f-6174d6c3fe7b",
            "0d978e29-76de-4c32-bf9b-962b35b759be",
            "9022a957-649d-47d3-af68-e794b43636a3",
            "71bd7c88-e8f5-40d5-b63f-296528e1ae6f",
            "0823e95a-5ad9-4b1b-9d1b-5d27a573f423",
            "55d19b02-e378-4505-be50-c120e6e3bc0e",
            "9e58db16-aa54-410d-b69f-570c2c2862e3",
            "a966c523-05d0-4490-aed2-1592d0b64531",
            "1114f5d4-4497-41d5-8520-71aa9cf55e7b",
            "4b0e8dbe-8825-436c-aaa4-53551f473402",
            "6565d492-237f-42a2-bcae-c5b2aadd1ed3",
            "d606d33f-83e3-48c2-8758-c21ee5c9089a",
            "4cbd5803-7f3c-4861-bb63-5371409ca822"
          ],
          "failures": [
            "08c4f7c4-1ebc-4589-9cb5-959d08087753",
            "1be12fa5-2d20-4b78-9198-5ea3398eea12"
          ],
          "pending": [
            "89713d5c-1a6a-4ee6-b8a9-a64620b6fbab"
          ],
          "skipped": [],
          "duration": 263192,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "2d0edd93-7ba7-4e43-962c-874d76a2ff9f",
          "title": "Resource Offboarding",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/3-Resources/spec-2-resource-offboarding.js",
          "file": "/test/e2e/3-Resources/spec-2-resource-offboarding.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Resource Offboarding\"",
              "fullTitle": "Resource Offboarding \"before all\" hook in \"Resource Offboarding\"",
              "timedOut": false,
              "duration": 10669,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "c4bea4ce-07f3-49a2-856b-d55cc14b24c8",
              "parentUUID": "2d0edd93-7ba7-4e43-962c-874d76a2ff9f",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Resource Offboarding\"",
              "fullTitle": "Resource Offboarding \"before each\" hook in \"Resource Offboarding\"",
              "timedOut": false,
              "duration": 7,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad()",
              "err": {},
              "uuid": "a09a7b78-6395-49a5-8c8d-1fd517527c59",
              "parentUUID": "2d0edd93-7ba7-4e43-962c-874d76a2ff9f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to OffBoard Resource by Resignation without Pending Discussion",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by Resignation without Pending Discussion",
              "timedOut": false,
              "duration": 10059,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('Resignation')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.clickPendingCheckbox()\nawait resourceOffBoarding.setConntractEndDate('14122024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource job status is updated and email has been sent to PM & HOD!!');",
              "err": {},
              "uuid": "1d94d01b-837a-4fad-9218-8291f8c8658d",
              "parentUUID": "2d0edd93-7ba7-4e43-962c-874d76a2ff9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 3589,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);",
              "err": {},
              "uuid": "6718c6be-5596-4521-bc9d-1065115cc11c",
              "parentUUID": "2d0edd93-7ba7-4e43-962c-874d76a2ff9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to OffBoard Resource by Resignation Pending Discussion",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by Resignation Pending Discussion",
              "timedOut": false,
              "duration": 9901,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('Resignation')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource job status is updated and email has been sent to PM & HOD!!');",
              "err": {},
              "uuid": "9b49efc8-7700-4b5c-b4b4-c60aa8211faf",
              "parentUUID": "2d0edd93-7ba7-4e43-962c-874d76a2ff9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 3632,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);",
              "err": {},
              "uuid": "503dc266-3891-418d-92f6-085a48c31482",
              "parentUUID": "2d0edd93-7ba7-4e43-962c-874d76a2ff9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should able to approve Pending resource offBoarding",
              "fullTitle": "Resource Offboarding Should able to approve Pending resource offBoarding",
              "timedOut": false,
              "duration": 5120,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);\nawait resourceOffBoarding.selectOffBoardingResponse('Approved')\nawait resourceOffBoarding.setLastDate('14122024')\nawait resourceOffBoarding.clickUpdateBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resignation request has been approved succesfully!');\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {},
              "uuid": "5a45a9c1-3e8d-4f5e-a061-ad31f6b7493c",
              "parentUUID": "2d0edd93-7ba7-4e43-962c-874d76a2ff9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should able to Reject Pending resource offBoarding",
              "fullTitle": "Resource Offboarding Should able to Reject Pending resource offBoarding",
              "timedOut": false,
              "duration": 5156,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `UPDATE boarding_requests SET \"status\" = 'PENDING' WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE boarding_requests SET \"noticeEndDate\" = NULL WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE boarding_requests SET \"deletedAt\" = NULL WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);\nawait resourceOffBoarding.selectOffBoardingResponse('Rejected')\nawait resourceOffBoarding.enterReason('testing')\nawait resourceOffBoarding.clickUpdateBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resignation request has been rejected succesfully!');\nawait resourceOffBoarding.confirmRejectStatus()",
              "err": {},
              "uuid": "44c902e6-163e-4cf7-ae22-1cfef9481b69",
              "parentUUID": "2d0edd93-7ba7-4e43-962c-874d76a2ff9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to OffBoard Resource by Termination",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by Termination",
              "timedOut": false,
              "duration": 10065,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('Termination')\nawait resourceOffBoarding.enterReason('testing')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.setConntractEndDate('14122024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Termination request has been approved succesfully!');",
              "err": {},
              "uuid": "9cfbabc0-6f9c-4430-9a72-ebc43d76503d",
              "parentUUID": "2d0edd93-7ba7-4e43-962c-874d76a2ff9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 3954,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Termination'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {},
              "uuid": "44627963-e004-48e6-ae46-f0371465802b",
              "parentUUID": "2d0edd93-7ba7-4e43-962c-874d76a2ff9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource upcoming offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource upcoming offBoarding is showning or not",
              "timedOut": false,
              "duration": 3723,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Termination'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {},
              "uuid": "6be4e0d9-9de9-4d48-b4a2-6c9550418be8",
              "parentUUID": "2d0edd93-7ba7-4e43-962c-874d76a2ff9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to OffBoard Resource by End of Service",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by End of Service",
              "timedOut": false,
              "duration": 10072,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('End of Service')\nawait resourceOffBoarding.enterReason('testing')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.setConntractEndDate('14122024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'End of Service request has been approved succesfully!');",
              "err": {},
              "uuid": "83a32563-ab5f-41bc-a474-e8caac6fc5ec",
              "parentUUID": "2d0edd93-7ba7-4e43-962c-874d76a2ff9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 3369,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('End of Service'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {},
              "uuid": "df1b88ee-f1aa-4ced-bcf7-6b55318be9ad",
              "parentUUID": "2d0edd93-7ba7-4e43-962c-874d76a2ff9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource upcoming offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource upcoming offBoarding is showning or not",
              "timedOut": false,
              "duration": 3395,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('End of Service'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {},
              "uuid": "01e77674-3cb3-40dc-9e18-031ce93789d5",
              "parentUUID": "2d0edd93-7ba7-4e43-962c-874d76a2ff9f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1d94d01b-837a-4fad-9218-8291f8c8658d",
            "6718c6be-5596-4521-bc9d-1065115cc11c",
            "9b49efc8-7700-4b5c-b4b4-c60aa8211faf",
            "503dc266-3891-418d-92f6-085a48c31482",
            "5a45a9c1-3e8d-4f5e-a061-ad31f6b7493c",
            "44c902e6-163e-4cf7-ae22-1cfef9481b69",
            "9cfbabc0-6f9c-4430-9a72-ebc43d76503d",
            "44627963-e004-48e6-ae46-f0371465802b",
            "6be4e0d9-9de9-4d48-b4a2-6c9550418be8",
            "83a32563-ab5f-41bc-a474-e8caac6fc5ec",
            "df1b88ee-f1aa-4ced-bcf7-6b55318be9ad",
            "01e77674-3cb3-40dc-9e18-031ce93789d5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 72035,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "edb91033-1664-4539-b65d-159bc2f17e6f",
          "title": "Position Openings",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/3-Resources/spec-3-position-opening.js",
          "file": "/test/e2e/3-Resources/spec-3-position-opening.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to Apply Request For Position opening",
              "fullTitle": "Position Openings should able to Apply Request For Position opening",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "f9bf7ba6-5223-4ab8-a1eb-4d2a66175ea3",
              "parentUUID": "edb91033-1664-4539-b65d-159bc2f17e6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if request id Added",
              "fullTitle": "Position Openings should able to check if request id Added",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "6755fcf8-10b0-41da-84dd-c746c9c4ee9f",
              "parentUUID": "edb91033-1664-4539-b65d-159bc2f17e6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit request",
              "fullTitle": "Position Openings should able to edit request",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "2551d1b4-6eea-494e-9eac-b486b6ffe974",
              "parentUUID": "edb91033-1664-4539-b65d-159bc2f17e6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete request",
              "fullTitle": "Position Openings should able to Delete request",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "92f3cde9-200d-47d5-aad9-8a99335b20e7",
              "parentUUID": "edb91033-1664-4539-b65d-159bc2f17e6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if request is visible by HOD",
              "fullTitle": "Position Openings should check if request is visible by HOD",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "6f3c1d1e-d7a5-4418-8fd6-0ba0ab321a72",
              "parentUUID": "edb91033-1664-4539-b65d-159bc2f17e6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if HOD can edit request",
              "fullTitle": "Position Openings should able to check if HOD can edit request",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "3699fa12-e7b6-4d37-9c10-ce762c48cf6c",
              "parentUUID": "edb91033-1664-4539-b65d-159bc2f17e6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to reject request by hod",
              "fullTitle": "Position Openings should able to reject request by hod",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "43a855a0-0b5c-4068-9f00-ebd534a8d0bd",
              "parentUUID": "edb91033-1664-4539-b65d-159bc2f17e6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in reject tab",
              "fullTitle": "Position Openings should verify the request is showing in reject tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "752c7aa1-1f33-4cd7-8086-57ed6a5c5dbb",
              "parentUUID": "edb91033-1664-4539-b65d-159bc2f17e6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to approve request by hod",
              "fullTitle": "Position Openings should able to approve request by hod",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e0c0cbe6-81c8-4333-b8bd-7a83d9eb93ed",
              "parentUUID": "edb91033-1664-4539-b65d-159bc2f17e6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in approve tab",
              "fullTitle": "Position Openings should verify the request is showing in approve tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "87b8e45f-7b41-44b6-9aca-a64a9f1a45cd",
              "parentUUID": "edb91033-1664-4539-b65d-159bc2f17e6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if request is visible by CEO",
              "fullTitle": "Position Openings should check if request is visible by CEO",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "aff0a854-1eda-4b13-ac9c-b26c8e42eb5f",
              "parentUUID": "edb91033-1664-4539-b65d-159bc2f17e6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if CEO can edit request",
              "fullTitle": "Position Openings should able to check if CEO can edit request",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "c01c482f-9a01-49f0-af4a-57157c87e6ea",
              "parentUUID": "edb91033-1664-4539-b65d-159bc2f17e6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to reject request by hod",
              "fullTitle": "Position Openings should able to reject request by hod",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "c3e6ef83-d494-4ce6-95b0-53fb81d364e1",
              "parentUUID": "edb91033-1664-4539-b65d-159bc2f17e6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in reject tab",
              "fullTitle": "Position Openings should verify the request is showing in reject tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "1294c88e-25ab-493e-b51c-b0bfae8b063c",
              "parentUUID": "edb91033-1664-4539-b65d-159bc2f17e6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to approve request by hod",
              "fullTitle": "Position Openings should able to approve request by hod",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "7329e889-da2d-47b0-bd24-d67f68288572",
              "parentUUID": "edb91033-1664-4539-b65d-159bc2f17e6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in approve tab",
              "fullTitle": "Position Openings should verify the request is showing in approve tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "5cd90a08-e135-4efa-b4b2-d653556bbbb1",
              "parentUUID": "edb91033-1664-4539-b65d-159bc2f17e6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in approve tab for Applicant",
              "fullTitle": "Position Openings should verify the request is showing in approve tab for Applicant",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "420d1243-8287-4fb0-be03-e4e37b8f3bf0",
              "parentUUID": "edb91033-1664-4539-b65d-159bc2f17e6f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "f9bf7ba6-5223-4ab8-a1eb-4d2a66175ea3",
            "6755fcf8-10b0-41da-84dd-c746c9c4ee9f",
            "2551d1b4-6eea-494e-9eac-b486b6ffe974",
            "92f3cde9-200d-47d5-aad9-8a99335b20e7",
            "6f3c1d1e-d7a5-4418-8fd6-0ba0ab321a72",
            "3699fa12-e7b6-4d37-9c10-ce762c48cf6c",
            "43a855a0-0b5c-4068-9f00-ebd534a8d0bd",
            "752c7aa1-1f33-4cd7-8086-57ed6a5c5dbb",
            "e0c0cbe6-81c8-4333-b8bd-7a83d9eb93ed",
            "87b8e45f-7b41-44b6-9aca-a64a9f1a45cd",
            "aff0a854-1eda-4b13-ac9c-b26c8e42eb5f",
            "c01c482f-9a01-49f0-af4a-57157c87e6ea",
            "c3e6ef83-d494-4ce6-95b0-53fb81d364e1",
            "1294c88e-25ab-493e-b51c-b0bfae8b063c",
            "7329e889-da2d-47b0-bd24-d67f68288572",
            "5cd90a08-e135-4efa-b4b2-d653556bbbb1",
            "420d1243-8287-4fb0-be03-e4e37b8f3bf0"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "26f60798-dee1-4602-a127-ada3881663c3",
          "title": "Resource Details",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/3-Resources/spec-4-resourse-details.js",
          "file": "/test/e2e/3-Resources/spec-4-resourse-details.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Resource Details\"",
              "fullTitle": "Resource Details \"before all\" hook in \"Resource Details\"",
              "timedOut": false,
              "duration": 10541,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nlet resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  detailsPageUrl = `/resource-detail/${resourceId.rows[0].id}?tab=Basic_Information`;\n  attendanceTabUrl = `/resource-detail/${resourceId.rows[0].id}?tab=Attendance`;\n  oldId = resourceId.rows[0].id;\n  newId = resourceId.rows[0].id;\n}\n// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "4af860f8-d511-4fd0-b737-afb609a469b0",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to Add new resource",
              "fullTitle": "Resource Details should able to Add new resource",
              "timedOut": false,
              "duration": 31443,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_skills\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `UPDATE employee_assets SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_resumes\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_timeLines\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"project_portfolio_employees\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM employees WHERE id = ${resourceId.rows[0].id};`,\n  ];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.wait(3000);\nawait utilFun.waitForPageLoad();\nawait addResources.clickAddResourceBtn();\n//   Form 1\nawait addResources.clickInputField('Employee Name *', 'Stevee');\nawait addResources.clickInputField('Work Phone Number', '123456');\nawait addResources.clickInputField('Work Email *', 'steve@email.com');\nawait addResources.clickInputField('Work Shift\\nSelect Work Shift', 'morning');\nawait addResources.clickOption();\nawait addResources.clickInputField('Work Location\\nSelect Work Location', 'remote');\nawait addResources.clickOption();\nawait addResources.clickInputField('Primary Manager\\nPrimary Manager', 'bilal rafaqat');\nawait addResources.clickOption();\nawait addResources.clickInputField('Attendance Mode\\nSelect Attendance Mode', 'invodesk');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation *\\nSelect Designation', 'automation');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation Category*\\nSelect Designation Category', 'automation');\nawait addResources.clickOption();\nawait addResources.clickNextButton();\n//   Form 2\nawait addResources.clickInputField2('Father Name', 'James');\nawait addResources.clickInputField2('Personal Email', 'personal@email.com');\nawait addResources.clickInputField2('Personal Phone', '12345');\nawait addResources.clickInputField2('Address', 'xyz');\nawait addResources.clickInputField2('National ID Number', '1122');\nawait addResources.setDOB('01-01-2000');\nawait addResources.clickInputField2('Gender\\nSelect Gender', 'other');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Marital Status\\nSelect Marital Status', 'single');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Emergency Contact Name', 'James');\nawait addResources.clickInputField2('Emergency Contact Number', '54321');\nawait addResources.clickInputField2('Emergency Contact Relation', 'Father');\nawait addResources.clickNextButton2();\n//   Form 3\nawait addResources.clickInputField3('Bank Name', 'MyBank');\nawait addResources.clickInputField3('Account Title', 'current');\nawait addResources.clickInputField3('IBAN Number', '3344');\nawait addResources.clickInputField3('Bank Address', 'qwerty');\nawait addResources.clickNextButton3();\n//   Form 4\nawait addResources.clickInputField4('Certification Level\\nSelect Certification Level', 'graduation');\nawait addResources.clickOption4();\nawait addResources.clickInputField4('Field of Study', 'SE');\nawait addResources.clickInputField4('School/University', 'MIT');\nawait addResources.clickInputField4('Score/Percentage', '70');\nawait addResources.clickInputField4('Passing Year\\nSelect Degree Passing Year', '2020');\nawait addResources.clickOption4();\nawait addResources.clickNextButton4();\n//   Form 5\nawait addResources.clickInputFieldForm5('Department\\nDepartment', 'HR');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Sub Department\\nSub Department', 'DevOps Support');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Contract Type*\\nSelect Contract Type', 'Full Time');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Date of Joining*', '11-01-2023');\nawait addResources.selectJobStatus('Probation');\nawait addResources.selectEndOfProbation('2 Months');\nawait addResources.clickInputFieldForm5('Total Working Hours*\\nSelect Total Working Hours', '4 Hrs');\nawait addResources.clickOptionForm5();\nawait addResources.clickNextButton5();\n//   Form 6\nawait addResources.clickInputFieldForm6('Current Salary (PKR)', '50000');\nawait addResources.clickInputFieldForm6('Last Salary (PKR)', '30000');\nawait addResources.clickInputFieldForm6('Last Increment Date', '01-01-2024');\nawait addResources.clickSubmitButton();\nconst alertText = await addResources.checkAlert();\nassert.equal(alertText, 'Resource Created Successfully!');\nlet resourceId1 = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId1.rowCount !== 0) {\n  detailsPageUrl = `/resource-detail/${resourceId1.rows[0].id}?tab=Basic_Information`;\n  attendanceTabUrl = `/resource-detail/${resourceId1.rows[0].id}?tab=Attendance`;\n  newId = resourceId1.rows[0].id;\n}",
              "err": {},
              "uuid": "e922890d-6311-44cb-9db7-dbec154466fe",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to to add project from resource details",
              "fullTitle": "Resource Details should able to to add project from resource details",
              "timedOut": false,
              "duration": 16388,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resources');\nawait utilFun.wait(3000);\nawait resources.clickFilterBtn();\nawait resources.searchName('Stevee');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Stevee'), `Expected text not found.`);\nawait resources.clickAddproject();\nawait resources.selectAddProjectInputField('Projects', 'automation');\nawait resources.selectAddProjectInputField('Role in this project', 'Main Developer');\nawait resources.selectAddProjectInputField('Not Set', 'Fully Available');\nawait resources.selectAddProjectInputField('Engagement Mode', 'Billed');\nawait resources.selectAddProjectInputField('Add', '');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource added in project successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(xpath, //*[@id=\"resource_table\"]/div/div/div/div/div/div[2]/table/tbody/tr[2]/td[7]/span/div/button)\nWait timed out after 10034ms",
                "estack": "TimeoutError: Waiting for element to be located By(xpath, //*[@id=\"resource_table\"]/div/div/div/div/div/div[2]/table/tbody/tr[2]/td[7]/span/div/button)\nWait timed out after 10034ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "419a3d27-4b73-432c-9330-05d5492a65c6",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource is showing.",
              "fullTitle": "Resource Details should check if Resource is showing.",
              "timedOut": false,
              "duration": 4733,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/resources');\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Stevee'), `Expected text not found.`);",
              "err": {},
              "uuid": "4393727e-1b58-46fc-a5a4-777e153bc312",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if clicking on resource name redirecting to resoure details page.",
              "fullTitle": "Resource Details should check if clicking on resource name redirecting to resoure details page.",
              "timedOut": false,
              "duration": 5970,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/resources');\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Stevee'), `Expected text not found.`);\nawait resources.ClickResourceNameTag();\nawait utilFun.switchWindow(1);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);",
              "err": {},
              "uuid": "9af75892-6c3e-40b3-b5e7-dbabcfee4970",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource name is showing on Details page.",
              "fullTitle": "Resource Details should check if Resource name is showing on Details page.",
              "timedOut": false,
              "duration": 3017,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nconst name = await resourceDetails.getResourceNameTxt();\nassert.equal(name, 'Stevee', `Expected text not found.`);",
              "err": {},
              "uuid": "b2865ec2-df76-444b-b32f-394e54b949cd",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Avatar is showing on Details page.",
              "fullTitle": "Resource Details should check if Resource Avatar is showing on Details page.",
              "timedOut": false,
              "duration": 2322,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nconst name = await resourceDetails.checkAvatarIcon();\nassert.equal(name, 'S', `Expected text not found.`);",
              "err": {},
              "uuid": "876b36ff-3535-45c2-9c09-218397e5ce90",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Father Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Father Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 8992,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Father Name', 'James');\nawait resourceDetails.editValue('Father Name', 'James Salinas');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Father Name', 'James salinas');",
              "err": {},
              "uuid": "a13bbc6d-391e-4ca9-89be-1c10c2ad6d63",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Personal Email is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Personal Email is Shownig and is editable.",
              "timedOut": false,
              "duration": 8981,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Personal Email', 'personal@email.com');\nawait resourceDetails.editValue('Personal Email', 'personalUpdated@email.com');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Personal Email', 'personalUpdated@email.com');",
              "err": {},
              "uuid": "52af5e91-f8af-4e5b-ba4a-41ae61e38a3c",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Address is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Address is Shownig and is editable.",
              "timedOut": false,
              "duration": 8923,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Address', 'xyz');\nawait resourceDetails.editValue('Address', 'xyzUpdated');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Address', 'xyzUpdated');",
              "err": {},
              "uuid": "5f715205-fe15-4dd1-ad64-633b3fe1d7ff",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Nationality is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Nationality is Shownig and is editable.",
              "timedOut": false,
              "duration": 9363,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Nationality', 'Pakistan');\nawait resourceDetails.editValue('Nationality', 'United arab emirates');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Nationality', 'United arab emirates');",
              "err": {},
              "uuid": "4cc7574a-3039-4978-bf0b-454e3ca1f278",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource National ID Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource National ID Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 8578,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('National ID Number', '1122');\nawait resourceDetails.editValue('National ID Number', '2233');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('National ID Number', '2233');",
              "err": {},
              "uuid": "e18d572e-4f91-4c76-8676-917d0ef9ee08",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Date of Birth is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Date of Birth is Shownig and is editable.",
              "timedOut": false,
              "duration": 9023,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Date of Birth', '01-01-2000');\nawait resourceDetails.editValue('Date of Birth', '01-01-2001');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Date of Birth', '01-01-2001');",
              "err": {},
              "uuid": "4ac8d139-2c28-4f43-a0f1-ea3e22d2cbec",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Gender is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Gender is Shownig and is editable.",
              "timedOut": false,
              "duration": 9185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Gender', 'Other');\nawait resourceDetails.editValue('Gender', 'Female');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Gender', 'Female');",
              "err": {},
              "uuid": "1392bdd1-be3b-4654-b2a0-b59a4313a4d3",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Marital Status is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Marital Status is Shownig and is editable.",
              "timedOut": false,
              "duration": 9245,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Marital Status', 'Single');\nawait resourceDetails.editValue('Marital Status', 'Married');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Marital Status', 'Married');",
              "err": {},
              "uuid": "e613386d-033b-42b7-8078-6c2f74310a39",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Emergency Contact Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Emergency Contact Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 8755,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Emergency Contact Name', 'James');\nawait resourceDetails.editValue('Emergency Contact Name', 'James Salinas');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Emergency Contact Name', 'James Salinas');",
              "err": {},
              "uuid": "5e9009d8-5aaa-4a4a-9e35-336485e95923",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Emergency Contact Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Emergency Contact Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 8577,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Emergency Contact Number', '54321');\nawait resourceDetails.editValue('Emergency Contact Number', '654321');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Emergency Contact Number', '654321');",
              "err": {},
              "uuid": "9c178a9d-89bb-409d-92c6-828300efc8cc",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Emergency Contact Relation is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Emergency Contact Relation is Shownig and is editable.",
              "timedOut": false,
              "duration": 4188,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Emergency Contact Relation', 'Father');\nawait resourceDetails.editValue('Emergency Contact Relation', 'Brother');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Emergency Contact Relation', 'Brother');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at ResourceDetails.checkValue (test/support/pages/resources/resourceDetails.js:87:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/3-Resources/spec-4-resourse-details.js:299:5)",
                "diff": "- N/A\n+ Father\n"
              },
              "uuid": "fe996b55-cc2d-480d-9645-51ed52c6e021",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Bank Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Bank Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 9338,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Bank Name', 'Mybank');\nawait resourceDetails.editValue('Bank Name', 'Bankname');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Bank Name', 'Bankname');",
              "err": {},
              "uuid": "1998bb6b-ea22-4f0b-aca0-b9f7c088b689",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Account Title is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Account Title is Shownig and is editable.",
              "timedOut": false,
              "duration": 8782,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Account Title', 'Current');\nawait resourceDetails.editValue('Account Title', 'Saving');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Account Title', 'Saving');",
              "err": {},
              "uuid": "90d71e9e-253f-41b1-93bf-18fd500acecf",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource IBAN Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource IBAN Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 25495,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('IBAN Number', '3344');\nawait resourceDetails.editValue('IBAN Number', '4455');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('IBAN Number', '4455');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[role=\"alert\"])\nWait timed out after 20095ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[role=\"alert\"])\nWait timed out after 20095ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "e012869b-baaf-46df-a88f-ae032071abc4",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Bank Address is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Bank Address is Shownig and is editable.",
              "timedOut": false,
              "duration": 8674,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Bank Address', 'qwerty');\nawait resourceDetails.editValue('Bank Address', 'street14');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Bank Address', 'street14');",
              "err": {},
              "uuid": "2aadde41-9fcb-4e55-b784-092415d5de81",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Certification Level is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Certification Level is Shownig and is editable.",
              "timedOut": false,
              "duration": 9601,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Certification Level', 'Graduation');\nawait resourceDetails.editValue('Certification Level', 'Master');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Certification Level', 'Master');",
              "err": {},
              "uuid": "8e6906b6-6b6a-455e-9fd6-ab23c3cf3ec6",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Field of Study is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Field of Study is Shownig and is editable.",
              "timedOut": false,
              "duration": 8984,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Field of Study', 'SE');\nawait resourceDetails.editValue('Field of Study', 'CS');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Field of Study', 'CS');",
              "err": {},
              "uuid": "19f6c4fa-7921-4d0b-8af1-ffa4ca9a4fa9",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource School/University is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource School/University is Shownig and is editable.",
              "timedOut": false,
              "duration": 9149,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('School/University', 'Mit');\nawait resourceDetails.editValue('School/University', 'Uol');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('School/University', 'Uol');",
              "err": {},
              "uuid": "05720067-ffe4-4b7a-a7b0-a4b2b32bb456",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Score/Percentage is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Score/Percentage is Shownig and is editable.",
              "timedOut": false,
              "duration": 8771,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Score/Percentage', '70');\nawait resourceDetails.editValue('Score/Percentage', '80');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Score/Percentage', '80');",
              "err": {},
              "uuid": "3370bb67-ceaa-4a27-ac0e-1fd669052081",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Passing Year is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Passing Year is Shownig and is editable.",
              "timedOut": false,
              "duration": 9111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Passing Year', '2020');\nawait resourceDetails.editValue('Passing Year', '2022');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Passing Year', '2022');",
              "err": {},
              "uuid": "0582c6a2-99b7-4c7d-887c-4816b2127063",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 8494,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Employee Name', 'Stevee');\nawait resourceDetails.editValue('Employee Name', 'Steve');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Employee Name', 'Steve');",
              "err": {},
              "uuid": "be1370b0-fcb8-40dc-94b7-a21f8cbe01c5",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Work Phone Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Work Phone Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 8984,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Work Phone Number', '123456');\nawait resourceDetails.editValue('Work Phone Number', '1234');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Work Phone Number', '1234');",
              "err": {},
              "uuid": "a2790cf8-cea6-4ade-864f-47bace811421",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Designation is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Designation is Shownig and is editable.",
              "timedOut": false,
              "duration": 9812,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Designation', 'Automation Associate SQA Automation');\nawait resourceDetails.editValue('Designation', 'Associate Software Engineer');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Designation', 'Automation Software Engineer');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at ResourceDetails.checkValue (test/support/pages/resources/resourceDetails.js:87:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/3-Resources/spec-4-resourse-details.js:437:5)",
                "diff": "- Automation Associate Software Engineer\n+ Automation Software Engineer\n"
              },
              "uuid": "ad3ff0a9-d080-47b7-97ad-a17d9182dcaa",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Work Shift is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Work Shift is Shownig and is editable.",
              "timedOut": false,
              "duration": 9458,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Work Shift', 'Morning (9am-6pm)');\nawait resourceDetails.editValue('Work Shift', 'Evening (3pm-12pm)');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Work Shift', 'Evening (3pm-12pm)');",
              "err": {},
              "uuid": "2e13ac63-b1ca-483d-a73f-c6463df623ee",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Work Location is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Work Location is Shownig and is editable.",
              "timedOut": false,
              "duration": 9165,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Work Location', 'Remote');\nawait resourceDetails.editValue('Work Location', 'Lahore');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Work Location', 'Lahore');",
              "err": {},
              "uuid": "ce40d13c-7438-4140-ba81-534f531e3294",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Attendance Mode is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Attendance Mode is Shownig and is editable.",
              "timedOut": false,
              "duration": 9314,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Attendance Mode', 'Invodesk');\nawait resourceDetails.editValue('Attendance Mode', 'Tahometer');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Attendance Mode', 'Tahometer');",
              "err": {},
              "uuid": "3ed71a99-b6ea-499a-b994-80b22e9920b6",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Employee Id is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Employee Id is Shownig and is editable.",
              "timedOut": false,
              "duration": 4303,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Employee ID', 'IZ-2023-11-01');",
              "err": {},
              "uuid": "0792983a-8eb0-4951-8396-cceb765fb2f2",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Experience is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Experience is Shownig and is editable.",
              "timedOut": false,
              "duration": 4548,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Experience', '0');",
              "err": {},
              "uuid": "8067f53c-013d-4648-ac58-de1433135450",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availability is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availability is Shownig and is editable.",
              "timedOut": false,
              "duration": 4084,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Availability', 'Fully Available');",
              "err": {},
              "uuid": "989755ee-0a2d-494e-aae6-28d2782780e2",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Current Salary (PKR) is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Current Salary (PKR) is Shownig and is editable.",
              "timedOut": false,
              "duration": 9567,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Current Salary (PKR)', '50000');\nawait resourceDetails.editValue('Current Salary (PKR)', '60000');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Current Salary (PKR)', '60000');",
              "err": {},
              "uuid": "acf290b4-3a54-49de-8baf-8f9053ed3a50",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Last Salary is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Last Salary is Shownig and is editable.",
              "timedOut": false,
              "duration": 9247,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Last Salary', '30000');\nawait resourceDetails.editValue('Last Salary', '35000');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Last Salary', '35000');",
              "err": {},
              "uuid": "30493774-b897-4d47-83b0-75d7ea12abb8",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Last Increment Date is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Last Increment Date is Shownig and is editable.",
              "timedOut": false,
              "duration": 9223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Last Increment Date', 'Jan 01, 2024');\nawait resourceDetails.editValue('Last Increment Date', '01-10-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Last Increment Date', 'Jan 10, 2024');",
              "err": {},
              "uuid": "6ecb75b3-90e8-4726-a413-24d89a7b5fe8",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Department is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Department is Shownig and is editable.",
              "timedOut": false,
              "duration": 9429,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Department', 'HR');\nawait resourceDetails.editValue('Department', 'Engineering');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Department', 'Engineering');",
              "err": {},
              "uuid": "0239ca4f-db47-4b67-ada6-f1fcf43cdcff",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Sub Department is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Sub Department is Shownig and is editable.",
              "timedOut": false,
              "duration": 9354,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Sub Department', 'N/A');\nawait resourceDetails.editValue('Sub Department', 'DevOps Support');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Sub Department', 'DevOps Support');",
              "err": {},
              "uuid": "5e09e328-5ec9-49a0-9147-0db386ca5aea",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Contract Type is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Contract Type is Shownig and is editable.",
              "timedOut": false,
              "duration": 4292,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Contract Type', 'Full Time');",
              "err": {},
              "uuid": "f681316a-659e-4222-9893-cfc762a8aacd",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Job Status is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Job Status is Shownig and is editable.",
              "timedOut": false,
              "duration": 9739,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Job Status', 'Probation');\nawait resourceDetails.editValue('Job Status', 'Permanent');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Job Status', 'Permanent');",
              "err": {},
              "uuid": "bda4fc74-8687-4724-9d62-716d78a04e1a",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Date of Joining is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Date of Joining is Shownig and is editable.",
              "timedOut": false,
              "duration": 9193,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Date of Joining', 'Nov 01, 2023');\nawait resourceDetails.editValue('Date of Joining', '11-10-2023');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Date of Joining', 'Nov 10, 2023');",
              "err": {},
              "uuid": "875d4639-6602-4791-a2a4-c5152d2116dd",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Expected End of Probation Date is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Expected End of Probation Date is Shownig and is editable.",
              "timedOut": false,
              "duration": 7062,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.editValue('Expected End of Probation Date', '01-10-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Expected End of Probation Date', 'Jan 10, 2024');",
              "err": {},
              "uuid": "97fac234-2972-481a-8082-f1168544b2b5",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Probation Completed is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Probation Completed is Shownig and is editable.",
              "timedOut": false,
              "duration": 7108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.editValue('Probation Completed', '01-10-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Probation Completed', 'Jan 10, 2024');",
              "err": {},
              "uuid": "d58672f5-9e28-4b14-adc3-e17695456033",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Permanent Date is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Permanent Date is Shownig and is editable.",
              "timedOut": false,
              "duration": 7189,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.editValue('Permanent Date', '01-11-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Permanent Date', 'Jan 11, 2024');",
              "err": {},
              "uuid": "4d16f2dc-ebc1-4711-9167-ae1626dca644",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Total Working Hours is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Working Hours is Shownig and is editable.",
              "timedOut": false,
              "duration": 8583,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Working Hours', '4');\nawait resourceDetails.editValue('Total Working Hours', '6');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Total Working Hours', '6');",
              "err": {},
              "uuid": "d1468a62-45d0-422c-a7b4-89801492928e",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Earned Casual Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Earned Casual Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 4356,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Earned Casual Leaves', '13');\nawait resourceDetails.editValue('Earned Casual Leaves', '12');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Leave quota updated successfully');\nawait resourceDetails.checkValue('Earned Casual Leaves', '12');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at ResourceDetails.checkValue (test/support/pages/resources/resourceDetails.js:87:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/3-Resources/spec-4-resourse-details.js:625:5)",
                "diff": "- 11\n+ 13\n"
              },
              "uuid": "ca947d62-6eba-4a97-9942-464f0171afef",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Earned Sick Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Earned Sick Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 9112,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Earned Sick Leaves', '5');\nawait resourceDetails.editValue('Earned Sick Leaves', '4');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Leave quota updated successfully');\nawait resourceDetails.checkValue('Earned Sick Leaves', '4');",
              "err": {},
              "uuid": "ff658e15-54a6-4d3a-b550-0272acf79053",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Total Leaves Earned (Casual/Sick) is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Leaves Earned (Casual/Sick) is Shownig and is editable.",
              "timedOut": false,
              "duration": 4284,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Leaves Earned (Casual/Sick)', '16');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at ResourceDetails.checkValue (test/support/pages/resources/resourceDetails.js:87:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/3-Resources/spec-4-resourse-details.js:647:5)",
                "diff": "- 15\n+ 16\n"
              },
              "uuid": "0a50e315-5db0-40a4-9a46-82d1c014444f",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availed Casual Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Casual Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 4664,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Availed Casual Leaves', '0');",
              "err": {},
              "uuid": "905bb8d4-b4db-491c-af6d-892f30e83793",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availed Sick Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Sick Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 4504,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Availed Sick Leaves', '0');",
              "err": {},
              "uuid": "92895e63-c1fa-40dc-b23c-fb6c5c003ed5",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Total Leaves Availed (Casual/Sick) is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Leaves Availed (Casual/Sick) is Shownig and is editable.",
              "timedOut": false,
              "duration": 4296,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Leaves Availed (Casual/Sick)', '0');",
              "err": {},
              "uuid": "cf246217-139d-470f-a871-584afe773b76",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Total Remaining Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Remaining Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 4322,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Remaining Leaves', '16');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at ResourceDetails.checkValue (test/support/pages/resources/resourceDetails.js:87:14)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/3-Resources/spec-4-resourse-details.js:675:5)",
                "diff": "- 15\n+ 16\n"
              },
              "uuid": "3d9395bf-ad2f-4e51-864c-7ba9e9496510",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availed Paid Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Paid Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 3339,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkOtherLeaves('Availed Paid Leaves', '0');",
              "err": {},
              "uuid": "5683ab94-3cc2-46e4-b3d5-c539858b48f2",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availed Unpaid Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Unpaid Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 3372,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkOtherLeaves('Availed Unpaid Leaves', '0');",
              "err": {},
              "uuid": "f055c965-6eaa-4d73-8071-a089fdce3217",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Carry Forward Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Carry Forward Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 3444,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkOtherLeaves('Carry Forward Leaves', '0');",
              "err": {},
              "uuid": "d84d124e-a6c6-4046-805e-c926ef170bd0",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Project is Showing.",
              "fullTitle": "Resource Details should check if Resource Project is Showing.",
              "timedOut": false,
              "duration": 2261,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nconst projectData = await resourceDetails.checkProjectDetails();\nassert.ok(projectData.includes('automation'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/3-Resources/spec-4-resourse-details.js:706:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "1c2c2da8-63fc-45cf-9d6d-ad8e367a08a0",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to delete project from details page.",
              "fullTitle": "Resource Details should able to delete project from details page.",
              "timedOut": false,
              "duration": 12286,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickDelProjectBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource removed from project successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, [aria-label=\"delete\"])\nWait timed out after 10199ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, [aria-label=\"delete\"])\nWait timed out after 10199ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "7af64cc0-690f-4a59-b12b-0c0039501ec5",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Hardware records are showing correctly.",
              "fullTitle": "Resource Details should check if Hardware records are showing correctly.",
              "timedOut": false,
              "duration": 2554,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [`UPDATE employee_assets SET \"employeeId\" = ${newId} WHERE \"employeeId\" = 9429;`];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nlet records = await resourceDetails.getAssetRecords();\nassert.ok(records.includes('Steve'), `Expected text not found.`);",
              "err": {},
              "uuid": "10ad5ad6-6d1a-4803-af1a-e4a47e0277d5",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add skills from Resource details page.",
              "fullTitle": "Resource Details should add skills from Resource details page.",
              "timedOut": false,
              "duration": 6176,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickEditSkillBtn()\nawait resourceDetails.searchSkill('automation')\nawait resourceDetails.clickAddIcon()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Skills updated successfully.');\nawait resourceDetails.clickDoneBtn()",
              "err": {},
              "uuid": "a56de8b5-827a-4aa1-8c78-c42c84618fc8",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if skills records are showing correctly.",
              "fullTitle": "Resource Details should check if skills records are showing correctly.",
              "timedOut": false,
              "duration": 2447,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nlet records = await resourceDetails.getSkillRecords();\nassert.ok(records.includes('Automation'), `Expected text not found.`);",
              "err": {},
              "uuid": "acd59cf7-21e2-472a-b6ac-ca2c425be9a2",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to remove skill by editing.",
              "fullTitle": "Resource Details should able to remove skill by editing.",
              "timedOut": false,
              "duration": 5795,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickEditSkillBtn()\nawait resourceDetails.clickRemoveSkillBtn()\nawait resourceDetails.clickYesBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Skill is deleted successfully');\nawait resourceDetails.clickDoneBtn()\nlet records = await resourceDetails.getSkillRecordsEmpty();\nconsole.log(records);\nassert.equal(records, 'No Data');",
              "err": {},
              "uuid": "0617a8f8-a38d-458e-a962-f2a2de98d7a6",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if attendence is showing correctly.",
              "fullTitle": "Resource Details should check if attendence is showing correctly.",
              "timedOut": false,
              "duration": 6288,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [`UPDATE employee_attendances SET \"employeeId\" = ${newId} WHERE \"employeeId\" = 9429;`];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickAttendanceTab();\nconst url1 = await utilFun.getUrl();\nassert.equal(url1, baseUrl + attendanceTabUrl);\nawait resourceDetails.selectAttendanceYear(2024);\nawait resourceDetails.selectAttendanceMonth('Jan');\nawait utilFun.wait(2000)\nlet time = await resourceDetails.getTimeByDate('2024-01-22');\nassert.equal(time, '08:00');\ntime = await resourceDetails.getTimeByDate('2024-01-23');\nassert.equal(time, '08:00');\ntime = await resourceDetails.getTimeByDate('2024-01-24');\nassert.equal(time, '08:20');\ntime = await resourceDetails.getTimeByDate('2024-01-25');\nassert.equal(time, '07:30');\ntime = await resourceDetails.getTimeByDate('2024-01-26');\nassert.equal(time, '06:40');\nlet weekTime = await resourceDetails.getWeekTime(4);\nassert.equal(weekTime, '38:30');",
              "err": {},
              "uuid": "98d7f45c-c34d-417b-8d93-546523538793",
              "parentUUID": "26f60798-dee1-4602-a127-ada3881663c3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e922890d-6311-44cb-9db7-dbec154466fe",
            "4393727e-1b58-46fc-a5a4-777e153bc312",
            "9af75892-6c3e-40b3-b5e7-dbabcfee4970",
            "b2865ec2-df76-444b-b32f-394e54b949cd",
            "876b36ff-3535-45c2-9c09-218397e5ce90",
            "a13bbc6d-391e-4ca9-89be-1c10c2ad6d63",
            "52af5e91-f8af-4e5b-ba4a-41ae61e38a3c",
            "5f715205-fe15-4dd1-ad64-633b3fe1d7ff",
            "4cc7574a-3039-4978-bf0b-454e3ca1f278",
            "e18d572e-4f91-4c76-8676-917d0ef9ee08",
            "4ac8d139-2c28-4f43-a0f1-ea3e22d2cbec",
            "1392bdd1-be3b-4654-b2a0-b59a4313a4d3",
            "e613386d-033b-42b7-8078-6c2f74310a39",
            "5e9009d8-5aaa-4a4a-9e35-336485e95923",
            "9c178a9d-89bb-409d-92c6-828300efc8cc",
            "1998bb6b-ea22-4f0b-aca0-b9f7c088b689",
            "90d71e9e-253f-41b1-93bf-18fd500acecf",
            "2aadde41-9fcb-4e55-b784-092415d5de81",
            "8e6906b6-6b6a-455e-9fd6-ab23c3cf3ec6",
            "19f6c4fa-7921-4d0b-8af1-ffa4ca9a4fa9",
            "05720067-ffe4-4b7a-a7b0-a4b2b32bb456",
            "3370bb67-ceaa-4a27-ac0e-1fd669052081",
            "0582c6a2-99b7-4c7d-887c-4816b2127063",
            "be1370b0-fcb8-40dc-94b7-a21f8cbe01c5",
            "a2790cf8-cea6-4ade-864f-47bace811421",
            "2e13ac63-b1ca-483d-a73f-c6463df623ee",
            "ce40d13c-7438-4140-ba81-534f531e3294",
            "3ed71a99-b6ea-499a-b994-80b22e9920b6",
            "0792983a-8eb0-4951-8396-cceb765fb2f2",
            "8067f53c-013d-4648-ac58-de1433135450",
            "989755ee-0a2d-494e-aae6-28d2782780e2",
            "acf290b4-3a54-49de-8baf-8f9053ed3a50",
            "30493774-b897-4d47-83b0-75d7ea12abb8",
            "6ecb75b3-90e8-4726-a413-24d89a7b5fe8",
            "0239ca4f-db47-4b67-ada6-f1fcf43cdcff",
            "5e09e328-5ec9-49a0-9147-0db386ca5aea",
            "f681316a-659e-4222-9893-cfc762a8aacd",
            "bda4fc74-8687-4724-9d62-716d78a04e1a",
            "875d4639-6602-4791-a2a4-c5152d2116dd",
            "97fac234-2972-481a-8082-f1168544b2b5",
            "d58672f5-9e28-4b14-adc3-e17695456033",
            "4d16f2dc-ebc1-4711-9167-ae1626dca644",
            "d1468a62-45d0-422c-a7b4-89801492928e",
            "ff658e15-54a6-4d3a-b550-0272acf79053",
            "905bb8d4-b4db-491c-af6d-892f30e83793",
            "92895e63-c1fa-40dc-b23c-fb6c5c003ed5",
            "cf246217-139d-470f-a871-584afe773b76",
            "5683ab94-3cc2-46e4-b3d5-c539858b48f2",
            "f055c965-6eaa-4d73-8071-a089fdce3217",
            "d84d124e-a6c6-4046-805e-c926ef170bd0",
            "10ad5ad6-6d1a-4803-af1a-e4a47e0277d5",
            "a56de8b5-827a-4aa1-8c78-c42c84618fc8",
            "acd59cf7-21e2-472a-b6ac-ca2c425be9a2",
            "0617a8f8-a38d-458e-a962-f2a2de98d7a6",
            "98d7f45c-c34d-417b-8d93-546523538793"
          ],
          "failures": [
            "419a3d27-4b73-432c-9330-05d5492a65c6",
            "fe996b55-cc2d-480d-9645-51ed52c6e021",
            "e012869b-baaf-46df-a88f-ae032071abc4",
            "ad3ff0a9-d080-47b7-97ad-a17d9182dcaa",
            "ca947d62-6eba-4a97-9942-464f0171afef",
            "0a50e315-5db0-40a4-9a46-82d1c014444f",
            "3d9395bf-ad2f-4e51-864c-7ba9e9496510",
            "1c2c2da8-63fc-45cf-9d6d-ad8e367a08a0",
            "7af64cc0-690f-4a59-b12b-0c0039501ec5"
          ],
          "pending": [],
          "skipped": [],
          "duration": 507236,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "31bb3816-2eea-46b9-a960-b3c341022bef",
          "title": "Portfolio Module",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/4-Portfolio/spec-1-portfolio.js",
          "file": "/test/e2e/4-Portfolio/spec-1-portfolio.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"should check if Portfolio is showing\"",
              "fullTitle": "Portfolio Module \"before all\" hook for \"should check if Portfolio is showing\"",
              "timedOut": false,
              "duration": 14142,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet portfolioId = await utilFun.getFromDatabase(`SELECT id FROM project_portfolios WHERE \"name\" = '${portfolioName}';`)\nif(portfolioId.rowCount !== 0){\nconst query = [\n  `DELETE FROM project_portfolio_attachments WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n  `DELETE FROM project_portfolio_skills WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n  `DELETE FROM project_portfolio_employees WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n  `DELETE FROM project_portfolios WHERE id = ${portfolioId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n  }",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, li)\nWait timed out after 10066ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, li)\nWait timed out after 10066ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "57ee1be8-2e37-4c83-a79b-ef616060c70f",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook",
              "fullTitle": "Portfolio Module \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/portfolio');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "7553dca6-5512-477d-ad45-103f50d12749",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if Portfolio is showing",
              "fullTitle": "Portfolio Module should check if Portfolio is showing",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/portfolio');",
              "err": {},
              "uuid": "1630564d-cba3-4b8f-96ac-108ed7327686",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Add Portfolio",
              "fullTitle": "Portfolio Module should able to Add Portfolio",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickAddPorfolioBtn()\nawait portfolio.typeProjectName(portfolioName)\nawait portfolio.pasteLiveLink('http://google.com')\nawait portfolio.selectProjectStatus('Active')\nawait portfolio.selectPOC('Muhammad Bilal Rafaqat')\nawait portfolio.selectIndustry('Gaming')\nawait portfolio.selectProjectNature('Web App')\nawait portfolio.typeProjectDescription('testing')\nawait portfolio.clickYesCheckbox()\nawait portfolio.clickNotNowCheckbox()\nawait portfolio.clickFormNxtBtn()\nawait portfolio.clickFormNewNxtBtn()\nawait portfolio.selectEngagementModel('Fixed Term')\nawait portfolio.selectClientRegion('Germany')\nawait portfolio.selectDivision('InvoTeams')\nawait portfolio.selectTechStack('Node Js')\nawait portfolio.typeTag('testing')\nawait portfolio.selectResource('Hello')\nawait portfolio.selectRole('Lead Developer')\nawait portfolio.clickForm1NxtBtn()\nawait portfolio.selectDemoLinkUpdate('Web App')\nawait portfolio.typeDemoLinkLink('link')\nawait portfolio.typeDemoLinkDetails('testing')\nawait portfolio.selectAchievementsUpdate('Awards')\nawait portfolio.typeAchievementsLink('Link')\nawait portfolio.typeAchievementsDetails('testing')\nawait portfolio.typeGitUpdate('test')\nawait portfolio.typeGitLink('link')\nawait portfolio.typeGitDetails('testing')\nawait portfolio.clickForm2NxtBtn()\nawait portfolio.typeVideoTitle('Video Title')\nawait portfolio.uploadVideoFile()\nawait portfolio.typeDocTitle('Doc Title')\nawait portfolio.uploadDocFile()\nawait portfolio.typeProblemsOrChallenges('testing')\nawait portfolio.typeSolutions('testing')\nawait portfolio.clickForm3SubmitBtn()\nconst alertText = await portfolio.checkAlert();\nutilFun.assertEql(alertText, 'Portfolio has been saved successfully');",
              "err": {},
              "uuid": "c7b20ebb-f2a5-4f58-8cad-a2ba90524b1a",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to check if Portfolio is Added or Not",
              "fullTitle": "Portfolio Module should able to check if Portfolio is Added or Not",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.selectPortfolioName(portfolioName)\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {},
              "uuid": "14be1c0c-64c0-41f8-be1e-734febb8b7f9",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Update Portfolio",
              "fullTitle": "Portfolio Module should able to Update Portfolio",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.selectPortfolioName(portfolioName)\nawait portfolio.clickEditButton()\nawait portfolio.pasteLiveLink('http://google2.com')\nawait portfolio.selectProjectStatus('Closing')\nawait portfolio.selectPOC('Muhammad Bilal Rafaqat')\nawait portfolio.selectIndustry('Education')\nawait portfolio.selectProjectNature('IOS App')\nawait portfolio.typeProjectDescription('testing updated')\nawait portfolio.clickYesCheckbox()\nawait portfolio.clickNotNowCheckbox()\nawait portfolio.clickFormNxtBtn()\nawait portfolio.clickFormNewNxtBtn()\nawait portfolio.selectEngagementModel('Fixed Term')\nawait portfolio.selectClientRegion('Pakistan')\nawait portfolio.selectDivision('Invogame')\nawait portfolio.selectTechStack('Frontend')\nawait portfolio.typeTag('Updated Tag')\nawait portfolio.selectResource('Hello')\nawait portfolio.selectRole('Lead Developer')\nawait portfolio.clickForm1NxtBtn()\nawait portfolio.selectDemoLinkUpdate('Desktop App')\nawait portfolio.typeDemoLinkLink('updated')\nawait portfolio.typeDemoLinkDetails('update')\nawait portfolio.selectAchievementsUpdate('Shoutouts')\nawait portfolio.typeAchievementsLink('Link updated')\nawait portfolio.typeAchievementsDetails('testing updated')\nawait portfolio.typeGitUpdate('test updated')\nawait portfolio.typeGitLink('link updated')\nawait portfolio.typeGitDetails('testing updated')\nawait portfolio.clickForm2NxtBtn()\nawait portfolio.typeVideoTitle('Video Title Updated')\nawait portfolio.uploadVideoFile()\nawait portfolio.typeDocTitle('Doc Title updated')\nawait portfolio.uploadDocFile()\nawait portfolio.typeProblemsOrChallenges('testing updated')\nawait portfolio.typeSolutions('testing updated')\nawait portfolio.clickForm3SubmitBtn()\nconst alertText = await portfolio.checkAlert();\nutilFun.assertEql(alertText, 'Portfolio has been updated successfully');",
              "err": {},
              "uuid": "7e3d520c-8ea8-4b19-a766-30d6ccf053fc",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to fiter Portfolio by Name",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Name",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.selectPortfolioName(portfolioName)\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {},
              "uuid": "ada84c12-e889-448a-a4ee-9e0a438f37ab",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to fiter Portfolio by POC",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by POC",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByPOC('Muhammad Bilal Rafaqat')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "0b36edc7-7818-466a-b287-d572ab4474f7",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to fiter Portfolio by Industry",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Industry",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByIndustry('Gaming')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Gaming'), `Expected text not found.`);",
              "err": {},
              "uuid": "b6420dd0-118a-41a1-bb89-a4959c326ed7",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to fiter Portfolio by Tech Stack",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Tech Stack",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByTechstack('Node Js')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Node Js'), `Expected text not found.`);",
              "err": {},
              "uuid": "54e53417-03b8-4479-b700-f79b895e038c",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to fiter Portfolio by Resource",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Resource",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByResources('Hello')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {},
              "uuid": "12b479ac-753a-4b0a-9020-b4eaa47b3a66",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to fiter Portfolio by Tags",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Tags",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByTags('testing')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('testing'), `Expected text not found.`);",
              "err": {},
              "uuid": "ff74d986-e46a-4971-8c8a-2b85bc7e3ce9",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to fiter Portfolio by Project Nature",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Project Nature",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByProjectNature('Web App')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Web App'), `Expected text not found.`);",
              "err": {},
              "uuid": "36bc9747-14f3-4045-8326-8636c78a3f7e",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to fiter Portfolio by Region",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Region",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByRegion('Pakistan')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Pakistan'), `Expected text not found.`);",
              "err": {},
              "uuid": "6aeb7c76-4673-41ed-9593-12577162fd52",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to fiter Portfolio by Date",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Date",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByDate('Last 2 Weeks')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {},
              "uuid": "100cd3bf-0d4f-48c1-a27f-97ec4502cc24",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Division Colum",
              "fullTitle": "Portfolio Module should able to Hide Division Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Division')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 14, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Division'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "0968e572-9c37-4c9d-9cd1-729e7a0e48c9",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Project Nature Colum",
              "fullTitle": "Portfolio Module should able to Hide Project Nature Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Project Nature')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 13, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Project Nature'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "f11890f1-edba-4500-9fb1-fa6b51d5d809",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Tech Stack Colum",
              "fullTitle": "Portfolio Module should able to Hide Tech Stack Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Tech Stack')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 12, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Tech Stack'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "0b25b7ec-3fc4-46cf-b314-a9e61dd55fdf",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide POC Colum",
              "fullTitle": "Portfolio Module should able to Hide POC Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('POC')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 11, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('POC'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "f710e38a-447c-4c48-abe8-1bda26a8cef3",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Resources Colum",
              "fullTitle": "Portfolio Module should able to Hide Resources Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Resources')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 10, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Resources'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "f567a5b6-eeee-4066-9a9b-364434287989",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Tags Colum",
              "fullTitle": "Portfolio Module should able to Hide Tags Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Tags')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 9, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Tags'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "e01f18e3-9f87-4395-8d13-137ad224f8c5",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Industry Colum",
              "fullTitle": "Portfolio Module should able to Hide Industry Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Industry')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 8, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Industry'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "96b5d8be-2f6b-4fe5-95cf-e067fadde885",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Region Colum",
              "fullTitle": "Portfolio Module should able to Hide Region Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Region')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 7, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Region'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "793c25b7-cde2-42d2-ae49-7126ae0d5f40",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Attachments Colum",
              "fullTitle": "Portfolio Module should able to Hide Attachments Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Attachments')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 6, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Attachments'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "5da19763-3372-45bc-bd3c-cc9c44aec2da",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Achievements Colum",
              "fullTitle": "Portfolio Module should able to Hide Achievements Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Achievements')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 5, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Achievements'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "c9b945d3-b934-4a80-984c-6bf886de937c",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should able to Hide Git Access Colum",
              "fullTitle": "Portfolio Module should able to Hide Git Access Colum",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Git Access')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 4, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Git Access'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "efcc932a-93b7-482f-aa31-f3a69ff12108",
              "parentUUID": "31bb3816-2eea-46b9-a960-b3c341022bef",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "1630564d-cba3-4b8f-96ac-108ed7327686",
            "c7b20ebb-f2a5-4f58-8cad-a2ba90524b1a",
            "14be1c0c-64c0-41f8-be1e-734febb8b7f9",
            "7e3d520c-8ea8-4b19-a766-30d6ccf053fc",
            "ada84c12-e889-448a-a4ee-9e0a438f37ab",
            "0b36edc7-7818-466a-b287-d572ab4474f7",
            "b6420dd0-118a-41a1-bb89-a4959c326ed7",
            "54e53417-03b8-4479-b700-f79b895e038c",
            "12b479ac-753a-4b0a-9020-b4eaa47b3a66",
            "ff74d986-e46a-4971-8c8a-2b85bc7e3ce9",
            "36bc9747-14f3-4045-8326-8636c78a3f7e",
            "6aeb7c76-4673-41ed-9593-12577162fd52",
            "100cd3bf-0d4f-48c1-a27f-97ec4502cc24",
            "0968e572-9c37-4c9d-9cd1-729e7a0e48c9",
            "f11890f1-edba-4500-9fb1-fa6b51d5d809",
            "0b25b7ec-3fc4-46cf-b314-a9e61dd55fdf",
            "f710e38a-447c-4c48-abe8-1bda26a8cef3",
            "f567a5b6-eeee-4066-9a9b-364434287989",
            "e01f18e3-9f87-4395-8d13-137ad224f8c5",
            "96b5d8be-2f6b-4fe5-95cf-e067fadde885",
            "793c25b7-cde2-42d2-ae49-7126ae0d5f40",
            "5da19763-3372-45bc-bd3c-cc9c44aec2da",
            "c9b945d3-b934-4a80-984c-6bf886de937c",
            "efcc932a-93b7-482f-aa31-f3a69ff12108"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
          "title": "Monthly Claims -> Child Claims",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/5-Monthlyclaim/myclaims-child.js",
          "file": "/test/e2e/5-Monthlyclaim/myclaims-child.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook for \"should be able to Upload Photo and click Close Button\"",
              "fullTitle": "Monthly Claims -> Child Claims \"before all\" hook for \"should be able to Upload Photo and click Close Button\"",
              "timedOut": false,
              "duration": 12176,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [\n    `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9429;`,\n    `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9474;`,\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claim_deadlines;'\n  ];\n  await utilFun.udpateDatabase(query);\n  await utilFun.loginAccount()\n//   await utilFun.login(email, password)",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, li)\nWait timed out after 10205ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, li)\nWait timed out after 10205ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "221a89b9-a203-4468-8cc7-fd7ac7b1e9a2",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Upload Photo and click Close Button",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "f34398bb-fab3-4220-83f4-c45d06adb893",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Upload Photo and Delete Photos ",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Upload Photo and Delete Photos ",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(1);",
              "err": {},
              "uuid": "301458dd-80db-4fcc-90ac-bc531bdf5651",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Add New Row and Delete Row ",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Add New Row and Delete Row ",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(1);",
              "err": {},
              "uuid": "78b3c2b2-0217-4296-9625-31b4867cb62d",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Check Cancel Button",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Check Cancel Button",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "6d4c20ca-22a0-405e-8363-74dbc88f38aa",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "31d82437-af5c-411a-9b0a-5bd22dd06a9f",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Edit Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Edit Child Claim",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MyClaims_EditBtn();\nawait child_claims.MyClaims_AddClaim_Child_Name('ALI', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-06-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(1);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(2);\nawait utilFun.wait(3000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit();\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is updated successfully');",
              "err": {},
              "uuid": "a96c9dda-eea0-40e9-bbec-91e7f70a6d96",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able Show Attachment",
              "fullTitle": "Monthly Claims -> Child Claims should be able Show Attachment",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "7932e4ed-9f5d-495d-bbc6-e9091736db57",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able Review Icon",
              "fullTitle": "Monthly Claims -> Child Claims should be able Review Icon",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "cbc9168d-c2ce-4358-a8e7-379b5db1fffc",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Delete Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Delete Child Claim",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_DeleteBtn();\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "54cf10c6-5550-4537-87c9-9f4bf22e9c53",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "1200899d-2958-40f0-8ad7-183640512251",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be HR Role Show Attachment & Close Button",
              "fullTitle": "Monthly Claims -> Child Claims should be HR Role Show Attachment & Close Button",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(2000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "26cf693f-fa76-46e8-84de-ac182d782aaf",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Edit Amount in Show Attachment",
              "fullTitle": "Monthly Claims -> Child Claims should be Edit Amount in Show Attachment",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_ShowAttachment_EditAmount_Hover();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ShowAttachment_EditAmount();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ClaimsRequest_EditBtn_RecieptAmount('3500');\nawait claims.MyClaims_ClaimsRequest_EditBtn_Reason('Extra budget');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();",
              "err": {},
              "uuid": "7ccb7fd3-3f61-43a2-82fb-76c5ff518e9f",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Child Claims should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(4000);\nawait claims.MyClaims_FilterBtn();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\nawait claims.HRFilterSearchByClaimType('Personal Development Allowance');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Filter_HR_SearchByClaim_CrossIcon();\nawait claims.HRFilterSearchByClaimType('Fitness/Gym Allowance');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_HR_SearchByClaim_CrossIcon();\nawait claims.HRFilterSearchByClaimType('Child Education Support');\nawait utilFun.wait(4000);\n/// Start and End Date Filter\nawait claims.MyClaims_Filter_StartDate('2023-11-14');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2023-12-15')\nawait utilFun.wait(4000);\n/// Verify Results\nawait claims.Row_Assertion()\nawait claims.MyClaims_Filter_ClearBtn();",
              "err": {},
              "uuid": "19ba01f4-5852-4a0e-b154-88a4cb3c3289",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be HR Role Review Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be HR Role Review Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet query =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "4fbbb949-8e70-44e8-a0f1-9455b25e263e",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit One Child Claim for Approve Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim for Approve Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "819f63d1-506c-4322-a5b0-14b7434b479f",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Approve One Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Approve One Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Receipt status updated successfully!');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "d4c97e03-5b89-4252-8c89-28c1af48976a",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit One Child Claim for Reject Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim for Reject Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "d0c610a5-eff7-498e-80f4-00fbae48fd79",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Reject Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Reject Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait utilFun.wait(3000)\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Receipt status updated successfully!');\nawait utilFun.wait(3000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "5a274315-9cf6-4abd-89c2-043c2768f8ae",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be  Verify Reject Tab and check Show Attachment ",
              "fullTitle": "Monthly Claims -> Child Claims should be  Verify Reject Tab and check Show Attachment ",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "883c16fe-793b-495b-8d3d-d30a3da9ba12",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be  Verify Reject Tab and Check Review Icon  ",
              "fullTitle": "Monthly Claims -> Child Claims should be  Verify Reject Tab and Check Review Icon  ",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000);\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion();\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "4584bb9c-5ab5-4ee9-8416-80124e5610a3",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Child Claims should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "5401876f-ba35-4980-bc97-413e59d0ad12",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit Two Child Claim for Review Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Two Child Claim for Review Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "be663029-4307-42be-861b-aca8e7b6aa21",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be HR Role Show Attachment & Close Button",
              "fullTitle": "Monthly Claims -> Child Claims should be HR Role Show Attachment & Close Button",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.wait(10000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "08f5fd8b-1576-4ffd-ac97-5c7e342a5bcf",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Edit Amount in Show Attachment",
              "fullTitle": "Monthly Claims -> Child Claims should be Edit Amount in Show Attachment",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_ShowAttachment_EditAmount_Hover();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ShowAttachment_EditAmount();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ClaimsRequest_EditBtn_RecieptAmount('3500');\nawait claims.MyClaims_ClaimsRequest_EditBtn_Reason('Extra budget');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();",
              "err": {},
              "uuid": "6d494cad-3d95-444e-9a8f-2688f37005d6",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Review Flow for Two Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Review Flow for Two Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// const query = [\n//     `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n//     `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n//     `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n//     `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n// ];\n// await utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages1 = await claims.checkAlert();\nutilFun.assertEql(flashMessages1, 'Claim status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(1);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages2 = await claims.checkAlert();\nutilFun.assertEql(flashMessages2, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "f6fb3e80-3aee-4718-bb39-015bf4b8a25d",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit Two Child Claim for Approve Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Two Child Claim for Approve Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "f92477a7-5c78-4094-9242-bff364fb38fe",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Approve Two Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Approve Two Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "368da427-f2f9-4e57-8c5a-5c97fe7fd1ba",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit Two Child Claim for Reject Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Two Child Claim for Reject Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "820e0fa2-8f69-4d9c-9133-e1ad73c137eb",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Reject Two Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Reject Two Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(3000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim status updated successfully!');\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion();\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "f341b2eb-43d4-42ea-92a0-e6287d73c85d",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit Three Child Claim for Review Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Three Child Claim for Review Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Noman', 2);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 2);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('6000', 2);\nconst validationMessage3 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage3, 'Max amount limit is 5000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 2);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "b3ae9e27-327c-4c07-b539-7ecd473ed36d",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Review Flow for Three Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Review Flow for Three Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages1 = await claims.checkAlert();\nutilFun.assertEql(flashMessages1, 'Claim status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(1);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages2 = await claims.checkAlert();\nutilFun.assertEql(flashMessages2, 'Claim status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(2);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages3 = await claims.checkAlert();\nutilFun.assertEql(flashMessages3, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "8c356705-7701-4347-b152-d88f8b12a98c",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit Three Child Claim for Approve Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Three Child Claim for Approve Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Noman', 2);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 2);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('6000', 2);\nconst validationMessage3 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage3, 'Max amount limit is 5000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 2);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "f8fc9141-156e-4a66-a656-38a4710d95b5",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Approve Three Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Approve Three Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage3 = await claims.checkAlert();\nutilFun.assertEql(flashMessage3, 'Receipt status updated successfully!');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "e139261e-ec42-4e4f-aa72-e8d2d2a7501f",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit Three Child Claim for Reject Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Three Child Claim for Reject Flow",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Noman', 2);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 2);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('6000', 2);\nconst validationMessage3 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage3, 'Max amount limit is 5000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 2);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "bc4a18ac-350a-4ec4-8b91-9b1454dece0d",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Reject Three Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Reject Three Child Claim by HR",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage3 = await claims.checkAlert();\nutilFun.assertEql(flashMessage3, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim status updated successfully!');\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion();\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "c8c1dadc-5ff9-4f3b-8504-5525a040e6cb",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Child Claims should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Deadline_Date('2023-02-05 22:40:20');\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "162dc5f6-c46a-473e-b369-1f237ac6587f",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'You are not able to claim as the claim time is over.');",
              "err": {},
              "uuid": "ed9cca98-e5f7-452e-8fd2-05b44f721aaa",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Child Claims should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        'DELETE FROM employee_claim_deadlines;',\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Deadline_Date('2024-12-05 22:40:20');\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "9f34504d-b861-440a-a631-9e7940ae6a6a",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');\nlet querys =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n        'DELETE FROM employee_claim_deadlines;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "0b4b4be5-0cee-4ef6-b077-95053482c25b",
              "parentUUID": "0a0073e3-5ba4-451e-ad6f-27334ae2b8de",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "f34398bb-fab3-4220-83f4-c45d06adb893",
            "301458dd-80db-4fcc-90ac-bc531bdf5651",
            "78b3c2b2-0217-4296-9625-31b4867cb62d",
            "6d4c20ca-22a0-405e-8363-74dbc88f38aa",
            "31d82437-af5c-411a-9b0a-5bd22dd06a9f",
            "a96c9dda-eea0-40e9-bbec-91e7f70a6d96",
            "7932e4ed-9f5d-495d-bbc6-e9091736db57",
            "cbc9168d-c2ce-4358-a8e7-379b5db1fffc",
            "54cf10c6-5550-4537-87c9-9f4bf22e9c53",
            "1200899d-2958-40f0-8ad7-183640512251",
            "26cf693f-fa76-46e8-84de-ac182d782aaf",
            "7ccb7fd3-3f61-43a2-82fb-76c5ff518e9f",
            "19ba01f4-5852-4a0e-b154-88a4cb3c3289",
            "4fbbb949-8e70-44e8-a0f1-9455b25e263e",
            "819f63d1-506c-4322-a5b0-14b7434b479f",
            "d4c97e03-5b89-4252-8c89-28c1af48976a",
            "d0c610a5-eff7-498e-80f4-00fbae48fd79",
            "5a274315-9cf6-4abd-89c2-043c2768f8ae",
            "883c16fe-793b-495b-8d3d-d30a3da9ba12",
            "4584bb9c-5ab5-4ee9-8416-80124e5610a3",
            "5401876f-ba35-4980-bc97-413e59d0ad12",
            "be663029-4307-42be-861b-aca8e7b6aa21",
            "08f5fd8b-1576-4ffd-ac97-5c7e342a5bcf",
            "6d494cad-3d95-444e-9a8f-2688f37005d6",
            "f6fb3e80-3aee-4718-bb39-015bf4b8a25d",
            "f92477a7-5c78-4094-9242-bff364fb38fe",
            "368da427-f2f9-4e57-8c5a-5c97fe7fd1ba",
            "820e0fa2-8f69-4d9c-9133-e1ad73c137eb",
            "f341b2eb-43d4-42ea-92a0-e6287d73c85d",
            "b3ae9e27-327c-4c07-b539-7ecd473ed36d",
            "8c356705-7701-4347-b152-d88f8b12a98c",
            "f8fc9141-156e-4a66-a656-38a4710d95b5",
            "e139261e-ec42-4e4f-aa72-e8d2d2a7501f",
            "bc4a18ac-350a-4ec4-8b91-9b1454dece0d",
            "c8c1dadc-5ff9-4f3b-8504-5525a040e6cb",
            "162dc5f6-c46a-473e-b369-1f237ac6587f",
            "ed9cca98-e5f7-452e-8fd2-05b44f721aaa",
            "9f34504d-b861-440a-a631-9e7940ae6a6a",
            "0b4b4be5-0cee-4ef6-b077-95053482c25b"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "e41c2f0a-2669-4f9e-ac8b-dd501f59e2b4",
          "title": "Monthly Claims -> Gym Allowance",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/5-Monthlyclaim/myclaims-gym.js",
          "file": "/test/e2e/5-Monthlyclaim/myclaims-gym.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button in Gym Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be able to Upload Photo and click Close Button in Gym Allowance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "b57bbb4d-c50d-45f1-b0c3-8939b9a9cd83",
              "parentUUID": "e41c2f0a-2669-4f9e-ac8b-dd501f59e2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able multiple File Upload & Cancel Button in GYM Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be able multiple File Upload & Cancel Button in GYM Allowance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "d9f44ebd-900e-45ee-bafa-3ae7f97d6003",
              "parentUUID": "e41c2f0a-2669-4f9e-ac8b-dd501f59e2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Gym Allowance ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be add claim in Gym Allowance ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "7e9388fe-7321-456d-afc6-341d819e585f",
              "parentUUID": "e41c2f0a-2669-4f9e-ac8b-dd501f59e2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Delete Claim in Gym Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Delete Claim in Gym Allowance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "18ae1b8e-8501-4096-928d-60bf5758d354",
              "parentUUID": "e41c2f0a-2669-4f9e-ac8b-dd501f59e2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit Gym Allowance ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Submit Gym Allowance ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "b8e65be4-7195-4a06-8fbd-0ccb1452004d",
              "parentUUID": "e41c2f0a-2669-4f9e-ac8b-dd501f59e2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "6b7037f5-f599-46bf-9893-57878146789e",
              "parentUUID": "e41c2f0a-2669-4f9e-ac8b-dd501f59e2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Edit Claim of Gym Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Edit Claim of Gym Allowance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "b8b42e6c-5c5d-4a01-9c54-d1682012f4b0",
              "parentUUID": "e41c2f0a-2669-4f9e-ac8b-dd501f59e2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reviews Chart",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Reviews Chart",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "666b1376-b42d-4a45-a314-a87468bf3dbd",
              "parentUUID": "e41c2f0a-2669-4f9e-ac8b-dd501f59e2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Add Reviews",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Add Reviews",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "d5a03d9f-4f6e-4494-81ab-cec04c321d21",
              "parentUUID": "e41c2f0a-2669-4f9e-ac8b-dd501f59e2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Approve Button",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Approve Button",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "0654a33c-fce5-43c3-80db-fef668776b48",
              "parentUUID": "e41c2f0a-2669-4f9e-ac8b-dd501f59e2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review See Button in Approve Tab",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Review See Button in Approve Tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "db0d7121-116c-4de1-b204-33cbb95c8264",
              "parentUUID": "e41c2f0a-2669-4f9e-ac8b-dd501f59e2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reject Button",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Reject Button",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "4a53c22c-e391-4023-a6f4-35462322a267",
              "parentUUID": "e41c2f0a-2669-4f9e-ac8b-dd501f59e2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reason See in Reject Tab ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Reason See in Reject Tab ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "6a56f364-85a5-46e0-90c0-77e5c5f081ac",
              "parentUUID": "e41c2f0a-2669-4f9e-ac8b-dd501f59e2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "b4625691-30cc-422f-bb60-b3a5c1f7fe9c",
              "parentUUID": "e41c2f0a-2669-4f9e-ac8b-dd501f59e2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "d2c7d48d-1225-4763-ac76-4605c34c58c4",
              "parentUUID": "e41c2f0a-2669-4f9e-ac8b-dd501f59e2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Gym Allowance to Verify Incorrect Date ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be add claim in Gym Allowance to Verify Incorrect Date ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "fcc313f7-6cba-4487-b352-e035102f5480",
              "parentUUID": "e41c2f0a-2669-4f9e-ac8b-dd501f59e2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Gym Allowance should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "60722077-ae2e-48f5-b44d-ce8aba858703",
              "parentUUID": "e41c2f0a-2669-4f9e-ac8b-dd501f59e2b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Gym Allowance to Verify Correct Date ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be add claim in Gym Allowance to Verify Correct Date ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "ad07e735-40b8-4176-ba0a-4032dcc275bf",
              "parentUUID": "e41c2f0a-2669-4f9e-ac8b-dd501f59e2b4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "b57bbb4d-c50d-45f1-b0c3-8939b9a9cd83",
            "d9f44ebd-900e-45ee-bafa-3ae7f97d6003",
            "7e9388fe-7321-456d-afc6-341d819e585f",
            "18ae1b8e-8501-4096-928d-60bf5758d354",
            "b8e65be4-7195-4a06-8fbd-0ccb1452004d",
            "6b7037f5-f599-46bf-9893-57878146789e",
            "b8b42e6c-5c5d-4a01-9c54-d1682012f4b0",
            "666b1376-b42d-4a45-a314-a87468bf3dbd",
            "d5a03d9f-4f6e-4494-81ab-cec04c321d21",
            "0654a33c-fce5-43c3-80db-fef668776b48",
            "db0d7121-116c-4de1-b204-33cbb95c8264",
            "4a53c22c-e391-4023-a6f4-35462322a267",
            "6a56f364-85a5-46e0-90c0-77e5c5f081ac",
            "b4625691-30cc-422f-bb60-b3a5c1f7fe9c",
            "d2c7d48d-1225-4763-ac76-4605c34c58c4",
            "fcc313f7-6cba-4487-b352-e035102f5480",
            "60722077-ae2e-48f5-b44d-ce8aba858703",
            "ad07e735-40b8-4176-ba0a-4032dcc275bf"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "8a3aaa0f-e98a-4fa2-9d19-6c63c6c14d58",
          "title": "Monthly Claims -> Marriage Bonus",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/5-Monthlyclaim/myclaims-marriage.js",
          "file": "/test/e2e/5-Monthlyclaim/myclaims-marriage.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Upload Photo and click Close Button",
              "timedOut": false,
              "duration": 10447,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "271bf1f6-25ca-4c40-adf3-36e7fa8b0817",
              "parentUUID": "8a3aaa0f-e98a-4fa2-9d19-6c63c6c14d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Upload Mulitiple Photos and click Close Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Upload Mulitiple Photos and click Close Button",
              "timedOut": false,
              "duration": 11254,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "0c37837f-c7bd-49d8-9722-537693c7f7b0",
              "parentUUID": "8a3aaa0f-e98a-4fa2-9d19-6c63c6c14d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus",
              "timedOut": false,
              "duration": 12357,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "3f53482c-2294-4cb0-a349-534c0c02fb48",
              "parentUUID": "8a3aaa0f-e98a-4fa2-9d19-6c63c6c14d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Edit Medical Claims",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Edit Medical Claims",
              "timedOut": false,
              "duration": 10861,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_EditBtn();\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0)\nawait utilFun.wait(1000);\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is updated successfully');",
              "err": {},
              "uuid": "39e6069b-2752-4739-b769-614abdcc32c4",
              "parentUUID": "8a3aaa0f-e98a-4fa2-9d19-6c63c6c14d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 27386,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Employee_FilterBtn();\nawait utilFun.wait(2000);\nawait claims.FilterSearchByClaimType('Marriage Bonus');\nawait claims.FilterSearchByStatus('Approved');\nawait claims.FilterSearchByStatus('Review');\nawait claims.FilterSearchByStatus('Pending');\nawait marriage_claims.Row_Assertion()\nawait utilFun.wait(4000);\nawait claims.MyClaims_Filter_ClearBtn()",
              "err": {},
              "uuid": "9dc7f400-4b7c-4f90-bf67-e0f5f77a793d",
              "parentUUID": "8a3aaa0f-e98a-4fa2-9d19-6c63c6c14d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Show Attachment",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Show Attachment",
              "timedOut": false,
              "duration": 6851,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "fcf6e0d3-f7f5-4939-b5df-a6b52e015c38",
              "parentUUID": "8a3aaa0f-e98a-4fa2-9d19-6c63c6c14d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Review Icon",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Review Icon",
              "timedOut": false,
              "duration": 6877,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon()\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "b170e28e-1a7d-438f-af96-1979127a217a",
              "parentUUID": "8a3aaa0f-e98a-4fa2-9d19-6c63c6c14d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Delete Marriage Claims",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Delete Marriage Claims",
              "timedOut": false,
              "duration": 7784,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_DeleteBtn();\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "7937610e-0d3d-4a63-a077-d351baacef82",
              "parentUUID": "8a3aaa0f-e98a-4fa2-9d19-6c63c6c14d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus",
              "timedOut": false,
              "duration": 12477,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "aad87481-6a6d-4659-8a33-eeb89a51fbf9",
              "parentUUID": "8a3aaa0f-e98a-4fa2-9d19-6c63c6c14d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 5984,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "9467d037-c2a1-4b40-a229-2d4eff711b69",
              "parentUUID": "8a3aaa0f-e98a-4fa2-9d19-6c63c6c14d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 27662,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(4000);\nawait claims.MyClaims_FilterBtn();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\n// await claims.MyClaims_Filter_HR_SearchByClaim_CrossIcon();\n// await utilFun.wait(2000);\nawait claims.HRFilterSearchByClaimType('Marriage Bonus');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Filter_StartDate('2023-11-08');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2025-11-11')\nawait utilFun.wait(4000);\n/// Verify Results\nawait claims.Row_Assertion()\nawait claims.MyClaims_Filter_ClearBtn();",
              "err": {},
              "uuid": "7e38b009-1bce-4b8e-a018-aa7709439c11",
              "parentUUID": "8a3aaa0f-e98a-4fa2-9d19-6c63c6c14d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Add Reviews",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role Add Reviews",
              "timedOut": false,
              "duration": 11357,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait marriage_claims.MyClaims_ClaimRequest_AddReview()\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim request is reviewed successfully!');\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "4b6f1ff2-edf2-437a-ba2f-22a8ebe4463f",
              "parentUUID": "8a3aaa0f-e98a-4fa2-9d19-6c63c6c14d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role in Approve Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role in Approve Button",
              "timedOut": false,
              "duration": 11206,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait marriage_claims.MyClaims_ClaimRequest_ApproveBtn();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Button for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is approved successfully!');\n///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "a299ce64-0e33-4072-b425-32dc86539827",
              "parentUUID": "8a3aaa0f-e98a-4fa2-9d19-6c63c6c14d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Approve Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be Verify Approve Claim in Applicant Side",
              "timedOut": false,
              "duration": 7894,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_CheckHRStatus_Scroll();\nawait claims.MyClaims_CheckHRStatus();\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "31747aca-e616-40a4-8ac2-d695c89601d7",
              "parentUUID": "8a3aaa0f-e98a-4fa2-9d19-6c63c6c14d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role in Rejection Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role in Rejection Button",
              "timedOut": false,
              "duration": 15288,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait marriage_claims.MyClaims_ClaimRequest_RejectBtn();\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Button for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is rejected successfully!');\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "8a89d867-e144-4b38-9425-a54ae699d79a",
              "parentUUID": "8a3aaa0f-e98a-4fa2-9d19-6c63c6c14d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Reject Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be Verify Reject Claim in Applicant Side",
              "timedOut": false,
              "duration": 9843,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "9ff937da-a670-4bf6-b215-8e649c673d39",
              "parentUUID": "8a3aaa0f-e98a-4fa2-9d19-6c63c6c14d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 15983,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9474;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2023-02-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "48201525-a2ee-4464-8a53-b4b320d060ff",
              "parentUUID": "8a3aaa0f-e98a-4fa2-9d19-6c63c6c14d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus for Verify Incorrect Deadline",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus for Verify Incorrect Deadline",
              "timedOut": false,
              "duration": 12527,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'You are not able to claim as the claim time is over.');",
              "err": {},
              "uuid": "b4a26ae3-b1fc-4ab9-85c6-ef35b592ba12",
              "parentUUID": "8a3aaa0f-e98a-4fa2-9d19-6c63c6c14d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 15943,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n[\n    'DELETE FROM employee_claim_deadlines;',\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9474;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2024-12-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "5a6b595c-1d4c-4400-b3d9-c6ce3446f4b5",
              "parentUUID": "8a3aaa0f-e98a-4fa2-9d19-6c63c6c14d58",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus for Verify Correct Deadline",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus for Verify Correct Deadline",
              "timedOut": false,
              "duration": 12365,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');\nlet querys =\n[\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n    'DELETE FROM employee_claim_deadlines;'\n];\n    await utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "a4a843b3-8e52-46b8-a43c-8ea750c9f306",
              "parentUUID": "8a3aaa0f-e98a-4fa2-9d19-6c63c6c14d58",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "271bf1f6-25ca-4c40-adf3-36e7fa8b0817",
            "0c37837f-c7bd-49d8-9722-537693c7f7b0",
            "3f53482c-2294-4cb0-a349-534c0c02fb48",
            "39e6069b-2752-4739-b769-614abdcc32c4",
            "9dc7f400-4b7c-4f90-bf67-e0f5f77a793d",
            "fcf6e0d3-f7f5-4939-b5df-a6b52e015c38",
            "b170e28e-1a7d-438f-af96-1979127a217a",
            "7937610e-0d3d-4a63-a077-d351baacef82",
            "aad87481-6a6d-4659-8a33-eeb89a51fbf9",
            "9467d037-c2a1-4b40-a229-2d4eff711b69",
            "7e38b009-1bce-4b8e-a018-aa7709439c11",
            "4b6f1ff2-edf2-437a-ba2f-22a8ebe4463f",
            "a299ce64-0e33-4072-b425-32dc86539827",
            "31747aca-e616-40a4-8ac2-d695c89601d7",
            "8a89d867-e144-4b38-9425-a54ae699d79a",
            "9ff937da-a670-4bf6-b215-8e649c673d39",
            "48201525-a2ee-4464-8a53-b4b320d060ff",
            "b4a26ae3-b1fc-4ab9-85c6-ef35b592ba12",
            "5a6b595c-1d4c-4400-b3d9-c6ce3446f4b5",
            "a4a843b3-8e52-46b8-a43c-8ea750c9f306"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 252346,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "f0f2e47a-7488-4250-ad25-96fcc627da82",
          "title": "Monthly Claims -> Medicals",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/5-Monthlyclaim/myclaims-medical.js",
          "file": "/test/e2e/5-Monthlyclaim/myclaims-medical.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button",
              "fullTitle": "Monthly Claims -> Medicals should be able to Upload Photo and click Close Button",
              "timedOut": false,
              "duration": 10543,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "9f51436e-a45b-4d2c-acc5-4e15f5833788",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Upload Multiple Photos and click Close Button",
              "fullTitle": "Monthly Claims -> Medicals should be able to Upload Multiple Photos and click Close Button",
              "timedOut": false,
              "duration": 23708,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0);\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1500', 1);\nawait medical_claims.MyClaims_AddClaim_AddRow(1);\nawait medical_claims.MyClaims_AddClaim_AddRow(2);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_DeleteRow(1);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, .anticon-delete > svg)\nWait timed out after 10186ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, .anticon-delete > svg)\nWait timed out after 10186ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "7e42df4d-516c-42e7-bc4e-6231517587e6",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Add New Row and Delete Row",
              "fullTitle": "Monthly Claims -> Medicals should be able to Add New Row and Delete Row",
              "timedOut": false,
              "duration": 15504,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait utilFun.wait(5000);\nawait medical_claims.Row_Assertion();\nawait medical_claims.MyClaims_AddClaim_DeleteRow(1)",
              "err": {},
              "uuid": "ce48b52b-4d67-495c-b744-65b97b3ad488",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Add and Delete Attachments",
              "fullTitle": "Monthly Claims -> Medicals should be able to Add and Delete Attachments",
              "timedOut": false,
              "duration": 22226,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(5000);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0)",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, .anticon-delete > svg)\nWait timed out after 10067ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, .anticon-delete > svg)\nWait timed out after 10067ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d22d80c0-1a38-4c57-95be-8114d6c6292d",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to click Cancel Button",
              "fullTitle": "Monthly Claims -> Medicals should be able to click Cancel Button",
              "timedOut": false,
              "duration": 12500,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(5000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "f0d25729-5923-47f6-a8cb-73cc12c1cdcf",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims",
              "timedOut": false,
              "duration": 17261,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {
                "message": "AssertionError: '' == 'Claim submitted successfully!'",
                "estack": "AssertionError [ERR_ASSERTION]: '' == 'Claim submitted successfully!'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/5-Monthlyclaim/myclaims-medical.js:106:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "+ Claim submitted successfully!\n"
              },
              "uuid": "87381cc9-63a2-4763-9acd-50c4e7a56c5c",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Edit Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Edit Medical Claims",
              "timedOut": false,
              "duration": 13666,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_EditBtn();\nawait medical_claims.MyClaims_AddClaim_DeleteRow(1)\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is updated successfully');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, span:nth-child(1) > .MuiButtonBase-root > svg)\nWait timed out after 10205ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, span:nth-child(1) > .MuiButtonBase-root > svg)\nWait timed out after 10205ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "28aaa7fc-73bb-4d2d-bbef-5751a540be17",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Medicals should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 23254,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Employee_FilterBtn();\nawait utilFun.wait(4000);\nawait claims.FilterSearchByClaimType('Medical Coverage');\nawait claims.FilterSearchByStatus('Approved');\nawait claims.FilterSearchByStatus('Review');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Filter_ClearBtn()",
              "err": {},
              "uuid": "e3ed17aa-ccdf-4f98-912e-372fb8f6fc03",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Delete Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Delete Medical Claims",
              "timedOut": false,
              "duration": 13619,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_DeleteBtn();\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, span:nth-child(2) > .MuiButtonBase-root > svg)\nWait timed out after 10192ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, span:nth-child(2) > .MuiButtonBase-root > svg)\nWait timed out after 10192ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "8f3c11de-4f72-4d76-980e-31536075ae53",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims",
              "timedOut": false,
              "duration": 15201,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {
                "message": "AssertionError: '' == 'Claim submitted successfully!'",
                "estack": "AssertionError [ERR_ASSERTION]: '' == 'Claim submitted successfully!'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/5-Monthlyclaim/myclaims-medical.js:158:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "+ Claim submitted successfully!\n"
              },
              "uuid": "50772406-8a41-4e61-8658-44e19fb2a88c",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 10582,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10115ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10115ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "b2e51820-515d-4df4-8435-5d73969e15d0",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review Flow",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Review Flow",
              "timedOut": false,
              "duration": 10521,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(1);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim request is reviewed successfully!');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet query =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10004ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10004ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "c5ae0139-637c-499c-b5fd-59d21645600c",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims for Approve Flow",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims for Approve Flow",
              "timedOut": false,
              "duration": 15264,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {
                "message": "AssertionError: '' == 'Claim submitted successfully!'",
                "estack": "AssertionError [ERR_ASSERTION]: '' == 'Claim submitted successfully!'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/5-Monthlyclaim/myclaims-medical.js:220:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "+ Claim submitted successfully!\n"
              },
              "uuid": "1fd5f166-3287-4239-9b00-9d71abbd4efa",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Edit Reciept Amount",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Show Edit Reciept Amount",
              "timedOut": false,
              "duration": 10527,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_FirstChildClaim_EditAmount_Hover()\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_EditAmount(0);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_RecieptAmount('2500')\nawait utilFun.wait(1000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_Reason('Reason for edit amount')\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'The receipt amount has been updated successfully!');\nawait utilFun.wait(3000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_SecondChildClaim_EditAmount_Hover();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_EditAmount(0);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_RecieptAmount('5000')\nawait utilFun.wait(1000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_Reason('Reason for edit amount')\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox()\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'The receipt amount has been updated successfully!');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10058ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10058ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "db060b0d-9d35-43fe-b3b0-6d02c34c1610",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Approve Medicals",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Approve Medicals",
              "timedOut": false,
              "duration": 15490,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'The status has been updated successfully!');\nawait utilFun.wait(3000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'The status has been updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nawait utilFun.wait(3000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10006ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10006ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "41b44414-f3a7-45e7-a19b-603913cbad8c",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims for Reject Flow",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims for Reject Flow",
              "timedOut": false,
              "duration": 15416,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {
                "message": "AssertionError: '' == 'Claim submitted successfully!'",
                "estack": "AssertionError [ERR_ASSERTION]: '' == 'Claim submitted successfully!'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/5-Monthlyclaim/myclaims-medical.js:315:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "+ Claim submitted successfully!\n"
              },
              "uuid": "8582294a-cc77-4173-b214-4a67248f4a7c",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reject Medicals",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Reject Medicals",
              "timedOut": false,
              "duration": 10623,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'The status has been updated successfully!');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'The status has been updated successfully!');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10131ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10131ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "14a584b4-6fb6-470a-8659-0d04c55bbb9e",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be  Verify Reject Tab and check Show Attachment ",
              "fullTitle": "Monthly Claims -> Medicals should be  Verify Reject Tab and check Show Attachment ",
              "timedOut": false,
              "duration": 18926,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10198ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell > .pointer)\nWait timed out after 10198ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "46e76dc5-bc3a-4b1a-b049-70fd0c638388",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be  Verify Reject Tab and Check Review Icon  ",
              "fullTitle": "Monthly Claims -> Medicals should be  Verify Reject Tab and Check Review Icon  ",
              "timedOut": false,
              "duration": 18773,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell .icon)\nWait timed out after 10061ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, .ant-table-cell .icon)\nWait timed out after 10061ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "931b4693-3b80-4f6e-9234-bcd7b212c64d",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Medicals should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 4593,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {
                "message": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".ant-table-cell > .MuiButtonBase-root\"}\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "NoSuchElementError: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\".ant-table-cell > .MuiButtonBase-root\"}\n  (Session info: headless chrome=119.0.6045.159)\n    at Object.throwDecodedError (node_modules/selenium-webdriver/lib/error.js:524:15)\n    at parseHttpResponse (node_modules/selenium-webdriver/lib/http.js:601:13)\n    at Executor.execute (node_modules/selenium-webdriver/lib/http.js:529:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async thenableWebDriverProxy.execute (node_modules/selenium-webdriver/lib/webdriver.js:745:17)\n    at async claims.MyClaims_CheckHRStatus_Scroll (test/support/pages/monthlyclaim/claims-pdf.js:270:28)\n    at async Context.<anonymous> (test/e2e/5-Monthlyclaim/myclaims-medical.js:375:9)",
                "diff": null
              },
              "uuid": "cee04302-fbb4-4d97-bd81-e99cb7a4fe0b",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Medicals should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 16200,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2023-02-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "40274adf-bd9b-4ddf-8bec-dd874339f585",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims Verify Incorrect Deadline",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims Verify Incorrect Deadline",
              "timedOut": false,
              "duration": 17214,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'You are not able to claim as the claim time is over.');",
              "err": {
                "message": "AssertionError: '' == 'You are not able to claim as the claim time is over.'",
                "estack": "AssertionError [ERR_ASSERTION]: '' == 'You are not able to claim as the claim time is over.'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/5-Monthlyclaim/myclaims-medical.js:434:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "+ You are not able to claim as the claim time is over.\n"
              },
              "uuid": "d041b665-02eb-481d-b543-6808ac8c6acf",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Medicals should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 16147,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        'DELETE FROM employee_claim_deadlines;',\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2024-12-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "141c917a-70cc-4f55-9f36-dfa943594d8f",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims Verify Correct Deadline",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims Verify Correct Deadline",
              "timedOut": false,
              "duration": 17275,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');\nlet querys =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n        'DELETE FROM employee_claim_deadlines;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {
                "message": "AssertionError: '' == 'Claim submitted successfully!'",
                "estack": "AssertionError [ERR_ASSERTION]: '' == 'Claim submitted successfully!'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/5-Monthlyclaim/myclaims-medical.js:487:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "+ Claim submitted successfully!\n"
              },
              "uuid": "fd6c4650-26b1-4500-8749-e0201c2d2d7d",
              "parentUUID": "f0f2e47a-7488-4250-ad25-96fcc627da82",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9f51436e-a45b-4d2c-acc5-4e15f5833788",
            "ce48b52b-4d67-495c-b744-65b97b3ad488",
            "f0d25729-5923-47f6-a8cb-73cc12c1cdcf",
            "e3ed17aa-ccdf-4f98-912e-372fb8f6fc03",
            "40274adf-bd9b-4ddf-8bec-dd874339f585",
            "141c917a-70cc-4f55-9f36-dfa943594d8f"
          ],
          "failures": [
            "7e42df4d-516c-42e7-bc4e-6231517587e6",
            "d22d80c0-1a38-4c57-95be-8114d6c6292d",
            "87381cc9-63a2-4763-9acd-50c4e7a56c5c",
            "28aaa7fc-73bb-4d2d-bbef-5751a540be17",
            "8f3c11de-4f72-4d76-980e-31536075ae53",
            "50772406-8a41-4e61-8658-44e19fb2a88c",
            "b2e51820-515d-4df4-8435-5d73969e15d0",
            "c5ae0139-637c-499c-b5fd-59d21645600c",
            "1fd5f166-3287-4239-9b00-9d71abbd4efa",
            "db060b0d-9d35-43fe-b3b0-6d02c34c1610",
            "41b44414-f3a7-45e7-a19b-603913cbad8c",
            "8582294a-cc77-4173-b214-4a67248f4a7c",
            "14a584b4-6fb6-470a-8659-0d04c55bbb9e",
            "46e76dc5-bc3a-4b1a-b049-70fd0c638388",
            "931b4693-3b80-4f6e-9234-bcd7b212c64d",
            "cee04302-fbb4-4d97-bd81-e99cb7a4fe0b",
            "d041b665-02eb-481d-b543-6808ac8c6acf",
            "fd6c4650-26b1-4500-8749-e0201c2d2d7d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 365033,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
          "title": "Monthly Claims -> OverTime Claims",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/5-Monthlyclaim/myclaims-overtime.js",
          "file": "/test/e2e/5-Monthlyclaim/myclaims-overtime.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Check Close Button ",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Check Close Button ",
              "timedOut": false,
              "duration": 11790,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn_Assertion()",
              "err": {},
              "uuid": "130fd28d-a0a1-4a2c-afbb-7c1bbab4cde4",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Check Cancel Button ",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Check Cancel Button ",
              "timedOut": false,
              "duration": 11710,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-11' where id = 1;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 780 , \"date\" = '2023-09-12' where id = 2;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-13' where id = 3;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-14' where id = 4;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-15' where id = 5;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-15' where id = 6;`\n\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "7e4f1411-33b1-494f-ad4e-1a49eb01de9a",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to submit Overtime",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to submit Overtime",
              "timedOut": false,
              "duration": 32221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\nawait overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "294f83d3-a449-41f8-9d14-5826231c6355",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details and Plus Icon",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details and Plus Icon",
              "timedOut": false,
              "duration": 10338,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "d0a941f8-aea7-44be-bb43-63915e5303c5",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Delete Button",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Delete Button",
              "timedOut": false,
              "duration": 8073,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_DeleteButton(0)\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "ca5ed9d1-4675-4825-9a7b-49bf89f9d0e7",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Overtime",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Submit Overtime",
              "timedOut": false,
              "duration": 32100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\nawait overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "0457c9b9-5efa-4f56-9f14-8d5bbc0394d8",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to click Show Details",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to click Show Details",
              "timedOut": false,
              "duration": 21453,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"managerId\" = 9429 WHERE \"employeeId\" = 9429;`,\n    `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'project_manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 118 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = 2 WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.wait(5000)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(8000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "fc9a1c47-a3e5-4f78-899a-b6f62059879a",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Filter Button",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Filter Button",
              "timedOut": false,
              "duration": 21301,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_PMSide_FilterButton();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\nawait claims.HRFilterSearchByClaimType('Overtime');\nawait utilFun.wait(1000);\n/// Start and End Date Filter\nawait claims.MyClaims_Filter_StartDate('2023-01-04');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2024-01-04')\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "52c6547d-3c41-4e05-8c9a-f0f66a0d2ba2",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Review Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Review Flow",
              "timedOut": false,
              "duration": 16331,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Action_ReviewIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(5000)\n/// Verify Data in Review Tab\nawait overtime_claims.MyClaims_ReviewTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "63047776-89f5-4b73-a513-0d62e284572b",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Reject Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Reject Flow",
              "timedOut": false,
              "duration": 11362,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Action_RejectIcon()\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Data in Reject Tab\nawait overtime_claims.MyClaims_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "6ac33522-44b4-47ec-9007-ffd87a6846c4",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Approve Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Approve Flow",
              "timedOut": false,
              "duration": 13225,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(5000);\nawait overtime_claims.MyClaims_Action_ApproveIcon();\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n/// Verify Data in Approve Tab\nawait overtime_claims.MyClaims_ApproveTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "be67875a-02b1-413c-85af-4e1ea648f225",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details",
              "timedOut": false,
              "duration": 12318,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "739643f9-298c-4b93-b5c4-1ebf23672657",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be HR Role Review Flow",
              "timedOut": false,
              "duration": 16258,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\n        await utilFun.wait(2000)\n        await overtime_claims.MyClaims_Action_ReviewIcon(0);\n        await claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\n        await claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\n        const flashMessages = await claims.checkAlert();\n        utilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\n        await utilFun.wait(3000)\n        /// Verify Data in Review Tab\n        await claims.MyClaims_ClaimsRequest_ReviewTab();\n        await claims.Row_Assertion()\n        await utilFun.wait(3000)",
              "err": {},
              "uuid": "de4c1f41-649a-43c5-ac74-a1a488e15947",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Approve Claim by HR",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Approve Claim by HR",
              "timedOut": false,
              "duration": 18322,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(5000);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_ApproveIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "445101b8-d71f-4d88-a91c-a53cda7f7c68",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Reject Claim by HR",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Reject Claim by HR",
              "timedOut": false,
              "duration": 16463,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_RejectIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait utilFun.wait(3000)\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "fbe20414-73f7-4b5c-9d04-7fa37ed17a80",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Reject Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Verify Reject Claim in Applicant Side",
              "timedOut": false,
              "duration": 13962,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nconst flashMessages = await overtime_claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Reject for Test Automation');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\nlet query =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "777c19d1-43e1-4081-a223-35a4f23f0f71",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit OverTime as a Project Manager (Employee)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Submit OverTime as a Project Manager (Employee)",
              "timedOut": false,
              "duration": 35240,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'project_manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 118 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = 2 WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Sumera Shaikh')\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\nawait overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "128cf641-7228-4b81-8421-9d4a225802ce",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details (HOD Side)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details (HOD Side)",
              "timedOut": false,
              "duration": 11401,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"managerId\" = 9429 WHERE \"employeeId\" = 9429;`,\n    `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'dev' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 83 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = 9429 WHERE id = 9;',\n    //// change manager id\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(5000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(3000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(2000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "ca8f1b93-f539-4f89-a1b4-9a20b2399e98",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Filter Button (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Filter Button (HOD Scenario)",
              "timedOut": false,
              "duration": 21126,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_PMSide_FilterButton();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\nawait claims.HRFilterSearchByClaimType('Overtime');\nawait utilFun.wait(1000);\n/// Start and End Date Filter\nawait claims.MyClaims_Filter_StartDate('2024-01-04');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2024-01-04')\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "835830cc-1501-42fc-99d4-9cf086bd32d6",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Review Flow (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Review Flow (HOD Scenario)",
              "timedOut": false,
              "duration": 20324,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(3000);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_Action_ReviewIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(5000)\n/// Verify Data in Review Tab\nawait overtime_claims.MyClaims_ReviewTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "aae162fb-dd59-4044-baa2-0fb632d4ee4e",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Reject Flow (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Reject Flow (HOD Scenario)",
              "timedOut": false,
              "duration": 11315,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Action_RejectIcon()\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Data in Reject Tab\nawait overtime_claims.MyClaims_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "23949087-e0fb-40b4-b0f0-54708738f242",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Approve Flow (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Approve Flow (HOD Scenario)",
              "timedOut": false,
              "duration": 13224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(5000);\nawait overtime_claims.MyClaims_Action_ApproveIcon();\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n/// Verify Data in Approve Tab\nawait overtime_claims.MyClaims_ApproveTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "ce32d90d-baf7-4b35-af85-2a2dcbe3e3db",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details (HR Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details (HR Scenario)",
              "timedOut": false,
              "duration": 9261,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "06475889-1815-4411-80ff-ef247a721f47",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review Flow (HR Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be HR Role Review Flow (HR Scenario)",
              "timedOut": false,
              "duration": 16334,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait overtime_claims.MyClaims_Action_ReviewIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(3000)\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nawait utilFun.wait(3000)",
              "err": {},
              "uuid": "cbc74fff-7c6c-4a68-a2ac-fe2447e8f401",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Approve Claim by HR (HR Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Approve Claim by HR (HR Scenario)",
              "timedOut": false,
              "duration": 18308,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(5000);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_ApproveIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "db0ae5c9-38ea-4a3e-8fb7-77286768e4a6",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Reject Claim by HR",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Reject Claim by HR",
              "timedOut": false,
              "duration": 16193,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_RejectIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait utilFun.wait(3000)\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "9c623e06-fe0e-411e-a7e1-96f998bad7bf",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Reject Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Verify Reject Claim in Applicant Side",
              "timedOut": false,
              "duration": 14043,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'project_manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 118 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = 2 WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nconst flashMessages = await overtime_claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Reject for Test Automation');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "d5bea1e0-a389-46bc-a0ae-92c4f3241a4a",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Download CSV",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Download CSV",
              "timedOut": false,
              "duration": 21153,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_ClaimRequest_DownloadBtn()\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Filter_StartDate('2024-01-01');\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_Filter_EndDate('2024-01-15');\nawait claims.ClaimStatus('Pending');\nawait utilFun.wait(1000);\nawait claims.ClaimStatus('Rejected');\nawait claims.MyClaims_ClaimRequest_DownloadBtn_MainDownloadBtn()\nawait utilFun.wait(1000);\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "e0d6204b-ad43-4214-84e9-cb5eea96504e",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 17822,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineDate_ClearHover();\nawait overtime_claims.MyClaims_DeadlineDate_ClearBtn();\nawait overtime_claims.MyClaims_Deadline_Date('2023-03-12 20:48:11');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "a0b1b4e4-6394-4f89-a2d3-9bd74c5dee5c",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit OverTime with Wrong Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Submit OverTime with Wrong Deadline Date",
              "timedOut": false,
              "duration": 22579,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Furqan Aziz')\nawait utilFun.wait(1000);\n// await overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\n// await overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Overtime claim is only allow for current month');\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);",
              "err": {},
              "uuid": "9c5b6738-0861-43e6-bf9e-6b82566a9284",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Set Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Set Deadline Date",
              "timedOut": false,
              "duration": 17846,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        'DELETE FROM employee_claim_deadlines;',\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineDate_ClearHover();\nawait overtime_claims.MyClaims_DeadlineDate_ClearBtn();\nawait overtime_claims.MyClaims_Deadline_Date('2024-03-12 20:48:11');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "b226ef94-4783-482d-a2ef-e65fff0f38f9",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit OverTime as a SQA Automation(Employee) to Verify with Correct Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Submit OverTime as a SQA Automation(Employee) to Verify with Correct Deadline Date",
              "timedOut": false,
              "duration": 30358,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Furqan Aziz')\n// await utilFun.wait(1000);\n// await overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\n// await overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');\n let querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n        'DELETE FROM employee_claim_deadlines;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {
                "message": "AssertionError: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully!'",
                "estack": "AssertionError [ERR_ASSERTION]: 'You are not able to claim as the claim time is over.' == 'Claim submitted successfully!'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/5-Monthlyclaim/myclaims-overtime.js:691:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- You are not able to claim as the claim time is over.\n+ Claim submitted successfully!\n"
              },
              "uuid": "69ab0c82-90ac-49ae-9073-5d4ea1986078",
              "parentUUID": "b9777e86-ca64-4032-b804-ac1cee6bbb98",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "130fd28d-a0a1-4a2c-afbb-7c1bbab4cde4",
            "7e4f1411-33b1-494f-ad4e-1a49eb01de9a",
            "294f83d3-a449-41f8-9d14-5826231c6355",
            "d0a941f8-aea7-44be-bb43-63915e5303c5",
            "ca5ed9d1-4675-4825-9a7b-49bf89f9d0e7",
            "0457c9b9-5efa-4f56-9f14-8d5bbc0394d8",
            "fc9a1c47-a3e5-4f78-899a-b6f62059879a",
            "52c6547d-3c41-4e05-8c9a-f0f66a0d2ba2",
            "63047776-89f5-4b73-a513-0d62e284572b",
            "6ac33522-44b4-47ec-9007-ffd87a6846c4",
            "be67875a-02b1-413c-85af-4e1ea648f225",
            "739643f9-298c-4b93-b5c4-1ebf23672657",
            "de4c1f41-649a-43c5-ac74-a1a488e15947",
            "445101b8-d71f-4d88-a91c-a53cda7f7c68",
            "fbe20414-73f7-4b5c-9d04-7fa37ed17a80",
            "777c19d1-43e1-4081-a223-35a4f23f0f71",
            "128cf641-7228-4b81-8421-9d4a225802ce",
            "ca8f1b93-f539-4f89-a1b4-9a20b2399e98",
            "835830cc-1501-42fc-99d4-9cf086bd32d6",
            "aae162fb-dd59-4044-baa2-0fb632d4ee4e",
            "23949087-e0fb-40b4-b0f0-54708738f242",
            "ce32d90d-baf7-4b35-af85-2a2dcbe3e3db",
            "06475889-1815-4411-80ff-ef247a721f47",
            "cbc74fff-7c6c-4a68-a2ac-fe2447e8f401",
            "db0ae5c9-38ea-4a3e-8fb7-77286768e4a6",
            "9c623e06-fe0e-411e-a7e1-96f998bad7bf",
            "d5bea1e0-a389-46bc-a0ae-92c4f3241a4a",
            "e0d6204b-ad43-4214-84e9-cb5eea96504e",
            "a0b1b4e4-6394-4f89-a2d3-9bd74c5dee5c",
            "9c5b6738-0861-43e6-bf9e-6b82566a9284",
            "b226ef94-4783-482d-a2ef-e65fff0f38f9"
          ],
          "failures": [
            "69ab0c82-90ac-49ae-9073-5d4ea1986078"
          ],
          "pending": [],
          "skipped": [],
          "duration": 563754,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "5444f4f6-1aff-46eb-a531-fd0a5245b924",
          "title": "Monthly Claims -> Personal Development Fund",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/5-Monthlyclaim/myclaims-pdf.js",
          "file": "/test/e2e/5-Monthlyclaim/myclaims-pdf.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able one File Upload and close button in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be able one File Upload and close button in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "0037bab1-3f2e-4256-954b-edbb1d103e04",
              "parentUUID": "5444f4f6-1aff-46eb-a531-fd0a5245b924",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able multiple File Upload & Cancel Button in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be able multiple File Upload & Cancel Button in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "f5ae831a-6ad8-4792-8f8e-8a31cdd094f0",
              "parentUUID": "5444f4f6-1aff-46eb-a531-fd0a5245b924",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "f461ae60-324e-4a6a-91f3-77e836d563ab",
              "parentUUID": "5444f4f6-1aff-46eb-a531-fd0a5245b924",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Delete Claim in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be Delete Claim in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8ebf2d79-d870-4eb6-b2b9-39b2c0e869a2",
              "parentUUID": "5444f4f6-1aff-46eb-a531-fd0a5245b924",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "c0dea58b-ce78-46a5-ab75-dd0aea79813f",
              "parentUUID": "5444f4f6-1aff-46eb-a531-fd0a5245b924",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "dac4ea2c-b479-46b7-8296-816cfdc56bd0",
              "parentUUID": "5444f4f6-1aff-46eb-a531-fd0a5245b924",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Edit Claim of Personal Development Allowance",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Edit Claim of Personal Development Allowance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "885be0ba-4c74-48d0-a001-d0d1588b7b0a",
              "parentUUID": "5444f4f6-1aff-46eb-a531-fd0a5245b924",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reviews Chart",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Reviews Chart",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8945e2e2-5ad5-4485-b371-301f7565c237",
              "parentUUID": "5444f4f6-1aff-46eb-a531-fd0a5245b924",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Add Reviews",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Add Reviews",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "78029e73-b6b6-4825-ac54-7ec97164ece4",
              "parentUUID": "5444f4f6-1aff-46eb-a531-fd0a5245b924",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Approve Button",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Approve Button",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "9b52a2ab-2865-4fed-a1d1-f8ab99478523",
              "parentUUID": "5444f4f6-1aff-46eb-a531-fd0a5245b924",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review See Button in Approve Tab",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Review See Button in Approve Tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8d8b383d-cbba-427d-ae39-cb5c5d376bd9",
              "parentUUID": "5444f4f6-1aff-46eb-a531-fd0a5245b924",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reject Button",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Reject Button",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e028b2d6-ff92-4249-b837-dcb140d7be35",
              "parentUUID": "5444f4f6-1aff-46eb-a531-fd0a5245b924",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reason See in Reject Tab ",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Reason See in Reject Tab ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "131ff0b5-f88a-4a7c-85f5-f4bd6871634b",
              "parentUUID": "5444f4f6-1aff-46eb-a531-fd0a5245b924",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "42451f6f-8230-4fdd-9e50-56f03f33516f",
              "parentUUID": "5444f4f6-1aff-46eb-a531-fd0a5245b924",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "7b87c890-346e-4abb-8dbf-a7481eb87b21",
              "parentUUID": "5444f4f6-1aff-46eb-a531-fd0a5245b924",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund for Verify Incorrect Deadline",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund for Verify Incorrect Deadline",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "f7472a5d-37e8-4d23-ad5c-c87b1ec828da",
              "parentUUID": "5444f4f6-1aff-46eb-a531-fd0a5245b924",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "c92ae94f-5d73-4be9-b89c-7d0759cd9d5a",
              "parentUUID": "5444f4f6-1aff-46eb-a531-fd0a5245b924",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund for Verify Correct Deadline",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund for Verify Correct Deadline",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "c270fd91-6bc3-4ee8-a37a-3539565c45df",
              "parentUUID": "5444f4f6-1aff-46eb-a531-fd0a5245b924",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "0037bab1-3f2e-4256-954b-edbb1d103e04",
            "f5ae831a-6ad8-4792-8f8e-8a31cdd094f0",
            "f461ae60-324e-4a6a-91f3-77e836d563ab",
            "8ebf2d79-d870-4eb6-b2b9-39b2c0e869a2",
            "c0dea58b-ce78-46a5-ab75-dd0aea79813f",
            "dac4ea2c-b479-46b7-8296-816cfdc56bd0",
            "885be0ba-4c74-48d0-a001-d0d1588b7b0a",
            "8945e2e2-5ad5-4485-b371-301f7565c237",
            "78029e73-b6b6-4825-ac54-7ec97164ece4",
            "9b52a2ab-2865-4fed-a1d1-f8ab99478523",
            "8d8b383d-cbba-427d-ae39-cb5c5d376bd9",
            "e028b2d6-ff92-4249-b837-dcb140d7be35",
            "131ff0b5-f88a-4a7c-85f5-f4bd6871634b",
            "42451f6f-8230-4fdd-9e50-56f03f33516f",
            "7b87c890-346e-4abb-8dbf-a7481eb87b21",
            "f7472a5d-37e8-4d23-ad5c-c87b1ec828da",
            "c92ae94f-5d73-4be9-b89c-7d0759cd9d5a",
            "c270fd91-6bc3-4ee8-a37a-3539565c45df"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "8e24168f-d6c3-49e6-a269-bc96206013fe",
          "title": "Projects -> All Projects",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/6-Projects/spec-1-allprojects.js",
          "file": "/test/e2e/6-Projects/spec-1-allprojects.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Projects -> All Projects\"",
              "fullTitle": "Projects -> All Projects \"before all\" hook in \"Projects -> All Projects\"",
              "timedOut": false,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\n// await utilFun.login(email, password);",
              "err": {},
              "uuid": "9e0ae631-4e38-4dcd-89ad-fa1b017a6e10",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to check Add Project Button Clickable ",
              "fullTitle": "Projects -> All Projects should able to check Add Project Button Clickable ",
              "timedOut": false,
              "duration": 4536,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9429;`,\n  `UPDATE employees SET \"workAs\" = 'dev' WHERE id = 9429;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9429;`,\n  `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n  `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n  'UPDATE departments SET \"hodId\" = 9429 WHERE id = 9;',\n  //// change manager id\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_AddProject_Btn();\nawait projects.checkModelIsVisible();",
              "err": {},
              "uuid": "8dd05cee-ac11-4be3-b46a-38e0b8f524b1",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Add Button is Disable ",
              "fullTitle": "Projects -> All Projects should able to Verify Add Button is Disable ",
              "timedOut": false,
              "duration": 4901,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_AddProject_Btn();\nawait utilFun.wait(1000);\nawait projects.Projects_AddProject_AddBtn_Disable();",
              "err": {},
              "uuid": "eab8e746-ad59-4947-af2f-841d435cbf34",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add Project",
              "fullTitle": "Projects -> All Projects should able to Add Project",
              "timedOut": false,
              "duration": 11007,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM projects WHERE \"name\" = 'Appeo';`);\nlet portfolioId = await utilFun.getFromDatabase(`SELECT id FROM project_portfolios WHERE \"name\" = 'Appeo';`);\nif (resourceId.rowCount !== 0) {\n  let query = [\n    `DELETE FROM \"project_portfolio_skills\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n    `DELETE FROM \"project_timelines\" WHERE \"projectId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"project_portfolio_employees\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n    `DELETE FROM \"project_portfolios\" WHERE \"projectId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"projects\" WHERE \"id\" = ${resourceId.rows[0].id};`,\n  ];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_AddProject_Btn();\nawait projects.Projects_AddProject_ProjectName('Appeo');\nawait projects.Projects_AddProject_Divison('InvoLane');\nawait projects.Projects_AddProject_Status('Closing');\nawait projects.Projects_AddProject_AddBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project is created successfully.');",
              "err": {},
              "uuid": "1b50e998-c312-4bf3-8a92-1621dda0174d",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify if Project is added",
              "fullTitle": "Projects -> All Projects should able to Verify if Project is added",
              "timedOut": false,
              "duration": 6870,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Appeo'), `Expected text not found.`);",
              "err": {},
              "uuid": "c44fd366-4e51-498e-824b-f31881db4a9f",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Division",
              "fullTitle": "Projects -> All Projects should able to Edit Division",
              "timedOut": false,
              "duration": 11115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditDivision_Hover();\nawait projects.Projects_ProjectDetail_EditDivision();\nawait projects.selectInput('Invogame');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "b26d2a51-248e-4900-98f1-c1909a6a2bd8",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Country",
              "fullTitle": "Projects -> All Projects should able to Edit Country",
              "timedOut": false,
              "duration": 11185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditCountry_Hover();\nawait projects.Projects_ProjectDetail_EditCountryClick();\nawait projects.selectInput('Egypt');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "aacb4a7d-7f81-4bde-92ef-258f41afe457",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Status",
              "fullTitle": "Projects -> All Projects should able to Edit Status",
              "timedOut": false,
              "duration": 11225,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditStatusHover();\nawait projects.Projects_ProjectDetail_EditStatusClick();\nawait projects.selectInput('Closing');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "45d1f94f-1a1a-424c-9cf3-da3fa2b6b8cd",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Project Manager",
              "fullTitle": "Projects -> All Projects should able to Edit Project Manager",
              "timedOut": false,
              "duration": 11183,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditProjectManagerHover();\nawait projects.Projects_ProjectDetail_EditProjectManagerClick();\nawait projects.selectInput('Muhammad Bilal Rafaqat');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "de4ca076-0de8-42a9-b33f-4ac09d2ec8dc",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Contract",
              "fullTitle": "Projects -> All Projects should able to Edit Contract",
              "timedOut": false,
              "duration": 11135,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditContractHover();\nawait projects.Projects_ProjectDetail_EditContractClick();\nawait projects.selectInput('Agency to Client');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "b08c1bb6-5c87-4ceb-81a5-dac5a0b41c69",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit PM Introduced",
              "fullTitle": "Projects -> All Projects should able to Edit PM Introduced",
              "timedOut": false,
              "duration": 10911,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditPMIntroHover();\nawait projects.Projects_ProjectDetail_EditPMIntroClick();\nawait projects.selectInput('No');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "54a88b14-39bc-4576-86ba-b841de2ae464",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Dev Introduced",
              "fullTitle": "Projects -> All Projects should able to Edit Dev Introduced",
              "timedOut": false,
              "duration": 10891,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditDevIntroHover();\nawait projects.Projects_ProjectDetail_EditDevIntroClick();\nawait projects.selectInput('Yes');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "6a0bd8bb-e386-4f9b-a56a-2cf39d494c53",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Engagement",
              "fullTitle": "Projects -> All Projects should able to Edit Engagement",
              "timedOut": false,
              "duration": 11052,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditEngagementHover();\nawait projects.Projects_ProjectDetail_EditEngagementClick();\nawait projects.selectInput('Hourly');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "bdf7c249-59cc-47e3-9ed1-cfa76f723c57",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Billing Cycle",
              "fullTitle": "Projects -> All Projects should able to Edit Billing Cycle",
              "timedOut": false,
              "duration": 10987,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditBillingCycleHover();\nawait projects.Projects_ProjectDetail_EditBillingCycleClick();\nawait projects.selectInput('Weekly');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "2e36442c-d137-483e-9266-e3e4a5207180",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit BD Member",
              "fullTitle": "Projects -> All Projects should able to Edit BD Member",
              "timedOut": false,
              "duration": 11065,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditBDMemberHover();\nawait projects.Projects_ProjectDetail_EditBDMember();\nawait projects.selectInput('Ahsan Butt');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "1d746ddc-6f37-42c1-aa21-fd32b2c96dba",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Communication Mode",
              "fullTitle": "Projects -> All Projects should able to Edit Communication Mode",
              "timedOut": false,
              "duration": 11077,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditCommunicationModeHover();\nawait projects.Projects_ProjectDetail_EditCommunicationModeClick();\nawait projects.selectInput('Email');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "5cd53529-9485-4fb8-8ebe-847212c31db9",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Billing Profile",
              "fullTitle": "Projects -> All Projects should able to Edit Billing Profile",
              "timedOut": false,
              "duration": 11037,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditBillingProfileHover();\nawait projects.Projects_ProjectDetail_EditBillingProfile();\nawait projects.selectInput('Cash');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "9b8c3869-6be0-454c-9c89-e5c9c305c0eb",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Billing Channel",
              "fullTitle": "Projects -> All Projects should able to Edit Billing Channel",
              "timedOut": false,
              "duration": 11205,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditBillingChannelHover();\nawait projects.Projects_ProjectDetail_EditBillingChannelClick();\nawait projects.selectInput('Upwork Profile');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');\n//'Billing profile is required for this billing channel!!');",
              "err": {},
              "uuid": "114c8b68-da08-4498-88b8-190fb22dd496",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document & Cancel Button",
              "fullTitle": "Projects -> All Projects should able to Upload Document & Cancel Button",
              "timedOut": false,
              "duration": 10926,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadPhoto(0);\nawait projects.Projects_ProjectDetail_UploadDocument_AddRow(0);\nawait projects.Projects_ProjectDetail_UploadDocument_RemoveRow(1);\nawait projects.Projects_CancelBtn();",
              "err": {},
              "uuid": "c291169f-a024-42fe-9173-d3f539645c42",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document  & Disable Submit Button ",
              "fullTitle": "Projects -> All Projects should able to Upload Document  & Disable Submit Button ",
              "timedOut": false,
              "duration": 10520,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_DisableSubmitBtn();",
              "err": {},
              "uuid": "63d2ebe5-7e68-450b-b775-3d9c7285d1e5",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document Photo & Submit Button ",
              "fullTitle": "Projects -> All Projects should able to Upload Document Photo & Submit Button ",
              "timedOut": false,
              "duration": 14599,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadPhoto(0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');",
              "err": {},
              "uuid": "cfa3ee3c-18c6-47ca-88db-0660e87b62ea",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Download Documents ",
              "fullTitle": "Projects -> All Projects should able to Download Documents ",
              "timedOut": false,
              "duration": 6799,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_DownloadDocumentBtn(0);\nawait projects.Projects_DownloadDocumentBtn(1);",
              "err": {},
              "uuid": "40d69d63-f872-48ec-99e6-6d91436097f2",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document Link & Cancel Button",
              "fullTitle": "Projects -> All Projects should able to Upload Document Link & Cancel Button",
              "timedOut": false,
              "duration": 10922,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('Link', 1);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_ProjectDetail_UploadDocument_Field('www.invohub.com', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_AddRow(0);\nawait projects.Projects_ProjectDetail_UploadDocument_RemoveRow(1);\nawait projects.Projects_CancelBtn();",
              "err": {},
              "uuid": "8c675a89-e77a-4ac8-8cc1-4729aaa805fd",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document Link & Submit Button ",
              "fullTitle": "Projects -> All Projects should able to Upload Document Link & Submit Button ",
              "timedOut": false,
              "duration": 14791,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('Link', 1);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_ProjectDetail_UploadDocument_Field('www.invohub.com', 0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');",
              "err": {},
              "uuid": "22601d1c-dbcb-4410-8e39-c21b887c6495",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete Documents & Cancel Button ",
              "fullTitle": "Projects -> All Projects should able to Delete Documents & Cancel Button ",
              "timedOut": false,
              "duration": 6962,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_CancelBtn();",
              "err": {},
              "uuid": "f10b3afb-9ca9-419f-8e84-337565887cf2",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete Documents & Ok Button ",
              "fullTitle": "Projects -> All Projects should able to Delete Documents & Ok Button ",
              "timedOut": false,
              "duration": 14949,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Document removed from project successfully.');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Document removed from project successfully.');",
              "err": {},
              "uuid": "e366447d-edc8-400c-a047-c79c9d41ff9d",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document PDF & Submit Button & Delete PDF ",
              "fullTitle": "Projects -> All Projects should able to Upload Document PDF & Submit Button & Delete PDF ",
              "timedOut": false,
              "duration": 18746,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document PDF Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadPDF(0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Document removed from project successfully.');",
              "err": {},
              "uuid": "a3261260-f667-4770-b286-f5e3e1d01686",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document Doc & Submit Button & Delete Doc ",
              "fullTitle": "Projects -> All Projects should able to Upload Document Doc & Submit Button & Delete Doc ",
              "timedOut": false,
              "duration": 18402,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Doc Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadDoc(0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Document removed from project successfully.');",
              "err": {},
              "uuid": "1fe54167-7c6a-4f36-b617-3c58059a04a6",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document xlsx & Submit Button & Delete xlsx ",
              "fullTitle": "Projects -> All Projects should able to Upload Document xlsx & Submit Button & Delete xlsx ",
              "timedOut": false,
              "duration": 18862,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Xlsx Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadXlsx(0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Document removed from project successfully.');",
              "err": {},
              "uuid": "fe1ff7a6-197f-4d0d-b979-ca67aa369a6a",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add Resource in Project ",
              "fullTitle": "Projects -> All Projects should able to Add Resource in Project ",
              "timedOut": false,
              "duration": 27706,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(1);\nawait projects.RoleProject('Lead SQA');\nawait projects.ResourceName('Ahmed Ali');\nawait projects.EngagementCapicity('5~6 hours');\nawait projects.EngagementMode('Parked');\nawait projects.Projects_ProjectDetail_AddResource_Alias('Input Alias');\nawait projects.Projects_SubmitBtns();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Resource added successfully.');",
              "err": {},
              "uuid": "eca7506e-884b-4447-9907-c62322a35593",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Resource Engagement Mode ",
              "fullTitle": "Projects -> All Projects should able to Edit Resource Engagement Mode ",
              "timedOut": false,
              "duration": 10173,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_Resource_EngagementModeHover();\nawait projects.Projects_Resource_EngagementModeEdit();\nawait projects.ResourceEngagementMode('Training');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "b7e3d13c-b753-455c-9c7a-e2f4ea5e3b3d",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Resource Engagement Capicity ",
              "fullTitle": "Projects -> All Projects should able to Edit Resource Engagement Capicity ",
              "timedOut": false,
              "duration": 11152,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.ResourceEngagementCapicity('Fully Occupied');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "a5d461cf-1aac-4459-99a6-e611ca2e12f3",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Alias",
              "fullTitle": "Projects -> All Projects should able to Edit Alias",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "5e7cc5b0-a11a-4a0e-bbeb-95ca16de7b53",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete Resource",
              "fullTitle": "Projects -> All Projects should able to Delete Resource",
              "timedOut": false,
              "duration": 10921,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Resource removed from project successfully.');",
              "err": {},
              "uuid": "21f0bee2-a589-4077-bcce-92403a8ae646",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Project",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Project",
              "timedOut": false,
              "duration": 6859,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Appeo'), `Expected text not found.`);",
              "err": {},
              "uuid": "ab1d3c73-ed35-439c-974a-4d653cb67469",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Manager ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Manager ",
              "timedOut": false,
              "duration": 7111,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Manager', 'Muhammad Bilal Rafaqat');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "cd078bdc-ff68-4062-919a-cc0ae78ec136",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Division ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Division ",
              "timedOut": false,
              "duration": 6515,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Division', 'InvoTeams');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('InvoTeams'), `Expected text not found.`);",
              "err": {},
              "uuid": "d67287e9-64bd-40f0-9fe2-83d828d8f367",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Status ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Status ",
              "timedOut": false,
              "duration": 6462,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Status', 'Active');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Active'), `Expected text not found.`);",
              "err": {},
              "uuid": "f2e149b4-3a77-461e-affc-e191e9da835e",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by BD Team ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by BD Team ",
              "timedOut": false,
              "duration": 6844,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by BD Team', 'Bd F');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Bd F'), `Expected text not found.`);",
              "err": {},
              "uuid": "dac452ae-146c-4d48-88b0-29896b2b565f",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by BD Member ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by BD Member ",
              "timedOut": false,
              "duration": 6817,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by BD Member', 'Ahsan Butt');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Ahsan Butt'), `Expected text not found.`);",
              "err": {},
              "uuid": "04ed64ea-dd7b-4eb4-9f26-6a34c493c38e",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Contract ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Contract ",
              "timedOut": false,
              "duration": 7229,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Contract', 'Agency to Client');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Agency to Client'), `Expected text not found.`);",
              "err": {},
              "uuid": "b2fd7f7e-14b2-4ad3-bf9f-995587ae1d27",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Country ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Country ",
              "timedOut": false,
              "duration": 6623,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Country', 'Egypt');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Egypt'), `Expected text not found.`);",
              "err": {},
              "uuid": "51a5cd0e-0ff4-4e64-985b-7f46795e1815",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Billing Channel ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Billing Channel ",
              "timedOut": false,
              "duration": 6989,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Billing Channel', 'Upwork Profile');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Upwork Profile'), `Expected text not found.`);",
              "err": {},
              "uuid": "b9b56a64-8b1e-43dd-bbc9-93d2be1f9063",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Click Clear Button ",
              "fullTitle": "Projects -> All Projects should able Click Clear Button ",
              "timedOut": false,
              "duration": 7492,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Billing Channel', 'InvoZone Pvt. Ltd. Meezan');\nawait projects.selectFilter_ProjectDetail_Assert('InvoZone Pvt. Ltd. Meezan');\nawait projects.Projects_Filter_ClearBtn();",
              "err": {},
              "uuid": "1637f257-953d-406d-9a09-daa33272e523",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Filter Fields ",
              "fullTitle": "Projects -> All Projects should able to Verify Filter Fields ",
              "timedOut": false,
              "duration": 28078,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.selectFilter('Search by Manager', 'Muhammad Bilal Rafaqat');\nawait projects.selectFilter('Search by Division', 'InvoTeams');\nawait projects.selectFilter('Search by Status', 'Active');\nawait projects.selectFilter('Search by BD Team', 'BD F');\nawait projects.selectFilter('Search by BD Member', 'Ahmed Irtza');\nawait projects.selectFilter('Search by Contract', 'Individual to Client');\nawait projects.selectFilter('Search by Country', 'Egypt');\nawait projects.selectFilter('Search by Billing Channel', 'InvoZone Pvt. Ltd. Meezan');\nawait projects.Projects_Filter_ClearBtn();",
              "err": {},
              "uuid": "85ca80f5-0b66-4fa1-ab70-0ac1d3369c62",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Apply Multiple Searches ",
              "fullTitle": "Projects -> All Projects should able to Verify Apply Multiple Searches ",
              "timedOut": false,
              "duration": 49830,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.selectFilter('Search by Manager', 'Muhammad Bilal Rafaqat');\nawait projects.selectFilter('Search by Manager', 'Ali Ahmad');\nawait projects.selectFilter('Search by Division', 'InvoTeams');\nawait projects.selectFilter('Search by Division', 'Invogame');\nawait projects.selectFilter('Search by Status', 'Active');\nawait projects.selectFilter('Search by Status', 'Paused');\nawait projects.selectFilter('Search by BD Team', 'BD F');\nawait projects.selectFilter('Search by BD Team', 'N/A');\nawait projects.selectFilter('Search by BD Member', 'Ahmed Irtza');\nawait projects.selectFilter('Search by BD Member', 'Ahsan Butt');\nawait projects.selectFilter('Search by CSM', 'Areeba Tariq');\nawait projects.selectFilter('Search by CSM', 'Fiza Murad');\nawait projects.selectFilter('Search by Contract', 'Individual to Client');\nawait projects.selectFilter('Search by Contract', 'Agency to Client');\nawait projects.selectFilter('Search by Country', 'Egypt');\nawait projects.selectFilter('Search by Country', 'Pakistan');\nawait projects.selectFilter('Search by Billing Channel', 'InvoZone Pvt. Ltd. Meezan');\nawait projects.selectFilter('Search by Billing Channel', 'N/A');",
              "err": {},
              "uuid": "c7ecdff9-c9d0-489b-b9d5-c52291414e95",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Click Project Detail",
              "fullTitle": "Projects -> All Projects should able Click Project Detail",
              "timedOut": false,
              "duration": 5674,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at projects.ProjectDetail_URLAssertion (test/support/pages/projects/allprojects.js:657:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/6-Projects/spec-1-allprojects.js:501:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "c8580431-a47f-4260-bb46-fe5dbe5b7539",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Edit Project Name",
              "fullTitle": "Projects -> All Projects should able Edit Project Name",
              "timedOut": false,
              "duration": 7782,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait utilFun.wait(3000)\nawait projects.clickToggleIcon()\nawait projects.Projects_ProjectsDetail_EditProject();\nawait projects.Projects_ProjectsDetail_InputName('test');\nawait projects.Projects_ProjectsDetail_UpdateButton();\nlet flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');\nawait utilFun.wait(2000)\nawait projects.Projects_ProjectsDetail_EditProject();\nawait projects.Projects_ProjectsDetail_InputName_Clear();\nawait projects.Projects_ProjectsDetail_InputName('Appeo');\nawait projects.Projects_ProjectsDetail_UpdateButton();\nflashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at projects.ProjectDetail_URLAssertion (test/support/pages/projects/allprojects.js:657:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/6-Projects/spec-1-allprojects.js:511:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "5f9783f2-55ed-4921-a340-00af02cf02c0",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify if Project is added",
              "fullTitle": "Projects -> All Projects should able to Verify if Project is added",
              "timedOut": false,
              "duration": 6146,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Appeo'), `Expected text not found.`);",
              "err": {},
              "uuid": "a7db4784-7b05-464b-b3b9-8f7d95d50a72",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Click Cancel Btn in Project Detail",
              "fullTitle": "Projects -> All Projects should able Click Cancel Btn in Project Detail",
              "timedOut": false,
              "duration": 6637,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectsDetail_EditProject();\nawait projects.Projects_ProjectsDetail_InputName('test');\nawait projects.Projects_ProjectsDetail_CancelBtn();\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at projects.ProjectDetail_URLAssertion (test/support/pages/projects/allprojects.js:657:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/6-Projects/spec-1-allprojects.js:542:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "4ff536cb-df02-4863-818f-6a6aff0d08ed",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Add Description in Project Detail",
              "fullTitle": "Projects -> All Projects should able Add Description in Project Detail",
              "timedOut": false,
              "duration": 7597,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectsDetail_Description('Add New Description');\nawait projects.Projects_ProjectsDetail_UpdateBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at projects.ProjectDetail_URLAssertion (test/support/pages/projects/allprojects.js:657:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/6-Projects/spec-1-allprojects.js:555:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "3c702043-d318-4261-9e2e-7e84b7f70b32",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Search Stack in Project Detail",
              "fullTitle": "Projects -> All Projects should able Search Stack in Project Detail",
              "timedOut": false,
              "duration": 5859,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectDetail_Search('Admin');\nawait projects.ProjectDetail_TextAssertion();",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at projects.ProjectDetail_URLAssertion (test/support/pages/projects/allprojects.js:657:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/6-Projects/spec-1-allprojects.js:569:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "13e6fa02-ad61-4e04-ae39-49c4b8b194f2",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Add Stack in Project Detail",
              "fullTitle": "Projects -> All Projects should able Add Stack in Project Detail",
              "timedOut": false,
              "duration": 10087,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// await projects.Projects_ProjectDetail_Search('Admin');\nawait projects.Projects_ProjectDetail_AddStack();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Skills are updated successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"makeStyles-rating-2\"])\nWait timed out after 10083ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"makeStyles-rating-2\"])\nWait timed out after 10083ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "60587e2d-2ada-4bbb-82cc-9b89c7becdb0",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Delete Stack and Click No Btutton",
              "fullTitle": "Projects -> All Projects should able Delete Stack and Click No Btutton",
              "timedOut": false,
              "duration": 10011,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await projects.Projects_ProjectDetail_DeleteStack();\nawait projects.Projects_NoBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"makeStyles-root-1\"])\nWait timed out after 10010ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"makeStyles-root-1\"])\nWait timed out after 10010ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "b8d8e9dc-fec5-453b-b1de-25efd3fdc1ba",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Delete Stack in Project Detail",
              "fullTitle": "Projects -> All Projects should able Delete Stack in Project Detail",
              "timedOut": false,
              "duration": 10177,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await projects.Projects_ProjectDetail_DeleteStack();\nawait projects.Projects_ProjectDetail_YesBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Tech Stack is deleted successfully.');\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"makeStyles-root-1\"])\nWait timed out after 10176ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"makeStyles-root-1\"])\nWait timed out after 10176ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "4e849f6f-2fac-4a30-8962-6d465bb944b8",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Check Filter Btn in Timeline",
              "fullTitle": "Projects -> All Projects should able to Check Filter Btn in Timeline",
              "timedOut": false,
              "duration": 5833,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectDetail_TimelineTab();\nawait projects.Projects_ProjectDetail_TimelineStartDate('28-11-2023');\nawait projects.Projects_ProjectDetail_TimelineEndDate('28-12-2024');\nawait projects.Projects_ProjectDetail_ApplyFilterBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Filtered successfully.');\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at projects.ProjectDetail_URLAssertion (test/support/pages/projects/allprojects.js:657:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/6-Projects/spec-1-allprojects.js:597:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "7c53334b-6ef1-412b-ac93-264042627e7e",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Clear Button in Project Timeline",
              "fullTitle": "Projects -> All Projects should able Clear Button in Project Timeline",
              "timedOut": false,
              "duration": 5988,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectDetail_TimelineTab();\nawait projects.Projects_ProjectDetail_TimelineStartDate('28-11-2023');\nawait projects.Projects_ProjectDetail_TimelineEndDate('28-12-2024');\nawait projects.Projects_ProjectDetail_ApplyFilterBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Filtered successfully.');\nawait projects.Projects_ProjectDetail_Timeline_ClearBtn();\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at projects.ProjectDetail_URLAssertion (test/support/pages/projects/allprojects.js:657:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/6-Projects/spec-1-allprojects.js:613:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "5f09f6b4-d65f-4aab-8075-7137e672afa5",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Verify Status in Timeline",
              "fullTitle": "Projects -> All Projects should able Verify Status in Timeline",
              "timedOut": false,
              "duration": 9229,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectDetail_TimelineTab();\nawait utilFun.wait(2000)\nconst name = await projects.Projects_ProjectDetail_Timeline_StatusAssert();\nassert.ok(name.includes('Removed'), `Expected text not found.`);\nconst names = await projects.Projects_ProjectDetail_Timeline_StatusAssert();\nassert.ok(names.includes('Muhammad Zeeshan Ullah'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at projects.ProjectDetail_URLAssertion (test/support/pages/projects/allprojects.js:657:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/6-Projects/spec-1-allprojects.js:630:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "8d7ebfb7-7c3f-44d7-9d26-af643056bf91",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click History Tab",
              "fullTitle": "Projects -> All Projects should able to Click History Tab",
              "timedOut": false,
              "duration": 13067,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.wait(3000);\nawait projects.Projects_ProjectDetail_HistoryBtn();",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, button:nth-child(3) b:nth-child(1))\nWait timed out after 10054ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, button:nth-child(3) b:nth-child(1))\nWait timed out after 10054ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "73e58ab4-3541-41dd-8549-03fa89f7128e",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify notification History Tab",
              "fullTitle": "Projects -> All Projects should able to Verify notification History Tab",
              "timedOut": false,
              "duration": 30,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const name = await projects.Projects_ProjectDetail_History_Assert();\nassert.ok(\n  name.includes('bilal.rafaqat@invozone.dev has updated the Project Tech Stack by removing the technology named Admin.'),\n  `Expected text not found.`,\n);\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/6-Projects/spec-1-allprojects.js:644:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "923984ee-7ed5-4cd2-b4be-26427521aabb",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Division in Hide Columns ",
              "fullTitle": "Projects -> All Projects should able to Click Division in Hide Columns ",
              "timedOut": false,
              "duration": 8622,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await login.switchWindow(0);\nawait utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Division');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 18, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Division');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "518a69a5-a32a-46d4-b15b-39e62039e3fe",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Tech Stack in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Tech Stack in Hide Columns",
              "timedOut": false,
              "duration": 6193,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Tech Stack');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 17, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Tech Stack');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "73994648-ba04-4364-beb1-192a0859081f",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Country in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Country in Hide Columns",
              "timedOut": false,
              "duration": 6242,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Country');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 16, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Country');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "5f77908d-045c-4bf8-b427-819197dc14c2",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Status in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Status in Hide Columns",
              "timedOut": false,
              "duration": 6128,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Status');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 15, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Status');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "c70bd0c7-2e7e-464d-bbec-e1760a412687",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Project Manager in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Project Manager in Hide Columns",
              "timedOut": false,
              "duration": 5871,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Project Manager');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 14, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Project Manager');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "fcfe3494-32d9-430b-ab84-66933b156492",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Contract in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Contract in Hide Columns",
              "timedOut": false,
              "duration": 5761,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Contract');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 13, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Contract');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "b70dff63-2066-42ff-9fec-bbf0b18ed64c",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click PM Introduced in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click PM Introduced in Hide Columns",
              "timedOut": false,
              "duration": 5827,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('PM Introduced');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 12, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('PM Introduced');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "2ffca3d0-357c-4815-a9a8-fd557d6b8176",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Dev Introduced in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Dev Introduced in Hide Columns",
              "timedOut": false,
              "duration": 5796,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Dev Introduced');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 11, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Dev Introduced');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "b2a873a6-9ac6-4a14-b572-a1347ea4e441",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Engagement in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Engagement in Hide Columns",
              "timedOut": false,
              "duration": 5934,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Engagement');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 10, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Engagement');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "39dec60d-d7c2-49d9-9a00-46e93d0ebb01",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Billing Cycle in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Billing Cycle in Hide Columns",
              "timedOut": false,
              "duration": 5637,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Billing Cycle');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 9, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Billing Cycle');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "f2edc828-756f-4368-8163-143c27f02e2b",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click BD Member in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click BD Member in Hide Columns",
              "timedOut": false,
              "duration": 6068,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('BD Member');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 8, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('BD Member');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "ca2c7d4d-29eb-4972-9c74-9d0910a9c5dd",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click BD Team in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click BD Team in Hide Columns",
              "timedOut": false,
              "duration": 5630,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('BD Team');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 7, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('BD Team');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "9cc67193-109e-4ee7-a4ab-1c6da3b8838f",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Communication in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Communication in Hide Columns",
              "timedOut": false,
              "duration": 5527,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Communication');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 6, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Communication');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "78f3623b-cf58-4bfe-b30f-863ef06a2fd3",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Billing Profile in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Billing Profile in Hide Columns",
              "timedOut": false,
              "duration": 5697,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Billing Profile');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 5, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Billing Profile');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "8983a954-d7a2-47b4-850c-8d23eeec2883",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Billing Channel in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Billing Channel in Hide Columns",
              "timedOut": false,
              "duration": 5482,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Billing Channel');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 4, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Billing Channel');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "7341c022-40f4-49dc-8130-db7a4cc63c14",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Engineers in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Engineers in Hide Columns",
              "timedOut": false,
              "duration": 5457,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Engineers');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 3, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Engineers');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "68005365-a818-4b78-bb6b-c619f88b1c9d",
              "parentUUID": "8e24168f-d6c3-49e6-a269-bc96206013fe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8dd05cee-ac11-4be3-b46a-38e0b8f524b1",
            "eab8e746-ad59-4947-af2f-841d435cbf34",
            "1b50e998-c312-4bf3-8a92-1621dda0174d",
            "c44fd366-4e51-498e-824b-f31881db4a9f",
            "b26d2a51-248e-4900-98f1-c1909a6a2bd8",
            "aacb4a7d-7f81-4bde-92ef-258f41afe457",
            "45d1f94f-1a1a-424c-9cf3-da3fa2b6b8cd",
            "de4ca076-0de8-42a9-b33f-4ac09d2ec8dc",
            "b08c1bb6-5c87-4ceb-81a5-dac5a0b41c69",
            "54a88b14-39bc-4576-86ba-b841de2ae464",
            "6a0bd8bb-e386-4f9b-a56a-2cf39d494c53",
            "bdf7c249-59cc-47e3-9ed1-cfa76f723c57",
            "2e36442c-d137-483e-9266-e3e4a5207180",
            "1d746ddc-6f37-42c1-aa21-fd32b2c96dba",
            "5cd53529-9485-4fb8-8ebe-847212c31db9",
            "9b8c3869-6be0-454c-9c89-e5c9c305c0eb",
            "114c8b68-da08-4498-88b8-190fb22dd496",
            "c291169f-a024-42fe-9173-d3f539645c42",
            "63d2ebe5-7e68-450b-b775-3d9c7285d1e5",
            "cfa3ee3c-18c6-47ca-88db-0660e87b62ea",
            "40d69d63-f872-48ec-99e6-6d91436097f2",
            "8c675a89-e77a-4ac8-8cc1-4729aaa805fd",
            "22601d1c-dbcb-4410-8e39-c21b887c6495",
            "f10b3afb-9ca9-419f-8e84-337565887cf2",
            "e366447d-edc8-400c-a047-c79c9d41ff9d",
            "a3261260-f667-4770-b286-f5e3e1d01686",
            "1fe54167-7c6a-4f36-b617-3c58059a04a6",
            "fe1ff7a6-197f-4d0d-b979-ca67aa369a6a",
            "eca7506e-884b-4447-9907-c62322a35593",
            "b7e3d13c-b753-455c-9c7a-e2f4ea5e3b3d",
            "a5d461cf-1aac-4459-99a6-e611ca2e12f3",
            "21f0bee2-a589-4077-bcce-92403a8ae646",
            "ab1d3c73-ed35-439c-974a-4d653cb67469",
            "cd078bdc-ff68-4062-919a-cc0ae78ec136",
            "d67287e9-64bd-40f0-9fe2-83d828d8f367",
            "f2e149b4-3a77-461e-affc-e191e9da835e",
            "dac452ae-146c-4d48-88b0-29896b2b565f",
            "04ed64ea-dd7b-4eb4-9f26-6a34c493c38e",
            "b2fd7f7e-14b2-4ad3-bf9f-995587ae1d27",
            "51a5cd0e-0ff4-4e64-985b-7f46795e1815",
            "b9b56a64-8b1e-43dd-bbc9-93d2be1f9063",
            "1637f257-953d-406d-9a09-daa33272e523",
            "85ca80f5-0b66-4fa1-ab70-0ac1d3369c62",
            "c7ecdff9-c9d0-489b-b9d5-c52291414e95",
            "a7db4784-7b05-464b-b3b9-8f7d95d50a72",
            "518a69a5-a32a-46d4-b15b-39e62039e3fe",
            "73994648-ba04-4364-beb1-192a0859081f",
            "5f77908d-045c-4bf8-b427-819197dc14c2",
            "c70bd0c7-2e7e-464d-bbec-e1760a412687",
            "fcfe3494-32d9-430b-ab84-66933b156492",
            "b70dff63-2066-42ff-9fec-bbf0b18ed64c",
            "2ffca3d0-357c-4815-a9a8-fd557d6b8176",
            "b2a873a6-9ac6-4a14-b572-a1347ea4e441",
            "39dec60d-d7c2-49d9-9a00-46e93d0ebb01",
            "f2edc828-756f-4368-8163-143c27f02e2b",
            "ca2c7d4d-29eb-4972-9c74-9d0910a9c5dd",
            "9cc67193-109e-4ee7-a4ab-1c6da3b8838f",
            "78f3623b-cf58-4bfe-b30f-863ef06a2fd3",
            "8983a954-d7a2-47b4-850c-8d23eeec2883",
            "7341c022-40f4-49dc-8130-db7a4cc63c14",
            "68005365-a818-4b78-bb6b-c619f88b1c9d"
          ],
          "failures": [
            "c8580431-a47f-4260-bb46-fe5dbe5b7539",
            "5f9783f2-55ed-4921-a340-00af02cf02c0",
            "4ff536cb-df02-4863-818f-6a6aff0d08ed",
            "3c702043-d318-4261-9e2e-7e84b7f70b32",
            "13e6fa02-ad61-4e04-ae39-49c4b8b194f2",
            "60587e2d-2ada-4bbb-82cc-9b89c7becdb0",
            "b8d8e9dc-fec5-453b-b1de-25efd3fdc1ba",
            "4e849f6f-2fac-4a30-8962-6d465bb944b8",
            "7c53334b-6ef1-412b-ac93-264042627e7e",
            "5f09f6b4-d65f-4aab-8075-7137e672afa5",
            "8d7ebfb7-7c3f-44d7-9d26-af643056bf91",
            "73e58ab4-3541-41dd-8549-03fa89f7128e",
            "923984ee-7ed5-4cd2-b4be-26427521aabb"
          ],
          "pending": [
            "5e7cc5b0-a11a-4a0e-bbeb-95ca16de7b53"
          ],
          "skipped": [],
          "duration": 724650,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "d99555a1-9bae-4be5-936f-cf600acbff4c",
          "title": "Projects -> OnBoarding",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/6-Projects/spec-2-actualProejct.js",
          "file": "/test/e2e/6-Projects/spec-2-actualProejct.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to check Actual Prject Form is Showing by clicking Add btn  ",
              "fullTitle": "Projects -> OnBoarding should able to check Actual Prject Form is Showing by clicking Add btn  ",
              "timedOut": false,
              "duration": 3821,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'BD F' WHERE id = 9429;`,\n  `UPDATE employees SET \"workAs\" = 'dev' WHERE id = 9429;`,\n  `UPDATE employees SET \"departmentId\" = 3 WHERE id = 9429;`,\n  `UPDATE employees SET \"designationId\" = 13 WHERE id = 9429;`,\n  `UPDATE employees SET \"subDepartmentId\" = 13 WHERE id = 9429;`,\n  `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n  'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n  'UPDATE departments SET \"hodId\" = NULL WHERE id = 3;',\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProject();\nawait projectOnBoarding.checkActualProjectModel();",
              "err": {},
              "uuid": "a1c34039-eeb0-4707-ba75-cb295bb9d098",
              "parentUUID": "d99555a1-9bae-4be5-936f-cf600acbff4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check Cross Button ",
              "fullTitle": "Projects -> OnBoarding should able to check Cross Button ",
              "timedOut": false,
              "duration": 3958,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProject();\nawait projectOnBoarding.checkActualProjectModel();\nawait projectOnBoarding.ProjectOnBoarding_CrossBtn();\nawait projectOnBoarding.checkActualProjectModelNotVisible();",
              "err": {},
              "uuid": "29e282a8-7eb4-4cc9-8e7f-60141b5cfb42",
              "parentUUID": "d99555a1-9bae-4be5-936f-cf600acbff4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Add Actual Project  ",
              "fullTitle": "Projects -> OnBoarding should able Add Actual Project  ",
              "timedOut": false,
              "duration": 52634,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM projects WHERE \"name\" = 'InvoChain';`);\nlet portfolioId = await utilFun.getFromDatabase(`SELECT id FROM project_portfolios WHERE \"name\" = 'InvoChain';`);\nif (resourceId.rowCount !== 0) {\n  let query = [\n    `DELETE FROM \"project_portfolio_skills\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n    `DELETE FROM \"project_timelines\" WHERE \"projectId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"project_portfolio_employees\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n    `DELETE FROM \"project_portfolios\" WHERE \"projectId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"projects\" WHERE \"id\" = ${resourceId.rows[0].id};`,\n  ];\n  await utilFun.udpateDatabase(query);\n}\nlet query = [`DELETE FROM \"project_onboardings\" WHERE \"name\" = 'InvoChain'`,`DELETE FROM \"project_onboardings\" WHERE \"name\" = 'InvoBlog'`, `DELETE FROM \"project_onboardings\" WHERE \"name\" = 'InvoBlogUpdated'`,];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait utilFun.wait(3000);\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProject();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectName('InvoBlog');\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectReferenceNo('12344321');\nawait projectOnBoarding.OnBoarding_AddActualProject_StartDate('02-01-2024');\nawait projectOnBoarding.OnBoarding_AddActualProject_TentavieDuration('2 year');\nawait projectOnBoarding.selectValue('Select Division', 'Dtest');\nawait projectOnBoarding.selectValue('Select Source', 'International Event');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactName('Alia');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactPersonEmail('abc@info.com');\nawait projectOnBoarding.clickNextBtnPage1();\nawait projectOnBoarding.selectField('BD Member *\\nSelect resource', 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField('Actual Resource(s)\\nSelect resources', 'Abdul Wakeel');\nawait projectOnBoarding.selectField('Resource Name (Shared with Client)', 'Tariq');\nawait projectOnBoarding.selectField('Tech Stack *\\nSelect Tech Stack', 'Admin');\nawait projectOnBoarding.selectField('Communication Mode\\nSelect mode', 'Email');\nawait projectOnBoarding.selectField('Project Manager\\nSelect Project Manager', 'amna hussain');\nawait projectOnBoarding.selectField('Service Mode*\\nSelect service mode', 'Yet To Be Decided');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.selectField('Company Name', 'InvoZone USA');\nawait projectOnBoarding.selectField('Company Address', 'Lahore');\nawait projectOnBoarding.selectField('Client Side Billing Representative Name*', 'Abdul Wakeel');\nawait projectOnBoarding.selectField('Client Side Billing Representative Email', '123@invozone.com');\nawait projectOnBoarding.selectField('Billing Cycle*\\nSelect billing cycle', 'Monthly');\nawait projectOnBoarding.selectField('Billing Start Date *', '01-01-2024');\nawait projectOnBoarding.selectField('Currency *\\nUnited States Dollar', 'United States Dollar');\nawait projectOnBoarding.selectField('Billing Rates/ Total Project Cost*', '20024');\nawait projectOnBoarding.selectField('Billing Platform *', 'Cash');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn3();\nawait projectOnBoarding.selectField('Reference thread\\nNo', 'No');\nawait projectOnBoarding.selectField('Are we introduced as Agency or Individual?*\\nSelect introduction', 'Individual to Client');\nawait projectOnBoarding.selectField('Rate Concluded*', '15');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration', 'No Trial');\nawait projectOnBoarding.selectField(\n  'Any Future Upsells which client gave a heads up for near future?*\\n' + 'Select option',\n  'Nothing at the moment',\n);\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_AddActualProject_AddRequest();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project onboarding request is completed successfuly!');",
              "err": {},
              "uuid": "50442ef9-4288-4e4e-98a6-4ffe5d1bede7",
              "parentUUID": "d99555a1-9bae-4be5-936f-cf600acbff4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Actual project is created or not",
              "fullTitle": "Projects -> OnBoarding should check if Actual project is created or not",
              "timedOut": false,
              "duration": 4495,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoBlog');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoBlog');",
              "err": {},
              "uuid": "924f5f46-d585-44f5-9caa-7a964168a49b",
              "parentUUID": "d99555a1-9bae-4be5-936f-cf600acbff4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Actual project",
              "fullTitle": "Projects -> OnBoarding should able to Edit Actual project",
              "timedOut": false,
              "duration": 63427,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.OnBoarding_AddActualProject_EditHover();\nawait projectOnBoarding.OnBoarding_AddActualProject_Edit();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectName('Updated');\nawait utilFun.wait(1000);\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectReferenceNo('12344321');\nawait projectOnBoarding.OnBoarding_AddActualProject_StartDate('03-01-2024');\nawait projectOnBoarding.OnBoarding_AddActualProject_TentavieDuration('3 year');\nawait projectOnBoarding.selectValue('Select Division', 'Atest');\nawait projectOnBoarding.selectValue('Select Source', 'Upwork');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactName('Ali');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactPersonEmail('abcd@info.com');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn1();\nawait projectOnBoarding.selectField('BD Member *\\nSelect resource', 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField('Actual Resource(s)\\nAbdul Wakeel', 'Abid Ali');\nawait projectOnBoarding.selectField('Resource Name (Shared with Client)', 'Ahmed');\nawait projectOnBoarding.selectField('Tech Stack *\\nAdmin', 'BA');\nawait projectOnBoarding.selectField('Communication Mode\\nEmail', 'InvoChat');\nawait projectOnBoarding.selectField('Project Manager\\nSelect Project Manager', 'amna hussain');\nawait projectOnBoarding.selectField('Service Mode*\\nYet To Be Decided', 'Augmentation / Dedicated Resource');\nawait projectOnBoarding.selectField('Augmentation*\\nSelect augmentation', 'Monthly');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.selectField('Company Name', 'InvoZone PAK');\nawait projectOnBoarding.selectField('Company Address', 'Faisalabad');\nawait projectOnBoarding.selectField('Client Side Billing Representative Name*', 'Uzair Arbab');\nawait projectOnBoarding.selectField('Client Side Billing Representative Email', '1234@invozone.com');\nawait projectOnBoarding.selectField('Billing Cycle*\\nSelect billing cycle', 'Weekly');\nawait projectOnBoarding.selectField('Billing Start Date *', '02-01-2024');\nawait projectOnBoarding.selectField('Currency *\\nUnited States Dollar', 'Pounds');\nawait projectOnBoarding.selectField('Billing Rates/ Total Project Cost*', '20025');\nawait projectOnBoarding.selectField('Billing Platform *', 'Check');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn3();\nawait projectOnBoarding.selectField('Reference thread\\nNo', 'Yes');\nawait projectOnBoarding.selectField('BA Names - Created/ Approved the estimation Doc *\\nSelect option', 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField(\"PM's Names - Created/ Approved the estimation Doc*\\nSelect option\", 'Muhammad Bilal Rafaqat');\nawait projectOnBoarding.selectField('Reference Internal Thread Link*', 'www.invo-zone.com');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration', 'Free Trial');\nawait projectOnBoarding.selectField('Trial Duration*', '2 Weeks');\nawait projectOnBoarding.selectField('Are we introduced as Agency or Individual?*\\nSelect introduction', 'Individual to Client');\nawait projectOnBoarding.selectField('Rate Concluded*', '15');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration', 'No Trial');\nawait projectOnBoarding.selectField(\n  'Any Future Upsells which client gave a heads up for near future?*\\n' + 'Select option',\n  'Nothing at the moment',\n);\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_AddActualProject_AddRequest();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project is updated Successfully!');",
              "err": {},
              "uuid": "8a5c8725-385e-48d0-be46-9417e2fdcaa9",
              "parentUUID": "d99555a1-9bae-4be5-936f-cf600acbff4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if actual project is updated or not",
              "fullTitle": "Projects -> OnBoarding should check if actual project is updated or not",
              "timedOut": false,
              "duration": 4686,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoBlogUpdated');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoBlogUpdated');",
              "err": {},
              "uuid": "bdad7c5c-c011-4a26-abee-98d16e690cc1",
              "parentUUID": "d99555a1-9bae-4be5-936f-cf600acbff4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete Project",
              "fullTitle": "Projects -> OnBoarding should able to Delete Project",
              "timedOut": false,
              "duration": 12334,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.filterField('Search by Project', 'InvoBlogUpdated');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoBlogUpdated');\nawait projectOnBoarding.OnBoarding_AddActualProject_DeleteBtn();\nawait projectOnBoarding.OnBoarding_AddActualProject_Delete_YesBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project is archived successfully.');",
              "err": {},
              "uuid": "4c9d2ecb-c4d5-4cf6-886e-ad18d4622c21",
              "parentUUID": "d99555a1-9bae-4be5-936f-cf600acbff4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if deleted project is showing in Archived Project",
              "fullTitle": "Projects -> OnBoarding should check if deleted project is showing in Archived Project",
              "timedOut": false,
              "duration": 5928,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickArchiveBtn();\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoBlogUpdated');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoBlogUpdated');",
              "err": {},
              "uuid": "29327f71-203f-4bb2-b350-0d1579719746",
              "parentUUID": "d99555a1-9bae-4be5-936f-cf600acbff4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Add Actual Project  ",
              "fullTitle": "Projects -> OnBoarding should able Add Actual Project  ",
              "timedOut": false,
              "duration": 52639,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [`DELETE FROM \"project_onboardings\" WHERE \"name\" = 'InvoChain'`];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait utilFun.wait(3000);\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProject();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectName('InvoChain');\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectReferenceNo('12344321');\nawait projectOnBoarding.OnBoarding_AddActualProject_StartDate('02-01-2024');\nawait projectOnBoarding.OnBoarding_AddActualProject_TentavieDuration('2 year');\nawait projectOnBoarding.selectValue('Select Division', 'Dtest');\nawait projectOnBoarding.selectValue('Select Source', 'International Event');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactName('Alia');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactPersonEmail('abc@info.com');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn1();\nawait projectOnBoarding.selectField('BD Member *\\nSelect resource', 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField('Actual Resource(s)\\nSelect resources', 'Abdul Wakeel');\nawait projectOnBoarding.selectField('Resource Name (Shared with Client)', 'Tariq');\nawait projectOnBoarding.selectField('Tech Stack *\\nSelect Tech Stack', 'Admin');\nawait projectOnBoarding.selectField('Communication Mode\\nSelect mode', 'Email');\nawait projectOnBoarding.selectField('Project Manager\\nSelect Project Manager', 'amna hussain');\nawait projectOnBoarding.selectField('Service Mode*\\nSelect service mode', 'Yet To Be Decided');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.selectField('Company Name', 'InvoZone USA');\nawait projectOnBoarding.selectField('Company Address', 'Lahore');\nawait projectOnBoarding.selectField('Client Side Billing Representative Name*', 'Abdul Wakeel');\nawait projectOnBoarding.selectField('Client Side Billing Representative Email', '123@invozone.com');\nawait projectOnBoarding.selectField('Billing Cycle*\\nSelect billing cycle', 'Monthly');\nawait projectOnBoarding.selectField('Billing Start Date *', '01-01-2024');\nawait projectOnBoarding.selectField('Currency *\\nUnited States Dollar', 'United States Dollar');\nawait projectOnBoarding.selectField('Billing Rates/ Total Project Cost*', '20024');\nawait projectOnBoarding.selectField('Billing Platform *', 'Cash');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn3();\nawait projectOnBoarding.selectField('Reference thread\\nNo', 'No');\nawait projectOnBoarding.selectField('Are we introduced as Agency or Individual?*\\nSelect introduction', 'Individual to Client');\nawait projectOnBoarding.selectField('Rate Concluded*', '15');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration', 'No Trial');\nawait projectOnBoarding.selectField(\n  'Any Future Upsells which client gave a heads up for near future?*\\n' + 'Select option',\n  'Nothing at the moment',\n);\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_AddActualProject_AddRequest();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project onboarding request is completed successfuly!');",
              "err": {},
              "uuid": "63e7491f-d738-4843-a6e9-920422a67859",
              "parentUUID": "d99555a1-9bae-4be5-936f-cf600acbff4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Actual project is created or not",
              "fullTitle": "Projects -> OnBoarding should check if Actual project is created or not",
              "timedOut": false,
              "duration": 4413,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoChain');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoChain');",
              "err": {},
              "uuid": "c16257a8-64ed-4248-8af3-8a9cb71d5fb9",
              "parentUUID": "d99555a1-9bae-4be5-936f-cf600acbff4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check OnBoard Icon is Clickable",
              "fullTitle": "Projects -> OnBoarding should able to check OnBoard Icon is Clickable",
              "timedOut": false,
              "duration": 5944,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = ['UPDATE departments SET \"hodId\" = 9429 WHERE id = 3;'];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoChain');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoChain');\nawait projectOnBoarding.OnBoarding_AddActualProject_OnBoardIcon();\nawait projectOnBoarding.checkActualProjectModel();",
              "err": {},
              "uuid": "35ea80ee-254f-439c-9291-16c4b5066836",
              "parentUUID": "d99555a1-9bae-4be5-936f-cf600acbff4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check Cancel Btn is Clickable ",
              "fullTitle": "Projects -> OnBoarding should able to check Cancel Btn is Clickable ",
              "timedOut": false,
              "duration": 9550,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoChain');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoChain');\nawait projectOnBoarding.OnBoarding_AddActualProject_OnBoardIcon();\nawait projectOnBoarding.checkActualProjectModel();\nawait projectOnBoarding.OnBoarding_AddActualProject_CancelBtn();\nawait projectOnBoarding.checkActualProjectModelNotVisible();",
              "err": {
                "message": "Error: Model is visible -> error message =stale element reference: stale element not found\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "Error: Model is visible -> error message =stale element reference: stale element not found\n  (Session info: headless chrome=119.0.6045.159)\n    at projectOnBoarding.checkActualProjectModelNotVisible (test/support/pages/projects/onboarding.js:247:19)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/6-Projects/spec-2-actualProejct.js:264:5)",
                "diff": null
              },
              "uuid": "1a29fe41-480c-4535-a383-f69f74190bfb",
              "parentUUID": "d99555a1-9bae-4be5-936f-cf600acbff4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to onboard project",
              "fullTitle": "Projects -> OnBoarding should able to onboard project",
              "timedOut": false,
              "duration": 11404,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoChain');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoChain');\nawait projectOnBoarding.OnBoarding_AddActualProject_OnBoardIcon();\nawait projectOnBoarding.OnBoarding_AddActualProject_OnBoardBtn();\nconst alert = await projects.checkAlert();\nutilFun.assertEql(alert, 'Project is onboarded successfully.');",
              "err": {},
              "uuid": "894757f3-c134-447a-aba4-2421f71f215b",
              "parentUUID": "d99555a1-9bae-4be5-936f-cf600acbff4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify if Project is added",
              "fullTitle": "Projects -> OnBoarding should able to Verify if Project is added",
              "timedOut": false,
              "duration": 5822,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'InvoChain');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('InvoChain'), `Expected text not found.`);",
              "err": {},
              "uuid": "05013869-7a30-462e-9ee1-23a4e61936cb",
              "parentUUID": "d99555a1-9bae-4be5-936f-cf600acbff4c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a1c34039-eeb0-4707-ba75-cb295bb9d098",
            "29e282a8-7eb4-4cc9-8e7f-60141b5cfb42",
            "50442ef9-4288-4e4e-98a6-4ffe5d1bede7",
            "924f5f46-d585-44f5-9caa-7a964168a49b",
            "8a5c8725-385e-48d0-be46-9417e2fdcaa9",
            "bdad7c5c-c011-4a26-abee-98d16e690cc1",
            "4c9d2ecb-c4d5-4cf6-886e-ad18d4622c21",
            "29327f71-203f-4bb2-b350-0d1579719746",
            "63e7491f-d738-4843-a6e9-920422a67859",
            "c16257a8-64ed-4248-8af3-8a9cb71d5fb9",
            "35ea80ee-254f-439c-9291-16c4b5066836",
            "894757f3-c134-447a-aba4-2421f71f215b",
            "05013869-7a30-462e-9ee1-23a4e61936cb"
          ],
          "failures": [
            "1a29fe41-480c-4535-a383-f69f74190bfb"
          ],
          "pending": [],
          "skipped": [],
          "duration": 241055,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
          "title": "Per-Sale Project Onboarding",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/6-Projects/spec-3-presale.js",
          "file": "/test/e2e/6-Projects/spec-3-presale.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to Add Pre-Sale project onboarding request",
              "fullTitle": "Per-Sale Project Onboarding should able to Add Pre-Sale project onboarding request",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "dff8ac3e-fda3-4211-8c42-764302fcb401",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if pre-sale project is created or not",
              "fullTitle": "Per-Sale Project Onboarding should check if pre-sale project is created or not",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "22c06271-378b-4fcf-8122-868963ac59af",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shold able to archive project",
              "fullTitle": "Per-Sale Project Onboarding shold able to archive project",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "ce4d8ca6-f1f1-4531-b147-3adff9829bd4",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if project is showing in Archived Project",
              "fullTitle": "Per-Sale Project Onboarding should check if project is showing in Archived Project",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "043dddfc-eab4-4dd5-bebb-eff83780cb5e",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add Pre-Sale project onboarding request",
              "fullTitle": "Per-Sale Project Onboarding should able to Add Pre-Sale project onboarding request",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "7c7bbd07-af06-43e8-997d-774974d0aee3",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if pre-sale project is created or not",
              "fullTitle": "Per-Sale Project Onboarding should check if pre-sale project is created or not",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "465e08c3-a7d3-4c10-ab79-77dad8de70e0",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit pre-sale project",
              "fullTitle": "Per-Sale Project Onboarding should able to edit pre-sale project",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "5d4252b6-a523-4420-bbb1-e72dfa232072",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if pre-sale project is updated or not",
              "fullTitle": "Per-Sale Project Onboarding should check if pre-sale project is updated or not",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "373ec743-8cae-4917-a894-cbf34a2a3b3d",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to add billing details by clicking manage channel button",
              "fullTitle": "Per-Sale Project Onboarding should able to add billing details by clicking manage channel button",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "18ffdca5-6d98-470d-a4e2-a765f4c7af97",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create a channel",
              "fullTitle": "Per-Sale Project Onboarding should able to create a channel",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "a23abbdb-a09d-4ae7-97b3-ded8edb49454",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shold check if project is showing in mark as channel created",
              "fullTitle": "Per-Sale Project Onboarding shold check if project is showing in mark as channel created",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "7b0d3a34-e393-4390-a3b3-b9bbd1fb01c2",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should should able to onboard project",
              "fullTitle": "Per-Sale Project Onboarding should should able to onboard project",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8dc2afb8-b689-42b2-a67d-4c716eb4f4dc",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check is pre-sale project is showing in all Projects",
              "fullTitle": "Per-Sale Project Onboarding should check is pre-sale project is showing in all Projects",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "bd44cb21-4ea9-4e90-a052-8ee3110ca76a",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide submitted at column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide submitted at column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "93b4a49f-e13c-4621-9753-17922989ed08",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide type column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide type column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "d12024ea-e0e0-4813-b72e-4f91f58420bc",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Lead Reference column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Lead Reference column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8f72d0cd-6397-4a6b-bbaf-989cadf2332a",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Reason for Pre-sale column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Reason for Pre-sale column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "32ee7b02-d356-4e0e-8596-de07bd7e501c",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Division column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Division column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "2d3ad148-bee2-49ca-ab17-f8543d6bb79c",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Source column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Source column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "cb404d50-446b-47e1-95ae-33340ecd3eda",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Profile Name column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Profile Name column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "9df52b8e-e072-4b17-89f0-22b6ba741c00",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Lead Upwork Reference Link column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Lead Upwork Reference Link column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "fef64288-0429-4954-8cb4-3a4317302185",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Offer Received on Upwork? column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Offer Received on Upwork? column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "7dca3117-de6f-4711-a85c-ba263c35ad43",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Offer Accepted on Upwork? column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Offer Accepted on Upwork? column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "d91fd9b3-60c8-4eb0-8ce2-f0b79d7ec068",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Tech Stack column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Tech Stack column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "167319cb-f474-4017-91f9-04dc22406146",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Client Side Contact Person Name(s) column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Client Side Contact Person Name(s) column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "c0997142-6b85-4ad2-a119-dbe3471534cb",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Client Side Point of Contact Email(s) column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Client Side Point of Contact Email(s) column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "5117e065-1ee8-4775-b9a4-1fa0aeb8801e",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Tentative Duration column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Tentative Duration column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "37b8ebc5-d39e-4b22-98c8-2b098d8d4f18",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Start Date column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Start Date column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "11a0b698-4f4b-4897-bde6-55f0e58436c0",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide BD Member column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide BD Member column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "c8392b5b-9ace-4788-b42d-21e01ad9873a",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Service Mode column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Service Mode column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "72762b6d-c08d-4059-81d8-7347b1cd1447",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Trial Period column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Trial Period column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "138cf623-b3d0-496d-9797-18d8c2384d42",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Resource Name (Shared with Client) column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Resource Name (Shared with Client) column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "38ee35a0-852a-4efa-ad22-69fd73bb2908",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Actual Resource(s) column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Actual Resource(s) column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "2e1777b8-7ced-4cd3-a25c-f7f67b8dca6a",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Communication Mode column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Communication Mode column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "144ed5b1-01ba-49c4-8dfe-64002f16312c",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Company Name column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Company Name column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "61660d2b-6983-42b0-94a3-4fa47025d148",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Company Address column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Company Address column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "becfaf93-426f-4ded-a259-fef55056c87f",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Client Side Billing Representative Name column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Client Side Billing Representative Name column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "28d1e073-c451-4cae-8523-57a2bcd5f5b7",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Client Side Billing Representative Email column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Client Side Billing Representative Email column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "7649d538-c262-428a-bb90-b7318fe81c38",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Billing Cycle column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Billing Cycle column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "64738c71-bf79-4ee7-a014-519d52acb47e",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Billing Start Date column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Billing Start Date column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "27382c8b-3c4d-4b7d-80ec-e9163f280c1e",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Billing Rates/ Total Project Cost column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Billing Rates/ Total Project Cost column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "c60a331f-3e2d-4f4c-8bdf-fac51d46ff15",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Currency column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Currency column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "41d5367b-1e07-40f3-9ce9-75ebdb83a790",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Reference BO Placement Link column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Reference BO Placement Link column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "4537817b-5a74-4f19-a1b1-d1ebe0052417",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Introduced As column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Introduced As column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "3ce1c0fd-20da-4139-a30a-2c39b358ad79",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Offer Expiry Date column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Offer Expiry Date column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "c58d454c-0211-41d6-b8f4-632fee1e4942",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Business Analyst column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Business Analyst column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "726a68a2-87c6-49c1-b766-9122e203dc6c",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Project Manager column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Project Manager column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "4704064a-bc47-4fb7-959c-cbd28bb19d3e",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Future Upsells column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Future Upsells column",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "12472b3a-95d4-48a4-94d1-b5e9bbf311c1",
              "parentUUID": "7099d422-977c-4b16-aa9a-5d5d6a168caf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "dff8ac3e-fda3-4211-8c42-764302fcb401",
            "22c06271-378b-4fcf-8122-868963ac59af",
            "ce4d8ca6-f1f1-4531-b147-3adff9829bd4",
            "043dddfc-eab4-4dd5-bebb-eff83780cb5e",
            "7c7bbd07-af06-43e8-997d-774974d0aee3",
            "465e08c3-a7d3-4c10-ab79-77dad8de70e0",
            "5d4252b6-a523-4420-bbb1-e72dfa232072",
            "373ec743-8cae-4917-a894-cbf34a2a3b3d",
            "18ffdca5-6d98-470d-a4e2-a765f4c7af97",
            "a23abbdb-a09d-4ae7-97b3-ded8edb49454",
            "7b0d3a34-e393-4390-a3b3-b9bbd1fb01c2",
            "8dc2afb8-b689-42b2-a67d-4c716eb4f4dc",
            "bd44cb21-4ea9-4e90-a052-8ee3110ca76a",
            "93b4a49f-e13c-4621-9753-17922989ed08",
            "d12024ea-e0e0-4813-b72e-4f91f58420bc",
            "8f72d0cd-6397-4a6b-bbaf-989cadf2332a",
            "32ee7b02-d356-4e0e-8596-de07bd7e501c",
            "2d3ad148-bee2-49ca-ab17-f8543d6bb79c",
            "cb404d50-446b-47e1-95ae-33340ecd3eda",
            "9df52b8e-e072-4b17-89f0-22b6ba741c00",
            "fef64288-0429-4954-8cb4-3a4317302185",
            "7dca3117-de6f-4711-a85c-ba263c35ad43",
            "d91fd9b3-60c8-4eb0-8ce2-f0b79d7ec068",
            "167319cb-f474-4017-91f9-04dc22406146",
            "c0997142-6b85-4ad2-a119-dbe3471534cb",
            "5117e065-1ee8-4775-b9a4-1fa0aeb8801e",
            "37b8ebc5-d39e-4b22-98c8-2b098d8d4f18",
            "11a0b698-4f4b-4897-bde6-55f0e58436c0",
            "c8392b5b-9ace-4788-b42d-21e01ad9873a",
            "72762b6d-c08d-4059-81d8-7347b1cd1447",
            "138cf623-b3d0-496d-9797-18d8c2384d42",
            "38ee35a0-852a-4efa-ad22-69fd73bb2908",
            "2e1777b8-7ced-4cd3-a25c-f7f67b8dca6a",
            "144ed5b1-01ba-49c4-8dfe-64002f16312c",
            "61660d2b-6983-42b0-94a3-4fa47025d148",
            "becfaf93-426f-4ded-a259-fef55056c87f",
            "28d1e073-c451-4cae-8523-57a2bcd5f5b7",
            "7649d538-c262-428a-bb90-b7318fe81c38",
            "64738c71-bf79-4ee7-a014-519d52acb47e",
            "27382c8b-3c4d-4b7d-80ec-e9163f280c1e",
            "c60a331f-3e2d-4f4c-8bdf-fac51d46ff15",
            "41d5367b-1e07-40f3-9ce9-75ebdb83a790",
            "4537817b-5a74-4f19-a1b1-d1ebe0052417",
            "3ce1c0fd-20da-4139-a30a-2c39b358ad79",
            "c58d454c-0211-41d6-b8f4-632fee1e4942",
            "726a68a2-87c6-49c1-b766-9122e203dc6c",
            "4704064a-bc47-4fb7-959c-cbd28bb19d3e",
            "12472b3a-95d4-48a4-94d1-b5e9bbf311c1"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 100000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "test/report"
      },
      "version": "6.2.0"
    }
  }
}