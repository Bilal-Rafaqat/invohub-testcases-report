{
  "stats": {
    "suites": 21,
    "tests": 564,
    "passes": 394,
    "pending": 38,
    "failures": 132,
    "start": "2024-03-12T06:23:24.179Z",
    "end": "2024-03-12T07:58:33.399Z",
    "duration": 5709220,
    "testsRegistered": 564,
    "passPercent": 74.90494296577947,
    "pendingPercent": 6.73758865248227,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "17f8e015-d1a1-4998-ac8f-7f294a8cc5f8",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cc0f7edf-5bb5-401a-9b02-83952b6c9f69",
          "title": "Pending Evaluations",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_1_pendings.js",
          "file": "/test/e2e/evaluation/spec_1_pendings.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Pending Evaluations\"",
              "fullTitle": "Pending Evaluations \"before all\" hook in \"Pending Evaluations\"",
              "timedOut": false,
              "duration": 44956,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE departments SET \"hodId\" = 9474 WHERE id = 9;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.login(email, password);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query1 =[\n    `UPDATE employee_evaluations SET \"incrementType\" = 'annual' WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n    `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n    `DELETE FROM employee_evaluations WHERE \"employeeId\" = 9742 AND \"incrementType\" = 'designation';`,\n    ];\n    await utilFun.udpateDatabase(query1);",
              "err": {},
              "uuid": "d0fc61b7-f297-4a7f-be9f-12dd575261bd",
              "parentUUID": "cc0f7edf-5bb5-401a-9b02-83952b6c9f69",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Pending Evaluations\"",
              "fullTitle": "Pending Evaluations \"before each\" hook in \"Pending Evaluations\"",
              "timedOut": false,
              "duration": 3396,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.wait(3000);",
              "err": {},
              "uuid": "61692128-c83c-4cd3-a95f-0e40cb001417",
              "parentUUID": "cc0f7edf-5bb5-401a-9b02-83952b6c9f69",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if pending evaluations are showing",
              "fullTitle": "Pending Evaluations should check if pending evaluations are showing",
              "timedOut": false,
              "duration": 41,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "ba4842ab-9060-4fc5-a567-b37f59019583",
              "parentUUID": "cc0f7edf-5bb5-401a-9b02-83952b6c9f69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Pending Evaluations should able to filter resoures by name",
              "timedOut": false,
              "duration": 2324,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "775462ff-a5d4-431a-9b6e-b7edf8ea385d",
              "parentUUID": "cc0f7edf-5bb5-401a-9b02-83952b6c9f69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Review Type",
              "fullTitle": "Pending Evaluations should able to filter resoures by Review Type",
              "timedOut": false,
              "duration": 1806,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "d536e679-9d0d-475b-861f-c0783b10b9ce",
              "parentUUID": "cc0f7edf-5bb5-401a-9b02-83952b6c9f69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Pending Evaluations should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 1798,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "b3bc8a11-d013-41f3-866d-d46ea53d30da",
              "parentUUID": "cc0f7edf-5bb5-401a-9b02-83952b6c9f69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Pending Evaluations should able to  copy email from options",
              "timedOut": false,
              "duration": 6837,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nawait utilFun.wait(3000);\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "bb8e5d57-207c-4c8f-bcec-d58e53f71fbf",
              "parentUUID": "cc0f7edf-5bb5-401a-9b02-83952b6c9f69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Pending Evaluations should able to Send Email from options",
              "timedOut": false,
              "duration": 14262,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "16f81dd4-ed3b-4616-96ca-61c13e9d18a8",
              "parentUUID": "cc0f7edf-5bb5-401a-9b02-83952b6c9f69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Pending Evaluations should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 7876,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "70df8073-059e-4c57-93e2-e5fc85cb25c2",
              "parentUUID": "cc0f7edf-5bb5-401a-9b02-83952b6c9f69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Pending Evaluations should able to see Email from options",
              "timedOut": false,
              "duration": 6499,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(3000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "ada83dc8-a07e-47d3-810f-f319b5de194e",
              "parentUUID": "cc0f7edf-5bb5-401a-9b02-83952b6c9f69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Pending Evaluations should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 7102,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "b396daea-ae9f-48e8-b7fb-859b0868731d",
              "parentUUID": "cc0f7edf-5bb5-401a-9b02-83952b6c9f69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Pending Evaluations should able to see Resource Details from options",
              "timedOut": false,
              "duration": 4770,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'http://localhost:3000/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "c795669a-dc67-45fd-b731-f485eb2c7d9f",
              "parentUUID": "cc0f7edf-5bb5-401a-9b02-83952b6c9f69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Pending Evaluations should able to see employee history",
              "timedOut": false,
              "duration": 3339,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "53a9956b-e1b8-4c12-bfe2-f318350a7d67",
              "parentUUID": "cc0f7edf-5bb5-401a-9b02-83952b6c9f69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to request a review",
              "fullTitle": "Pending Evaluations should able to request a review",
              "timedOut": false,
              "duration": 7509,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait evaluation.clickReqReviewBtn();\nawait utilFun.wait(1000);\nawait evaluation.clickHod('Muhammad Bilal Rafaqat');\nawait evaluation.clickSendReqBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Request is send successfully.');",
              "err": {},
              "uuid": "7e822688-b664-492f-9fdf-409980f5ed80",
              "parentUUID": "cc0f7edf-5bb5-401a-9b02-83952b6c9f69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to give a review",
              "fullTitle": "Pending Evaluations should able to give a review",
              "timedOut": false,
              "duration": 13580,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait utilFun.wait(1000);\nawait evaluation.clickAddFeedback();\n// await feedbackForm.enterDate('03092023');\nawait feedbackForm.selectFeedbackDuration('6 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.selectRevisedDesignationCategory('Automation');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('testingggg');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "ef31436e-1d58-4fb9-b195-cbd9c0ea3b4b",
              "parentUUID": "cc0f7edf-5bb5-401a-9b02-83952b6c9f69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit review form",
              "fullTitle": "Pending Evaluations should able to edit review form",
              "timedOut": false,
              "duration": 9395,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickEditForm();\nawait utilFun.wait(1000);\n// await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('updated');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "3f513d4c-279e-48ec-84f0-b75999f92a45",
              "parentUUID": "cc0f7edf-5bb5-401a-9b02-83952b6c9f69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to defer review",
              "fullTitle": "Pending Evaluations should able to defer review",
              "timedOut": false,
              "duration": 7076,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickDefer();\nawait evaluation.clickDeferType();\nawait utilFun.wait(1000);\nawait evaluation.selectDeferType('2 Weeks');\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "ee1fcb21-5738-4bb4-9435-090a9d8697fa",
              "parentUUID": "cc0f7edf-5bb5-401a-9b02-83952b6c9f69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to complete review",
              "fullTitle": "Pending Evaluations should able to complete review",
              "timedOut": false,
              "duration": 10116,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickComplete();\n//await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "31dbbbb3-4adb-4dd9-8f07-a6665181fd8d",
              "parentUUID": "cc0f7edf-5bb5-401a-9b02-83952b6c9f69",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ba4842ab-9060-4fc5-a567-b37f59019583",
            "775462ff-a5d4-431a-9b6e-b7edf8ea385d",
            "d536e679-9d0d-475b-861f-c0783b10b9ce",
            "b3bc8a11-d013-41f3-866d-d46ea53d30da",
            "bb8e5d57-207c-4c8f-bcec-d58e53f71fbf",
            "16f81dd4-ed3b-4616-96ca-61c13e9d18a8",
            "70df8073-059e-4c57-93e2-e5fc85cb25c2",
            "ada83dc8-a07e-47d3-810f-f319b5de194e",
            "b396daea-ae9f-48e8-b7fb-859b0868731d",
            "c795669a-dc67-45fd-b731-f485eb2c7d9f",
            "53a9956b-e1b8-4c12-bfe2-f318350a7d67",
            "7e822688-b664-492f-9fdf-409980f5ed80",
            "ef31436e-1d58-4fb9-b195-cbd9c0ea3b4b",
            "3f513d4c-279e-48ec-84f0-b75999f92a45",
            "ee1fcb21-5738-4bb4-9435-090a9d8697fa",
            "31dbbbb3-4adb-4dd9-8f07-a6665181fd8d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 104330,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "829c7d6d-b3d4-4dc6-a04e-75151c8af8c5",
          "title": "Performance Base Evaluations",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_2_performance.js",
          "file": "/test/e2e/evaluation/spec_2_performance.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Performance Base Evaluations\"",
              "fullTitle": "Performance Base Evaluations \"before all\" hook in \"Performance Base Evaluations\"",
              "timedOut": false,
              "duration": 10318,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'performance' WHERE id = 26;`,\n  `UPDATE employees SET \"designation\" = 'Software Engineer' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 138 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "48b4aef0-c5b2-4a48-983f-ef70d1e612e6",
              "parentUUID": "829c7d6d-b3d4-4dc6-a04e-75151c8af8c5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Performance Base Evaluations\"",
              "fullTitle": "Performance Base Evaluations \"before each\" hook in \"Performance Base Evaluations\"",
              "timedOut": false,
              "duration": 4424,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation-performance');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "a51ed539-31b9-4903-b724-b59d4b2c4385",
              "parentUUID": "829c7d6d-b3d4-4dc6-a04e-75151c8af8c5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if performance evaluations are showing",
              "fullTitle": "Performance Base Evaluations should check if performance evaluations are showing",
              "timedOut": false,
              "duration": 40,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "5a0e18d9-4f8a-4246-8f61-0ec2a14c3708",
              "parentUUID": "829c7d6d-b3d4-4dc6-a04e-75151c8af8c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Performance Base Evaluations should able to filter resoures by name",
              "timedOut": false,
              "duration": 1953,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "547adb88-fa12-4f0a-a220-29a7ceadec31",
              "parentUUID": "829c7d6d-b3d4-4dc6-a04e-75151c8af8c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Performance Base Evaluations should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 1550,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "049b7807-093e-4eb1-937a-484f15639327",
              "parentUUID": "829c7d6d-b3d4-4dc6-a04e-75151c8af8c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Performance Base Evaluations should able to  copy email from options",
              "timedOut": false,
              "duration": 3894,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "ddf4a0e8-5399-471d-851c-74a277f74b3f",
              "parentUUID": "829c7d6d-b3d4-4dc6-a04e-75151c8af8c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Performance Base Evaluations should able to Send Email from options",
              "timedOut": false,
              "duration": 7984,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "5493215c-e800-4683-815c-762c565f2315",
              "parentUUID": "829c7d6d-b3d4-4dc6-a04e-75151c8af8c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Performance Base Evaluations should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 8418,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "07ec472a-c5f9-4a0a-8e08-0bf458d63810",
              "parentUUID": "829c7d6d-b3d4-4dc6-a04e-75151c8af8c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Performance Base Evaluations should able to see Email from options",
              "timedOut": false,
              "duration": 7318,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(4000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "4ab3b25a-4f4c-499e-880b-ecf2c7a98b32",
              "parentUUID": "829c7d6d-b3d4-4dc6-a04e-75151c8af8c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Performance Base Evaluations should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 6775,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "5c812b13-7cce-4fe9-8b4a-85d174a3337e",
              "parentUUID": "829c7d6d-b3d4-4dc6-a04e-75151c8af8c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Performance Base Evaluations should able to see Resource Details from options",
              "timedOut": false,
              "duration": 4447,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "ca09bb1d-eb53-4440-84c9-243d38906030",
              "parentUUID": "829c7d6d-b3d4-4dc6-a04e-75151c8af8c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Performance Base Evaluations should able to see employee history",
              "timedOut": false,
              "duration": 3184,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "a2e2e0c0-306a-495b-bb80-3d831b8143e1",
              "parentUUID": "829c7d6d-b3d4-4dc6-a04e-75151c8af8c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to request a review",
              "fullTitle": "Performance Base Evaluations should able to request a review",
              "timedOut": false,
              "duration": 7238,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();4\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait evaluation.clickReqReviewBtn();\nawait utilFun.wait(1000);\nawait evaluation.clickHod('Muhammad Bilal Rafaqat');\nawait evaluation.clickSendReqBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Request is send successfully.');",
              "err": {},
              "uuid": "1b3f6c50-665c-47c4-b704-f5b5e4fa8b5b",
              "parentUUID": "829c7d6d-b3d4-4dc6-a04e-75151c8af8c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to give a review",
              "fullTitle": "Performance Base Evaluations should able to give a review",
              "timedOut": false,
              "duration": 13091,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait utilFun.wait(1000);\nawait evaluation.clickAddFeedback();\nawait feedbackForm.enterDate('03092023');\nawait feedbackForm.selectFeedbackDuration('6 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('testingggg');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "eefcef63-7502-4cad-8273-834af86c6121",
              "parentUUID": "829c7d6d-b3d4-4dc6-a04e-75151c8af8c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit review form",
              "fullTitle": "Performance Base Evaluations should able to edit review form",
              "timedOut": false,
              "duration": 9558,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickEditForm();\nawait utilFun.wait(1000);\nawait feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('updated');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "270adecb-5e67-49f7-bb3a-bdc150f46270",
              "parentUUID": "829c7d6d-b3d4-4dc6-a04e-75151c8af8c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to defer review",
              "fullTitle": "Performance Base Evaluations should able to defer review",
              "timedOut": false,
              "duration": 6789,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickDefer();\nawait evaluation.clickDeferType();\nawait utilFun.wait(1000);\nawait evaluation.selectDeferType('2 Weeks');\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "e13b3084-952f-48c8-82ea-dbad2bd1fac4",
              "parentUUID": "829c7d6d-b3d4-4dc6-a04e-75151c8af8c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to complete review",
              "fullTitle": "Performance Base Evaluations should able to complete review",
              "timedOut": false,
              "duration": 10461,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickComplete();\nawait feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "a98c385a-5a64-4f51-9e83-88c9cf5f4d75",
              "parentUUID": "829c7d6d-b3d4-4dc6-a04e-75151c8af8c5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5a0e18d9-4f8a-4246-8f61-0ec2a14c3708",
            "547adb88-fa12-4f0a-a220-29a7ceadec31",
            "049b7807-093e-4eb1-937a-484f15639327",
            "ddf4a0e8-5399-471d-851c-74a277f74b3f",
            "5493215c-e800-4683-815c-762c565f2315",
            "07ec472a-c5f9-4a0a-8e08-0bf458d63810",
            "4ab3b25a-4f4c-499e-880b-ecf2c7a98b32",
            "5c812b13-7cce-4fe9-8b4a-85d174a3337e",
            "ca09bb1d-eb53-4440-84c9-243d38906030",
            "a2e2e0c0-306a-495b-bb80-3d831b8143e1",
            "1b3f6c50-665c-47c4-b704-f5b5e4fa8b5b",
            "eefcef63-7502-4cad-8273-834af86c6121",
            "270adecb-5e67-49f7-bb3a-bdc150f46270",
            "e13b3084-952f-48c8-82ea-dbad2bd1fac4",
            "a98c385a-5a64-4f51-9e83-88c9cf5f4d75"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 92700,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "054ca177-9623-468c-8ad8-e9de77c3ad52",
          "title": "Retention Base Evaluations",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_3_retention.js",
          "file": "/test/e2e/evaluation/spec_3_retention.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Retention Base Evaluations\"",
              "fullTitle": "Retention Base Evaluations \"before all\" hook in \"Retention Base Evaluations\"",
              "timedOut": false,
              "duration": 9935,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'retention' WHERE id = 26;`,\n  `UPDATE employees SET \"designation\" = 'Software Engineer' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 138 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "80878dfc-586f-4648-a073-c5968800205a",
              "parentUUID": "054ca177-9623-468c-8ad8-e9de77c3ad52",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Retention Base Evaluations\"",
              "fullTitle": "Retention Base Evaluations \"before each\" hook in \"Retention Base Evaluations\"",
              "timedOut": false,
              "duration": 4383,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation-retention');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "cd797ef4-bbac-4523-8ce2-5cce63591a69",
              "parentUUID": "054ca177-9623-468c-8ad8-e9de77c3ad52",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if retention evaluations are showing",
              "fullTitle": "Retention Base Evaluations should check if retention evaluations are showing",
              "timedOut": false,
              "duration": 40,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "c13ff68c-1f26-4b06-bfed-f7b6c8f4279a",
              "parentUUID": "054ca177-9623-468c-8ad8-e9de77c3ad52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Retention Base Evaluations should able to filter resoures by name",
              "timedOut": false,
              "duration": 1856,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "47c6d875-07af-47cc-8a98-1a061ad9b065",
              "parentUUID": "054ca177-9623-468c-8ad8-e9de77c3ad52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Retention Base Evaluations should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 1484,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "b4abdb11-b275-42c4-9dc2-45b3fda38490",
              "parentUUID": "054ca177-9623-468c-8ad8-e9de77c3ad52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Retention Base Evaluations should able to  copy email from options",
              "timedOut": false,
              "duration": 3993,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "0328430b-912f-48eb-a9b6-430a94f48d35",
              "parentUUID": "054ca177-9623-468c-8ad8-e9de77c3ad52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Retention Base Evaluations should able to Send Email from options",
              "timedOut": false,
              "duration": 8322,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "88c7f512-68ba-49c5-a601-dbb17951b996",
              "parentUUID": "054ca177-9623-468c-8ad8-e9de77c3ad52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Retention Base Evaluations should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 7548,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "9b865d7c-01b2-4108-bd85-8ca66979e41f",
              "parentUUID": "054ca177-9623-468c-8ad8-e9de77c3ad52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Retention Base Evaluations should able to see Email from options",
              "timedOut": false,
              "duration": 7237,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(4000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "07728765-1f25-4bd4-a13a-51d48e4657a3",
              "parentUUID": "054ca177-9623-468c-8ad8-e9de77c3ad52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Retention Base Evaluations should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 6967,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "ca146db2-bf78-403a-86d5-bd937e5c344b",
              "parentUUID": "054ca177-9623-468c-8ad8-e9de77c3ad52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Retention Base Evaluations should able to see Resource Details from options",
              "timedOut": false,
              "duration": 4453,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "4697e125-5ddd-4f77-8ab2-e4b69fdd0afa",
              "parentUUID": "054ca177-9623-468c-8ad8-e9de77c3ad52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Retention Base Evaluations should able to see employee history",
              "timedOut": false,
              "duration": 3206,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "c94b72a1-51ee-4e59-8e38-1775d4f7f7df",
              "parentUUID": "054ca177-9623-468c-8ad8-e9de77c3ad52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to request a review",
              "fullTitle": "Retention Base Evaluations should able to request a review",
              "timedOut": false,
              "duration": 7344,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait evaluation.clickReqReviewBtn();\nawait utilFun.wait(1000);\nawait evaluation.clickHod('Muhammad Bilal Rafaqat');\nawait evaluation.clickSendReqBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Request is send successfully.');",
              "err": {},
              "uuid": "826ad148-11b1-4216-bc0b-9113b7bd123f",
              "parentUUID": "054ca177-9623-468c-8ad8-e9de77c3ad52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to give a review",
              "fullTitle": "Retention Base Evaluations should able to give a review",
              "timedOut": false,
              "duration": 12945,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nawait evaluation.clickSubmittedReview();\nawait utilFun.wait(1000);\nawait evaluation.clickAddFeedback();\n// await feedbackForm.enterDate('03092023');\nawait feedbackForm.selectFeedbackDuration('6 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('testingggg');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "7f9a39b6-f4e8-442c-a97a-f775920b0fc5",
              "parentUUID": "054ca177-9623-468c-8ad8-e9de77c3ad52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit review form",
              "fullTitle": "Retention Base Evaluations should able to edit review form",
              "timedOut": false,
              "duration": 9368,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickEditForm();\nawait utilFun.wait(1000);\n// await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.typeDescription('updated');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "344d2a38-b9ae-49ba-8e43-3671e2fc80f7",
              "parentUUID": "054ca177-9623-468c-8ad8-e9de77c3ad52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to defer review",
              "fullTitle": "Retention Base Evaluations should able to defer review",
              "timedOut": false,
              "duration": 6790,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickDefer();\nawait evaluation.clickDeferType();\nawait utilFun.wait(1000);\nawait evaluation.selectDeferType('2 Weeks');\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "47065fb4-4f20-4a0a-be48-2352dcaa975e",
              "parentUUID": "054ca177-9623-468c-8ad8-e9de77c3ad52",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to complete review",
              "fullTitle": "Retention Base Evaluations should able to complete review",
              "timedOut": false,
              "duration": 10438,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickComplete();\n   // await feedbackForm.enterDate('03102023');\nawait feedbackForm.selectFeedbackDuration('3 Months');\nawait feedbackForm.selectNextReviewType('Annual');\nawait feedbackForm.selectRevisedDesignation('Software Engineer');\nawait feedbackForm.typeIncreament('200000');\nawait feedbackForm.clickSubmit();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "3218e73d-5033-41d8-b61f-4e5beda0fef6",
              "parentUUID": "054ca177-9623-468c-8ad8-e9de77c3ad52",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c13ff68c-1f26-4b06-bfed-f7b6c8f4279a",
            "47c6d875-07af-47cc-8a98-1a061ad9b065",
            "b4abdb11-b275-42c4-9dc2-45b3fda38490",
            "0328430b-912f-48eb-a9b6-430a94f48d35",
            "88c7f512-68ba-49c5-a601-dbb17951b996",
            "9b865d7c-01b2-4108-bd85-8ca66979e41f",
            "07728765-1f25-4bd4-a13a-51d48e4657a3",
            "ca146db2-bf78-403a-86d5-bd937e5c344b",
            "4697e125-5ddd-4f77-8ab2-e4b69fdd0afa",
            "c94b72a1-51ee-4e59-8e38-1775d4f7f7df",
            "826ad148-11b1-4216-bc0b-9113b7bd123f",
            "7f9a39b6-f4e8-442c-a97a-f775920b0fc5",
            "344d2a38-b9ae-49ba-8e43-3671e2fc80f7",
            "47065fb4-4f20-4a0a-be48-2352dcaa975e",
            "3218e73d-5033-41d8-b61f-4e5beda0fef6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 91991,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "0384850c-c5ae-4ca7-8182-2d9bd37f8278",
          "title": "Evaluations History",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_4_history.js",
          "file": "/test/e2e/evaluation/spec_4_history.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Evaluations History\"",
              "fullTitle": "Evaluations History \"before all\" hook in \"Evaluations History\"",
              "timedOut": false,
              "duration": 10031,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query = [\n  `UPDATE employee_evaluations SET \"processType\" = 'COMPLETE' WHERE id = 26;`,\n  `DELETE FROM employee_evaluations WHERE \"employeeId\" = 9742 AND \"incrementType\" = 'designation';`,\n  `UPDATE employee_evaluations SET \"processDate\" = '2023-03-28 17:32:33.501+05' WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "16e7568e-417b-4697-9020-f72038b334b2",
              "parentUUID": "0384850c-c5ae-4ca7-8182-2d9bd37f8278",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Evaluations History\"",
              "fullTitle": "Evaluations History \"before each\" hook in \"Evaluations History\"",
              "timedOut": false,
              "duration": 4415,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation-history');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "7ee7c1b5-0515-400d-8f70-9fe920980d2b",
              "parentUUID": "0384850c-c5ae-4ca7-8182-2d9bd37f8278",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if evaluations history is showing",
              "fullTitle": "Evaluations History should check if evaluations history is showing",
              "timedOut": false,
              "duration": 42,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let obj = await evaluation.getAllPendingResourses();\nassert(obj.length > 0, `No Evaluation Found`);",
              "err": {},
              "uuid": "2d64cdd4-9cbe-4df9-a781-8aed299fefac",
              "parentUUID": "0384850c-c5ae-4ca7-8182-2d9bd37f8278",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by name",
              "fullTitle": "Evaluations History should able to filter resoures by name",
              "timedOut": false,
              "duration": 2205,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "3c366466-2217-4b32-a304-a0d61675515a",
              "parentUUID": "0384850c-c5ae-4ca7-8182-2d9bd37f8278",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check review is completed",
              "fullTitle": "Evaluations History should able to check review is completed",
              "timedOut": false,
              "duration": 2153,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.checkProcessState()\nutilFun.assertEql(name, 'Complete');",
              "err": {},
              "uuid": "08760521-feea-4aec-ba86-79b0551d7a62",
              "parentUUID": "0384850c-c5ae-4ca7-8182-2d9bd37f8278",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Review Type",
              "fullTitle": "Evaluations History should able to filter resoures by Review Type",
              "timedOut": false,
              "duration": 1741,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "32f96be7-f51e-4eba-b301-fe1de5c17ac3",
              "parentUUID": "0384850c-c5ae-4ca7-8182-2d9bd37f8278",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to filter resoures by Last Increment",
              "fullTitle": "Evaluations History should able to filter resoures by Last Increment",
              "timedOut": false,
              "duration": 1710,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.selectLastIncrement('N/A');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);",
              "err": {},
              "uuid": "004c760d-d126-4c23-86ad-46cb7f7e7890",
              "parentUUID": "0384850c-c5ae-4ca7-8182-2d9bd37f8278",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "Evaluations History should able to  copy email from options",
              "timedOut": false,
              "duration": 4245,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Copy Email');\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {},
              "uuid": "999b0846-f938-4cba-8d39-3fb56ba4d09f",
              "parentUUID": "0384850c-c5ae-4ca7-8182-2d9bd37f8278",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "Evaluations History should able to Send Email from options",
              "timedOut": false,
              "duration": 7705,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=james@robot-mail.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "84071006-c580-4ca8-8103-aecef13ae802",
              "parentUUID": "0384850c-c5ae-4ca7-8182-2d9bd37f8278",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "Evaluations History should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 7950,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Open Slack DM');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://invozone.slack.com/?redir=%2Fapp_redirect%3Fchannel%3Dundefined');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "1b8960a9-cde2-4fdb-b6a5-4d18c2212f62",
              "parentUUID": "0384850c-c5ae-4ca7-8182-2d9bd37f8278",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "Evaluations History should able to see Email from options",
              "timedOut": false,
              "duration": 7393,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('See Email');\nawait utilFun.wait(4000);\nconst email = await evaluation.copyEmail();\nassert.equal(email, 'Email: james@robot-mail.com');",
              "err": {},
              "uuid": "ca754954-f9ca-4628-aa2d-154408ceaf9a",
              "parentUUID": "0384850c-c5ae-4ca7-8182-2d9bd37f8278",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "Evaluations History should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 7007,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Phone Number');\nawait utilFun.wait(3000);\nawait evaluation.copyPhoneNumber();\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {},
              "uuid": "907bf912-d3b0-4f82-9385-c3c705c14c00",
              "parentUUID": "0384850c-c5ae-4ca7-8182-2d9bd37f8278",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Resource Details from options",
              "fullTitle": "Evaluations History should able to see Resource Details from options",
              "timedOut": false,
              "duration": 4593,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickResource();\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(1000);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resource-detail/9742?tab=Basic_Information');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {},
              "uuid": "7ebc27ce-3521-4068-819b-cd1fa7c1b15f",
              "parentUUID": "0384850c-c5ae-4ca7-8182-2d9bd37f8278",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see employee history",
              "fullTitle": "Evaluations History should able to see employee history",
              "timedOut": false,
              "duration": 3457,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickSeeFeedback();\nawait utilFun.wait(1000);\nconst title = await evaluation.checkTitle();\nutilFun.assertEql(title, 'Feedback History of James Salinas');\nawait evaluation.checkSelectedTab();",
              "err": {},
              "uuid": "677a3d90-2da0-441b-b3c2-48728fe8ccd3",
              "parentUUID": "0384850c-c5ae-4ca7-8182-2d9bd37f8278",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Initiate a Revised Designation",
              "fullTitle": "Evaluations History should able to Initiate a Revised Designation",
              "timedOut": false,
              "duration": 6627,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');\nawait evaluation.clickOptionBtn();\nawait utilFun.wait(1000);\nawait evaluation.selectOption('Initiate a Revised Designation');\nawait utilFun.wait(3000);\nconst alertText = await evaluation.checkAlert();\nassert.equal(alertText, 'Review is initiated successfully.');",
              "err": {},
              "uuid": "2c846886-aaa4-4a71-9446-b36370722317",
              "parentUUID": "0384850c-c5ae-4ca7-8182-2d9bd37f8278",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able check if revised Designation evaluation is showing",
              "fullTitle": "Evaluations History should able check if revised Designation evaluation is showing",
              "timedOut": false,
              "duration": 7136,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait utilFun.wait(1000);\nawait evaluation.selectReviewType('Rev. Designation');\nawait utilFun.wait(1000);\nconst name = await evaluation.getResourseName();\nutilFun.assertEql(name, 'James Salinas');",
              "err": {},
              "uuid": "4d0449c5-7bc5-4afc-9b91-21c6028caaee",
              "parentUUID": "0384850c-c5ae-4ca7-8182-2d9bd37f8278",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2d64cdd4-9cbe-4df9-a781-8aed299fefac",
            "3c366466-2217-4b32-a304-a0d61675515a",
            "08760521-feea-4aec-ba86-79b0551d7a62",
            "32f96be7-f51e-4eba-b301-fe1de5c17ac3",
            "004c760d-d126-4c23-86ad-46cb7f7e7890",
            "999b0846-f938-4cba-8d39-3fb56ba4d09f",
            "84071006-c580-4ca8-8103-aecef13ae802",
            "1b8960a9-cde2-4fdb-b6a5-4d18c2212f62",
            "ca754954-f9ca-4628-aa2d-154408ceaf9a",
            "907bf912-d3b0-4f82-9385-c3c705c14c00",
            "7ebc27ce-3521-4068-819b-cd1fa7c1b15f",
            "677a3d90-2da0-441b-b3c2-48728fe8ccd3",
            "2c846886-aaa4-4a71-9446-b36370722317",
            "4d0449c5-7bc5-4afc-9b91-21c6028caaee"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 63964,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "db812af3-c327-4a45-b214-91b641f73869",
          "title": "Evaluations Review Types",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/evaluation/spec_5_reviewTypes.js",
          "file": "/test/e2e/evaluation/spec_5_reviewTypes.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Evaluations Review Types\"",
              "fullTitle": "Evaluations Review Types \"before all\" hook in \"Evaluations Review Types\"",
              "timedOut": false,
              "duration": 10049,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "c611ecb9-c672-49e8-8296-00494dda9f2b",
              "parentUUID": "db812af3-c327-4a45-b214-91b641f73869",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Evaluations Review Types\"",
              "fullTitle": "Evaluations Review Types \"before each\" hook in \"Evaluations Review Types\"",
              "timedOut": false,
              "duration": 3421,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.wait(3000);",
              "err": {},
              "uuid": "3da27a93-7ece-4ed4-ab49-47aebfbca4cd",
              "parentUUID": "db812af3-c327-4a45-b214-91b641f73869",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if annual evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if annual evaluations are showing",
              "timedOut": false,
              "duration": 4982,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'annual' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Annual'), `Expected text not found.`);",
              "err": {},
              "uuid": "c764dba7-94e2-4c8b-a1c2-0cc78794a91e",
              "parentUUID": "db812af3-c327-4a45-b214-91b641f73869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 5880,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Annual'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "438f4a02-99d8-4539-97cf-ee1202115b04",
              "parentUUID": "db812af3-c327-4a45-b214-91b641f73869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Bi Annual evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if Bi Annual evaluations are showing",
              "timedOut": false,
              "duration": 4953,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'bi-annual' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Bi Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Bi Annual'), `Expected text not found.`);",
              "err": {},
              "uuid": "88b31a5b-f5f5-4c28-8209-c4366950a9b3",
              "parentUUID": "db812af3-c327-4a45-b214-91b641f73869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 5837,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Bi Annual');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Bi Annual'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "8d85d0f6-b5d5-46ff-8ce2-542b32a4aa15",
              "parentUUID": "db812af3-c327-4a45-b214-91b641f73869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Internship evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if Internship evaluations are showing",
              "timedOut": false,
              "duration": 4856,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'internship' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Internship');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Internship'), `Expected text not found.`);",
              "err": {},
              "uuid": "bdb8bc0c-f832-4fe0-8ab2-fa3661b3db35",
              "parentUUID": "db812af3-c327-4a45-b214-91b641f73869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 5698,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Internship');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Internship'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "131f6d5c-4101-4a20-a36c-e6e570f21676",
              "parentUUID": "db812af3-c327-4a45-b214-91b641f73869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr have Access of extend Btn and can extend Evaluation",
              "fullTitle": "Evaluations Review Types should confirm Hr have Access of extend Btn and can extend Evaluation",
              "timedOut": false,
              "duration": 8615,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Internship');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Internship'), `Expected text not found.`);\nawait evaluation.checkIfExtenfBtnIsLocated()\nawait utilFun.wait(1000);\nawait evaluation.clickExtendBtn()\nawait utilFun.wait(1000);\nawait evaluation.clickDeferType()\nawait evaluation.selectDeferType('2 Weeks');\nawait utilFun.wait(1000);\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "b14b974b-1c87-4b85-863f-86cf0bf9f110",
              "parentUUID": "db812af3-c327-4a45-b214-91b641f73869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if End of Probation evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if End of Probation evaluations are showing",
              "timedOut": false,
              "duration": 4906,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'end_of_probation' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('End of Probation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('End of Probation'), `Expected text not found.`);",
              "err": {},
              "uuid": "4de213ad-09d3-41ae-9a77-ecf2a9f8cc25",
              "parentUUID": "db812af3-c327-4a45-b214-91b641f73869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 5969,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('End of Probation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('End of Probation'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "54066d83-4490-42bd-9683-45b3f04a6357",
              "parentUUID": "db812af3-c327-4a45-b214-91b641f73869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr have Access of extend Btn and can extend Evaluation",
              "fullTitle": "Evaluations Review Types should confirm Hr have Access of extend Btn and can extend Evaluation",
              "timedOut": false,
              "duration": 9097,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('End of Probation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('End of Probation'), `Expected text not found.`);\nawait evaluation.checkIfExtenfBtnIsLocated()\nawait utilFun.wait(1000);\nawait evaluation.clickExtendBtn()\nawait utilFun.wait(1000);\nawait evaluation.clickDeferType()\nawait evaluation.selectDeferType('2 Weeks');\nawait utilFun.wait(1000);\nawait evaluation.typeDeferReason('testing');\nawait evaluation.clickSubmitBtn();\nconst alertText = await evaluation.checkAlert();\nutilFun.assertEql(alertText, 'Increment status is updated successfully');",
              "err": {},
              "uuid": "5c9e1dab-252e-407b-b05d-f84bb89db98b",
              "parentUUID": "db812af3-c327-4a45-b214-91b641f73869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Revised Designation evaluations are showing",
              "fullTitle": "Evaluations Review Types should check if Revised Designation evaluations are showing",
              "timedOut": false,
              "duration": 5006,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_evaluations SET \"incrementType\" = 'designation' WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processType\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"reasonForDefer\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"processDate\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"feedback\" = NULL WHERE id = 26;`,\n  `UPDATE employee_evaluations SET \"nextIncrementType\" = NULL WHERE id = 26;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Rev. Designation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Rev. Designation'), `Expected text not found.`);",
              "err": {},
              "uuid": "145d4028-5047-4b95-946b-78f0ab0af4fc",
              "parentUUID": "db812af3-c327-4a45-b214-91b641f73869",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should confirm Hr should not able to complete without PM review",
              "fullTitle": "Evaluations Review Types should confirm Hr should not able to complete without PM review",
              "timedOut": false,
              "duration": 6031,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9474;`,\n  `UPDATE employees SET \"designationId\" = 77 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait evaluation.clickFilterButton();\nawait evaluation.searchName('James Salinas');\nawait evaluation.selectReviewType('Rev. Designation');\nconst valuesCount = await evaluation.checkValues();\nutilFun.assertEql(valuesCount, 1);\nconst rowText = await evaluation.getTableRowText();\nassert.ok(rowText.includes('Rev. Designation'), `Expected text not found.`);\nawait evaluation.checkIfCompleteBtnDisable()",
              "err": {},
              "uuid": "64798c59-1459-441a-b318-ea64a1a1886d",
              "parentUUID": "db812af3-c327-4a45-b214-91b641f73869",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c764dba7-94e2-4c8b-a1c2-0cc78794a91e",
            "438f4a02-99d8-4539-97cf-ee1202115b04",
            "88b31a5b-f5f5-4c28-8209-c4366950a9b3",
            "8d85d0f6-b5d5-46ff-8ce2-542b32a4aa15",
            "bdb8bc0c-f832-4fe0-8ab2-fa3661b3db35",
            "131f6d5c-4101-4a20-a36c-e6e570f21676",
            "b14b974b-1c87-4b85-863f-86cf0bf9f110",
            "4de213ad-09d3-41ae-9a77-ecf2a9f8cc25",
            "54066d83-4490-42bd-9683-45b3f04a6357",
            "5c9e1dab-252e-407b-b05d-f84bb89db98b",
            "145d4028-5047-4b95-946b-78f0ab0af4fc",
            "64798c59-1459-441a-b318-ea64a1a1886d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 71830,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "edb0727e-7edd-4264-bacf-0d89cd491454",
          "title": "My Leaves",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/leaves/spec_1_myleaves.js",
          "file": "/test/e2e/leaves/spec_1_myleaves.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"My Leaves\"",
              "fullTitle": "My Leaves \"before all\" hook in \"My Leaves\"",
              "timedOut": false,
              "duration": 10621,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\n// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet query1 = [\n  `UPDATE employee_leaves_count SET \"carryForwardedLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesEarned\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalRemainingLeaves\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"availedUnPaidLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `DELETE FROM employee_leaves WHERE \"employeeId\" = 9474;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9474;`,\n  `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query1);",
              "err": {},
              "uuid": "0c3ac2af-317f-4e49-add4-e123ba8a1f20",
              "parentUUID": "edb0727e-7edd-4264-bacf-0d89cd491454",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"My Leaves\"",
              "fullTitle": "My Leaves \"before each\" hook in \"My Leaves\"",
              "timedOut": false,
              "duration": 3397,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);",
              "err": {},
              "uuid": "c025f439-42c7-4193-ae8f-41d42ae36049",
              "parentUUID": "edb0727e-7edd-4264-bacf-0d89cd491454",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should should able to view employee leave",
              "fullTitle": "My Leaves should should able to view employee leave",
              "timedOut": false,
              "duration": 4268,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_reporting_managers SET \"approvedLeaveStatus\" = 'PENDING' WHERE id = 45;`,\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE id = 32;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE id = 32;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE id = 32;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {},
              "uuid": "d4a53f52-7847-46e6-8584-5262044a917d",
              "parentUUID": "edb0727e-7edd-4264-bacf-0d89cd491454",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should should able to Approve employee leave",
              "fullTitle": "My Leaves should should able to Approve employee leave",
              "timedOut": false,
              "duration": 3538,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nawait myLeaves.clickApproveBtn()\nawait myLeaves.clickSubmitBtn()\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "49612afc-c703-43ca-804b-aef2df68d9f5",
              "parentUUID": "edb0727e-7edd-4264-bacf-0d89cd491454",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Approved Tab",
              "fullTitle": "My Leaves should able to view employee leave in Approved Tab",
              "timedOut": false,
              "duration": 2907,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Approved Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {},
              "uuid": "5b53b2d4-5188-47ab-889d-a520f64188a0",
              "parentUUID": "edb0727e-7edd-4264-bacf-0d89cd491454",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Reject employee leave in Approved Tab",
              "fullTitle": "My Leaves should able to Reject employee leave in Approved Tab",
              "timedOut": false,
              "duration": 23629,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Approved Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);\nawait myLeaves.clickRejectBtn()\nawait myLeaves.typeRejectReasonAndReject('testing')\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[role=\"alert\"])\nWait timed out after 20047ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[role=\"alert\"])\nWait timed out after 20047ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "99601be0-19f1-40cd-8096-3919721ff342",
              "parentUUID": "edb0727e-7edd-4264-bacf-0d89cd491454",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Reject Tab",
              "fullTitle": "My Leaves should able to view employee leave in Reject Tab",
              "timedOut": false,
              "duration": 2802,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Rejected Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/leaves/spec_1_myleaves.js:90:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "eaca6cec-04a8-42e6-b717-2672a90adb4b",
              "parentUUID": "edb0727e-7edd-4264-bacf-0d89cd491454",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should should able to Reject employee leave",
              "fullTitle": "My Leaves should should able to Reject employee leave",
              "timedOut": false,
              "duration": 24921,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_reporting_managers SET \"approvedLeaveStatus\" = 'PENDING' WHERE id = 45;`,\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE id = 32;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE id = 32;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE id = 32;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.refresh();\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nawait myLeaves.clickRejectBtn()\nawait myLeaves.typeRejectReasonAndReject('testing')\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, div[role=\"alert\"])\nWait timed out after 20082ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, div[role=\"alert\"])\nWait timed out after 20082ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "feb233e5-b5fa-4a60-83b1-c4249bd7ae83",
              "parentUUID": "edb0727e-7edd-4264-bacf-0d89cd491454",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Reject Tab",
              "fullTitle": "My Leaves should able to view employee leave in Reject Tab",
              "timedOut": false,
              "duration": 2772,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Rejected Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/leaves/spec_1_myleaves.js:113:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "38487a10-56ab-499a-afd2-51a07292d560",
              "parentUUID": "edb0727e-7edd-4264-bacf-0d89cd491454",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Approve employee leave in Reject Tab",
              "fullTitle": "My Leaves should able to Approve employee leave in Reject Tab",
              "timedOut": false,
              "duration": 2732,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Rejected Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);\nawait myLeaves.clickApproveBtn()\nawait myLeaves.clickSubmitBtn()\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/leaves/spec_1_myleaves.js:120:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "13536202-fb9e-4acc-b6b8-7bdca1a73278",
              "parentUUID": "edb0727e-7edd-4264-bacf-0d89cd491454",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Approved Tab",
              "fullTitle": "My Leaves should able to view employee leave in Approved Tab",
              "timedOut": false,
              "duration": 2723,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickTab('Approved Leaves')\nawait myLeaves.clickFilterBtn(1)\nawait myLeaves.filterName('james')\nconst claimTypeText = await myLeaves.checkTableRow(1);\nassert.ok(claimTypeText.includes('James'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/leaves/spec_1_myleaves.js:131:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "094c207f-8f21-4d97-81f8-9b070ff40b73",
              "parentUUID": "edb0727e-7edd-4264-bacf-0d89cd491454",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Leaves counts are showing Correct",
              "fullTitle": "My Leaves should check if Leaves counts are showing Correct",
              "timedOut": false,
              "duration": 213,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '10/');\nlet leaves1 = await myLeaves.getSickLeaves();\nassert.equal(leaves1, '10/');\nlet leaves2 = await myLeaves.getCarryForwardLeaves();\nassert.equal(leaves2, '0/');\nlet leaves3 = await myLeaves.getUnpaidLeaves();\nassert.equal(leaves3, '0');",
              "err": {},
              "uuid": "9d75fa2a-5be1-4b1a-8982-1eea9bbccea5",
              "parentUUID": "edb0727e-7edd-4264-bacf-0d89cd491454",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Casual full leave",
              "fullTitle": "My Leaves should able to apply Casual full leave",
              "timedOut": false,
              "duration": 6268,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('05-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('05-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "47b69645-672c-4473-9e32-1199943b6618",
              "parentUUID": "edb0727e-7edd-4264-bacf-0d89cd491454",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Casual First Half leave",
              "fullTitle": "My Leaves should able to apply Casual First Half leave",
              "timedOut": false,
              "duration": 7558,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('First Half');\nawait myLeaves.setStartDate('06-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('06-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "55e80356-a213-4513-9aec-4dd402040119",
              "parentUUID": "edb0727e-7edd-4264-bacf-0d89cd491454",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Casual Second Half leave",
              "fullTitle": "My Leaves should able to apply Casual Second Half leave",
              "timedOut": false,
              "duration": 7512,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('Second Half');\nawait myLeaves.setStartDate('07-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('07-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "a0e25a77-9946-4f94-afda-e57f64658cf3",
              "parentUUID": "edb0727e-7edd-4264-bacf-0d89cd491454",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Sick full leave",
              "fullTitle": "My Leaves should able to apply Sick full leave",
              "timedOut": false,
              "duration": 6233,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Sick Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('08-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('08-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "efd7ac3c-8711-4656-bc92-777928677f13",
              "parentUUID": "edb0727e-7edd-4264-bacf-0d89cd491454",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Sick First Half leave",
              "fullTitle": "My Leaves should able to apply Sick First Half leave",
              "timedOut": false,
              "duration": 7581,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Sick Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('First Half');\nawait myLeaves.setStartDate('09-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('09-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "5b404e4f-5f5d-460a-9c97-c628b5195ad3",
              "parentUUID": "edb0727e-7edd-4264-bacf-0d89cd491454",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Sick Second Half leave",
              "fullTitle": "My Leaves should able to apply Sick Second Half leave",
              "timedOut": false,
              "duration": 7470,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Sick Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('Second Half');\nawait myLeaves.setStartDate('10-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('10-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "67318736-1563-447d-a8a1-1e3bb434cbb5",
              "parentUUID": "edb0727e-7edd-4264-bacf-0d89cd491454",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Un-Paid full leave",
              "fullTitle": "My Leaves should able to apply Un-Paid full leave",
              "timedOut": false,
              "duration": 6235,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Un-Paid Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('11-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('11-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "9e6a47e1-b1d0-43a9-9f4d-023e4c5613e5",
              "parentUUID": "edb0727e-7edd-4264-bacf-0d89cd491454",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Un-Paid First Half leave",
              "fullTitle": "My Leaves should able to apply Un-Paid First Half leave",
              "timedOut": false,
              "duration": 7590,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Un-Paid Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('First Half');\nawait myLeaves.setStartDate('12-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('12-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "032621d5-a5c1-468d-b5ae-8e8a4d1b13b3",
              "parentUUID": "edb0727e-7edd-4264-bacf-0d89cd491454",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Un-Paid Second Half leave",
              "fullTitle": "My Leaves should able to apply Un-Paid Second Half leave",
              "timedOut": false,
              "duration": 7671,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Un-Paid Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Half Leave');\nawait myLeaves.clickLeaveShift();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveShift('Second Half');\nawait myLeaves.setStartDate('13-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('13-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "a5d45189-8813-46ea-8790-48d2731475f0",
              "parentUUID": "edb0727e-7edd-4264-bacf-0d89cd491454",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Leaves counts are showing Correct",
              "fullTitle": "My Leaves should check if Leaves counts are showing Correct",
              "timedOut": false,
              "duration": 224,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '8/');\nlet leaves1 = await myLeaves.getSickLeaves();\nassert.equal(leaves1, '8/');\nlet leaves2 = await myLeaves.getCarryForwardLeaves();\nassert.equal(leaves2, '0/');\nlet leaves3 = await myLeaves.getUnpaidLeaves();\nassert.equal(leaves3, '2');",
              "err": {},
              "uuid": "b688fb19-b560-48a7-8c9f-0e2e00e69280",
              "parentUUID": "edb0727e-7edd-4264-bacf-0d89cd491454",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d4a53f52-7847-46e6-8584-5262044a917d",
            "49612afc-c703-43ca-804b-aef2df68d9f5",
            "5b53b2d4-5188-47ab-889d-a520f64188a0",
            "9d75fa2a-5be1-4b1a-8982-1eea9bbccea5",
            "47b69645-672c-4473-9e32-1199943b6618",
            "55e80356-a213-4513-9aec-4dd402040119",
            "a0e25a77-9946-4f94-afda-e57f64658cf3",
            "efd7ac3c-8711-4656-bc92-777928677f13",
            "5b404e4f-5f5d-460a-9c97-c628b5195ad3",
            "67318736-1563-447d-a8a1-1e3bb434cbb5",
            "9e6a47e1-b1d0-43a9-9f4d-023e4c5613e5",
            "032621d5-a5c1-468d-b5ae-8e8a4d1b13b3",
            "a5d45189-8813-46ea-8790-48d2731475f0",
            "b688fb19-b560-48a7-8c9f-0e2e00e69280"
          ],
          "failures": [
            "99601be0-19f1-40cd-8096-3919721ff342",
            "eaca6cec-04a8-42e6-b717-2672a90adb4b",
            "feb233e5-b5fa-4a60-83b1-c4249bd7ae83",
            "38487a10-56ab-499a-afd2-51a07292d560",
            "13536202-fb9e-4acc-b6b8-7bdca1a73278",
            "094c207f-8f21-4d97-81f8-9b070ff40b73"
          ],
          "pending": [],
          "skipped": [],
          "duration": 134847,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
          "title": "hr dashboard",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/leaves/spec_2_hrLeavesDashboard.js",
          "file": "/test/e2e/leaves/spec_2_hrLeavesDashboard.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"hr dashboard\"",
              "fullTitle": "hr dashboard \"before all\" hook in \"hr dashboard\"",
              "timedOut": false,
              "duration": 10586,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "0d1df25c-602e-440b-8fde-3e03ee7e0f51",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"hr dashboard\"",
              "fullTitle": "hr dashboard \"after all\" hook in \"hr dashboard\"",
              "timedOut": false,
              "duration": 23,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `DELETE FROM employee_leaves WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "0f85319e-3b76-4161-8eac-dd3ee7008355",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should check if Leaves counts are showing Correct",
              "fullTitle": "hr dashboard should check if Leaves counts are showing Correct",
              "timedOut": false,
              "duration": 3719,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_count SET \"carryForwardedLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesEarned\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"sickLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"totalRemainingLeaves\" = 20 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"availedUnPaidLeaves\" = 0 WHERE \"employeeId\" = 9474;`,\n  `DELETE FROM employee_leaves WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nlet leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '10/');\nlet leaves1 = await myLeaves.getSickLeaves();\nassert.equal(leaves1, '10/');\nlet leaves2 = await myLeaves.getCarryForwardLeaves();\nassert.equal(leaves2, '0/');\nlet leaves3 = await myLeaves.getUnpaidLeaves();\nassert.equal(leaves3, '0');",
              "err": {},
              "uuid": "a6ada4dd-47d5-40b7-81d6-c479d1b0220e",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to apply Casual full leave",
              "fullTitle": "hr dashboard should able to apply Casual full leave",
              "timedOut": false,
              "duration": 10311,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nawait myLeaves.clickApplyLeaveBtn();\nawait myLeaves.clickLeaveType();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveType('Casual Leave');\nawait myLeaves.clickLeaveCategory();\nawait utilFun.wait(1000);\nawait myLeaves.selectLeaveCategory('Full Leave');\nawait myLeaves.setStartDate('05-10-2024');\nawait utilFun.wait(1000);\nawait myLeaves.setEndDate('05-10-2024');\nawait myLeaves.typeReason('testing');\nawait myLeaves.clickSubmitBtn();\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "9fb54072-40dd-48d0-8d7f-0c0797e28216",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if leave is showing in Hr Dashboard",
              "fullTitle": "hr dashboard should able to check if leave is showing in Hr Dashboard",
              "timedOut": false,
              "duration": 5418,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "2eb963d8-3160-419f-8b3b-51afa906c800",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Approve Leave",
              "fullTitle": "hr dashboard should able to Approve Leave",
              "timedOut": false,
              "duration": 7349,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.clickApproveBtn()\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.clickSubmitBtn()\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "a7bfdef5-e67f-4807-a6fc-8cc44c2d4016",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Approved Tab",
              "fullTitle": "hr dashboard should able to view employee leave in Approved Tab",
              "timedOut": false,
              "duration": 5693,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickTab('Approved Leaves')\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "d1eea1f1-2767-495e-bda7-6210564f498f",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Reject Leave",
              "fullTitle": "hr dashboard should able to Reject Leave",
              "timedOut": false,
              "duration": 6492,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickRejectBtn()\nawait hrLeaveDashboard.typeRejectReasonAndReject('testing')\nawait utilFun.wait(1000);\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave status updated successfully');",
              "err": {},
              "uuid": "339f425d-23aa-4075-a602-89994bb302b1",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to view employee leave in Rejected Tab",
              "fullTitle": "hr dashboard should able to view employee leave in Rejected Tab",
              "timedOut": false,
              "duration": 5512,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickTab('Rejected Leaves')\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "e72727d4-18b8-45dc-a3be-0b492babaafe",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to send leave notification to PMs",
              "fullTitle": "hr dashboard should able to send leave notification to PMs",
              "timedOut": false,
              "duration": 5678,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves SET \"leaveStatus\" = 'PENDING' WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"approvedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves SET \"rejectedAt\" = NULL WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickSendNotificationBtn()\nawait utilFun.wait(1000);\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Notification sent to PMs from which leave is pending');",
              "err": {},
              "uuid": "9a716321-8c8d-4ecd-8be1-547687156146",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to delete Employee leave",
              "fullTitle": "hr dashboard should able to delete Employee leave",
              "timedOut": false,
              "duration": 6332,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);\nawait hrLeaveDashboard.clickDeleteBtn()\nawait hrLeaveDashboard.typeDeleteReason('testing')\nawait hrLeaveDashboard.clickSubmitDeleteBtn()\nawait utilFun.wait(1000);\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request deleted successfully.');",
              "err": {},
              "uuid": "57d82d9e-152b-43f8-941b-ac31574e38f5",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able check if delete leave is showing in Deleted Section",
              "fullTitle": "hr dashboard should able check if delete leave is showing in Deleted Section",
              "timedOut": false,
              "duration": 5202,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickSeeDeletedLeaves()\nawait hrLeaveDashboard.clickFilterBtn()\nawait hrLeaveDashboard.typeFilterName('Bilal')\nawait utilFun.wait(1000);\nconst leaveText = await hrLeaveDashboard.checkTableRow();\nassert.ok(leaveText.includes('Bilal'), `Expected text not found.`);",
              "err": {},
              "uuid": "de835ff1-5827-4169-9ea9-59f98a325b69",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to add Compensatory leave to specific employee",
              "fullTitle": "hr dashboard should able to add Compensatory leave to specific employee",
              "timedOut": false,
              "duration": 11901,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n  `DELETE FROM employee_gift_leaves WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCompLeaveBtn()\nawait hrLeaveDashboard.selectResource('Muhammad Bilal Rafaqat')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('21-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('21-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Compensatory leave added successfully');",
              "err": {},
              "uuid": "bc9ed00f-e03d-466d-a1f3-2482b3ead375",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Leave is Added",
              "fullTitle": "hr dashboard should check if Leave is Added",
              "timedOut": false,
              "duration": 3459,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nlet leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '11/');",
              "err": {},
              "uuid": "1a643fcf-12e2-4c3c-a6f0-0933592eaade",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to add Compensatory leave to all employee",
              "fullTitle": "hr dashboard should able to add Compensatory leave to all employee",
              "timedOut": false,
              "duration": 8763,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employee_leaves_count SET \"casualLeavesAvailed\" = 0 WHERE \"employeeId\" = 9474;`,\n  `UPDATE employee_leaves_count SET \"casualLeavesEarned\" = 10 WHERE \"employeeId\" = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCompLeaveBtn()\nawait hrLeaveDashboard.clickSelectAllRadioBtn()\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('20-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('20-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nawait utilFun.wait(1000);\nconst alertText = await myLeaves.checkAlert();\nassert.equal(alertText, 'Compensatory leave added successfully');",
              "err": {},
              "uuid": "f3163291-14cb-431b-a00c-e64357d69395",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Leave is Added",
              "fullTitle": "hr dashboard should check if Leave is Added",
              "timedOut": false,
              "duration": 3464,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/leaves');\nawait utilFun.wait(3000);\nlet leaves = await myLeaves.getCasualLeaves();\nassert.equal(leaves, '11/');",
              "err": {},
              "uuid": "ba9c3e50-1e39-45f9-8ea3-6741887d9c02",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Casual full leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Casual full leave from Hr Dashboard",
              "timedOut": false,
              "duration": 13161,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Casual Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Full Leave')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('10-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('10-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "dab2849b-02bf-4270-907d-ab2c6dc7b4a6",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Casual First Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Casual First Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12788,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Casual Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('First Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('11-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('11-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "f9c8b11e-fe9c-4c2d-82ef-d94a7bfd37a0",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Casual Second Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Casual Second Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12902,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Casual Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('Second Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('12-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('12-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "8cdedee8-ffe7-4b0a-bc00-d1d0851f29b9",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Sick full leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Sick full leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12558,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Sick Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Full Leave')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('13-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('13-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "d3721cdd-e10b-4440-bbd9-967d8654d518",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Sick First Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Sick First Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 13218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Sick Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('First Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('14-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('14-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "3d2da6c4-0bac-4570-87d1-91a55516bca7",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Sick Second Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Sick Second Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 13092,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Sick Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('Second Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('15-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('15-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "0f60dcb4-fbdc-47c0-8747-b193a55d513f",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Un-Paid full leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Un-Paid full leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12761,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Un-Paid Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Full Leave')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('16-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('16-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "f8f74911-1ece-4ddb-8182-f8b901a36662",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Un-Paid First Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Un-Paid First Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12455,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Un-Paid Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('First Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('17-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('17-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "5cd19356-a2e7-45f4-afc1-078d5d079ccb",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create Un-Paid Second Half leave from Hr Dashboard",
              "fullTitle": "hr dashboard should able to create Un-Paid Second Half leave from Hr Dashboard",
              "timedOut": false,
              "duration": 12894,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/hr-dashboard');\nawait utilFun.wait(3000);\nawait hrLeaveDashboard.clickCreateLeaveBtn()\nawait hrLeaveDashboard.selectAResource('Muhammad Bilal Rafaqat')\nawait hrLeaveDashboard.selectLeaveType('Un-Paid Leave')\nawait hrLeaveDashboard.selectLeaveCategory('Half Leave')\nawait hrLeaveDashboard.selectHalfLeaveShift('Second Half')\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setStartDate('18-10-2024');\nawait utilFun.wait(1000);\nawait hrLeaveDashboard.setEndDate('18-10-2024');\nawait myLeaves.typeReason('testing');\nawait hrLeaveDashboard.clickSubmitBtn();\nconst alertText = await hrLeaveDashboard.checkAlert();\nassert.equal(alertText, 'Leave request created successfully');",
              "err": {},
              "uuid": "14994817-990d-421c-9ba7-14d57100e2eb",
              "parentUUID": "7e74ec94-77c7-4b35-9012-c20d4bc450f8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a6ada4dd-47d5-40b7-81d6-c479d1b0220e",
            "9fb54072-40dd-48d0-8d7f-0c0797e28216",
            "2eb963d8-3160-419f-8b3b-51afa906c800",
            "a7bfdef5-e67f-4807-a6fc-8cc44c2d4016",
            "d1eea1f1-2767-495e-bda7-6210564f498f",
            "339f425d-23aa-4075-a602-89994bb302b1",
            "e72727d4-18b8-45dc-a3be-0b492babaafe",
            "9a716321-8c8d-4ecd-8be1-547687156146",
            "57d82d9e-152b-43f8-941b-ac31574e38f5",
            "de835ff1-5827-4169-9ea9-59f98a325b69",
            "bc9ed00f-e03d-466d-a1f3-2482b3ead375",
            "1a643fcf-12e2-4c3c-a6f0-0933592eaade",
            "f3163291-14cb-431b-a00c-e64357d69395",
            "ba9c3e50-1e39-45f9-8ea3-6741887d9c02",
            "dab2849b-02bf-4270-907d-ab2c6dc7b4a6",
            "f9c8b11e-fe9c-4c2d-82ef-d94a7bfd37a0",
            "8cdedee8-ffe7-4b0a-bc00-d1d0851f29b9",
            "d3721cdd-e10b-4440-bbd9-967d8654d518",
            "3d2da6c4-0bac-4570-87d1-91a55516bca7",
            "0f60dcb4-fbdc-47c0-8747-b193a55d513f",
            "f8f74911-1ece-4ddb-8182-f8b901a36662",
            "5cd19356-a2e7-45f4-afc1-078d5d079ccb",
            "14994817-990d-421c-9ba7-14d57100e2eb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 205122,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
          "title": "Monthly Claims -> Child Claims",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-child.js",
          "file": "/test/e2e/monthlyclaim/myclaims-child.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Monthly Claims -> Child Claims\"",
              "fullTitle": "Monthly Claims -> Child Claims \"before all\" hook in \"Monthly Claims -> Child Claims\"",
              "timedOut": false,
              "duration": 10235,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n    `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9429;`,\n    `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9474;`,\n  ];\n  await utilFun.udpateDatabase(query);\n  await utilFun.loginAccount()\n//   await utilFun.login(email, password)",
              "err": {},
              "uuid": "1b8165d7-e032-42e2-be0b-74255149b98d",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Upload Photo and click Close Button",
              "timedOut": false,
              "duration": 11139,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "bcf005e2-0e44-4526-94aa-cac8503d0022",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Upload Photo and Delete Photos ",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Upload Photo and Delete Photos ",
              "timedOut": false,
              "duration": 14360,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(1);",
              "err": {},
              "uuid": "0200eb89-0634-4365-9699-b1dc773e5200",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Add New Row and Delete Row ",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Add New Row and Delete Row ",
              "timedOut": false,
              "duration": 13104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(1);",
              "err": {},
              "uuid": "cd2bd24b-281e-4258-bf2c-407467e6a861",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Check Cancel Button",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Check Cancel Button",
              "timedOut": false,
              "duration": 7070,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "6f9266c0-5cee-4c6c-bb20-986afb264ef6",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 15367,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "c2c48c79-1579-4aab-beb3-7205a76063a6",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Edit Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Edit Child Claim",
              "timedOut": false,
              "duration": 16139,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MyClaims_EditBtn();\nawait child_claims.MyClaims_AddClaim_Child_Name('ALI', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-06-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(1);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(2);\nawait utilFun.wait(3000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit();\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is updated successfully');",
              "err": {},
              "uuid": "a74a0f1e-5268-44bb-b146-1afffa42a2e7",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Show Attachment",
              "fullTitle": "Monthly Claims -> Child Claims should be able Show Attachment",
              "timedOut": false,
              "duration": 5879,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "30c3a495-2163-4330-a522-cfcf940b6c2d",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Review Icon",
              "fullTitle": "Monthly Claims -> Child Claims should be able Review Icon",
              "timedOut": false,
              "duration": 6774,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "d1afa77f-304c-46ca-b4a1-f06df183005b",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Delete Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Delete Child Claim",
              "timedOut": false,
              "duration": 7773,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_DeleteBtn();\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "f5e511fc-4b65-4084-9149-008dcdd17ced",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 22017,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "c793377a-51b9-4eea-9909-55aaf7fd0f6c",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment & Close Button",
              "fullTitle": "Monthly Claims -> Child Claims should be HR Role Show Attachment & Close Button",
              "timedOut": false,
              "duration": 8220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(2000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "ff34a875-3266-47c7-9a09-e7853523cc4f",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Edit Amount in Show Attachment",
              "fullTitle": "Monthly Claims -> Child Claims should be Edit Amount in Show Attachment",
              "timedOut": false,
              "duration": 14558,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_ShowAttachment_EditAmount_Hover();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ShowAttachment_EditAmount();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ClaimsRequest_EditBtn_RecieptAmount('3500');\nawait claims.MyClaims_ClaimsRequest_EditBtn_Reason('Extra budget');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();",
              "err": {},
              "uuid": "49565c34-50f6-4d8c-8cad-2ca2b37df846",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Child Claims should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 6783,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(4000);\nawait claims.MyClaims_FilterBtn();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\nawait claims.HRFilterSearchByClaimType('Personal Development Allowance');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Filter_HR_SearchByClaim_CrossIcon();\nawait claims.HRFilterSearchByClaimType('Fitness/Gym Allowance');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_HR_SearchByClaim_CrossIcon();\nawait claims.HRFilterSearchByClaimType('Child Education Support');\nawait utilFun.wait(4000);\n/// Start and End Date Filter\nawait claims.MyClaims_Filter_StartDate('2023-11-14');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2023-12-15')\nawait utilFun.wait(4000);\n/// Verify Results\nawait claims.Row_Assertion()\nawait claims.MyClaims_Filter_ClearBtn();",
              "err": {
                "message": "ElementNotInteractableError: element not interactable\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "ElementNotInteractableError: element not interactable\n  (Session info: headless chrome=119.0.6045.159)\n    at Object.throwDecodedError (node_modules/selenium-webdriver/lib/error.js:524:15)\n    at parseHttpResponse (node_modules/selenium-webdriver/lib/http.js:601:13)\n    at Executor.execute (node_modules/selenium-webdriver/lib/http.js:529:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async thenableWebDriverProxy.execute (node_modules/selenium-webdriver/lib/webdriver.js:745:17)\n    at async claims.MyClaims_Filter_SearchByName (test/support/pages/monthlyclaim/claims-pdf.js:326:9)\n    at async Context.<anonymous> (test/e2e/monthlyclaim/myclaims-child.js:230:9)",
                "diff": null
              },
              "uuid": "d10dbddf-d052-44d5-b5ff-ee6826c05219",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be HR Role Review Flow",
              "timedOut": false,
              "duration": 15494,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet query =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "708506b9-7416-4815-8637-afa4fb337fb9",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit One Child Claim for Approve Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim for Approve Flow",
              "timedOut": false,
              "duration": 21649,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "df7c5d2b-6f14-4275-bbcc-b068407dbc28",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Approve One Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Approve One Child Claim by HR",
              "timedOut": false,
              "duration": 24199,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Receipt status updated successfully!');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "3bbe4f91-30e0-4bc6-b609-8f98dd06849a",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit One Child Claim for Reject Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim for Reject Flow",
              "timedOut": false,
              "duration": 21723,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "c22232f9-55fd-4062-b8d7-213869ce5d64",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Reject Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Reject Child Claim by HR",
              "timedOut": false,
              "duration": 25044,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait utilFun.wait(3000)\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Receipt status updated successfully!');\nawait utilFun.wait(3000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "1438f732-3d7e-4a75-8df3-706cc86132f5",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be  Verify Reject Tab and check Show Attachment ",
              "fullTitle": "Monthly Claims -> Child Claims should be  Verify Reject Tab and check Show Attachment ",
              "timedOut": false,
              "duration": 9142,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "6fcf7b8f-9779-4301-b4d6-7eeb2f095ba3",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be  Verify Reject Tab and Check Review Icon  ",
              "fullTitle": "Monthly Claims -> Child Claims should be  Verify Reject Tab and Check Review Icon  ",
              "timedOut": false,
              "duration": 9120,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000);\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion();\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "3c97b5e5-9593-49ef-9999-a57835179e3b",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Child Claims should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 7934,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "f8ec3fd5-c7d8-40e5-86a3-2ea0ac5d744e",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Two Child Claim for Review Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Two Child Claim for Review Flow",
              "timedOut": false,
              "duration": 32088,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "65b54c46-15ea-4b50-a253-92521da1b3d3",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment & Close Button",
              "fullTitle": "Monthly Claims -> Child Claims should be HR Role Show Attachment & Close Button",
              "timedOut": false,
              "duration": 16949,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.wait(10000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "cf117872-e1b2-4b28-8734-e87a2167d185",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Edit Amount in Show Attachment",
              "fullTitle": "Monthly Claims -> Child Claims should be Edit Amount in Show Attachment",
              "timedOut": false,
              "duration": 14506,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(3000);\nawait claims.MyClaims_ShowAttachment_EditAmount_Hover();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ShowAttachment_EditAmount();\nawait utilFun.wait(2000);\nawait claims.MyClaims_ClaimsRequest_EditBtn_RecieptAmount('3500');\nawait claims.MyClaims_ClaimsRequest_EditBtn_Reason('Extra budget');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();",
              "err": {},
              "uuid": "c18f5be3-e2de-419a-b55e-10c82388baf7",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Review Flow for Two Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Review Flow for Two Child Claim by HR",
              "timedOut": false,
              "duration": 23446,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// const query = [\n//     `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n//     `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n//     `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n//     `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n// ];\n// await utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages1 = await claims.checkAlert();\nutilFun.assertEql(flashMessages1, 'Claim status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(1);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages2 = await claims.checkAlert();\nutilFun.assertEql(flashMessages2, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "f7c709a2-eed4-4dda-b63d-bb9d56ea3ba4",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Two Child Claim for Approve Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Two Child Claim for Approve Flow",
              "timedOut": false,
              "duration": 31334,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "5cbbb8ca-0c8e-4555-9042-52fcc89e1f9c",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Approve Two Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Approve Two Child Claim by HR",
              "timedOut": false,
              "duration": 31073,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "6cb1dcef-b403-489c-ab84-99d9fdf3010a",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Two Child Claim for Reject Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Two Child Claim for Reject Flow",
              "timedOut": false,
              "duration": 31694,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "872417be-bbae-4524-a1ac-226e6fb1e498",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Reject Two Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Reject Two Child Claim by HR",
              "timedOut": false,
              "duration": 28871,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(3000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim status updated successfully!');\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion();\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "31ede828-020a-4539-8810-e04cfbc291e9",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Three Child Claim for Review Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Three Child Claim for Review Flow",
              "timedOut": false,
              "duration": 41382,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Noman', 2);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 2);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('6000', 2);\nconst validationMessage3 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage3, 'Max amount limit is 5000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 2);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "576b01c7-0717-42fd-ae48-ba7cab1d4eba",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Review Flow for Three Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Review Flow for Three Child Claim by HR",
              "timedOut": false,
              "duration": 30897,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages1 = await claims.checkAlert();\nutilFun.assertEql(flashMessages1, 'Claim status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(1);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages2 = await claims.checkAlert();\nutilFun.assertEql(flashMessages2, 'Claim status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(2);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages3 = await claims.checkAlert();\nutilFun.assertEql(flashMessages3, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "8aac08c5-2708-4eb9-a081-3147f4d63d16",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Three Child Claim for Approve Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Three Child Claim for Approve Flow",
              "timedOut": false,
              "duration": 41201,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Noman', 2);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 2);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('6000', 2);\nconst validationMessage3 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage3, 'Max amount limit is 5000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 2);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "809a51d9-7246-406e-9c5c-1cd0745afa51",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Approve Three Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Approve Three Child Claim by HR",
              "timedOut": false,
              "duration": 37396,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait utilFun.wait(2000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage3 = await claims.checkAlert();\nutilFun.assertEql(flashMessage3, 'Receipt status updated successfully!');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim status updated successfully!');\nawait utilFun.wait(5000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "15456fd9-61b4-423b-8b44-c25ec151f2a5",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Three Child Claim for Reject Flow",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit Three Child Claim for Reject Flow",
              "timedOut": false,
              "duration": 41328,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 0);\nconst validationMessage = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage, 'Max amount limit is 3000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Hamza', 1);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 1);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 1);\nconst validationMessage2 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage2, 'Max amount limit is 4000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('4000', 1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowTwo_UploadBtn(2);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_NewRowAssertion();\nawait child_claims.MyClaims_AddClaim_Child_Name('Noman', 2);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 2);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('6000', 2);\nconst validationMessage3 = await child_claims.checkAlertValidation();\nutilFun.assertEql(validationMessage3, 'Max amount limit is 5000');\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('5000', 2);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(0);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowThree_UploadBtn(2);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');",
              "err": {},
              "uuid": "f2ce946d-304d-479e-8206-5e98b7e188d3",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Reject Three Child Claim by HR",
              "fullTitle": "Monthly Claims -> Child Claims should be Reject Three Child Claim by HR",
              "timedOut": false,
              "duration": 34581,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage1 = await claims.checkAlert();\nutilFun.assertEql(flashMessage1, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage2 = await claims.checkAlert();\nutilFun.assertEql(flashMessage2, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage3 = await claims.checkAlert();\nutilFun.assertEql(flashMessage3, 'Receipt status updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim status updated successfully!');\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion();\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "1c361566-8f33-4276-88b9-e5a59c98355b",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Child Claims should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 17952,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Deadline_Date('2023-02-05 22:40:20');\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "f4e1cc68-d15a-4204-885d-14d440dd5119",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 17335,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'You are not able to claim as the claim time is over.');",
              "err": {},
              "uuid": "100be654-880a-41af-b153-0c0abdbaca11",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Child Claims should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 17951,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        'DELETE FROM employee_claim_deadlines;',\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Deadline_Date('2024-12-05 22:40:20');\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "a902f345-bf33-449f-8729-bb13c8e8130a",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit One Child Claim",
              "fullTitle": "Monthly Claims -> Child Claims should be able to Submit One Child Claim",
              "timedOut": false,
              "duration": 17070,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Child Education Support');\nawait child_claims.MyClaims_AddClaim_Child_Name('Ahmed', 0);\nawait child_claims.MyClaims_AddClaim_Child_DateofBirth('03-01-2020', 0);\nawait child_claims.MyClaims_AddClaim_Child_ClaimableAmount('3000', 0);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(0);\nawait utilFun.wait(1000);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(1);\nawait child_claims.MyClaims_AddClaim_ChildRowOne_UploadBtn(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully');\nlet querys =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n        'DELETE FROM employee_claim_deadlines;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "ea80ca26-f25c-494a-891c-9e78959d4754",
              "parentUUID": "b58794cb-c8e3-46a0-98d6-b876ea1f52ef",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bcf005e2-0e44-4526-94aa-cac8503d0022",
            "0200eb89-0634-4365-9699-b1dc773e5200",
            "cd2bd24b-281e-4258-bf2c-407467e6a861",
            "6f9266c0-5cee-4c6c-bb20-986afb264ef6",
            "c2c48c79-1579-4aab-beb3-7205a76063a6",
            "a74a0f1e-5268-44bb-b146-1afffa42a2e7",
            "30c3a495-2163-4330-a522-cfcf940b6c2d",
            "d1afa77f-304c-46ca-b4a1-f06df183005b",
            "f5e511fc-4b65-4084-9149-008dcdd17ced",
            "c793377a-51b9-4eea-9909-55aaf7fd0f6c",
            "ff34a875-3266-47c7-9a09-e7853523cc4f",
            "49565c34-50f6-4d8c-8cad-2ca2b37df846",
            "708506b9-7416-4815-8637-afa4fb337fb9",
            "df7c5d2b-6f14-4275-bbcc-b068407dbc28",
            "3bbe4f91-30e0-4bc6-b609-8f98dd06849a",
            "c22232f9-55fd-4062-b8d7-213869ce5d64",
            "1438f732-3d7e-4a75-8df3-706cc86132f5",
            "6fcf7b8f-9779-4301-b4d6-7eeb2f095ba3",
            "3c97b5e5-9593-49ef-9999-a57835179e3b",
            "f8ec3fd5-c7d8-40e5-86a3-2ea0ac5d744e",
            "65b54c46-15ea-4b50-a253-92521da1b3d3",
            "cf117872-e1b2-4b28-8734-e87a2167d185",
            "c18f5be3-e2de-419a-b55e-10c82388baf7",
            "f7c709a2-eed4-4dda-b63d-bb9d56ea3ba4",
            "5cbbb8ca-0c8e-4555-9042-52fcc89e1f9c",
            "6cb1dcef-b403-489c-ab84-99d9fdf3010a",
            "872417be-bbae-4524-a1ac-226e6fb1e498",
            "31ede828-020a-4539-8810-e04cfbc291e9",
            "576b01c7-0717-42fd-ae48-ba7cab1d4eba",
            "8aac08c5-2708-4eb9-a081-3147f4d63d16",
            "809a51d9-7246-406e-9c5c-1cd0745afa51",
            "15456fd9-61b4-423b-8b44-c25ec151f2a5",
            "f2ce946d-304d-479e-8206-5e98b7e188d3",
            "1c361566-8f33-4276-88b9-e5a59c98355b",
            "f4e1cc68-d15a-4204-885d-14d440dd5119",
            "100be654-880a-41af-b153-0c0abdbaca11",
            "a902f345-bf33-449f-8729-bb13c8e8130a",
            "ea80ca26-f25c-494a-891c-9e78959d4754"
          ],
          "failures": [
            "d10dbddf-d052-44d5-b5ff-ee6826c05219"
          ],
          "pending": [],
          "skipped": [],
          "duration": 790542,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "f4f3c688-5853-45fe-813e-1c223cbf2887",
          "title": "Monthly Claims -> Gym Allowance",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-gym.js",
          "file": "/test/e2e/monthlyclaim/myclaims-gym.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button in Gym Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be able to Upload Photo and click Close Button in Gym Allowance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "a2d7b107-d983-4a04-bc3c-6c1d92850062",
              "parentUUID": "f4f3c688-5853-45fe-813e-1c223cbf2887",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able multiple File Upload & Cancel Button in GYM Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be able multiple File Upload & Cancel Button in GYM Allowance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "eeb5f2ef-311a-4513-bafb-20b20cd7743e",
              "parentUUID": "f4f3c688-5853-45fe-813e-1c223cbf2887",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Gym Allowance ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be add claim in Gym Allowance ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "9e7e6119-e1a3-4ec0-b0cc-911fbd1412f7",
              "parentUUID": "f4f3c688-5853-45fe-813e-1c223cbf2887",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Delete Claim in Gym Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Delete Claim in Gym Allowance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "96dbca78-9a85-476c-96f9-ac8597946173",
              "parentUUID": "f4f3c688-5853-45fe-813e-1c223cbf2887",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit Gym Allowance ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Submit Gym Allowance ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "40c67b7a-cbc7-484d-b189-2ad9f9bfd56d",
              "parentUUID": "f4f3c688-5853-45fe-813e-1c223cbf2887",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "60e9fcc4-7b12-444f-9a5c-b308107c33c9",
              "parentUUID": "f4f3c688-5853-45fe-813e-1c223cbf2887",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Edit Claim of Gym Allowance",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Edit Claim of Gym Allowance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "6d65ad54-5063-4dc3-b285-997dd5c4bc21",
              "parentUUID": "f4f3c688-5853-45fe-813e-1c223cbf2887",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reviews Chart",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Reviews Chart",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "5eb04166-20b5-4222-93b1-daef45c79c40",
              "parentUUID": "f4f3c688-5853-45fe-813e-1c223cbf2887",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Add Reviews",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Add Reviews",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "7df03338-43c8-4bb9-8df6-817516950654",
              "parentUUID": "f4f3c688-5853-45fe-813e-1c223cbf2887",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Approve Button",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Approve Button",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e98866fe-d801-42b0-b3fd-2c23b6e0846e",
              "parentUUID": "f4f3c688-5853-45fe-813e-1c223cbf2887",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review See Button in Approve Tab",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Review See Button in Approve Tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "af4f1890-aca9-40b9-8e82-b3ada55a790f",
              "parentUUID": "f4f3c688-5853-45fe-813e-1c223cbf2887",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reject Button",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Reject Button",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "c9682e47-0a03-420e-92f4-c69bf8017423",
              "parentUUID": "f4f3c688-5853-45fe-813e-1c223cbf2887",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reason See in Reject Tab ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be HR Role Reason See in Reject Tab ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "9672eb52-6d47-49bb-b52e-410793d45dac",
              "parentUUID": "f4f3c688-5853-45fe-813e-1c223cbf2887",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "48b12883-f070-43e5-bfde-62a1dd00ac3f",
              "parentUUID": "f4f3c688-5853-45fe-813e-1c223cbf2887",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Gym Allowance should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e44ffb30-985d-4664-bfd5-06c434212b50",
              "parentUUID": "f4f3c688-5853-45fe-813e-1c223cbf2887",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Gym Allowance to Verify Incorrect Date ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be add claim in Gym Allowance to Verify Incorrect Date ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "00482207-6367-42f4-b109-47ce503967fa",
              "parentUUID": "f4f3c688-5853-45fe-813e-1c223cbf2887",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Gym Allowance should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "da663587-4aad-4d73-bc72-62778119260e",
              "parentUUID": "f4f3c688-5853-45fe-813e-1c223cbf2887",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Gym Allowance to Verify Correct Date ",
              "fullTitle": "Monthly Claims -> Gym Allowance should be add claim in Gym Allowance to Verify Correct Date ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "e619ec04-484c-41a5-80e8-3892cd38932a",
              "parentUUID": "f4f3c688-5853-45fe-813e-1c223cbf2887",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "a2d7b107-d983-4a04-bc3c-6c1d92850062",
            "eeb5f2ef-311a-4513-bafb-20b20cd7743e",
            "9e7e6119-e1a3-4ec0-b0cc-911fbd1412f7",
            "96dbca78-9a85-476c-96f9-ac8597946173",
            "40c67b7a-cbc7-484d-b189-2ad9f9bfd56d",
            "60e9fcc4-7b12-444f-9a5c-b308107c33c9",
            "6d65ad54-5063-4dc3-b285-997dd5c4bc21",
            "5eb04166-20b5-4222-93b1-daef45c79c40",
            "7df03338-43c8-4bb9-8df6-817516950654",
            "e98866fe-d801-42b0-b3fd-2c23b6e0846e",
            "af4f1890-aca9-40b9-8e82-b3ada55a790f",
            "c9682e47-0a03-420e-92f4-c69bf8017423",
            "9672eb52-6d47-49bb-b52e-410793d45dac",
            "48b12883-f070-43e5-bfde-62a1dd00ac3f",
            "e44ffb30-985d-4664-bfd5-06c434212b50",
            "00482207-6367-42f4-b109-47ce503967fa",
            "da663587-4aad-4d73-bc72-62778119260e",
            "e619ec04-484c-41a5-80e8-3892cd38932a"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "2623761d-3300-49c4-9f51-002fbaf9aa34",
          "title": "Monthly Claims -> Marriage Bonus",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-marriage.js",
          "file": "/test/e2e/monthlyclaim/myclaims-marriage.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Upload Photo and click Close Button",
              "timedOut": false,
              "duration": 10428,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "4500c149-2250-4d7b-a6b6-af9ceffe7c4e",
              "parentUUID": "2623761d-3300-49c4-9f51-002fbaf9aa34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Upload Mulitiple Photos and click Close Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Upload Mulitiple Photos and click Close Button",
              "timedOut": false,
              "duration": 11453,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "961591be-2053-4e7e-a6dd-7a9e852d99c4",
              "parentUUID": "2623761d-3300-49c4-9f51-002fbaf9aa34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus",
              "timedOut": false,
              "duration": 12470,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "424376e8-4395-4128-ba7d-62a0f0cf1dba",
              "parentUUID": "2623761d-3300-49c4-9f51-002fbaf9aa34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Edit Medical Claims",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Edit Medical Claims",
              "timedOut": false,
              "duration": 10798,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_EditBtn();\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0)\nawait utilFun.wait(1000);\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is updated successfully');",
              "err": {},
              "uuid": "23e2d334-944c-4504-8933-d276ecd339f8",
              "parentUUID": "2623761d-3300-49c4-9f51-002fbaf9aa34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 22072,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Employee_FilterBtn();\nawait utilFun.wait(2000);\n// ///// Search By Claim Type\n// await claims.FilterSearchByClaimType('Personal Development Allowance');\n// await utilFun.wait(2000);\nawait claims.FilterSearchByClaimType('Fitness/Gym Allowance');\nawait utilFun.wait(2000);\nawait claims.FilterSearchByClaimType('Marriage Bonus');\n///// Search By Status\nawait claims.FilterSearchByStatus('Approved');\nawait claims.FilterSearchByStatus('Review');\nawait claims.FilterSearchByStatus('Pending');\nawait marriage_claims.Row_Assertion()\nawait utilFun.wait(4000);\nawait claims.MyClaims_Filter_ClearBtn()",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"d-flex pt-1\"]/div[1]/div/div[2]/div/div)\nWait timed out after 10103ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"d-flex pt-1\"]/div[1]/div/div[2]/div/div)\nWait timed out after 10103ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "48a66977-6bf4-478e-addd-7e340bd9e865",
              "parentUUID": "2623761d-3300-49c4-9f51-002fbaf9aa34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Show Attachment",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Show Attachment",
              "timedOut": false,
              "duration": 6933,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "90be42ff-cdfd-4728-8017-be3185a37621",
              "parentUUID": "2623761d-3300-49c4-9f51-002fbaf9aa34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Review Icon",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Review Icon",
              "timedOut": false,
              "duration": 6912,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon()\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "be5b06c2-11e0-405b-b59b-5bad7e36f297",
              "parentUUID": "2623761d-3300-49c4-9f51-002fbaf9aa34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Delete Marriage Claims",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Delete Marriage Claims",
              "timedOut": false,
              "duration": 7781,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_DeleteBtn();\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "122fd9d9-3201-4ce5-b4ef-f2e87adfd13c",
              "parentUUID": "2623761d-3300-49c4-9f51-002fbaf9aa34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus",
              "timedOut": false,
              "duration": 12504,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "0d9b7d87-9ab7-4c49-97d2-4bc2ad659d18",
              "parentUUID": "2623761d-3300-49c4-9f51-002fbaf9aa34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 5880,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "0189de09-5aa5-400d-9757-4c91d11f1150",
              "parentUUID": "2623761d-3300-49c4-9f51-002fbaf9aa34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 6881,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(4000);\nawait claims.MyClaims_FilterBtn();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\nawait claims.HRFilterSearchByClaimType('Personal Development Allowance');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Filter_HR_SearchByClaim_CrossIcon();\nawait claims.HRFilterSearchByClaimType('Fitness/Gym Allowance');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_HR_SearchByClaim_CrossIcon();\nawait claims.HRFilterSearchByClaimType('Marriage Bonus');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Filter_StartDate('2023-11-08');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2023-11-11')\nawait utilFun.wait(4000);\n/// Verify Results\nawait claims.Row_Assertion()\nawait claims.MyClaims_Filter_ClearBtn();",
              "err": {
                "message": "ElementNotInteractableError: element not interactable\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "ElementNotInteractableError: element not interactable\n  (Session info: headless chrome=119.0.6045.159)\n    at Object.throwDecodedError (node_modules/selenium-webdriver/lib/error.js:524:15)\n    at parseHttpResponse (node_modules/selenium-webdriver/lib/http.js:601:13)\n    at Executor.execute (node_modules/selenium-webdriver/lib/http.js:529:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async thenableWebDriverProxy.execute (node_modules/selenium-webdriver/lib/webdriver.js:745:17)\n    at async claims.MyClaims_Filter_SearchByName (test/support/pages/monthlyclaim/claims-pdf.js:326:9)\n    at async Context.<anonymous> (test/e2e/monthlyclaim/myclaims-marriage.js:164:9)",
                "diff": null
              },
              "uuid": "0a4b4c41-b808-4b2c-844c-12ca6b80b813",
              "parentUUID": "2623761d-3300-49c4-9f51-002fbaf9aa34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Add Reviews",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role Add Reviews",
              "timedOut": false,
              "duration": 11449,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait marriage_claims.MyClaims_ClaimRequest_AddReview()\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim request is reviewed successfully!');\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "acfa4ff9-e99c-4844-9a61-411a200d7fd4",
              "parentUUID": "2623761d-3300-49c4-9f51-002fbaf9aa34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role in Approve Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role in Approve Button",
              "timedOut": false,
              "duration": 11243,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(3000);\nawait marriage_claims.MyClaims_ClaimRequest_ApproveBtn();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Button for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is approved successfully!');\n///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "38cf2b7c-f6bf-497e-afee-d7ac6b9cb19b",
              "parentUUID": "2623761d-3300-49c4-9f51-002fbaf9aa34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Approve Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be Verify Approve Claim in Applicant Side",
              "timedOut": false,
              "duration": 7919,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_CheckHRStatus_Scroll();\nawait claims.MyClaims_CheckHRStatus();\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "db74ef97-ff4f-474c-8cc8-79fb15c55017",
              "parentUUID": "2623761d-3300-49c4-9f51-002fbaf9aa34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role in Rejection Button",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be HR Role in Rejection Button",
              "timedOut": false,
              "duration": 15301,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait marriage_claims.MyClaims_ClaimRequest_RejectBtn();\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject Button for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is rejected successfully!');\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "a1e1cdfd-f3ce-4553-af18-d6f6c45ae002",
              "parentUUID": "2623761d-3300-49c4-9f51-002fbaf9aa34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Reject Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be Verify Reject Claim in Applicant Side",
              "timedOut": false,
              "duration": 10091,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "767fa659-244e-4569-ba0a-7c207ec94885",
              "parentUUID": "2623761d-3300-49c4-9f51-002fbaf9aa34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 16115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9474;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2023-02-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "4ba12dde-1164-41c4-b261-de9d5a73544f",
              "parentUUID": "2623761d-3300-49c4-9f51-002fbaf9aa34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus for Verify Incorrect Deadline",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus for Verify Incorrect Deadline",
              "timedOut": false,
              "duration": 12569,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'You are not able to claim as the claim time is over.');",
              "err": {},
              "uuid": "9afcf926-1f4d-4e5a-8b26-f91b46465a12",
              "parentUUID": "2623761d-3300-49c4-9f51-002fbaf9aa34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 16409,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n[\n    'DELETE FROM employee_claim_deadlines;',\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9474;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2024-12-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "f9d91485-869e-4580-8c83-158d142f98a7",
              "parentUUID": "2623761d-3300-49c4-9f51-002fbaf9aa34",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Marriage Bonus for Verify Correct Deadline",
              "fullTitle": "Monthly Claims -> Marriage Bonus should be able to Submit Marriage Bonus for Verify Correct Deadline",
              "timedOut": false,
              "duration": 12392,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`, \n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Marriage Bonus');\nawait marriage_claims.MyClaims_AddClaim_Marriage_UploadFile();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');\nlet querys =\n[\n    'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n    'DELETE FROM employee_claim_deadlines;'\n];\n    await utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "291111a1-5572-4f82-af75-6873923f8aa4",
              "parentUUID": "2623761d-3300-49c4-9f51-002fbaf9aa34",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4500c149-2250-4d7b-a6b6-af9ceffe7c4e",
            "961591be-2053-4e7e-a6dd-7a9e852d99c4",
            "424376e8-4395-4128-ba7d-62a0f0cf1dba",
            "23e2d334-944c-4504-8933-d276ecd339f8",
            "90be42ff-cdfd-4728-8017-be3185a37621",
            "be5b06c2-11e0-405b-b59b-5bad7e36f297",
            "122fd9d9-3201-4ce5-b4ef-f2e87adfd13c",
            "0d9b7d87-9ab7-4c49-97d2-4bc2ad659d18",
            "0189de09-5aa5-400d-9757-4c91d11f1150",
            "acfa4ff9-e99c-4844-9a61-411a200d7fd4",
            "38cf2b7c-f6bf-497e-afee-d7ac6b9cb19b",
            "db74ef97-ff4f-474c-8cc8-79fb15c55017",
            "a1e1cdfd-f3ce-4553-af18-d6f6c45ae002",
            "767fa659-244e-4569-ba0a-7c207ec94885",
            "4ba12dde-1164-41c4-b261-de9d5a73544f",
            "9afcf926-1f4d-4e5a-8b26-f91b46465a12",
            "f9d91485-869e-4580-8c83-158d142f98a7",
            "291111a1-5572-4f82-af75-6873923f8aa4"
          ],
          "failures": [
            "48a66977-6bf4-478e-addd-7e340bd9e865",
            "0a4b4c41-b808-4b2c-844c-12ca6b80b813"
          ],
          "pending": [],
          "skipped": [],
          "duration": 227600,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
          "title": "Monthly Claims -> Medicals",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-medical.js",
          "file": "/test/e2e/monthlyclaim/myclaims-medical.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Upload Photo and click Close Button",
              "fullTitle": "Monthly Claims -> Medicals should be able to Upload Photo and click Close Button",
              "timedOut": false,
              "duration": 10826,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "4afeed07-bdc1-4e24-b76a-22aec2d0deac",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Upload Multiple Photos and click Close Button",
              "fullTitle": "Monthly Claims -> Medicals should be able to Upload Multiple Photos and click Close Button",
              "timedOut": false,
              "duration": 14405,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0);\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1500', 1);\nawait medical_claims.MyClaims_AddClaim_AddRow(1);\nawait medical_claims.MyClaims_AddClaim_AddRow(2);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_DeleteRow(1);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "3709538e-6250-4cef-a192-2f12dca1445d",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Add New Row and Delete Row",
              "fullTitle": "Monthly Claims -> Medicals should be able to Add New Row and Delete Row",
              "timedOut": false,
              "duration": 15364,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait utilFun.wait(5000);\nawait medical_claims.Row_Assertion();\nawait medical_claims.MyClaims_AddClaim_DeleteRow(1)",
              "err": {},
              "uuid": "60e719c8-248e-4b5a-869f-842ae8391fe0",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Add and Delete Attachments",
              "fullTitle": "Monthly Claims -> Medicals should be able to Add and Delete Attachments",
              "timedOut": false,
              "duration": 12656,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(5000);\nawait medical_claims.MyClaims_AddClaim_DeleteAttachment(0)",
              "err": {},
              "uuid": "d64f1822-1053-418c-839c-8b44b9be2e21",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to click Cancel Button",
              "fullTitle": "Monthly Claims -> Medicals should be able to click Cancel Button",
              "timedOut": false,
              "duration": 12553,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(5000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "80f2719c-63e4-4669-9566-6928f0132887",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims",
              "timedOut": false,
              "duration": 17346,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "e74289bd-538c-45ff-9ebe-442a7583288f",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Edit Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Edit Medical Claims",
              "timedOut": false,
              "duration": 9071,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_EditBtn();\nawait medical_claims.MyClaims_AddClaim_DeleteRow(1)\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is updated successfully');",
              "err": {},
              "uuid": "1801003c-9202-4b57-b96e-8eb5e30289fb",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "fullTitle": "Monthly Claims -> Medicals should be able Filter Button, Clear Button, Search By Claim Type and Search by Status",
              "timedOut": false,
              "duration": 33577,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Employee_FilterBtn();\nawait utilFun.wait(4000);\nawait claims.FilterSearchByClaimType('Medical Coverage');\nawait utilFun.wait(4000);\nawait claims.FilterSearchByClaimType('Fitness/Gym Allowance');\nawait utilFun.wait(4000);\nawait claims.FilterSearchByClaimType('Personal Development Allowance');\nawait claims.FilterSearchByStatus('Approved');\nawait claims.FilterSearchByStatus('Review');\nawait utilFun.wait(4000);\nawait claims.MyClaims_Filter_ClearBtn()",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"d-flex pt-1\"]/div[1]/div/div[2]/div/div)\nWait timed out after 10018ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(xpath, //*[@class=\"d-flex pt-1\"]/div[1]/div/div[2]/div/div)\nWait timed out after 10018ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "ff1dc429-58f8-4560-b50a-d51ed2626183",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Delete Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Delete Medical Claims",
              "timedOut": false,
              "duration": 8439,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MyClaims_DeleteBtn();\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "d16463c4-5bc6-4909-baba-7b8443c1311f",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims",
              "timedOut": false,
              "duration": 15497,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "4f9c074a-cb92-450c-9da1-271ec157a7c1",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 2833,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();",
              "err": {},
              "uuid": "14fd90f3-a785-436e-aa93-2106b478c6aa",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review Flow",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Review Flow",
              "timedOut": false,
              "duration": 19740,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ReviewBtn(1);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim request is reviewed successfully!');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nlet query =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "e6c2573d-3e2e-4c1a-b5fa-d22f592f2ce8",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims for Approve Flow",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims for Approve Flow",
              "timedOut": false,
              "duration": 15554,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "aa72413a-1385-463d-b241-9e987269e217",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Edit Reciept Amount",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Show Edit Reciept Amount",
              "timedOut": false,
              "duration": 41581,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`,\n    `DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;`\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_FirstChildClaim_EditAmount_Hover()\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_EditAmount(0);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_RecieptAmount('2500')\nawait utilFun.wait(1000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_Reason('Reason for edit amount')\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'The receipt amount has been updated successfully!');\nawait utilFun.wait(3000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_SecondChildClaim_EditAmount_Hover();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_EditAmount(0);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_RecieptAmount('5000')\nawait utilFun.wait(1000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_Edit_Reason('Reason for edit amount')\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox()\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'The receipt amount has been updated successfully!');",
              "err": {},
              "uuid": "441259b9-0edd-4df1-90a0-d81915f92141",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Approve Medicals",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Approve Medicals",
              "timedOut": false,
              "duration": 26412,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'The status has been updated successfully!');\nawait utilFun.wait(3000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'The status has been updated successfully!');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox();\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nawait utilFun.wait(3000)\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys)",
              "err": {},
              "uuid": "7f8655c6-36cf-4f8b-b22e-d2c936888292",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims for Reject Flow",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims for Reject Flow",
              "timedOut": false,
              "duration": 15504,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "a3af66b7-c92d-4d08-87e4-92b6fd8f93e7",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reject Medicals",
              "fullTitle": "Monthly Claims -> Medicals should be HR Role Reject Medicals",
              "timedOut": false,
              "duration": 28416,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'The status has been updated successfully!');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBtn(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'The status has been updated successfully!');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_RejectBox()\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve Main Box');\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment_ApproveBox_ApproveBtn();\nawait utilFun.wait(3000)\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "9818d845-e44e-48cb-ae96-e07b6060e300",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be  Verify Reject Tab and check Show Attachment ",
              "fullTitle": "Monthly Claims -> Medicals should be  Verify Reject Tab and check Show Attachment ",
              "timedOut": false,
              "duration": 9108,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachment();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "1bc6e047-e113-4267-9c15-4c477e8a3de7",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be  Verify Reject Tab and Check Review Icon  ",
              "fullTitle": "Monthly Claims -> Medicals should be  Verify Reject Tab and Check Review Icon  ",
              "timedOut": false,
              "duration": 9125,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()\nawait medical_claims.MonthlyClaims_ClaimRequest_RejectTab_ReviewIcon()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "9257d941-cb5d-4e6f-a052-8b9c9bb1d70f",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Medicals should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 7868,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn()\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "63d71659-6dd3-41ef-9243-5342d73a0dcd",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Medicals should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 15848,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2023-02-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "08f15de8-c28d-4f40-a36c-cfe2fb4eb7ba",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims Verify Incorrect Deadline",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims Verify Incorrect Deadline",
              "timedOut": false,
              "duration": 17363,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'You are not able to claim as the claim time is over.');",
              "err": {},
              "uuid": "b5708d63-6fb8-4933-982b-20efbbab3d5f",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Medicals should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 16113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        'DELETE FROM employee_claim_deadlines;',\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_DeadlineBtn();\nawait claims.MyClaims_DeadlineBtn_CrossIcon();\nawait utilFun.wait(3000);\nawait claims.MyClaims_Deadline_Date('2024-12-05 22:40:20');\nawait utilFun.wait(1000);\nawait claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "261e4d47-c72b-47e3-8868-bb7a5c5b5b79",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Medical Claims Verify Correct Deadline",
              "fullTitle": "Monthly Claims -> Medicals should be able to Submit Medical Claims Verify Correct Deadline",
              "timedOut": false,
              "duration": 17260,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Medical Coverage');\nawait medical_claims.MyClaims_AddClaim_UploadFile(0);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1200', 0);\nawait utilFun.wait(2000);\nawait medical_claims.MyClaims_AddClaim_AddRow(0)\nawait medical_claims.MyClaims_AddClaim_UploadFile(1);\nawait utilFun.wait(1000);\nawait medical_claims.MyClaims_AddClaim_AddAmount('1300', 1);\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');\nlet querys =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n        'DELETE FROM employee_claim_deadlines;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "bcff6b3f-e454-47e3-b841-a6efed94f062",
              "parentUUID": "329d66eb-65f5-4bcc-aa76-2e29434794b7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4afeed07-bdc1-4e24-b76a-22aec2d0deac",
            "3709538e-6250-4cef-a192-2f12dca1445d",
            "60e719c8-248e-4b5a-869f-842ae8391fe0",
            "d64f1822-1053-418c-839c-8b44b9be2e21",
            "80f2719c-63e4-4669-9566-6928f0132887",
            "e74289bd-538c-45ff-9ebe-442a7583288f",
            "1801003c-9202-4b57-b96e-8eb5e30289fb",
            "d16463c4-5bc6-4909-baba-7b8443c1311f",
            "4f9c074a-cb92-450c-9da1-271ec157a7c1",
            "14fd90f3-a785-436e-aa93-2106b478c6aa",
            "e6c2573d-3e2e-4c1a-b5fa-d22f592f2ce8",
            "aa72413a-1385-463d-b241-9e987269e217",
            "441259b9-0edd-4df1-90a0-d81915f92141",
            "7f8655c6-36cf-4f8b-b22e-d2c936888292",
            "a3af66b7-c92d-4d08-87e4-92b6fd8f93e7",
            "9818d845-e44e-48cb-ae96-e07b6060e300",
            "1bc6e047-e113-4267-9c15-4c477e8a3de7",
            "9257d941-cb5d-4e6f-a052-8b9c9bb1d70f",
            "63d71659-6dd3-41ef-9243-5342d73a0dcd",
            "08f15de8-c28d-4f40-a36c-cfe2fb4eb7ba",
            "b5708d63-6fb8-4933-982b-20efbbab3d5f",
            "261e4d47-c72b-47e3-8868-bb7a5c5b5b79",
            "bcff6b3f-e454-47e3-b841-a6efed94f062"
          ],
          "failures": [
            "ff1dc429-58f8-4560-b50a-d51ed2626183"
          ],
          "pending": [],
          "skipped": [],
          "duration": 392459,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
          "title": "Monthly Claims -> OverTime Claims",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-overtime.js",
          "file": "/test/e2e/monthlyclaim/myclaims-overtime.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able to Check Close Button ",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Check Close Button ",
              "timedOut": false,
              "duration": 11612,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn_Assertion()",
              "err": {},
              "uuid": "40b6d60a-a0c2-4367-bb78-9839500a426f",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Check Cancel Button ",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Check Cancel Button ",
              "timedOut": false,
              "duration": 11499,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-11' where id = 1;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 780 , \"date\" = '2023-09-12' where id = 2;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-13' where id = 3;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-14' where id = 4;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-15' where id = 5;`,\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 , \"totalMinutes\" = 480 , \"date\" = '2023-09-15' where id = 6;`\n\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn()\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CancelBtn_Assertion()",
              "err": {},
              "uuid": "0fa99c07-d08d-4695-ab3a-8fe8cea85a98",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to submit Overtime",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to submit Overtime",
              "timedOut": false,
              "duration": 32571,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\nawait overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "6df707ab-8685-47c6-9f54-037eb7746e6b",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details and Plus Icon",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details and Plus Icon",
              "timedOut": false,
              "duration": 10467,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "2efd7646-8444-4cfb-88f3-883e7c1e4ca1",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Delete Button",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Delete Button",
              "timedOut": false,
              "duration": 7882,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_DeleteButton(0)\nawait claims.MyClaims_DeleteBtn_YesBtn()\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim is deleted successfully');\nlet query =\n    [\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query)",
              "err": {},
              "uuid": "f4c503f9-9ec7-45ea-a3bd-26674989d0b2",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Submit Overtime",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Submit Overtime",
              "timedOut": false,
              "duration": 32508,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Abid Shahrukh Zaman')\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\nawait overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "1fce5f78-3698-4b47-a22b-e2bdc356e2d1",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to click Show Details",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to click Show Details",
              "timedOut": false,
              "duration": 21817,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"managerId\" = 9429 WHERE \"employeeId\" = 9429;`,\n    `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'project_manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 118 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = 2 WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(1000)\nawait utilFun.wait(5000)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(8000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "19dc9a91-12ec-4df5-824e-c899df61671c",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Filter Button",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Filter Button",
              "timedOut": false,
              "duration": 21438,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_PMSide_FilterButton();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\nawait claims.HRFilterSearchByClaimType('Overtime');\nawait utilFun.wait(1000);\n/// Start and End Date Filter\nawait claims.MyClaims_Filter_StartDate('2023-01-04');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2024-01-04')\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "973e0b4a-59b0-44ef-88a3-9d2a1116d948",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Review Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Review Flow",
              "timedOut": false,
              "duration": 16284,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Action_ReviewIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(5000)\n/// Verify Data in Review Tab\nawait overtime_claims.MyClaims_ReviewTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "de8d9594-3c89-412f-ad99-1e3d3e5e6861",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Reject Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Reject Flow",
              "timedOut": false,
              "duration": 11318,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Action_RejectIcon()\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Data in Reject Tab\nawait overtime_claims.MyClaims_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "509fc58a-f175-46c2-b857-f3272d9819c3",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Approve Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Approve Flow",
              "timedOut": false,
              "duration": 13270,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(5000);\nawait overtime_claims.MyClaims_Action_ApproveIcon();\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n/// Verify Data in Approve Tab\nawait overtime_claims.MyClaims_ApproveTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "1fa0fa50-6f79-446d-8778-2610b8d012d8",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details",
              "timedOut": false,
              "duration": 12379,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "60dabc2e-c866-4830-b714-9847166160cc",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review Flow",
              "fullTitle": "Monthly Claims -> OverTime Claims should be HR Role Review Flow",
              "timedOut": false,
              "duration": 16371,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\n        await utilFun.wait(2000)\n        await overtime_claims.MyClaims_Action_ReviewIcon(0);\n        await claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\n        await claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\n        const flashMessages = await claims.checkAlert();\n        utilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\n        await utilFun.wait(3000)\n        /// Verify Data in Review Tab\n        await claims.MyClaims_ClaimsRequest_ReviewTab();\n        await claims.Row_Assertion()\n        await utilFun.wait(3000)",
              "err": {},
              "uuid": "ff4b5d27-0865-442d-ae80-ef4a17d49e0f",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Approve Claim by HR",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Approve Claim by HR",
              "timedOut": false,
              "duration": 18626,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(5000);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_ApproveIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "046a4aa3-604b-455d-a45e-815733bc7cb5",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Reject Claim by HR",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Reject Claim by HR",
              "timedOut": false,
              "duration": 16384,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_RejectIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait utilFun.wait(3000)\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "4be58b7b-4cf7-4fb0-bd53-36ea187fdcba",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Reject Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Verify Reject Claim in Applicant Side",
              "timedOut": false,
              "duration": 13974,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nconst flashMessages = await overtime_claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Reject for Test Automation');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();\nlet query =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);",
              "err": {},
              "uuid": "4140a17f-43e3-49d7-abcb-7cc8648261ad",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit OverTime as a Project Manager (Employee)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Submit OverTime as a Project Manager (Employee)",
              "timedOut": false,
              "duration": 35320,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'project_manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 118 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = 2 WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Sumera Shaikh')\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\nawait overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');",
              "err": {},
              "uuid": "174f189e-09e7-4fc8-a73c-22b1661ed1e7",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details (HOD Side)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details (HOD Side)",
              "timedOut": false,
              "duration": 11447,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employee_claims SET \"managerId\" = 9429 WHERE \"employeeId\" = 9429;`,\n    `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'dev' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 83 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = 9429 WHERE id = 9;',\n    //// change manager id\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(5000);\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(3000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(2000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "0919a908-0d73-4a6d-bae8-ed4542cc19f1",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Filter Button (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Filter Button (HOD Scenario)",
              "timedOut": false,
              "duration": 21396,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_PMSide_FilterButton();\nawait utilFun.wait(2000);\n/// Search By Name\nawait claims.MyClaims_Filter_SearchByName('Muhammad Zeeshan Ullah')\nawait utilFun.wait(2000);\n/// Search By Claim Type\nawait claims.HRFilterSearchByClaimType('Overtime');\nawait utilFun.wait(1000);\n/// Start and End Date Filter\nawait claims.MyClaims_Filter_StartDate('2024-01-04');\nawait utilFun.wait(2000);\nawait claims.MyClaims_Filter_EndDate('2024-01-04')\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "ce7f917a-abd7-464e-9a98-4f3e112b9403",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Review Flow (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Review Flow (HOD Scenario)",
              "timedOut": false,
              "duration": 20540,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(3000);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_Action_ReviewIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(5000)\n/// Verify Data in Review Tab\nawait overtime_claims.MyClaims_ReviewTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "ad31294f-5b1d-46a5-88e7-787f744fc01a",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Reject Flow (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Reject Flow (HOD Scenario)",
              "timedOut": false,
              "duration": 11403,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Action_RejectIcon()\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reject for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Data in Reject Tab\nawait overtime_claims.MyClaims_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "1de02f78-d51c-4aeb-b2a0-9837833f79c6",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Approve Flow (HOD Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Approve Flow (HOD Scenario)",
              "timedOut": false,
              "duration": 13307,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"managerStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(5000);\nawait overtime_claims.MyClaims_Action_ApproveIcon();\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n/// Verify Data in Approve Tab\nawait overtime_claims.MyClaims_ApproveTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "cee341a1-3f6f-4afb-a40d-3fa071715459",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to Show Details (HR Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be able to Show Details (HR Scenario)",
              "timedOut": false,
              "duration": 9373,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait medical_claims.MonthlyClaims_ClaimRequest_ShowAttachmentIndex(0);\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(0);\nawait utilFun.wait(1000)\nawait overtime_claims.MyClaims_ShowDetails_PlusIcon(1);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "9bc0f7c7-29f9-41ef-a88c-ca0b6371dcc8",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review Flow (HR Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be HR Role Review Flow (HR Scenario)",
              "timedOut": false,
              "duration": 16526,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(2000)\nawait overtime_claims.MyClaims_Action_ReviewIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Add Reviews for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim request is reviewed successfully!');\nawait utilFun.wait(3000)\n/// Verify Data in Review Tab\nawait claims.MyClaims_ClaimsRequest_ReviewTab();\nawait claims.Row_Assertion()\nawait utilFun.wait(3000)",
              "err": {},
              "uuid": "60be4428-663d-4f4f-9585-430877cc8e46",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Approve Claim by HR (HR Scenario)",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Approve Claim by HR (HR Scenario)",
              "timedOut": false,
              "duration": 18481,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.wait(5000);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_ApproveIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Approve for Test Automation');\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is approved successfully!');\n// ///// Verify Data in Aprrove Tab\nawait claims.MyClaims_ClaimsRequest_ApproveTab()\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "60125031-68f5-43cf-b8c0-b3ff07d16c57",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Reject Claim by HR",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Reject Claim by HR",
              "timedOut": false,
              "duration": 16323,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employee_claims SET \"claimStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`\n    ];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(5000)\nawait overtime_claims.MyClaims_Action_RejectIcon(0);\nawait claims.MyClaims_ClaimsRequest_TextArea('Reject for Test Automation');\nawait utilFun.wait(3000)\nawait claims.MyClaims_ClaimsRequest_TextArea_AddBtn();\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Claim is rejected successfully!');\n/// Verify Reject Tab\nawait claims.MyClaims_ClaimsRequest_RejectTab();\nawait claims.Row_Assertion()",
              "err": {},
              "uuid": "17fb9c0a-c4dc-4eb1-803f-dad4e3fe109b",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Reject Claim in Applicant Side",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Verify Reject Claim in Applicant Side",
              "timedOut": false,
              "duration": 14059,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'Project Manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'project_manager' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = 118 WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = 2 WHERE id = 9429;`,\n    'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_CheckHRStatus_Scroll()\nawait claims.MyClaims_CheckHRStatus()\nawait utilFun.wait(3000);\nconst flashMessages = await overtime_claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Reject for Test Automation');\nawait claims.MyClaims_AddClaim_PersonalDevelopment_CloseBtn();",
              "err": {},
              "uuid": "436def83-8503-43fa-b089-f5713c643c0c",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Download CSV",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Download CSV",
              "timedOut": false,
              "duration": 21426,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait claims.MyClaims_ClaimRequest_DownloadBtn()\nawait utilFun.wait(3000);\nawait overtime_claims.MyClaims_Filter_StartDate('2024-01-01');\nawait utilFun.wait(1000);\nawait overtime_claims.MyClaims_Filter_EndDate('2024-01-15');\nawait claims.ClaimStatus('Pending');\nawait utilFun.wait(1000);\nawait claims.ClaimStatus('Rejected');\nawait claims.MyClaims_ClaimRequest_DownloadBtn_MainDownloadBtn()\nawait utilFun.wait(1000);\nlet querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "911ba53c-e793-42b0-a4ac-0b64a5b8d736",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 18015,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineDate_ClearHover();\nawait overtime_claims.MyClaims_DeadlineDate_ClearBtn();\nawait overtime_claims.MyClaims_Deadline_Date('2023-03-12 20:48:11');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "89508d87-78f4-4d8f-bd4c-2018a3932d0a",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit OverTime with Wrong Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Submit OverTime with Wrong Deadline Date",
              "timedOut": false,
              "duration": 22754,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Furqan Aziz')\nawait utilFun.wait(1000);\n// await overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\n// await overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nconst flashMessages = await claims.checkAlert();\nutilFun.assertEql(flashMessages, 'Overtime claim is only allow for current month');\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);",
              "err": {},
              "uuid": "2c59d239-4d94-4243-9954-e7a350cf89aa",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Set Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Set Deadline Date",
              "timedOut": false,
              "duration": 17875,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query =\n    [\n        'DELETE FROM employee_claim_deadlines;',\n        `UPDATE employees SET \"designation\" = 'HR' WHERE id = 9429;`,\n        `UPDATE employees SET \"workAs\" = 'hr' WHERE id = 9429;`,\n        `UPDATE employees SET \"departmentId\" = 7 WHERE id = 9429;`,\n        `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationId\" =NULL WHERE id = 9429;`,\n        `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n        'DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;'\n    ];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/claim-request');\nawait utilFun.wait(6000);\nawait overtime_claims.MyClaims_DeadlineBtn();\nawait overtime_claims.MyClaims_DeadlineDate_ClearHover();\nawait overtime_claims.MyClaims_DeadlineDate_ClearBtn();\nawait overtime_claims.MyClaims_Deadline_Date('2024-03-12 20:48:11');\nawait utilFun.wait(4000);\nawait overtime_claims.MyClaims_Deadline_SetBtn();\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Deadline is set successfully!');",
              "err": {},
              "uuid": "4b5b237d-b1a9-42f8-bd2b-216e5724fc18",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Submit OverTime as a SQA Automation(Employee) to Verify with Correct Deadline Date",
              "fullTitle": "Monthly Claims -> OverTime Claims should be Submit OverTime as a SQA Automation(Employee) to Verify with Correct Deadline Date",
              "timedOut": false,
              "duration": 30413,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n    `UPDATE employees SET \"designation\" = 'SQA Automation' WHERE id = 9429;`,\n    `UPDATE employees SET \"workAs\" = 'sqa' WHERE id = 9429;`,\n    `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationId\" = NULL WHERE id = 9429;`,\n    `UPDATE employees SET \"subDepartmentId\" = 52 WHERE id = 9429;`,\n    `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n];\nawait utilFun.udpateDatabase(query)\nawait utilFun.visit(baseUrl + '/claim');\nawait utilFun.wait(6000);\nawait claims.MyClaims_AddClaim_Btn();\nawait gym_claims.ClaimSelect('Overtime');\nawait overtime_claims.ManagerSelect('Furqan Aziz')\n// await utilFun.wait(1000);\n// await overtime_claims.MyClaims_AddClaim_SelectManager_CrossIcon();\n// await overtime_claims.ManagerSelect('Muhammad Bilal Rafaqat')\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 0);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0300', 0);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 1', 0);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(0);\nawait overtime_claims.MyClaims_AddClaim_SelectDate('2023-09-12', 1);\nawait utilFun.wait(2000);\nawait overtime_claims.MyClaims_AddClaim_SelectHours('0100', 1);\nawait overtime_claims.MyClaims_AddClaim_Description('Add Description 2', 1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_AddRowBtn(1);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait child_claims.MyClaims_AddClaim_RemoveCircleIcon(2);\nawait utilFun.wait(2000);\nawait claims.MyClaims_AddClaim_PersonalDevelopment_Submit()\nawait utilFun.wait(1000);\nconst flashMessage = await claims.checkAlert();\nutilFun.assertEql(flashMessage, 'Claim submitted successfully!');\n let querys =\n    ['DELETE FROM employee_claims_history WHERE \"actionBy\" = 9429;',\n        'DELETE FROM employee_claims WHERE \"employeeId\" = 9429;',\n        'DELETE FROM employee_claim_deadlines;'\n    ];\nawait utilFun.udpateDatabase(querys);",
              "err": {},
              "uuid": "f1ddac53-2ddc-45eb-bddf-8f2286ac54d1",
              "parentUUID": "ffe96f27-6290-4cc6-9bde-33facfcf3397",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "40b6d60a-a0c2-4367-bb78-9839500a426f",
            "0fa99c07-d08d-4695-ab3a-8fe8cea85a98",
            "6df707ab-8685-47c6-9f54-037eb7746e6b",
            "2efd7646-8444-4cfb-88f3-883e7c1e4ca1",
            "f4c503f9-9ec7-45ea-a3bd-26674989d0b2",
            "1fce5f78-3698-4b47-a22b-e2bdc356e2d1",
            "19dc9a91-12ec-4df5-824e-c899df61671c",
            "973e0b4a-59b0-44ef-88a3-9d2a1116d948",
            "de8d9594-3c89-412f-ad99-1e3d3e5e6861",
            "509fc58a-f175-46c2-b857-f3272d9819c3",
            "1fa0fa50-6f79-446d-8778-2610b8d012d8",
            "60dabc2e-c866-4830-b714-9847166160cc",
            "ff4b5d27-0865-442d-ae80-ef4a17d49e0f",
            "046a4aa3-604b-455d-a45e-815733bc7cb5",
            "4be58b7b-4cf7-4fb0-bd53-36ea187fdcba",
            "4140a17f-43e3-49d7-abcb-7cc8648261ad",
            "174f189e-09e7-4fc8-a73c-22b1661ed1e7",
            "0919a908-0d73-4a6d-bae8-ed4542cc19f1",
            "ce7f917a-abd7-464e-9a98-4f3e112b9403",
            "ad31294f-5b1d-46a5-88e7-787f744fc01a",
            "1de02f78-d51c-4aeb-b2a0-9837833f79c6",
            "cee341a1-3f6f-4afb-a40d-3fa071715459",
            "9bc0f7c7-29f9-41ef-a88c-ca0b6371dcc8",
            "60be4428-663d-4f4f-9585-430877cc8e46",
            "60125031-68f5-43cf-b8c0-b3ff07d16c57",
            "17fb9c0a-c4dc-4eb1-803f-dad4e3fe109b",
            "436def83-8503-43fa-b089-f5713c643c0c",
            "911ba53c-e793-42b0-a4ac-0b64a5b8d736",
            "89508d87-78f4-4d8f-bd4c-2018a3932d0a",
            "2c59d239-4d94-4243-9954-e7a350cf89aa",
            "4b5b237d-b1a9-42f8-bd2b-216e5724fc18",
            "f1ddac53-2ddc-45eb-bddf-8f2286ac54d1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 567058,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "c0174847-7b8f-40e3-9989-4108b697ac16",
          "title": "Monthly Claims -> Personal Development Fund",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/monthlyclaim/myclaims-pdf.js",
          "file": "/test/e2e/monthlyclaim/myclaims-pdf.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be able one File Upload and close button in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be able one File Upload and close button in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "eac93106-ec42-4fd1-b37a-4489bd9a1d4e",
              "parentUUID": "c0174847-7b8f-40e3-9989-4108b697ac16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able multiple File Upload & Cancel Button in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be able multiple File Upload & Cancel Button in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "41ac63ae-219e-403c-89f4-5ca951bf9924",
              "parentUUID": "c0174847-7b8f-40e3-9989-4108b697ac16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "76aff57f-2ff6-40be-93b0-01f8165a399c",
              "parentUUID": "c0174847-7b8f-40e3-9989-4108b697ac16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Delete Claim in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be Delete Claim in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "169a2e7d-8310-47ab-86ec-43ae1c28c111",
              "parentUUID": "c0174847-7b8f-40e3-9989-4108b697ac16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "603d2c9c-cdea-472f-881b-4928db6f76b3",
              "parentUUID": "c0174847-7b8f-40e3-9989-4108b697ac16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Show Attachment",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Show Attachment",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "4304d501-9d3d-4c5a-a23b-4e0f3a90fe32",
              "parentUUID": "c0174847-7b8f-40e3-9989-4108b697ac16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Edit Claim of Personal Development Allowance",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Edit Claim of Personal Development Allowance",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "d08cb189-51c9-48d3-8fbd-9cb776d4d301",
              "parentUUID": "c0174847-7b8f-40e3-9989-4108b697ac16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reviews Chart",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Reviews Chart",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8b000de4-c6ee-4d56-ac1a-59cdeb21137d",
              "parentUUID": "c0174847-7b8f-40e3-9989-4108b697ac16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Add Reviews",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Add Reviews",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8db5c792-2e4a-48dd-90a8-6dc414fe3419",
              "parentUUID": "c0174847-7b8f-40e3-9989-4108b697ac16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Approve Button",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Approve Button",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "d36dc300-594f-4f40-9e35-800f356bbb80",
              "parentUUID": "c0174847-7b8f-40e3-9989-4108b697ac16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Review See Button in Approve Tab",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Review See Button in Approve Tab",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "1d9bdb1d-26aa-4cc2-b525-c8967dcee9a4",
              "parentUUID": "c0174847-7b8f-40e3-9989-4108b697ac16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reject Button",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Reject Button",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "6eb43571-7629-4445-8d56-684b55fef2ef",
              "parentUUID": "c0174847-7b8f-40e3-9989-4108b697ac16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be HR Role Reason See in Reject Tab ",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be HR Role Reason See in Reject Tab ",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "70b07794-362c-4f99-8f15-76e76a895287",
              "parentUUID": "c0174847-7b8f-40e3-9989-4108b697ac16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Verify Rejection Claim in applicant side",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be Verify Rejection Claim in applicant side",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "3133c682-7c6a-4ab1-8cf0-a1bd18e06a0d",
              "parentUUID": "c0174847-7b8f-40e3-9989-4108b697ac16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be Incorrect Deadline Date",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be Incorrect Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "2973873e-c603-4cd4-8d0c-5e630d772d04",
              "parentUUID": "c0174847-7b8f-40e3-9989-4108b697ac16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund for Verify Incorrect Deadline",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund for Verify Incorrect Deadline",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "8b0dbef9-256e-40a9-9da4-a813b19043ed",
              "parentUUID": "c0174847-7b8f-40e3-9989-4108b697ac16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be check Correct Deadline Date",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be check Correct Deadline Date",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "5ab8e74a-8ae0-4591-8723-9eb7bee17e50",
              "parentUUID": "c0174847-7b8f-40e3-9989-4108b697ac16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be add claim in Personal Development Fund for Verify Correct Deadline",
              "fullTitle": "Monthly Claims -> Personal Development Fund should be add claim in Personal Development Fund for Verify Correct Deadline",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "6adbac74-4c33-4750-a749-89dea38c5194",
              "parentUUID": "c0174847-7b8f-40e3-9989-4108b697ac16",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "eac93106-ec42-4fd1-b37a-4489bd9a1d4e",
            "41ac63ae-219e-403c-89f4-5ca951bf9924",
            "76aff57f-2ff6-40be-93b0-01f8165a399c",
            "169a2e7d-8310-47ab-86ec-43ae1c28c111",
            "603d2c9c-cdea-472f-881b-4928db6f76b3",
            "4304d501-9d3d-4c5a-a23b-4e0f3a90fe32",
            "d08cb189-51c9-48d3-8fbd-9cb776d4d301",
            "8b000de4-c6ee-4d56-ac1a-59cdeb21137d",
            "8db5c792-2e4a-48dd-90a8-6dc414fe3419",
            "d36dc300-594f-4f40-9e35-800f356bbb80",
            "1d9bdb1d-26aa-4cc2-b525-c8967dcee9a4",
            "6eb43571-7629-4445-8d56-684b55fef2ef",
            "70b07794-362c-4f99-8f15-76e76a895287",
            "3133c682-7c6a-4ab1-8cf0-a1bd18e06a0d",
            "2973873e-c603-4cd4-8d0c-5e630d772d04",
            "8b0dbef9-256e-40a9-9da4-a813b19043ed",
            "5ab8e74a-8ae0-4591-8723-9eb7bee17e50",
            "6adbac74-4c33-4750-a749-89dea38c5194"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
          "title": "Portfolio Module",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/portfolio/spec-1-portfolio.js",
          "file": "/test/e2e/portfolio/spec-1-portfolio.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Portfolio Module\"",
              "fullTitle": "Portfolio Module \"before all\" hook in \"Portfolio Module\"",
              "timedOut": false,
              "duration": 10319,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');\nlet portfolioId = await utilFun.getFromDatabase(`SELECT id FROM project_portfolios WHERE \"name\" = '${portfolioName}';`)\nif(portfolioId.rowCount !== 0){\nconst query = [\n  `DELETE FROM project_portfolio_attachments WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n  `DELETE FROM project_portfolio_skills WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n  `DELETE FROM project_portfolio_employees WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n  `DELETE FROM project_portfolios WHERE id = ${portfolioId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n  }",
              "err": {},
              "uuid": "f164a3c0-7a97-4704-afa5-23c78aa635d7",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Portfolio Module\"",
              "fullTitle": "Portfolio Module \"before each\" hook in \"Portfolio Module\"",
              "timedOut": false,
              "duration": 4524,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/portfolio');\nawait utilFun.wait(4000);",
              "err": {},
              "uuid": "511dd765-870d-4135-a954-600bb2a21121",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if Portfolio is showing",
              "fullTitle": "Portfolio Module should check if Portfolio is showing",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/portfolio');",
              "err": {},
              "uuid": "a0e9e6d9-ce53-4f0d-bef4-f05343305c2e",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add Portfolio",
              "fullTitle": "Portfolio Module should able to Add Portfolio",
              "timedOut": false,
              "duration": 23976,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickAddPorfolioBtn()\nawait portfolio.typeProjectName(portfolioName)\nawait portfolio.pasteLiveLink('http://google.com')\nawait portfolio.selectProjectStatus('Active')\nawait portfolio.selectPOC('Muhammad Bilal Rafaqat')\nawait portfolio.selectIndustry('Gaming')\nawait portfolio.selectProjectNature('Web App')\nawait portfolio.typeProjectDescription('testing')\nawait portfolio.clickYesCheckbox()\nawait portfolio.clickNotNowCheckbox()\nawait portfolio.clickFormNxtBtn()\nawait portfolio.clickFormNewNxtBtn()\nawait portfolio.selectEngagementModel('Fixed Term')\nawait portfolio.selectClientRegion('Germany')\nawait portfolio.selectDivision('InvoTeams')\nawait portfolio.selectTechStack('Node Js')\nawait portfolio.typeTag('testing')\nawait portfolio.selectResource('Hello')\nawait portfolio.selectRole('Lead Developer')\nawait portfolio.clickForm1NxtBtn()\nawait portfolio.selectDemoLinkUpdate('Web App')\nawait portfolio.typeDemoLinkLink('link')\nawait portfolio.typeDemoLinkDetails('testing')\nawait portfolio.selectAchievementsUpdate('Awards')\nawait portfolio.typeAchievementsLink('Link')\nawait portfolio.typeAchievementsDetails('testing')\nawait portfolio.typeGitUpdate('test')\nawait portfolio.typeGitLink('link')\nawait portfolio.typeGitDetails('testing')\nawait portfolio.clickForm2NxtBtn()\nawait portfolio.typeVideoTitle('Video Title')\nawait portfolio.uploadVideoFile()\nawait portfolio.typeDocTitle('Doc Title')\nawait portfolio.uploadDocFile()\nawait portfolio.typeProblemsOrChallenges('testing')\nawait portfolio.typeSolutions('testing')\nawait portfolio.clickForm3SubmitBtn()\nconst alertText = await portfolio.checkAlert();\nutilFun.assertEql(alertText, 'Portfolio has been saved successfully');",
              "err": {},
              "uuid": "2caacaa7-646e-409c-88cf-d82afa407bfb",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if Portfolio is Added or Not",
              "fullTitle": "Portfolio Module should able to check if Portfolio is Added or Not",
              "timedOut": false,
              "duration": 1182,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.selectPortfolioName(portfolioName)\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {},
              "uuid": "3b9634d0-485e-4e57-b983-820920d32bac",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Update Portfolio",
              "fullTitle": "Portfolio Module should able to Update Portfolio",
              "timedOut": false,
              "duration": 28541,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.selectPortfolioName(portfolioName)\nawait portfolio.clickEditButton()\nawait portfolio.pasteLiveLink('http://google2.com')\nawait portfolio.selectProjectStatus('Closing')\nawait portfolio.selectPOC('Muhammad Bilal Rafaqat')\nawait portfolio.selectIndustry('Education')\nawait portfolio.selectProjectNature('IOS App')\nawait portfolio.typeProjectDescription('testing updated')\nawait portfolio.clickYesCheckbox()\nawait portfolio.clickNotNowCheckbox()\nawait portfolio.clickFormNxtBtn()\nawait portfolio.clickFormNewNxtBtn()\nawait portfolio.selectEngagementModel('Fixed Term')\nawait portfolio.selectClientRegion('Pakistan')\nawait portfolio.selectDivision('Invogame')\nawait portfolio.selectTechStack('Frontend')\nawait portfolio.typeTag('Updated Tag')\nawait portfolio.selectResource('Hello')\nawait portfolio.selectRole('Lead Developer')\nawait portfolio.clickForm1NxtBtn()\nawait portfolio.selectDemoLinkUpdate('Desktop App')\nawait portfolio.typeDemoLinkLink('updated')\nawait portfolio.typeDemoLinkDetails('update')\nawait portfolio.selectAchievementsUpdate('Shoutouts')\nawait portfolio.typeAchievementsLink('Link updated')\nawait portfolio.typeAchievementsDetails('testing updated')\nawait portfolio.typeGitUpdate('test updated')\nawait portfolio.typeGitLink('link updated')\nawait portfolio.typeGitDetails('testing updated')\nawait portfolio.clickForm2NxtBtn()\nawait portfolio.typeVideoTitle('Video Title Updated')\nawait portfolio.uploadVideoFile()\nawait portfolio.typeDocTitle('Doc Title updated')\nawait portfolio.uploadDocFile()\nawait portfolio.typeProblemsOrChallenges('testing updated')\nawait portfolio.typeSolutions('testing updated')\nawait portfolio.clickForm3SubmitBtn()\nconst alertText = await portfolio.checkAlert();\nutilFun.assertEql(alertText, 'Portfolio has been updated successfully');",
              "err": {},
              "uuid": "e9353d03-3f8e-40af-9742-169b731d5844",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Name",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Name",
              "timedOut": false,
              "duration": 1280,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.selectPortfolioName(portfolioName)\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {},
              "uuid": "b6ff04cd-c7c5-4ed6-96b4-46ee6bf5c2ad",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by POC",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by POC",
              "timedOut": false,
              "duration": 1271,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByPOC('Muhammad Bilal Rafaqat')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "79daf5b9-8848-4f40-a26d-1e8951c028cc",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Industry",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Industry",
              "timedOut": false,
              "duration": 1262,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByIndustry('Gaming')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Gaming'), `Expected text not found.`);",
              "err": {},
              "uuid": "17ca1ec0-ecc4-4be4-86fb-502178a40f37",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Tech Stack",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Tech Stack",
              "timedOut": false,
              "duration": 1873,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByTechstack('Node Js')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Node Js'), `Expected text not found.`);",
              "err": {},
              "uuid": "c9b2bbdc-1316-47c2-8dfa-d8f1c4c86859",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Resource",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Resource",
              "timedOut": false,
              "duration": 4507,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByResources('Hello')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {},
              "uuid": "5dc5c431-6119-468f-9dcb-74e90c2f52b3",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Tags",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Tags",
              "timedOut": false,
              "duration": 1119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByTags('testing')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('testing'), `Expected text not found.`);",
              "err": {},
              "uuid": "73871349-d47e-4c8c-9a62-de247be4431d",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Project Nature",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Project Nature",
              "timedOut": false,
              "duration": 1276,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByProjectNature('Web App')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Web App'), `Expected text not found.`);",
              "err": {},
              "uuid": "5c28b9e1-eb67-47e2-b457-83e3156c60e4",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Region",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Region",
              "timedOut": false,
              "duration": 4276,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByRegion('Pakistan')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes('Pakistan'), `Expected text not found.`);",
              "err": {},
              "uuid": "cb0191ac-0daf-4766-a52a-931d41d5a553",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to fiter Portfolio by Date",
              "fullTitle": "Portfolio Module should able to fiter Portfolio by Date",
              "timedOut": false,
              "duration": 1180,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickFilterBtn()\nawait portfolio.filterByDate('Last 2 Weeks')\nconst rowText = await portfolio.getRowText(); \nassert.ok(rowText.includes(portfolioName), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/portfolio/spec-1-portfolio.js:184:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "cda4c05c-9e37-47ac-b05f-efc4564b90f0",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Division Colum",
              "fullTitle": "Portfolio Module should able to Hide Division Colum",
              "timedOut": false,
              "duration": 976,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Division')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 14, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Division'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "bdf11502-3f7d-4e90-8c58-0a7e24d1b1c9",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Project Nature Colum",
              "fullTitle": "Portfolio Module should able to Hide Project Nature Colum",
              "timedOut": false,
              "duration": 969,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Project Nature')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 13, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Project Nature'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "d56e4d73-92af-49c4-8ea5-a60520a6c04f",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Tech Stack Colum",
              "fullTitle": "Portfolio Module should able to Hide Tech Stack Colum",
              "timedOut": false,
              "duration": 936,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Tech Stack')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 12, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Tech Stack'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "90fc54b4-a96d-45de-94c7-3ef607a1150d",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide POC Colum",
              "fullTitle": "Portfolio Module should able to Hide POC Colum",
              "timedOut": false,
              "duration": 856,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('POC')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 11, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('POC'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "9a096b1a-a055-4cf7-84da-40325844baee",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Resources Colum",
              "fullTitle": "Portfolio Module should able to Hide Resources Colum",
              "timedOut": false,
              "duration": 945,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Resources')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 10, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Resources'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "8a96812f-bf11-44d1-bfe0-50efb4cb8167",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Tags Colum",
              "fullTitle": "Portfolio Module should able to Hide Tags Colum",
              "timedOut": false,
              "duration": 824,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Tags')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 9, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Tags'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "4b4e2db4-3243-454f-aa55-38190f82e4db",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Industry Colum",
              "fullTitle": "Portfolio Module should able to Hide Industry Colum",
              "timedOut": false,
              "duration": 762,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Industry')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 8, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Industry'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "44010ca5-210f-4943-a5fc-43eef848e063",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Region Colum",
              "fullTitle": "Portfolio Module should able to Hide Region Colum",
              "timedOut": false,
              "duration": 703,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Region')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 7, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Region'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "cfffa22d-bb60-4324-923c-3c2c805d3934",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Attachments Colum",
              "fullTitle": "Portfolio Module should able to Hide Attachments Colum",
              "timedOut": false,
              "duration": 640,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Attachments')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 6, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Attachments'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "07fcafa0-f0a0-4376-93f3-0f68aa019d84",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Achievements Colum",
              "fullTitle": "Portfolio Module should able to Hide Achievements Colum",
              "timedOut": false,
              "duration": 736,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Achievements')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 5, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Achievements'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "9411fc0e-97f7-4873-bd0d-11e0bf65c314",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Git Access Colum",
              "fullTitle": "Portfolio Module should able to Hide Git Access Colum",
              "timedOut": false,
              "duration": 707,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await portfolio.clickHideColumsBtn()\nawait portfolio.selectColum('Git Access')\nconst columnsCount = await portfolio.getTableColumsCount(); \nassert.equal(columnsCount, 4, `Colums count is not Correct.`);\nconst columnsText = await portfolio.getTableColumsAndCheck('Git Access'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "791ef788-c6da-4bf6-a005-8e072e3994e4",
              "parentUUID": "e07f0a96-6d9f-4485-9b3c-8f374374e5e7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a0e9e6d9-ce53-4f0d-bef4-f05343305c2e",
            "2caacaa7-646e-409c-88cf-d82afa407bfb",
            "3b9634d0-485e-4e57-b983-820920d32bac",
            "e9353d03-3f8e-40af-9742-169b731d5844",
            "b6ff04cd-c7c5-4ed6-96b4-46ee6bf5c2ad",
            "79daf5b9-8848-4f40-a26d-1e8951c028cc",
            "17ca1ec0-ecc4-4be4-86fb-502178a40f37",
            "c9b2bbdc-1316-47c2-8dfa-d8f1c4c86859",
            "5dc5c431-6119-468f-9dcb-74e90c2f52b3",
            "73871349-d47e-4c8c-9a62-de247be4431d",
            "5c28b9e1-eb67-47e2-b457-83e3156c60e4",
            "cb0191ac-0daf-4766-a52a-931d41d5a553",
            "bdf11502-3f7d-4e90-8c58-0a7e24d1b1c9",
            "d56e4d73-92af-49c4-8ea5-a60520a6c04f",
            "90fc54b4-a96d-45de-94c7-3ef607a1150d",
            "9a096b1a-a055-4cf7-84da-40325844baee",
            "8a96812f-bf11-44d1-bfe0-50efb4cb8167",
            "4b4e2db4-3243-454f-aa55-38190f82e4db",
            "44010ca5-210f-4943-a5fc-43eef848e063",
            "cfffa22d-bb60-4324-923c-3c2c805d3934",
            "07fcafa0-f0a0-4376-93f3-0f68aa019d84",
            "9411fc0e-97f7-4873-bd0d-11e0bf65c314",
            "791ef788-c6da-4bf6-a005-8e072e3994e4"
          ],
          "failures": [
            "cda4c05c-9e37-47ac-b05f-efc4564b90f0"
          ],
          "pending": [],
          "skipped": [],
          "duration": 80806,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "16132143-e11a-47ab-8a3d-99ec45dd361d",
          "title": "Projects -> All Projects",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/projects/spec-1-allprojects.js",
          "file": "/test/e2e/projects/spec-1-allprojects.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Projects -> All Projects\"",
              "fullTitle": "Projects -> All Projects \"before all\" hook in \"Projects -> All Projects\"",
              "timedOut": false,
              "duration": 25,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\n// await utilFun.login(email, password);",
              "err": {},
              "uuid": "4281b8a8-4bd8-4468-b76f-6260c741765f",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to check Add Project Button Clickable ",
              "fullTitle": "Projects -> All Projects should able to check Add Project Button Clickable ",
              "timedOut": false,
              "duration": 4526,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'Head of Engineering' WHERE id = 9429;`,\n  `UPDATE employees SET \"workAs\" = 'dev' WHERE id = 9429;`,\n  `UPDATE employees SET \"departmentId\" = 9 WHERE id = 9429;`,\n  `UPDATE employees SET \"designationId\" = 83 WHERE id = 9429;`,\n  `UPDATE employees SET \"subDepartmentId\" = NULL WHERE id = 9429;`,\n  `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n  'UPDATE departments SET \"hodId\" = 9429 WHERE id = 9;',\n  //// change manager id\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_AddProject_Btn();\nawait projects.checkModelIsVisible();",
              "err": {},
              "uuid": "e54f0dd2-754d-4d23-881e-5b2e8ee7f14f",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Add Button is Disable ",
              "fullTitle": "Projects -> All Projects should able to Verify Add Button is Disable ",
              "timedOut": false,
              "duration": 5143,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_AddProject_Btn();\nawait utilFun.wait(1000);\nawait projects.Projects_AddProject_AddBtn_Disable();",
              "err": {},
              "uuid": "758e124a-9164-4529-a2c4-f5d650aaae1c",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add Project",
              "fullTitle": "Projects -> All Projects should able to Add Project",
              "timedOut": false,
              "duration": 11215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM projects WHERE \"name\" = 'Appeo';`);\nlet portfolioId = await utilFun.getFromDatabase(`SELECT id FROM project_portfolios WHERE \"name\" = 'Appeo';`);\nif (resourceId.rowCount !== 0) {\n  let query = [\n    `DELETE FROM \"project_portfolio_skills\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n    `DELETE FROM \"project_timelines\" WHERE \"projectId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"project_portfolio_employees\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n    `DELETE FROM \"project_portfolios\" WHERE \"projectId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"projects\" WHERE \"id\" = ${resourceId.rows[0].id};`,\n  ];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_AddProject_Btn();\nawait projects.Projects_AddProject_ProjectName('Appeo');\nawait projects.Projects_AddProject_Divison('InvoLane');\nawait projects.Projects_AddProject_Status('Closing');\nawait projects.Projects_AddProject_AddBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project is created successfully.');",
              "err": {},
              "uuid": "bfc49e2b-03e3-40aa-b626-83213a95449c",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify if Project is added",
              "fullTitle": "Projects -> All Projects should able to Verify if Project is added",
              "timedOut": false,
              "duration": 7131,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Appeo'), `Expected text not found.`);",
              "err": {},
              "uuid": "718cfb15-3bcf-4ca6-bd37-14fcc4f39044",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Division",
              "fullTitle": "Projects -> All Projects should able to Edit Division",
              "timedOut": false,
              "duration": 11113,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditDivision_Hover();\nawait projects.Projects_ProjectDetail_EditDivision();\nawait projects.selectInput('Invogame');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "018a506a-59dc-4f1a-8d85-eecfe8cd1ca2",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Country",
              "fullTitle": "Projects -> All Projects should able to Edit Country",
              "timedOut": false,
              "duration": 11088,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditCountry_Hover();\nawait projects.Projects_ProjectDetail_EditCountryClick();\nawait projects.selectInput('Egypt');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "c9ec8217-894c-4ed1-b281-cc7da5277d5d",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Status",
              "fullTitle": "Projects -> All Projects should able to Edit Status",
              "timedOut": false,
              "duration": 11166,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditStatusHover();\nawait projects.Projects_ProjectDetail_EditStatusClick();\nawait projects.selectInput('Closing');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "0357b09a-2cd1-4f11-b0d7-7801d63617fd",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Project Manager",
              "fullTitle": "Projects -> All Projects should able to Edit Project Manager",
              "timedOut": false,
              "duration": 11296,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditProjectManagerHover();\nawait projects.Projects_ProjectDetail_EditProjectManagerClick();\nawait projects.selectInput('Muhammad Bilal Rafaqat');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "67fb3412-eb68-4417-95ac-e96d3b820b16",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Contract",
              "fullTitle": "Projects -> All Projects should able to Edit Contract",
              "timedOut": false,
              "duration": 11129,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditContractHover();\nawait projects.Projects_ProjectDetail_EditContractClick();\nawait projects.selectInput('Agency to Client');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "972cea3c-1b77-4fa7-8e41-abc476c2e345",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit PM Introduced",
              "fullTitle": "Projects -> All Projects should able to Edit PM Introduced",
              "timedOut": false,
              "duration": 11069,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditPMIntroHover();\nawait projects.Projects_ProjectDetail_EditPMIntroClick();\nawait projects.selectInput('No');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "4351bd1d-afb1-4602-bd5b-7a85331fdcbf",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Dev Introduced",
              "fullTitle": "Projects -> All Projects should able to Edit Dev Introduced",
              "timedOut": false,
              "duration": 10546,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditDevIntroHover();\nawait projects.Projects_ProjectDetail_EditDevIntroClick();\nawait projects.selectInput('Yes');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "4b77fb81-bab1-472f-83cd-9cd1cabc9483",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Engagement",
              "fullTitle": "Projects -> All Projects should able to Edit Engagement",
              "timedOut": false,
              "duration": 11141,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditEngagementHover();\nawait projects.Projects_ProjectDetail_EditEngagementClick();\nawait projects.selectInput('Hourly');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "eb518511-bb79-4da6-85dd-d5ef2e5cb52c",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Billing Cycle",
              "fullTitle": "Projects -> All Projects should able to Edit Billing Cycle",
              "timedOut": false,
              "duration": 11255,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditBillingCycleHover();\nawait projects.Projects_ProjectDetail_EditBillingCycleClick();\nawait projects.selectInput('Weekly');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "ad7f02c8-eb8b-40a3-aa65-6200c2ac8f88",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit BD Member",
              "fullTitle": "Projects -> All Projects should able to Edit BD Member",
              "timedOut": false,
              "duration": 9848,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditBDMemberHover();\nawait projects.Projects_ProjectDetail_EditBDMember();\nawait projects.selectInput('Ahsan Butt');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "eb598456-81a8-4091-b8b5-312b5681a885",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Communication Mode",
              "fullTitle": "Projects -> All Projects should able to Edit Communication Mode",
              "timedOut": false,
              "duration": 11048,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditCommunicationModeHover();\nawait projects.Projects_ProjectDetail_EditCommunicationModeClick();\nawait projects.selectInput('Email');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "6740e9ad-2626-499c-ad5b-881f1bd5c210",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Billing Profile",
              "fullTitle": "Projects -> All Projects should able to Edit Billing Profile",
              "timedOut": false,
              "duration": 11118,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditBillingProfileHover();\nawait projects.Projects_ProjectDetail_EditBillingProfile();\nawait projects.selectInput('Cash');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "3880425f-9351-4fb0-ab95-69e06605d21d",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Billing Channel",
              "fullTitle": "Projects -> All Projects should able to Edit Billing Channel",
              "timedOut": false,
              "duration": 10900,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_EditBillingChannelHover();\nawait projects.Projects_ProjectDetail_EditBillingChannelClick();\nawait projects.selectInput('Upwork Profile');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');\n//'Billing profile is required for this billing channel!!');",
              "err": {},
              "uuid": "3b720578-011d-4e0e-957b-4569f46f8698",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document & Cancel Button",
              "fullTitle": "Projects -> All Projects should able to Upload Document & Cancel Button",
              "timedOut": false,
              "duration": 10951,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadPhoto(0);\nawait projects.Projects_ProjectDetail_UploadDocument_AddRow(0);\nawait projects.Projects_ProjectDetail_UploadDocument_RemoveRow(1);\nawait projects.Projects_CancelBtn();",
              "err": {},
              "uuid": "0b6da750-8256-48ef-844b-88730c20214b",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document  & Disable Submit Button ",
              "fullTitle": "Projects -> All Projects should able to Upload Document  & Disable Submit Button ",
              "timedOut": false,
              "duration": 10319,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_DisableSubmitBtn();",
              "err": {},
              "uuid": "daaf60eb-b111-4b0e-b4eb-00103c803bee",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document Photo & Submit Button ",
              "fullTitle": "Projects -> All Projects should able to Upload Document Photo & Submit Button ",
              "timedOut": false,
              "duration": 14568,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadPhoto(0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');",
              "err": {},
              "uuid": "35ba269f-d7e8-4bae-900b-69ebd8389b4d",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Download Documents ",
              "fullTitle": "Projects -> All Projects should able to Download Documents ",
              "timedOut": false,
              "duration": 6932,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_DownloadDocumentBtn(0);\nawait projects.Projects_DownloadDocumentBtn(1);",
              "err": {},
              "uuid": "cd56635a-056f-4f35-8f3d-928a1e07d280",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document Link & Cancel Button",
              "fullTitle": "Projects -> All Projects should able to Upload Document Link & Cancel Button",
              "timedOut": false,
              "duration": 11185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('Link', 1);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_ProjectDetail_UploadDocument_Field('www.invohub.com', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_AddRow(0);\nawait projects.Projects_ProjectDetail_UploadDocument_RemoveRow(1);\nawait projects.Projects_CancelBtn();",
              "err": {},
              "uuid": "7c0de9ba-7d4d-45e6-aff8-227aaa34dcfb",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document Link & Submit Button ",
              "fullTitle": "Projects -> All Projects should able to Upload Document Link & Submit Button ",
              "timedOut": false,
              "duration": 14965,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('Link', 1);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Title');\nawait projects.Projects_ProjectDetail_UploadDocument_Field('www.invohub.com', 0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');",
              "err": {},
              "uuid": "f4423cfb-7ece-4a4c-9c93-85a483c7af14",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete Documents & Cancel Button ",
              "fullTitle": "Projects -> All Projects should able to Delete Documents & Cancel Button ",
              "timedOut": false,
              "duration": 6920,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_CancelBtn();",
              "err": {},
              "uuid": "b50ce83d-2906-4924-a3e7-1f31aa63053d",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete Documents & Ok Button ",
              "fullTitle": "Projects -> All Projects should able to Delete Documents & Ok Button ",
              "timedOut": false,
              "duration": 15117,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Document removed from project successfully.');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Document removed from project successfully.');",
              "err": {},
              "uuid": "e5c9d196-bd80-4967-b763-c679ac15e06f",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document PDF & Submit Button & Delete PDF ",
              "fullTitle": "Projects -> All Projects should able to Upload Document PDF & Submit Button & Delete PDF ",
              "timedOut": false,
              "duration": 19005,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document PDF Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadPDF(0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Document removed from project successfully.');",
              "err": {},
              "uuid": "e0e74c15-fec7-49c8-934d-7c19898d4f2f",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document Doc & Submit Button & Delete Doc ",
              "fullTitle": "Projects -> All Projects should able to Upload Document Doc & Submit Button & Delete Doc ",
              "timedOut": false,
              "duration": 18820,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Doc Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadDoc(0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Document removed from project successfully.');",
              "err": {},
              "uuid": "6f15e093-f0b3-4f29-bda3-93644f5b6eef",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Upload Document xlsx & Submit Button & Delete xlsx ",
              "fullTitle": "Projects -> All Projects should able to Upload Document xlsx & Submit Button & Delete xlsx ",
              "timedOut": false,
              "duration": 19085,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(0);\nawait projects.ProjectsType('File', 0);\nawait projects.Projects_ProjectDetail_UploadDocument_DocTypeTitle('Document Xlsx Title');\nawait projects.Projects_ProjectDetail_UploadDocument_UploadXlsx(0);\nawait projects.Projects_SubmitBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Documents added successfully');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Document removed from project successfully.');",
              "err": {},
              "uuid": "6a4631e5-ae67-4cc2-b80e-904b7ee1a2fb",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add Resource in Project ",
              "fullTitle": "Projects -> All Projects should able to Add Resource in Project ",
              "timedOut": false,
              "duration": 28248,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectDetail_UploadData(1);\nawait projects.RoleProject('Lead SQA');\nawait projects.ResourceName('Ahmed Ali');\nawait projects.EngagementCapicity('5~6 hours');\nawait projects.EngagementMode('Parked');\nawait projects.Projects_ProjectDetail_AddResource_Alias('Input Alias');\nawait projects.Projects_SubmitBtns();\nconst flashMessages = await projects.checkAlert();\nutilFun.assertEql(flashMessages, 'Resource added successfully.');",
              "err": {},
              "uuid": "cd9e51dc-1a7d-436f-bd70-3084f7c706b5",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Resource Engagement Mode ",
              "fullTitle": "Projects -> All Projects should able to Edit Resource Engagement Mode ",
              "timedOut": false,
              "duration": 11149,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_Resource_EngagementModeHover();\nawait projects.Projects_Resource_EngagementModeEdit();\nawait projects.ResourceEngagementMode('Training');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "ca1c4430-2a5b-4770-a117-a435ed586d47",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Resource Engagement Capicity ",
              "fullTitle": "Projects -> All Projects should able to Edit Resource Engagement Capicity ",
              "timedOut": false,
              "duration": 10963,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.ResourceEngagementCapicity('Fully Occupied');\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');",
              "err": {},
              "uuid": "436ba82c-7ec3-4b80-90bd-35e007dab78a",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Alias",
              "fullTitle": "Projects -> All Projects should able to Edit Alias",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "1379838e-84a8-4387-975c-c1d7abadc39e",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete Resource",
              "fullTitle": "Projects -> All Projects should able to Delete Resource",
              "timedOut": false,
              "duration": 10848,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_DeleteBtn(0);\nawait projects.Projects_DeleteDoc_OkBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Resource removed from project successfully.');",
              "err": {},
              "uuid": "b966d1ef-6bcf-4778-8e90-057888a3e7b1",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Project",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Project",
              "timedOut": false,
              "duration": 6667,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Appeo'), `Expected text not found.`);",
              "err": {},
              "uuid": "ceb0faa4-ea59-4b75-a441-5921b556afcd",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Manager ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Manager ",
              "timedOut": false,
              "duration": 7120,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Manager', 'Muhammad Bilal Rafaqat');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "6d446e13-8c48-4b7f-bac6-229c0565fa79",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Division ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Division ",
              "timedOut": false,
              "duration": 6839,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Division', 'InvoTeams');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('InvoTeams'), `Expected text not found.`);",
              "err": {},
              "uuid": "0bc2df34-afa5-4d1c-9d7b-82b81a2171af",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Status ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Status ",
              "timedOut": false,
              "duration": 7008,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Status', 'Active');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Active'), `Expected text not found.`);",
              "err": {},
              "uuid": "93f69d1b-ab7f-470d-8967-f79c696e796b",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by BD Team ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by BD Team ",
              "timedOut": false,
              "duration": 7100,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by BD Team', 'Bd F');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Bd F'), `Expected text not found.`);",
              "err": {},
              "uuid": "f5e03fd3-f6d2-4d6c-b74f-9ddae07ca6d1",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by BD Member ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by BD Member ",
              "timedOut": false,
              "duration": 7146,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by BD Member', 'Ahsan Butt');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Ahsan Butt'), `Expected text not found.`);",
              "err": {},
              "uuid": "c23a1eaf-5e6e-4247-93b9-eed65a32d8c6",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Contract ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Contract ",
              "timedOut": false,
              "duration": 7013,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Contract', 'Agency to Client');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Agency to Client'), `Expected text not found.`);",
              "err": {},
              "uuid": "bac88de4-3b90-493c-8385-107f768ea00f",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Country ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Country ",
              "timedOut": false,
              "duration": 6999,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Country', 'Egypt');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Egypt'), `Expected text not found.`);",
              "err": {},
              "uuid": "d2e3de50-083a-44b7-b880-8f2c85bafaf1",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Search by Billing Channel ",
              "fullTitle": "Projects -> All Projects should able to Verify Search by Billing Channel ",
              "timedOut": false,
              "duration": 7428,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Billing Channel', 'Upwork Profile');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Upwork Profile'), `Expected text not found.`);",
              "err": {},
              "uuid": "2f673555-8eda-441b-a2ed-dbc4f50fc7c2",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Click Clear Button ",
              "fullTitle": "Projects -> All Projects should able Click Clear Button ",
              "timedOut": false,
              "duration": 7291,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Billing Channel', 'InvoZone Pvt. Ltd. Meezan');\nawait projects.selectFilter_ProjectDetail_Assert('InvoZone Pvt. Ltd. Meezan');\nawait projects.Projects_Filter_ClearBtn();",
              "err": {},
              "uuid": "2bf7e7ec-784d-4a62-ac18-8606b9540eb4",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Filter Fields ",
              "fullTitle": "Projects -> All Projects should able to Verify Filter Fields ",
              "timedOut": false,
              "duration": 28421,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.selectFilter('Search by Manager', 'Muhammad Bilal Rafaqat');\nawait projects.selectFilter('Search by Division', 'InvoTeams');\nawait projects.selectFilter('Search by Status', 'Active');\nawait projects.selectFilter('Search by BD Team', 'BD F');\nawait projects.selectFilter('Search by BD Member', 'Ahmed Irtza');\nawait projects.selectFilter('Search by Contract', 'Individual to Client');\nawait projects.selectFilter('Search by Country', 'Egypt');\nawait projects.selectFilter('Search by Billing Channel', 'InvoZone Pvt. Ltd. Meezan');\nawait projects.Projects_Filter_ClearBtn();",
              "err": {},
              "uuid": "d03cb0a0-d95f-4d6b-9238-5d0aedeb8732",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify Apply Multiple Searches ",
              "fullTitle": "Projects -> All Projects should able to Verify Apply Multiple Searches ",
              "timedOut": false,
              "duration": 50194,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.selectFilter('Search by Manager', 'Muhammad Bilal Rafaqat');\nawait projects.selectFilter('Search by Manager', 'Ali Ahmad');\nawait projects.selectFilter('Search by Division', 'InvoTeams');\nawait projects.selectFilter('Search by Division', 'Invogame');\nawait projects.selectFilter('Search by Status', 'Active');\nawait projects.selectFilter('Search by Status', 'Paused');\nawait projects.selectFilter('Search by BD Team', 'BD F');\nawait projects.selectFilter('Search by BD Team', 'N/A');\nawait projects.selectFilter('Search by BD Member', 'Ahmed Irtza');\nawait projects.selectFilter('Search by BD Member', 'Ahsan Butt');\nawait projects.selectFilter('Search by CSM', 'Areeba Tariq');\nawait projects.selectFilter('Search by CSM', 'Fiza Murad');\nawait projects.selectFilter('Search by Contract', 'Individual to Client');\nawait projects.selectFilter('Search by Contract', 'Agency to Client');\nawait projects.selectFilter('Search by Country', 'Egypt');\nawait projects.selectFilter('Search by Country', 'Pakistan');\nawait projects.selectFilter('Search by Billing Channel', 'InvoZone Pvt. Ltd. Meezan');\nawait projects.selectFilter('Search by Billing Channel', 'N/A');",
              "err": {},
              "uuid": "cc728f22-4055-4be5-9987-72b54c929687",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Click Project Detail",
              "fullTitle": "Projects -> All Projects should able Click Project Detail",
              "timedOut": false,
              "duration": 7023,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "f56def12-4e3b-47da-b372-0194550fae47",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Edit Project Name",
              "fullTitle": "Projects -> All Projects should able Edit Project Name",
              "timedOut": false,
              "duration": 25451,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait utilFun.wait(3000)\nawait projects.clickToggleIcon()\nawait projects.Projects_ProjectsDetail_EditProject();\nawait projects.Projects_ProjectsDetail_InputName('test');\nawait projects.Projects_ProjectsDetail_UpdateButton();\nlet flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');\nawait utilFun.wait(2000)\nawait projects.Projects_ProjectsDetail_EditProject();\nawait projects.Projects_ProjectsDetail_InputName_Clear();\nawait projects.Projects_ProjectsDetail_InputName('Appeo');\nawait projects.Projects_ProjectsDetail_UpdateButton();\nflashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "d0a4e9d2-d032-4f4d-af80-afa4bb70cabc",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify if Project is added",
              "fullTitle": "Projects -> All Projects should able to Verify if Project is added",
              "timedOut": false,
              "duration": 5931,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('Appeo'), `Expected text not found.`);",
              "err": {},
              "uuid": "7dc985cd-2f88-446a-bbf7-029d8ea10069",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Click Cancel Btn in Project Detail",
              "fullTitle": "Projects -> All Projects should able Click Cancel Btn in Project Detail",
              "timedOut": false,
              "duration": 11316,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectsDetail_EditProject();\nawait projects.Projects_ProjectsDetail_InputName('test');\nawait projects.Projects_ProjectsDetail_CancelBtn();\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "c5c28ab6-bb17-4e14-bd4b-567e8ecb8fec",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Add Description in Project Detail",
              "fullTitle": "Projects -> All Projects should able Add Description in Project Detail",
              "timedOut": false,
              "duration": 16546,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectsDetail_Description('Add New Description');\nawait projects.Projects_ProjectsDetail_UpdateBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Updated successfully.');\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "4c863dd5-cbf9-4792-be11-81504f8c7939",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Search Stack in Project Detail",
              "fullTitle": "Projects -> All Projects should able Search Stack in Project Detail",
              "timedOut": false,
              "duration": 10304,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectDetail_Search('Admin');\nawait projects.ProjectDetail_TextAssertion();",
              "err": {},
              "uuid": "0e8cbf07-928c-4f21-8e27-7191ce50e2f6",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Add Stack in Project Detail",
              "fullTitle": "Projects -> All Projects should able Add Stack in Project Detail",
              "timedOut": false,
              "duration": 4223,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// await projects.Projects_ProjectDetail_Search('Admin');\nawait projects.Projects_ProjectDetail_AddStack();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Skills are updated successfully.');",
              "err": {},
              "uuid": "422c3ca5-cd66-4e31-9357-c027f765b522",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Delete Stack and Click No Btutton",
              "fullTitle": "Projects -> All Projects should able Delete Stack and Click No Btutton",
              "timedOut": false,
              "duration": 216,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await projects.Projects_ProjectDetail_DeleteStack();\nawait projects.Projects_NoBtn();",
              "err": {},
              "uuid": "de5695c9-181f-4814-98e0-c1e279c946a3",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Delete Stack in Project Detail",
              "fullTitle": "Projects -> All Projects should able Delete Stack in Project Detail",
              "timedOut": false,
              "duration": 4566,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await projects.Projects_ProjectDetail_DeleteStack();\nawait projects.Projects_ProjectDetail_YesBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Tech Stack is deleted successfully.');\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "08589b58-62c9-4af7-8efc-c46a0ae44361",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Check Filter Btn in Timeline",
              "fullTitle": "Projects -> All Projects should able to Check Filter Btn in Timeline",
              "timedOut": false,
              "duration": 14149,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectDetail_TimelineTab();\nawait projects.Projects_ProjectDetail_TimelineStartDate('28-11-2023');\nawait projects.Projects_ProjectDetail_TimelineEndDate('28-12-2024');\nawait projects.Projects_ProjectDetail_ApplyFilterBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Filtered successfully.');\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "a3d29f48-701b-402d-acba-2a2c79beef1b",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Clear Button in Project Timeline",
              "fullTitle": "Projects -> All Projects should able Clear Button in Project Timeline",
              "timedOut": false,
              "duration": 15058,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectDetail_TimelineTab();\nawait projects.Projects_ProjectDetail_TimelineStartDate('28-11-2023');\nawait projects.Projects_ProjectDetail_TimelineEndDate('28-12-2024');\nawait projects.Projects_ProjectDetail_ApplyFilterBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Filtered successfully.');\nawait projects.Projects_ProjectDetail_Timeline_ClearBtn();\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "edd854e0-8b72-4d82-b93e-15fcc24f96ba",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Verify Status in Timeline",
              "fullTitle": "Projects -> All Projects should able Verify Status in Timeline",
              "timedOut": false,
              "duration": 11945,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'Appeo');\nawait projects.Projects_ProjectsDetailClick();\nawait login.switchWindow(1);\nawait projects.ProjectDetail_URLAssertion();\nawait projects.Projects_ProjectDetail_TimelineTab();\nawait utilFun.wait(2000)\nconst name = await projects.Projects_ProjectDetail_Timeline_StatusAssert();\nassert.ok(name.includes('Removed'), `Expected text not found.`);\nconst names = await projects.Projects_ProjectDetail_Timeline_StatusAssert();\nassert.ok(names.includes('Muhammad Zeeshan Ullah'), `Expected text not found.`);",
              "err": {},
              "uuid": "3fa994af-e8a8-4493-a8a2-9a6cb7a9bbd7",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click History Tab",
              "fullTitle": "Projects -> All Projects should able to Click History Tab",
              "timedOut": false,
              "duration": 3188,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.wait(3000);\nawait projects.Projects_ProjectDetail_HistoryBtn();",
              "err": {},
              "uuid": "870e47db-850e-427b-9b6b-e80dc623329a",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify notification History Tab",
              "fullTitle": "Projects -> All Projects should able to Verify notification History Tab",
              "timedOut": false,
              "duration": 153,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = await projects.Projects_ProjectDetail_History_Assert();\nassert.ok(\n  name.includes('bilal.rafaqat@invozone.dev has updated the Project Tech Stack by removing the technology named Admin.'),\n  `Expected text not found.`,\n);\nawait utilFun.closeCurrentTab()\nawait login.switchWindow(0);",
              "err": {},
              "uuid": "37a78fc4-7fd0-4f47-b737-9eab76cbc1a1",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Division in Hide Columns ",
              "fullTitle": "Projects -> All Projects should able to Click Division in Hide Columns ",
              "timedOut": false,
              "duration": 6218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await login.switchWindow(0);\nawait utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Division');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 18, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Division');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "a813450a-f5c8-4525-9e06-157371b16b29",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Tech Stack in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Tech Stack in Hide Columns",
              "timedOut": false,
              "duration": 6056,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Tech Stack');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 17, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Tech Stack');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "46ea56ad-51cf-434a-94d7-8a82283b0874",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Country in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Country in Hide Columns",
              "timedOut": false,
              "duration": 5937,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Country');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 16, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Country');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "3f1fa90c-b1b2-40c2-b8f3-bd430ffc6e47",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Status in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Status in Hide Columns",
              "timedOut": false,
              "duration": 6131,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Status');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 15, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Status');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "c4d15871-fb07-43d0-9a18-96b178fbe78a",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Project Manager in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Project Manager in Hide Columns",
              "timedOut": false,
              "duration": 5777,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Project Manager');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 14, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Project Manager');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "179a8505-a708-4be8-ad92-e63dec704e8e",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Contract in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Contract in Hide Columns",
              "timedOut": false,
              "duration": 6034,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Contract');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 13, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Contract');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "5f112a1e-3da0-4627-be62-ab1670382bd9",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click PM Introduced in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click PM Introduced in Hide Columns",
              "timedOut": false,
              "duration": 6034,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('PM Introduced');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 12, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('PM Introduced');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "85c63a90-6419-4c30-b305-187ec35d80eb",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Dev Introduced in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Dev Introduced in Hide Columns",
              "timedOut": false,
              "duration": 5834,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Dev Introduced');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 11, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Dev Introduced');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "918d09a8-6e64-441b-aaef-49dc51acbf43",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Engagement in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Engagement in Hide Columns",
              "timedOut": false,
              "duration": 5825,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Engagement');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 10, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Engagement');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "725df050-e0d6-4990-926a-af452e5fe763",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Billing Cycle in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Billing Cycle in Hide Columns",
              "timedOut": false,
              "duration": 5702,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Billing Cycle');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 9, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Billing Cycle');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "fd34f2b1-0f65-4cf5-adbd-bc95359d9bae",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click BD Member in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click BD Member in Hide Columns",
              "timedOut": false,
              "duration": 5789,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('BD Member');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 8, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('BD Member');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "60ab0cb9-bdc6-426b-91cf-858bf79e22f8",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click BD Team in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click BD Team in Hide Columns",
              "timedOut": false,
              "duration": 5949,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('BD Team');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 7, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('BD Team');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "3734b0ea-2af8-4cd9-ae94-0fca7c204614",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Communication in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Communication in Hide Columns",
              "timedOut": false,
              "duration": 5793,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Communication');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 6, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Communication');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "d2526264-cbea-4dcd-b923-6a1708f44704",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Billing Profile in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Billing Profile in Hide Columns",
              "timedOut": false,
              "duration": 5552,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Billing Profile');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 5, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Billing Profile');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "8de92010-1049-4be1-897e-76a6f1ac3267",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Billing Channel in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Billing Channel in Hide Columns",
              "timedOut": false,
              "duration": 5519,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Billing Channel');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 4, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Billing Channel');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "05cc073c-0fe6-481f-bd44-28a666d118ee",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Click Engineers in Hide Columns",
              "fullTitle": "Projects -> All Projects should able to Click Engineers in Hide Columns",
              "timedOut": false,
              "duration": 5879,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait utilFun.wait(3000);\nawait projects.Projects_SettingBtn();\nawait projects.Hide_Columns('Engineers');\nconst columnsCount = await projects.getTableColumsCount();\nassert.equal(columnsCount, 3, `Colums count is not Correct.`);\nconst columnsText = await projects.getTableColumsAndCheck('Engineers');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "254471fd-b956-4eb7-9a73-eafd2ef86008",
              "parentUUID": "16132143-e11a-47ab-8a3d-99ec45dd361d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e54f0dd2-754d-4d23-881e-5b2e8ee7f14f",
            "758e124a-9164-4529-a2c4-f5d650aaae1c",
            "bfc49e2b-03e3-40aa-b626-83213a95449c",
            "718cfb15-3bcf-4ca6-bd37-14fcc4f39044",
            "018a506a-59dc-4f1a-8d85-eecfe8cd1ca2",
            "c9ec8217-894c-4ed1-b281-cc7da5277d5d",
            "0357b09a-2cd1-4f11-b0d7-7801d63617fd",
            "67fb3412-eb68-4417-95ac-e96d3b820b16",
            "972cea3c-1b77-4fa7-8e41-abc476c2e345",
            "4351bd1d-afb1-4602-bd5b-7a85331fdcbf",
            "4b77fb81-bab1-472f-83cd-9cd1cabc9483",
            "eb518511-bb79-4da6-85dd-d5ef2e5cb52c",
            "ad7f02c8-eb8b-40a3-aa65-6200c2ac8f88",
            "eb598456-81a8-4091-b8b5-312b5681a885",
            "6740e9ad-2626-499c-ad5b-881f1bd5c210",
            "3880425f-9351-4fb0-ab95-69e06605d21d",
            "3b720578-011d-4e0e-957b-4569f46f8698",
            "0b6da750-8256-48ef-844b-88730c20214b",
            "daaf60eb-b111-4b0e-b4eb-00103c803bee",
            "35ba269f-d7e8-4bae-900b-69ebd8389b4d",
            "cd56635a-056f-4f35-8f3d-928a1e07d280",
            "7c0de9ba-7d4d-45e6-aff8-227aaa34dcfb",
            "f4423cfb-7ece-4a4c-9c93-85a483c7af14",
            "b50ce83d-2906-4924-a3e7-1f31aa63053d",
            "e5c9d196-bd80-4967-b763-c679ac15e06f",
            "e0e74c15-fec7-49c8-934d-7c19898d4f2f",
            "6f15e093-f0b3-4f29-bda3-93644f5b6eef",
            "6a4631e5-ae67-4cc2-b80e-904b7ee1a2fb",
            "cd9e51dc-1a7d-436f-bd70-3084f7c706b5",
            "ca1c4430-2a5b-4770-a117-a435ed586d47",
            "436ba82c-7ec3-4b80-90bd-35e007dab78a",
            "b966d1ef-6bcf-4778-8e90-057888a3e7b1",
            "ceb0faa4-ea59-4b75-a441-5921b556afcd",
            "6d446e13-8c48-4b7f-bac6-229c0565fa79",
            "0bc2df34-afa5-4d1c-9d7b-82b81a2171af",
            "93f69d1b-ab7f-470d-8967-f79c696e796b",
            "f5e03fd3-f6d2-4d6c-b74f-9ddae07ca6d1",
            "c23a1eaf-5e6e-4247-93b9-eed65a32d8c6",
            "bac88de4-3b90-493c-8385-107f768ea00f",
            "d2e3de50-083a-44b7-b880-8f2c85bafaf1",
            "2f673555-8eda-441b-a2ed-dbc4f50fc7c2",
            "2bf7e7ec-784d-4a62-ac18-8606b9540eb4",
            "d03cb0a0-d95f-4d6b-9238-5d0aedeb8732",
            "cc728f22-4055-4be5-9987-72b54c929687",
            "f56def12-4e3b-47da-b372-0194550fae47",
            "d0a4e9d2-d032-4f4d-af80-afa4bb70cabc",
            "7dc985cd-2f88-446a-bbf7-029d8ea10069",
            "c5c28ab6-bb17-4e14-bd4b-567e8ecb8fec",
            "4c863dd5-cbf9-4792-be11-81504f8c7939",
            "0e8cbf07-928c-4f21-8e27-7191ce50e2f6",
            "422c3ca5-cd66-4e31-9357-c027f765b522",
            "de5695c9-181f-4814-98e0-c1e279c946a3",
            "08589b58-62c9-4af7-8efc-c46a0ae44361",
            "a3d29f48-701b-402d-acba-2a2c79beef1b",
            "edd854e0-8b72-4d82-b93e-15fcc24f96ba",
            "3fa994af-e8a8-4493-a8a2-9a6cb7a9bbd7",
            "870e47db-850e-427b-9b6b-e80dc623329a",
            "37a78fc4-7fd0-4f47-b737-9eab76cbc1a1",
            "a813450a-f5c8-4525-9e06-157371b16b29",
            "46ea56ad-51cf-434a-94d7-8a82283b0874",
            "3f1fa90c-b1b2-40c2-b8f3-bd430ffc6e47",
            "c4d15871-fb07-43d0-9a18-96b178fbe78a",
            "179a8505-a708-4be8-ad92-e63dec704e8e",
            "5f112a1e-3da0-4627-be62-ab1670382bd9",
            "85c63a90-6419-4c30-b305-187ec35d80eb",
            "918d09a8-6e64-441b-aaef-49dc51acbf43",
            "725df050-e0d6-4990-926a-af452e5fe763",
            "fd34f2b1-0f65-4cf5-adbd-bc95359d9bae",
            "60ab0cb9-bdc6-426b-91cf-858bf79e22f8",
            "3734b0ea-2af8-4cd9-ae94-0fca7c204614",
            "d2526264-cbea-4dcd-b923-6a1708f44704",
            "8de92010-1049-4be1-897e-76a6f1ac3267",
            "05cc073c-0fe6-481f-bd44-28a666d118ee",
            "254471fd-b956-4eb7-9a73-eafd2ef86008"
          ],
          "failures": [],
          "pending": [
            "1379838e-84a8-4387-975c-c1d7abadc39e"
          ],
          "skipped": [],
          "duration": 753131,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "863673a3-780c-42a6-a5d5-be370fc52d95",
          "title": "Projects -> OnBoarding",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/projects/spec-2-actualProejct.js",
          "file": "/test/e2e/projects/spec-2-actualProejct.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to check Actual Prject Form is Showing by clicking Add btn  ",
              "fullTitle": "Projects -> OnBoarding should able to check Actual Prject Form is Showing by clicking Add btn  ",
              "timedOut": false,
              "duration": 3532,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = [\n  `UPDATE employees SET \"designation\" = 'BD F' WHERE id = 9429;`,\n  `UPDATE employees SET \"workAs\" = 'dev' WHERE id = 9429;`,\n  `UPDATE employees SET \"departmentId\" = 3 WHERE id = 9429;`,\n  `UPDATE employees SET \"designationId\" = 13 WHERE id = 9429;`,\n  `UPDATE employees SET \"subDepartmentId\" = 13 WHERE id = 9429;`,\n  `UPDATE employees SET \"designationLevelId\" = NULL WHERE id = 9429;`,\n  'UPDATE departments SET \"hodId\" = NULL WHERE id = 9;',\n  'UPDATE departments SET \"hodId\" = NULL WHERE id = 3;',\n];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProject();\nawait projectOnBoarding.checkActualProjectModel();",
              "err": {},
              "uuid": "ba96bb31-cdb6-4905-a113-4218d9f102a8",
              "parentUUID": "863673a3-780c-42a6-a5d5-be370fc52d95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check Cross Button ",
              "fullTitle": "Projects -> OnBoarding should able to check Cross Button ",
              "timedOut": false,
              "duration": 4195,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProject();\nawait projectOnBoarding.checkActualProjectModel();\nawait projectOnBoarding.ProjectOnBoarding_CrossBtn();\nawait projectOnBoarding.checkActualProjectModelNotVisible();",
              "err": {},
              "uuid": "e2b6e1bd-79ea-4b3a-8e1d-bc236f199026",
              "parentUUID": "863673a3-780c-42a6-a5d5-be370fc52d95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Add Actual Project  ",
              "fullTitle": "Projects -> OnBoarding should able Add Actual Project  ",
              "timedOut": false,
              "duration": 54326,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM projects WHERE \"name\" = 'InvoChain';`);\nlet portfolioId = await utilFun.getFromDatabase(`SELECT id FROM project_portfolios WHERE \"name\" = 'InvoChain';`);\nif (resourceId.rowCount !== 0) {\n  let query = [\n    `DELETE FROM \"project_portfolio_skills\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n    `DELETE FROM \"project_timelines\" WHERE \"projectId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"project_portfolio_employees\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n    `DELETE FROM \"project_portfolios\" WHERE \"projectId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"projects\" WHERE \"id\" = ${resourceId.rows[0].id};`,\n  ];\n  await utilFun.udpateDatabase(query);\n}\nlet query = [`DELETE FROM \"project_onboardings\" WHERE \"name\" = 'InvoChain'`,`DELETE FROM \"project_onboardings\" WHERE \"name\" = 'InvoBlog'`, `DELETE FROM \"project_onboardings\" WHERE \"name\" = 'InvoBlogUpdated'`,];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait utilFun.wait(3000);\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProject();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectName('InvoBlog');\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectReferenceNo('12344321');\nawait projectOnBoarding.OnBoarding_AddActualProject_StartDate('02-01-2024');\nawait projectOnBoarding.OnBoarding_AddActualProject_TentavieDuration('2 year');\nawait projectOnBoarding.selectValue('Select Division', 'Dtest');\nawait projectOnBoarding.selectValue('Select Source', 'International Event');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactName('Alia');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactPersonEmail('abc@info.com');\nawait projectOnBoarding.clickNextBtnPage1();\nawait projectOnBoarding.selectField('BD Member *\\nSelect resource', 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField('Actual Resource(s)\\nSelect resources', 'Abdul Wakeel');\nawait projectOnBoarding.selectField('Resource Name (Shared with Client)', 'Tariq');\nawait projectOnBoarding.selectField('Tech Stack *\\nSelect Tech Stack', 'Admin');\nawait projectOnBoarding.selectField('Communication Mode\\nSelect mode', 'Email');\nawait projectOnBoarding.selectField('Project Manager\\nSelect Project Manager', 'amna hussain');\nawait projectOnBoarding.selectField('Service Mode*\\nSelect service mode', 'Yet To Be Decided');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.selectField('Company Name', 'InvoZone USA');\nawait projectOnBoarding.selectField('Company Address', 'Lahore');\nawait projectOnBoarding.selectField('Client Side Billing Representative Name*', 'Abdul Wakeel');\nawait projectOnBoarding.selectField('Client Side Billing Representative Email', '123@invozone.com');\nawait projectOnBoarding.selectField('Billing Cycle*\\nSelect billing cycle', 'Monthly');\nawait projectOnBoarding.selectField('Billing Start Date *', '01-01-2024');\nawait projectOnBoarding.selectField('Currency *\\nUnited States Dollar', 'United States Dollar');\nawait projectOnBoarding.selectField('Billing Rates/ Total Project Cost*', '20024');\nawait projectOnBoarding.selectField('Billing Platform *', 'Cash');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn3();\nawait projectOnBoarding.selectField('Reference thread\\nNo', 'No');\nawait projectOnBoarding.selectField('Are we introduced as Agency or Individual?*\\nSelect introduction', 'Individual to Client');\nawait projectOnBoarding.selectField('Rate Concluded*', '15');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration', 'No Trial');\nawait projectOnBoarding.selectField(\n  'Any Future Upsells which client gave a heads up for near future?*\\n' + 'Select option',\n  'Nothing at the moment',\n);\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_AddActualProject_AddRequest();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project onboarding request is completed successfuly!');",
              "err": {},
              "uuid": "b4f5e05b-27f7-4e43-a8d5-1c2f8d271cf2",
              "parentUUID": "863673a3-780c-42a6-a5d5-be370fc52d95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Actual project is created or not",
              "fullTitle": "Projects -> OnBoarding should check if Actual project is created or not",
              "timedOut": false,
              "duration": 4152,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoBlog');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoBlog');",
              "err": {},
              "uuid": "fceaccce-4e45-4f1f-be33-f702cc4d8048",
              "parentUUID": "863673a3-780c-42a6-a5d5-be370fc52d95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Edit Actual project",
              "fullTitle": "Projects -> OnBoarding should able to Edit Actual project",
              "timedOut": false,
              "duration": 64587,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.OnBoarding_AddActualProject_EditHover();\nawait projectOnBoarding.OnBoarding_AddActualProject_Edit();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectName('Updated');\nawait utilFun.wait(1000);\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectReferenceNo('12344321');\nawait projectOnBoarding.OnBoarding_AddActualProject_StartDate('03-01-2024');\nawait projectOnBoarding.OnBoarding_AddActualProject_TentavieDuration('3 year');\nawait projectOnBoarding.selectValue('Select Division', 'Atest');\nawait projectOnBoarding.selectValue('Select Source', 'Upwork');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactName('Ali');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactPersonEmail('abcd@info.com');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn1();\nawait projectOnBoarding.selectField('BD Member *\\nSelect resource', 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField('Actual Resource(s)\\nAbdul Wakeel', 'Abid Ali');\nawait projectOnBoarding.selectField('Resource Name (Shared with Client)', 'Ahmed');\nawait projectOnBoarding.selectField('Tech Stack *\\nAdmin', 'BA');\nawait projectOnBoarding.selectField('Communication Mode\\nEmail', 'InvoChat');\nawait projectOnBoarding.selectField('Project Manager\\nSelect Project Manager', 'amna hussain');\nawait projectOnBoarding.selectField('Service Mode*\\nYet To Be Decided', 'Augmentation / Dedicated Resource');\nawait projectOnBoarding.selectField('Augmentation*\\nSelect augmentation', 'Monthly');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.selectField('Company Name', 'InvoZone PAK');\nawait projectOnBoarding.selectField('Company Address', 'Faisalabad');\nawait projectOnBoarding.selectField('Client Side Billing Representative Name*', 'Uzair Arbab');\nawait projectOnBoarding.selectField('Client Side Billing Representative Email', '1234@invozone.com');\nawait projectOnBoarding.selectField('Billing Cycle*\\nSelect billing cycle', 'Weekly');\nawait projectOnBoarding.selectField('Billing Start Date *', '02-01-2024');\nawait projectOnBoarding.selectField('Currency *\\nUnited States Dollar', 'Pounds');\nawait projectOnBoarding.selectField('Billing Rates/ Total Project Cost*', '20025');\nawait projectOnBoarding.selectField('Billing Platform *', 'Check');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn3();\nawait projectOnBoarding.selectField('Reference thread\\nNo', 'Yes');\nawait projectOnBoarding.selectField('BA Names - Created/ Approved the estimation Doc *\\nSelect option', 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField(\"PM's Names - Created/ Approved the estimation Doc*\\nSelect option\", 'Muhammad Bilal Rafaqat');\nawait projectOnBoarding.selectField('Reference Internal Thread Link*', 'www.invo-zone.com');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration', 'Free Trial');\nawait projectOnBoarding.selectField('Trial Duration*', '2 Weeks');\nawait projectOnBoarding.selectField('Are we introduced as Agency or Individual?*\\nSelect introduction', 'Individual to Client');\nawait projectOnBoarding.selectField('Rate Concluded*', '15');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration', 'No Trial');\nawait projectOnBoarding.selectField(\n  'Any Future Upsells which client gave a heads up for near future?*\\n' + 'Select option',\n  'Nothing at the moment',\n);\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_AddActualProject_AddRequest();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project is updated Successfully!');",
              "err": {},
              "uuid": "4234cf03-a9a9-4e03-8605-a9419d56be19",
              "parentUUID": "863673a3-780c-42a6-a5d5-be370fc52d95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if actual project is updated or not",
              "fullTitle": "Projects -> OnBoarding should check if actual project is updated or not",
              "timedOut": false,
              "duration": 4679,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoBlogUpdated');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoBlogUpdated');",
              "err": {},
              "uuid": "7a471402-41b0-41c9-9a96-fea03cdfe315",
              "parentUUID": "863673a3-780c-42a6-a5d5-be370fc52d95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete Project",
              "fullTitle": "Projects -> OnBoarding should able to Delete Project",
              "timedOut": false,
              "duration": 12107,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.filterField('Search by Project', 'InvoBlogUpdated');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoBlogUpdated');\nawait projectOnBoarding.OnBoarding_AddActualProject_DeleteBtn();\nawait projectOnBoarding.OnBoarding_AddActualProject_Delete_YesBtn();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project is archived successfully.');",
              "err": {},
              "uuid": "d7a3aef5-f277-46bd-afad-7d08ef507c7e",
              "parentUUID": "863673a3-780c-42a6-a5d5-be370fc52d95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if deleted project is showing in Archived Project",
              "fullTitle": "Projects -> OnBoarding should check if deleted project is showing in Archived Project",
              "timedOut": false,
              "duration": 6492,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickArchiveBtn();\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoBlogUpdated');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoBlogUpdated');",
              "err": {},
              "uuid": "0b43c61c-5dd2-42fb-af58-1a25ad1da776",
              "parentUUID": "863673a3-780c-42a6-a5d5-be370fc52d95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able Add Actual Project  ",
              "fullTitle": "Projects -> OnBoarding should able Add Actual Project  ",
              "timedOut": false,
              "duration": 55011,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [`DELETE FROM \"project_onboardings\" WHERE \"name\" = 'InvoChain'`];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait utilFun.wait(3000);\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProject();\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectName('InvoChain');\nawait projectOnBoarding.Projects_OnBoarding_AddActualProjectReferenceNo('12344321');\nawait projectOnBoarding.OnBoarding_AddActualProject_StartDate('02-01-2024');\nawait projectOnBoarding.OnBoarding_AddActualProject_TentavieDuration('2 year');\nawait projectOnBoarding.selectValue('Select Division', 'Dtest');\nawait projectOnBoarding.selectValue('Select Source', 'International Event');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactName('Alia');\nawait projectOnBoarding.OnBoarding_AddActualProject_ClientContactPersonEmail('abc@info.com');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn1();\nawait projectOnBoarding.selectField('BD Member *\\nSelect resource', 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField('Actual Resource(s)\\nSelect resources', 'Abdul Wakeel');\nawait projectOnBoarding.selectField('Resource Name (Shared with Client)', 'Tariq');\nawait projectOnBoarding.selectField('Tech Stack *\\nSelect Tech Stack', 'Admin');\nawait projectOnBoarding.selectField('Communication Mode\\nSelect mode', 'Email');\nawait projectOnBoarding.selectField('Project Manager\\nSelect Project Manager', 'amna hussain');\nawait projectOnBoarding.selectField('Service Mode*\\nSelect service mode', 'Yet To Be Decided');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.selectField('Company Name', 'InvoZone USA');\nawait projectOnBoarding.selectField('Company Address', 'Lahore');\nawait projectOnBoarding.selectField('Client Side Billing Representative Name*', 'Abdul Wakeel');\nawait projectOnBoarding.selectField('Client Side Billing Representative Email', '123@invozone.com');\nawait projectOnBoarding.selectField('Billing Cycle*\\nSelect billing cycle', 'Monthly');\nawait projectOnBoarding.selectField('Billing Start Date *', '01-01-2024');\nawait projectOnBoarding.selectField('Currency *\\nUnited States Dollar', 'United States Dollar');\nawait projectOnBoarding.selectField('Billing Rates/ Total Project Cost*', '20024');\nawait projectOnBoarding.selectField('Billing Platform *', 'Cash');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn3();\nawait projectOnBoarding.selectField('Reference thread\\nNo', 'No');\nawait projectOnBoarding.selectField('Are we introduced as Agency or Individual?*\\nSelect introduction', 'Individual to Client');\nawait projectOnBoarding.selectField('Rate Concluded*', '15');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration', 'No Trial');\nawait projectOnBoarding.selectField(\n  'Any Future Upsells which client gave a heads up for near future?*\\n' + 'Select option',\n  'Nothing at the moment',\n);\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_AddActualProject_AddRequest();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project onboarding request is completed successfuly!');",
              "err": {},
              "uuid": "14e311a8-8f63-4d1b-a5df-cfa6de93d1c2",
              "parentUUID": "863673a3-780c-42a6-a5d5-be370fc52d95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Actual project is created or not",
              "fullTitle": "Projects -> OnBoarding should check if Actual project is created or not",
              "timedOut": false,
              "duration": 4646,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoChain');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoChain');",
              "err": {},
              "uuid": "07a42fd0-0d3a-43fa-972a-b33d0e187d31",
              "parentUUID": "863673a3-780c-42a6-a5d5-be370fc52d95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check OnBoard Icon is Clickable",
              "fullTitle": "Projects -> OnBoarding should able to check OnBoard Icon is Clickable",
              "timedOut": false,
              "duration": 6136,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const query = ['UPDATE departments SET \"hodId\" = 9429 WHERE id = 3;'];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoChain');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoChain');\nawait projectOnBoarding.OnBoarding_AddActualProject_OnBoardIcon();\nawait projectOnBoarding.checkActualProjectModel();",
              "err": {},
              "uuid": "28a58606-f5d3-4574-95e4-98892fe74a4b",
              "parentUUID": "863673a3-780c-42a6-a5d5-be370fc52d95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check Cancel Btn is Clickable ",
              "fullTitle": "Projects -> OnBoarding should able to check Cancel Btn is Clickable ",
              "timedOut": false,
              "duration": 9912,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoChain');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoChain');\nawait projectOnBoarding.OnBoarding_AddActualProject_OnBoardIcon();\nawait projectOnBoarding.checkActualProjectModel();\nawait projectOnBoarding.OnBoarding_AddActualProject_CancelBtn();\nawait projectOnBoarding.checkActualProjectModelNotVisible();",
              "err": {
                "message": "Error: Model is visible -> error message =stale element reference: stale element not found\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "Error: Model is visible -> error message =stale element reference: stale element not found\n  (Session info: headless chrome=119.0.6045.159)\n    at projectOnBoarding.checkActualProjectModelNotVisible (test/support/pages/projects/onboarding.js:247:19)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Context.<anonymous> (test/e2e/projects/spec-2-actualProejct.js:264:5)",
                "diff": null
              },
              "uuid": "81ac12e5-8a5d-4272-81e1-39a881b90e58",
              "parentUUID": "863673a3-780c-42a6-a5d5-be370fc52d95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to onboard project",
              "fullTitle": "Projects -> OnBoarding should able to onboard project",
              "timedOut": false,
              "duration": 11854,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn();\nawait projectOnBoarding.filterField('Search by Project', 'InvoChain');\nlet name = await projectOnBoarding.getProjectName();\nutilFun.assertEql(name, 'InvoChain');\nawait projectOnBoarding.OnBoarding_AddActualProject_OnBoardIcon();\nawait projectOnBoarding.OnBoarding_AddActualProject_OnBoardBtn();\nconst alert = await projects.checkAlert();\nutilFun.assertEql(alert, 'Project is onboarded successfully.');",
              "err": {},
              "uuid": "9ed1efdb-f00a-423b-9665-9924e2d2834d",
              "parentUUID": "863673a3-780c-42a6-a5d5-be370fc52d95",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify if Project is added",
              "fullTitle": "Projects -> OnBoarding should able to Verify if Project is added",
              "timedOut": false,
              "duration": 5773,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'InvoChain');\nconst name = await projects.selectFilter_ProjectDetail_Assert();\nassert.ok(name.includes('InvoChain'), `Expected text not found.`);",
              "err": {},
              "uuid": "b0521f91-1741-4a3b-8357-78d2a591eab2",
              "parentUUID": "863673a3-780c-42a6-a5d5-be370fc52d95",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ba96bb31-cdb6-4905-a113-4218d9f102a8",
            "e2b6e1bd-79ea-4b3a-8e1d-bc236f199026",
            "b4f5e05b-27f7-4e43-a8d5-1c2f8d271cf2",
            "fceaccce-4e45-4f1f-be33-f702cc4d8048",
            "4234cf03-a9a9-4e03-8605-a9419d56be19",
            "7a471402-41b0-41c9-9a96-fea03cdfe315",
            "d7a3aef5-f277-46bd-afad-7d08ef507c7e",
            "0b43c61c-5dd2-42fb-af58-1a25ad1da776",
            "14e311a8-8f63-4d1b-a5df-cfa6de93d1c2",
            "07a42fd0-0d3a-43fa-972a-b33d0e187d31",
            "28a58606-f5d3-4574-95e4-98892fe74a4b",
            "9ed1efdb-f00a-423b-9665-9924e2d2834d",
            "b0521f91-1741-4a3b-8357-78d2a591eab2"
          ],
          "failures": [
            "81ac12e5-8a5d-4272-81e1-39a881b90e58"
          ],
          "pending": [],
          "skipped": [],
          "duration": 247402,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
          "title": "Per-Sale Project Onboarding",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/projects/spec-3-presale.js",
          "file": "/test/e2e/projects/spec-3-presale.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Per-Sale Project Onboarding\"",
              "fullTitle": "Per-Sale Project Onboarding \"before all\" hook in \"Per-Sale Project Onboarding\"",
              "timedOut": false,
              "duration": 26,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let projectId = await utilFun.getFromDatabase(`SELECT id FROM projects WHERE \"name\" = 'PreSaleTesting';`)\nlet portfolioId = await utilFun.getFromDatabase(`SELECT id FROM project_portfolios WHERE \"name\" = 'PreSaleTesting';`)\nif(projectId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"project_portfolio_skills\" WHERE \"projectPortfolioId\" = ${portfolioId.rows[0].id};`,\n  `DELETE FROM \"project_portfolios\" WHERE id = ${portfolioId.rows[0].id};`,\n  `DELETE FROM \"project_timelines\" WHERE \"projectId\" = ${projectId.rows[0].id};`,\n  `DELETE FROM \"projects\" WHERE id = ${projectId.rows[0].id};`\n];\nawait utilFun.udpateDatabase(query);\n}\n// await utilFun.login(email, password);",
              "err": {},
              "uuid": "cb53e4e3-50d6-4a59-8e8a-ac524c55b520",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to Add Pre-Sale project onboarding request",
              "fullTitle": "Per-Sale Project Onboarding should able to Add Pre-Sale project onboarding request",
              "timedOut": false,
              "duration": 30016,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [\n    `DELETE FROM \"project_onboardings\" WHERE \"name\" = 'PreSaleTest';`,\n    `DELETE FROM \"project_onboardings\" WHERE \"name\" = 'PreSaleTesting';`\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.OnBoarding_PreSaleBtn();\nawait projectOnBoarding.selectField('Project Name *', 'PreSaleTest');\nawait projectOnBoarding.selectField('Lead Reference Number/ Name *' , '1232123');\nawait projectOnBoarding.selectField('Division *\\nSelect Division' , 'Dtest');\nawait projectOnBoarding.selectField('Source*\\nSelect Source' , 'Upwork');\nawait projectOnBoarding.selectField('Offer Received on Upwork? (BD-F Only)*\\nSelect option' , 'Yes');\nawait projectOnBoarding.selectField('Offer Accepted on Upwork? (BD-F Only)*\\nSelect option' , 'Yes');\nawait projectOnBoarding.selectField('Offer Expiry Date (BD-F Only)' , '24-5-2025');\nawait projectOnBoarding.selectField('Profile Name*' , 'Furqan Aziz');\nawait projectOnBoarding.selectField('Lead Upwork Reference Link*' , 'www.furqan/upwork.com');\nawait projectOnBoarding.selectField('Client Side Contact Person Name(s) *' , 'Ali');\nawait projectOnBoarding.selectField('Client Side Point of Contact Email(s)' , 'abcd@gmail.com');\nawait projectOnBoarding.OnBoarding_PreSale_TextArea('Reason');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn1();\nawait projectOnBoarding.selectField('BD Member *' , 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField('Actual Resource(s)\\nSelect resources' , 'Awais Shaukat');\nawait projectOnBoarding.selectField('Resource Name (Shared with Client)' , 'Furqan Aziz');\nawait projectOnBoarding.selectField('Tech Stack *\\nSelect Tech Stack' , 'Admin');\nawait projectOnBoarding.selectField('Communication Mode\\nSelect mode' , 'InvoZone Slack');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.selectField('Service Mode*\\nSelect service mode' , 'Yet To Be Decided');\nawait projectOnBoarding.selectField('Introduced as*\\nSelect option' , 'Agency');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration' , 'Free Trial');\nawait projectOnBoarding.selectField('Trial Duration *' , '6');\nawait projectOnBoarding.selectField('Are there Reference thread?*\\nNo' , 'Yes');\nawait projectOnBoarding.selectField('BA Names - Created/ Approved the estimation Doc*\\nSelect option' , 'Muhammad Zeeshan Ullah');\nawait utilFun.wait(2000);\nawait projectOnBoarding.selectField(\"PM's Names - Created/ Approved the estimation Doc*\\nSelect resource\" , 'Muhammad Bilal');\nawait projectOnBoarding.selectField('Reference internal thread link*' , 'www.google.com');\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_PreSale_AddRequest();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project onboarding request is completed successfuly!');",
              "err": {
                "message": "ElementNotInteractableError: element not interactable\n  (Session info: headless chrome=119.0.6045.159)",
                "estack": "ElementNotInteractableError: element not interactable\n  (Session info: headless chrome=119.0.6045.159)\n    at Object.throwDecodedError (node_modules/selenium-webdriver/lib/error.js:524:15)\n    at parseHttpResponse (node_modules/selenium-webdriver/lib/http.js:601:13)\n    at Executor.execute (node_modules/selenium-webdriver/lib/http.js:529:28)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async thenableWebDriverProxy.execute (node_modules/selenium-webdriver/lib/webdriver.js:745:17)\n    at async projectOnBoarding.OnBoarding_AddActualProject_NextBtn2 (test/support/pages/projects/onboarding.js:173:9)\n    at async Context.<anonymous> (test/e2e/projects/spec-3-presale.js:55:9)",
                "diff": null
              },
              "uuid": "fa3a25d3-5356-4e6d-902d-c4bde71c965e",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if pre-sale project is created or not",
              "fullTitle": "Per-Sale Project Onboarding should check if pre-sale project is created or not",
              "timedOut": false,
              "duration": 14281,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTest')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTest');",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, [data-row-key=\"0\"] > td:nth-child(1) a)\nWait timed out after 10201ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, [data-row-key=\"0\"] > td:nth-child(1) a)\nWait timed out after 10201ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d016cb66-466e-4e38-a7af-46b446c308ef",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shold able to archive project",
              "fullTitle": "Per-Sale Project Onboarding shold able to archive project",
              "timedOut": false,
              "duration": 14384,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTest')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTest');\nawait projectOnBoarding.clickArchiveChannelBtn()\nawait projectOnBoarding.clickYesBtn()\nconst alert = await projects.checkAlert()\nutilFun.assertEql(alert, 'Project is archived successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, [data-row-key=\"0\"] > td:nth-child(1) a)\nWait timed out after 10200ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, [data-row-key=\"0\"] > td:nth-child(1) a)\nWait timed out after 10200ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3a8f29ed-e036-4ead-b820-7e587f2797d1",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if project is showing in Archived Project",
              "fullTitle": "Per-Sale Project Onboarding should check if project is showing in Archived Project",
              "timedOut": false,
              "duration": 5796,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickArchiveBtn()\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTest')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTest');",
              "err": {
                "message": "AssertionError: 'InvoBlogUpdated' == 'PreSaleTest'",
                "estack": "AssertionError [ERR_ASSERTION]: 'InvoBlogUpdated' == 'PreSaleTest'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:94:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- InvoBlogUpdated\n+ PreSaleTest\n"
              },
              "uuid": "a36134f0-0242-42ac-be50-36f1602f2214",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add Pre-Sale project onboarding request",
              "fullTitle": "Per-Sale Project Onboarding should able to Add Pre-Sale project onboarding request",
              "timedOut": false,
              "duration": 54148,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n    `DELETE FROM \"project_onboardings\" WHERE \"name\" = 'PreSaleTest';`,\n    `DELETE FROM \"project_onboardings\" WHERE \"name\" = 'PreSaleTesting';`\n]\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait utilFun.waitForPageLoad();\nawait projectOnBoarding.Projects_OnBoarding_AddBtn();\nawait projectOnBoarding.OnBoarding_PreSaleBtn();\nawait projectOnBoarding.selectField('Project Name *', 'PreSaleTest');\nawait projectOnBoarding.selectField('Lead Reference Number/ Name *' , '1232123');\nawait projectOnBoarding.selectField('Division *\\nSelect Division' , 'Dtest');\nawait projectOnBoarding.selectField('Source*\\nSelect Source' , 'Upwork');\nawait projectOnBoarding.selectField('Offer Received on Upwork? (BD-F Only)*\\nSelect option' , 'Yes');\nawait projectOnBoarding.selectField('Offer Accepted on Upwork? (BD-F Only)*\\nSelect option' , 'Yes');\nawait projectOnBoarding.selectField('Offer Expiry Date (BD-F Only)' , '24-5-2025');\nawait projectOnBoarding.selectField('Profile Name*' , 'Furqan Aziz');\nawait projectOnBoarding.selectField('Lead Upwork Reference Link*' , 'www.furqan/upwork.com');\nawait projectOnBoarding.selectField('Client Side Contact Person Name(s) *' , 'Ali');\nawait projectOnBoarding.selectField('Client Side Point of Contact Email(s)' , 'abcd@gmail.com');\nawait projectOnBoarding.OnBoarding_PreSale_TextArea('Reason');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn1();\nawait projectOnBoarding.selectField('BD Member *' , 'Muhammad Zeeshan Ullah');\nawait projectOnBoarding.selectField('Actual Resource(s)\\nSelect resources' , 'Awais Shaukat');\nawait projectOnBoarding.selectField('Resource Name (Shared with Client)' , 'Furqan Aziz');\nawait projectOnBoarding.selectField('Tech Stack *\\nSelect Tech Stack' , 'Admin');\nawait projectOnBoarding.selectField('Communication Mode\\nSelect mode' , 'InvoZone Slack');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.selectField('Service Mode*\\nSelect service mode' , 'Yet To Be Decided');\nawait projectOnBoarding.selectField('Introduced as*\\nSelect option' , 'Agency');\nawait projectOnBoarding.selectField('Trial? - Add Duration of Trial if YES*\\nSelect trial duration' , 'Free Trial');\nawait projectOnBoarding.selectField('Trial Duration *' , '6');\nawait projectOnBoarding.selectField('Are there Reference thread?*\\nNo' , 'Yes');\nawait projectOnBoarding.selectField('BA Names - Created/ Approved the estimation Doc*\\nSelect option' , 'Muhammad Zeeshan Ullah');\nawait utilFun.wait(2000);\nawait projectOnBoarding.selectField(\"PM's Names - Created/ Approved the estimation Doc*\\nSelect resource\" , 'Muhammad Bilal');\nawait projectOnBoarding.selectField('Reference internal thread link*' , 'www.google.com');\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_PreSale_AddRequest();\nconst flashMessage = await projects.checkAlert();\nutilFun.assertEql(flashMessage, 'Project onboarding request is completed successfuly!');",
              "err": {},
              "uuid": "87c64e92-e2ea-4199-9614-7f9ccb4c804d",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if pre-sale project is created or not",
              "fullTitle": "Per-Sale Project Onboarding should check if pre-sale project is created or not",
              "timedOut": false,
              "duration": 4180,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTest')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTest');",
              "err": {},
              "uuid": "62608cd8-e476-4d69-a1a9-f476dc2dd0be",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit pre-sale project",
              "fullTitle": "Per-Sale Project Onboarding should able to edit pre-sale project",
              "timedOut": false,
              "duration": 24000,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTest')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTest');\nawait projectOnBoarding.clickEditProject()\nawait projectOnBoarding.selectField('Project Name *', 'PreSaleTesting');\nawait projectOnBoarding.selectField('Lead Reference Number/ Name *' , '12345');\nawait projectOnBoarding.selectField('Profile Name*' , 'TestProfile');\nawait projectOnBoarding.selectField('Lead Upwork Reference Link*' , 'www.test/upwork.com');\nawait projectOnBoarding.selectField('Client Side Contact Person Name(s) *' , 'James');\nawait projectOnBoarding.selectField('Client Side Point of Contact Email(s)' , 'james@gmail.com');\nawait projectOnBoarding.OnBoarding_PreSale_TextArea('Reason updated');\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn1();\nawait projectOnBoarding.OnBoarding_AddActualProject_NextBtn2();\nawait projectOnBoarding.OnBoarding_AddActualProject_Page4TextArea('Text Area for project');\nawait projectOnBoarding.OnBoarding_PreSale_AddRequest();\nconst alert = await projects.checkAlert();\nutilFun.assertEql(alert, 'Project is updated Successfully!');",
              "err": {},
              "uuid": "9591b4f0-a498-4221-bced-cec41f11fc6a",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if pre-sale project is updated or not",
              "fullTitle": "Per-Sale Project Onboarding should check if pre-sale project is updated or not",
              "timedOut": false,
              "duration": 4352,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTesting')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTesting');",
              "err": {},
              "uuid": "484d6e97-b71d-49e0-a532-066132433e36",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to add billing details by clicking manage channel button",
              "fullTitle": "Per-Sale Project Onboarding should able to add billing details by clicking manage channel button",
              "timedOut": true,
              "duration": 100011,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTesting')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTesting');\nawait projectOnBoarding.clickManageChannelBtn()\nawait projectOnBoarding.manageChannelInput('Project Manager *\\nSelect Project Manager','Bilal Rafaqat')\nawait projectOnBoarding.manageChannelInput('Start Date *','10-02-2024')\nawait projectOnBoarding.manageChannelInput('Company Name','xyz')\nawait projectOnBoarding.manageChannelInput('Company Address','xyz')\nawait projectOnBoarding.manageChannelInput('Client Side Billing Representative Name*','James')\nawait projectOnBoarding.manageChannelInput('Client Side Billing Representative Email','james@email.com')\nawait projectOnBoarding.manageChannelInput('Billing Cycle*\\nSelect billing cycle','weekly')\nawait projectOnBoarding.manageChannelInput('Billing Start Date *','15-02-2024')\nawait projectOnBoarding.manageChannelInput('Billing Rates/ Total Project Cost*','5000')\nawait projectOnBoarding.manageChannelInput('Billing Platform *','paypal')\nawait projectOnBoarding.clickUpdateBillingBtn()\nconst alert = await projects.checkAlert()\nutilFun.assertEql(alert, 'Project billing details are updated successfully');",
              "err": {
                "message": "Error: Timeout of 100000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/devops/invohub/resource-engagement/test/e2e/projects/spec-3-presale.js)",
                "estack": "Error: Timeout of 100000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (/home/devops/invohub/resource-engagement/test/e2e/projects/spec-3-presale.js)\n    at listOnTimeout (node:internal/timers:564:17)\n    at process.processTimers (node:internal/timers:507:7)",
                "diff": null
              },
              "uuid": "72a8f403-5df8-4ced-95ac-c1e4f0b6426d",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to create a channel",
              "fullTitle": "Per-Sale Project Onboarding should able to create a channel",
              "timedOut": false,
              "duration": 10197,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTesting')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTesting');\nawait projectOnBoarding.clickCreateChannelBtn();\nconst alert = await projects.checkAlert()\nutilFun.assertEql(alert, 'Channel is created successfully!');\nawait projectOnBoarding.clickCreateChannelBtn();\nconst alert1 = await projects.checkAlert()\nutilFun.assertEql(alert1, 'Channel is not created!');\nawait projectOnBoarding.clickCreateChannelBtn();\nconst alert3 = await projects.checkAlert()\nutilFun.assertEql(alert3, 'Channel is created successfully!');",
              "err": {
                "message": "AssertionError: 'Please add billing details to create channel' == 'Channel is created successfully!'",
                "estack": "AssertionError [ERR_ASSERTION]: 'Please add billing details to create channel' == 'Channel is created successfully!'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:203:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Please add billing details to create channel\n+ Channel is created successfully!\n"
              },
              "uuid": "5d2c4c20-e53e-42a8-99e1-3c207e5f7763",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shold check if project is showing in mark as channel created",
              "fullTitle": "Per-Sale Project Onboarding shold check if project is showing in mark as channel created",
              "timedOut": false,
              "duration": 15432,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickMarkAsChannelCreatedCheckbox()\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTesting')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTesting');",
              "err": {
                "message": "TimeoutError: Waiting for at least one element to be located By(css selector, [data-row-key=\"0\"] > td:nth-child(1) a)\nWait timed out after 10001ms",
                "estack": "TimeoutError: Waiting for at least one element to be located By(css selector, [data-row-key=\"0\"] > td:nth-child(1) a)\nWait timed out after 10001ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "c5db1f93-1d33-4ced-a70c-bbe665d40a45",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should should able to onboard project",
              "fullTitle": "Per-Sale Project Onboarding should should able to onboard project",
              "timedOut": false,
              "duration": 14893,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// let query = [\n//     `UPDATE project_onboardings SET \"isArchived\" = false WHERE \"name\" = 'PreSaleTesting';`\n// ]\n// await utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.clickFilterBtn()\nawait projectOnBoarding.filterField('Search by Project','PreSaleTesting')\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTesting');\nawait projectOnBoarding.clickOnboardProjectBtn()\nawait projectOnBoarding.clickOnboardBtn()\nconst alert = await projects.checkAlert()\nutilFun.assertEql(alert, 'Project is onboarded successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"btn btn-success\"])\nWait timed out after 10262ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"btn btn-success\"])\nWait timed out after 10262ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "1e8fb222-4916-45c9-911c-2c71e824d009",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check is pre-sale project is showing in all Projects",
              "fullTitle": "Per-Sale Project Onboarding should check is pre-sale project is showing in all Projects",
              "timedOut": false,
              "duration": 6057,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/projects');\nawait projects.Projects_FilterBtn();\nawait projects.selectFilter('Search by Project', 'PreSaleTesting');\nlet name = await projectOnBoarding.getProjectName()\nutilFun.assertEql(name, 'PreSaleTesting');",
              "err": {
                "message": "AssertionError: 'Cartpanda' == 'PreSaleTesting'",
                "estack": "AssertionError [ERR_ASSERTION]: 'Cartpanda' == 'PreSaleTesting'\n    at UtillityFun.assertEql (test/support/utillityFun.js:24:19)\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:239:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Cartpanda\n+ PreSaleTesting\n"
              },
              "uuid": "613c094f-6024-4b0e-b2de-9cb30f1e6c64",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide submitted at column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide submitted at column",
              "timedOut": false,
              "duration": 5219,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Submitted At')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 37, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Submitted At'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "AssertionError: Colums count is not Correct.",
                "estack": "AssertionError [ERR_ASSERTION]: Colums count is not Correct.\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:249:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 35\n+ 37\n"
              },
              "uuid": "f6996ee3-fe8e-4332-b57a-7f7389193a37",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide type column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide type column",
              "timedOut": false,
              "duration": 5195,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Type')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 36, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Type'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "AssertionError: Colums count is not Correct.",
                "estack": "AssertionError [ERR_ASSERTION]: Colums count is not Correct.\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:259:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 34\n+ 36\n"
              },
              "uuid": "8462f92c-31d0-4515-afd9-d68f3754c6a3",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Lead Reference column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Lead Reference column",
              "timedOut": false,
              "duration": 5302,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Lead Reference')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 35, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Lead Reference'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "AssertionError: Colums count is not Correct.",
                "estack": "AssertionError [ERR_ASSERTION]: Colums count is not Correct.\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:269:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 33\n+ 35\n"
              },
              "uuid": "9b9b22d6-feab-43ff-a0da-8ab6996f42b0",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Reason for Pre-sale column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Reason for Pre-sale column",
              "timedOut": false,
              "duration": 5219,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Reason For Presale')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 34, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Reason For Presale'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "AssertionError: Colums count is not Correct.",
                "estack": "AssertionError [ERR_ASSERTION]: Colums count is not Correct.\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:279:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 32\n+ 34\n"
              },
              "uuid": "81f00407-67a5-46a0-9487-47559758ec03",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Division column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Division column",
              "timedOut": false,
              "duration": 5215,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Division')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 33, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Division'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "AssertionError: Colums count is not Correct.",
                "estack": "AssertionError [ERR_ASSERTION]: Colums count is not Correct.\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:289:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 32\n+ 33\n"
              },
              "uuid": "537feb2c-c455-4063-8ac0-34b52c932eb6",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Source column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Source column",
              "timedOut": false,
              "duration": 5295,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Source')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 32, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Source'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "AssertionError: Colums count is not Correct.",
                "estack": "AssertionError [ERR_ASSERTION]: Colums count is not Correct.\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:299:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 31\n+ 32\n"
              },
              "uuid": "780380fa-c5d0-49d4-a27c-7f6b9f6cd7fe",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Profile Name column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Profile Name column",
              "timedOut": false,
              "duration": 5035,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Profile Name')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 31, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Profile Name'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "AssertionError: Colums count is not Correct.",
                "estack": "AssertionError [ERR_ASSERTION]: Colums count is not Correct.\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:309:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 30\n+ 31\n"
              },
              "uuid": "5b31a0b1-2755-4ba9-b4e2-ef8ce225564c",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Lead Upwork Reference Link column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Lead Upwork Reference Link column",
              "timedOut": false,
              "duration": 5092,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Lead Upwork Reference Link')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 30, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Lead Upwork Reference Link'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "AssertionError: Colums count is not Correct.",
                "estack": "AssertionError [ERR_ASSERTION]: Colums count is not Correct.\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:319:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 29\n+ 30\n"
              },
              "uuid": "cc833297-4acd-4c70-acbf-6119eec573e4",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Offer Received on Upwork? column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Offer Received on Upwork? column",
              "timedOut": false,
              "duration": 5093,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Offer Received on Upwork?')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 29, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Offer Received on Upwork?'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "AssertionError: Colums count is not Correct.",
                "estack": "AssertionError [ERR_ASSERTION]: Colums count is not Correct.\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:329:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 28\n+ 29\n"
              },
              "uuid": "e6ff8692-55f3-4fda-9fe3-35c85e92052b",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Offer Accepted on Upwork? column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Offer Accepted on Upwork? column",
              "timedOut": false,
              "duration": 5194,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Offer Accepted on Upwork?')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 28, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Offer Accepted on Upwork?'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {
                "message": "AssertionError: Colums count is not Correct.",
                "estack": "AssertionError [ERR_ASSERTION]: Colums count is not Correct.\n    at Context.<anonymous> (test/e2e/projects/spec-3-presale.js:339:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 27\n+ 28\n"
              },
              "uuid": "2069d0f5-b9a0-4f89-a98f-970a6cc179f8",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Tech Stack column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Tech Stack column",
              "timedOut": false,
              "duration": 5823,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Tech Stack')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 27, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Tech Stack'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "86489e40-45bc-4344-b70c-c79fe5c1f66d",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Client Side Contact Person Name(s) column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Client Side Contact Person Name(s) column",
              "timedOut": false,
              "duration": 5891,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Client Side Contact Person Name(s)')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 26, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Client Side Contact Person Name(s)'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "9b4d2ce2-af82-4ba1-9790-e54f8bf90591",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Client Side Point of Contact Email(s) column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Client Side Point of Contact Email(s) column",
              "timedOut": false,
              "duration": 5958,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Client Side Point of Contact Email(s)')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 25, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Client Side Point of Contact Email(s)'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "5932c8ac-e998-46a4-97c0-4a9db3281ecd",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Tentative Duration column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Tentative Duration column",
              "timedOut": false,
              "duration": 5666,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Tentative Duration')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 24, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Tentative Duration'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "c80a881b-34ce-4114-bccb-0939b146bd6e",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Start Date column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Start Date column",
              "timedOut": false,
              "duration": 5541,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Start Date')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 23, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Start Date'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "f2fee499-da7c-4594-ba0d-273ade472f11",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide BD Member column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide BD Member column",
              "timedOut": false,
              "duration": 5519,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('BD Member')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 22, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('BD Member'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "83d78a45-34d8-43ca-97db-cc111cecfdd7",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Service Mode column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Service Mode column",
              "timedOut": false,
              "duration": 5540,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Service Mode')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 21, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Service Mode'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "a0f76ea4-fae1-4f7b-82f8-cde6b44b42cc",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Trial Period column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Trial Period column",
              "timedOut": false,
              "duration": 5461,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Trial Period')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 20, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Trial Period'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "f87ee42e-7fe5-4409-9c4a-c6a9b8a4f405",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Resource Name (Shared with Client) column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Resource Name (Shared with Client) column",
              "timedOut": false,
              "duration": 5464,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Resource Name (Shared with Client)')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 19, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Resource Name (Shared with Client)'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "e1b82860-aa87-4a18-8bbe-decce6179ce4",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Actual Resource(s) column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Actual Resource(s) column",
              "timedOut": false,
              "duration": 5933,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Actual Resource(s)')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 18, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Actual Resource(s)'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "c975d8f4-c8fc-4c2c-9023-947e551904ba",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Communication Mode column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Communication Mode column",
              "timedOut": false,
              "duration": 5382,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Communication Mode')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 17, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Communication Mode'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "9864b8cb-09d0-4b83-aa40-d258e1d1f417",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Company Name column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Company Name column",
              "timedOut": false,
              "duration": 5667,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Company Name')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 16, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Company Name'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "6067858d-a551-42dd-a3c8-dc83a0ebbf78",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Company Address column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Company Address column",
              "timedOut": false,
              "duration": 5482,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Company Address')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 15, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Company Address'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "66816fd3-2c95-43a6-8489-c54b1ec661e2",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Client Side Billing Representative Name column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Client Side Billing Representative Name column",
              "timedOut": false,
              "duration": 5361,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Client Side Billing Representative Name')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 14, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Client Side Billing Representative Name'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "cb5b8d89-8c27-4d6e-b13f-b6be92e88f41",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Client Side Billing Representative Email column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Client Side Billing Representative Email column",
              "timedOut": false,
              "duration": 5289,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Client Side Billing Representative Email')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 13, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Client Side Billing Representative Email'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "3ea153b0-9635-4996-95c2-7f19841bef93",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Billing Cycle column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Billing Cycle column",
              "timedOut": false,
              "duration": 5313,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Billing Cycle')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 12, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Billing Cycle'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "2daaddeb-6a71-4ca4-89b0-e8aa10002bbe",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Billing Start Date column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Billing Start Date column",
              "timedOut": false,
              "duration": 5193,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Billing Start Date')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 11, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Billing Start Date'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "8a414b61-d705-4181-9ed6-7574fc749674",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Billing Rates/ Total Project Cost column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Billing Rates/ Total Project Cost column",
              "timedOut": false,
              "duration": 5201,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Billing Rates/ Total Project Cost')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 10, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Billing Rates/ Total Project Cost'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "35eae676-c9e0-4d33-a8e1-288c034f6733",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Currency column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Currency column",
              "timedOut": false,
              "duration": 5287,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Currency')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 9, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Currency'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "1d2a5408-0b64-43bc-8de5-e2cb23b23a33",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Reference BO Placement Link column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Reference BO Placement Link column",
              "timedOut": false,
              "duration": 5092,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Reference BO Placement Link')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 8, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Reference BO Placement Link'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "a9baca8a-c8af-40fa-aaa5-7dedc210a30e",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Introduced As column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Introduced As column",
              "timedOut": false,
              "duration": 5729,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Introduced As')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 7, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Introduced As'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "da0af0f8-0b40-4fe6-a5b1-40311fe60797",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Offer Expiry Date column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Offer Expiry Date column",
              "timedOut": false,
              "duration": 5200,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Offer Expiry Date')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 6, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Offer Expiry Date'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "a412a5a1-e22d-4723-8f25-c4ee0fa30a54",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Business Analyst column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Business Analyst column",
              "timedOut": false,
              "duration": 5165,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Business Analyst')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 5, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Business Analyst'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "157cd3c7-9e9f-4ed0-ad3b-c49753d91cb3",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Project Manager column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Project Manager column",
              "timedOut": false,
              "duration": 5130,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Project Manager')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 4, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Project Manager'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "3bd692be-e3d4-4095-a1be-c7b20b365a58",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to hide Future Upsells column",
              "fullTitle": "Per-Sale Project Onboarding should able to hide Future Upsells column",
              "timedOut": false,
              "duration": 5104,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/project-onBoarding');\nawait projectOnBoarding.waitForTableContainerToBeVisible()\nawait projectOnBoarding.clickHideColumnsBtn()\nawait projectOnBoarding.selectColum('Future Upsells')\nconst columnsCount = await projectOnBoarding.getTableColumsCount(); \nassert.equal(columnsCount, 3, `Colums count is not Correct.`);\nconst columnsText = await projectOnBoarding.getTableColumsAndCheck('Future Upsells'); \nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "6309e5cd-f296-42ed-b47c-452b057292fe",
              "parentUUID": "c2f4ad9e-28a8-4595-bfdf-87e6a41cb589",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87c64e92-e2ea-4199-9614-7f9ccb4c804d",
            "62608cd8-e476-4d69-a1a9-f476dc2dd0be",
            "9591b4f0-a498-4221-bced-cec41f11fc6a",
            "484d6e97-b71d-49e0-a532-066132433e36",
            "86489e40-45bc-4344-b70c-c79fe5c1f66d",
            "9b4d2ce2-af82-4ba1-9790-e54f8bf90591",
            "5932c8ac-e998-46a4-97c0-4a9db3281ecd",
            "c80a881b-34ce-4114-bccb-0939b146bd6e",
            "f2fee499-da7c-4594-ba0d-273ade472f11",
            "83d78a45-34d8-43ca-97db-cc111cecfdd7",
            "a0f76ea4-fae1-4f7b-82f8-cde6b44b42cc",
            "f87ee42e-7fe5-4409-9c4a-c6a9b8a4f405",
            "e1b82860-aa87-4a18-8bbe-decce6179ce4",
            "c975d8f4-c8fc-4c2c-9023-947e551904ba",
            "9864b8cb-09d0-4b83-aa40-d258e1d1f417",
            "6067858d-a551-42dd-a3c8-dc83a0ebbf78",
            "66816fd3-2c95-43a6-8489-c54b1ec661e2",
            "cb5b8d89-8c27-4d6e-b13f-b6be92e88f41",
            "3ea153b0-9635-4996-95c2-7f19841bef93",
            "2daaddeb-6a71-4ca4-89b0-e8aa10002bbe",
            "8a414b61-d705-4181-9ed6-7574fc749674",
            "35eae676-c9e0-4d33-a8e1-288c034f6733",
            "1d2a5408-0b64-43bc-8de5-e2cb23b23a33",
            "a9baca8a-c8af-40fa-aaa5-7dedc210a30e",
            "da0af0f8-0b40-4fe6-a5b1-40311fe60797",
            "a412a5a1-e22d-4723-8f25-c4ee0fa30a54",
            "157cd3c7-9e9f-4ed0-ad3b-c49753d91cb3",
            "3bd692be-e3d4-4095-a1be-c7b20b365a58",
            "6309e5cd-f296-42ed-b47c-452b057292fe"
          ],
          "failures": [
            "fa3a25d3-5356-4e6d-902d-c4bde71c965e",
            "d016cb66-466e-4e38-a7af-46b446c308ef",
            "3a8f29ed-e036-4ead-b820-7e587f2797d1",
            "a36134f0-0242-42ac-be50-36f1602f2214",
            "72a8f403-5df8-4ced-95ac-c1e4f0b6426d",
            "5d2c4c20-e53e-42a8-99e1-3c207e5f7763",
            "c5db1f93-1d33-4ced-a70c-bbe665d40a45",
            "1e8fb222-4916-45c9-911c-2c71e824d009",
            "613c094f-6024-4b0e-b2de-9cb30f1e6c64",
            "f6996ee3-fe8e-4332-b57a-7f7389193a37",
            "8462f92c-31d0-4515-afd9-d68f3754c6a3",
            "9b9b22d6-feab-43ff-a0da-8ab6996f42b0",
            "81f00407-67a5-46a0-9487-47559758ec03",
            "537feb2c-c455-4063-8ac0-34b52c932eb6",
            "780380fa-c5d0-49d4-a27c-7f6b9f6cd7fe",
            "5b31a0b1-2755-4ba9-b4e2-ef8ce225564c",
            "cc833297-4acd-4c70-acbf-6119eec573e4",
            "e6ff8692-55f3-4fda-9fe3-35c85e92052b",
            "2069d0f5-b9a0-4f89-a98f-970a6cc179f8"
          ],
          "pending": [],
          "skipped": [],
          "duration": 485997,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "23730776-fe39-49aa-b7ba-f43fb2067c29",
          "title": "All Resources",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/resources/spec-1-all-resources.js",
          "file": "/test/e2e/resources/spec-1-all-resources.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"All Resources\"",
              "fullTitle": "All Resources \"before all\" hook in \"All Resources\"",
              "timedOut": false,
              "duration": 11621,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE departments SET \"hodId\" = 9474 WHERE id = 9;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\n// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "f156668f-8ba2-4b13-983f-f5f9d8c474c3",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"All Resources\"",
              "fullTitle": "All Resources \"before each\" hook in \"All Resources\"",
              "timedOut": false,
              "duration": 3516,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resources');\nawait utilFun.wait(3000);\nawait utilFun.waitForPageLoad();",
              "err": {},
              "uuid": "bb98cac8-b666-4edd-a56d-d63c2ad88878",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should check if all-resources tab is click-able",
              "fullTitle": "All Resources should check if all-resources tab is click-able",
              "timedOut": false,
              "duration": 4315,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/home');\nawait utilFun.waitForPageLoad();\nawait resources.clickResourcesTab();\nawait resources.clickResourcesSubTab('All Resources');\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/resources');",
              "err": {},
              "uuid": "34a09844-06bc-45b4-b71e-d96ad84be3c3",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by name.",
              "fullTitle": "All Resources should able to search resources by name.",
              "timedOut": false,
              "duration": 4676,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('James Salinas');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "ee8fc63c-5630-4f31-b625-7d4895a7558c",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by their allocated Project.",
              "fullTitle": "All Resources should able to search resources by their allocated Project.",
              "timedOut": false,
              "duration": 3033,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Project');\nawait resources.selectFilterValue('automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "8c6d3a75-b7db-4638-9eec-a8533aa99ee9",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by their Job status.",
              "fullTitle": "All Resources should able to search resources by their Job status.",
              "timedOut": false,
              "duration": 3460,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Job Status');\nawait resources.selectFilterValue('Permanent');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "9ae0f4cb-18c8-4cb0-87f3-7fad17d0dfd0",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Job status filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Job status filter.",
              "timedOut": false,
              "duration": 6404,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Project');\nawait resources.selectFilterValue('automation');\nawait resources.selectFilter('Search by Job Status');\nawait resources.selectFilterValue('Permanent');\nawait resources.selectFilter('Permanent');\nawait resources.selectFilterValue('Internship');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "4758a41c-26dd-459b-a667-a5a69f3fddc6",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by their Availability.",
              "fullTitle": "All Resources should able to search resources by their Availability.",
              "timedOut": false,
              "duration": 4675,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Project');\nawait resources.selectFilterValue('automation');\nawait resources.selectFilter('Search by Availability');\nawait resources.selectFilterValue('Fully Available');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "5d0e5ba8-53bb-432e-9a7d-de1a5699ae51",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by this month.",
              "fullTitle": "All Resources should able to search resources by this month.",
              "timedOut": false,
              "duration": 12502,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by this Month');\nawait resources.selectFilterValue('Increments');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10074ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10074ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "6c6ef252-2926-4c2b-87ca-38a95ce47184",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on this month filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on this month filter.",
              "timedOut": false,
              "duration": 14208,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by this Month');\nawait resources.selectFilterValue('Probations');\nawait resources.selectFilter('Probations');\nawait resources.selectFilterValue('Increments');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10052ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10052ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "228daf58-c1d8-41a7-a9ec-67ed00051a4b",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Location.",
              "fullTitle": "All Resources should able to search resources by Location.",
              "timedOut": false,
              "duration": 2840,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Location');\nawait resources.selectFilterValue('Remote');\nawait utilFun.waitForPageLoad();\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "5d438ae8-807d-4ed1-a21f-2bc98818d9dd",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Location filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Location filter.",
              "timedOut": false,
              "duration": 4923,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Location');\nawait resources.selectFilterValue('Remote');\nawait resources.selectFilter('Remote');\nawait resources.selectFilterValue('Karachi');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "93786748-3f9a-4e39-9f44-372234e5ba95",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Skill.",
              "fullTitle": "All Resources should able to search resources by Skill.",
              "timedOut": false,
              "duration": 3431,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Skills\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "03991a11-7d8d-4854-87b8-8e98d92e50c2",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Skills filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Skills filter.",
              "timedOut": false,
              "duration": 5866,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Skills\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation');\nawait resources.selectFilter('Automation\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation1');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "7d86a1ed-cc5a-4e10-a69f-a2413dd81545",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Show resources with all selected skills.",
              "fullTitle": "All Resources should able to Show resources with all selected skills.",
              "timedOut": false,
              "duration": 6131,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Skills\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation');\nawait resources.selectFilter('Automation\\nShow resources with all selected skills');\nawait resources.selectFilterValue('Automation1');\nawait resources.clickAllSelectedSkillsCheckbox();\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "31246402-839a-4701-9c67-2bdcade39816",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Department.",
              "fullTitle": "All Resources should able to search resources by Department.",
              "timedOut": false,
              "duration": 3196,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {},
              "uuid": "0510801d-b2fc-48d0-b914-7f9ca151bef8",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Department filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Department filter.",
              "timedOut": false,
              "duration": 4870,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nawait resources.selectFilter('Engineering');\nawait resources.selectFilterValue('Automation1');\nconst names = await resources.getResourceNameTag();\nassert(names.length > 0, `Expected text not found.`);",
              "err": {},
              "uuid": "c6ed1df1-31a5-4087-95b6-1b173a1d261c",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Sub-Department.",
              "fullTitle": "All Resources should able to search resources by Sub-Department.",
              "timedOut": false,
              "duration": 5216,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nawait resources.clickSubDepartment();\nawait resources.selectFilterValue('SQA Ib Support');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "6647ed47-4bb3-400d-9907-e24feabd067e",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Sub-Department filter..",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Sub-Department filter..",
              "timedOut": false,
              "duration": 7020,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Department');\nawait resources.selectFilterValue('Engineering');\nawait resources.clickSubDepartment();\nawait resources.selectFilterValue('SQA Ib Support');\nawait resources.clickSubDepartment();\nawait resources.selectFilterValue('DevOps Support');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "bb5bfc46-46db-41d2-bebb-f1fc5bc6ef54",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Designation.",
              "fullTitle": "All Resources should able to search resources by Designation.",
              "timedOut": false,
              "duration": 5249,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation');\nawait resources.selectDesignation('Software Engineer');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "04f1c0bd-6194-4fc6-a6f5-3b7e0499c1d5",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that multi select is impelmented on Designation filter.",
              "fullTitle": "All Resources should able to Verify that multi select is impelmented on Designation filter.",
              "timedOut": false,
              "duration": 9106,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation');\nawait resources.selectDesignation('Software Engineer');\nawait resources.selectFilter('Software Engineer');\nawait resources.selectDesignation('HR');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Muhammad Bilal Rafaqat'), `Expected text not found.`);",
              "err": {},
              "uuid": "cbc05911-d8f6-47f5-ae9a-22f06816fb8b",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to search resources by Designation Category.",
              "fullTitle": "All Resources should able to search resources by Designation Category.",
              "timedOut": false,
              "duration": 2765,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation Category');\nawait resources.selectDesignationCategory('Automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('James Salinas'), `Expected text not found.`);",
              "err": {},
              "uuid": "25469f87-28b3-4111-8701-c4215673e571",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Verify that when user click on clear button then all his search should be clear.",
              "fullTitle": "All Resources should able to Verify that when user click on clear button then all his search should be clear.",
              "timedOut": false,
              "duration": 2806,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.selectFilter('Search by Designation Category');\nawait resources.selectDesignationCategory('Automation');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.length == 4, `Expected length not found.`);\nawait resources.clickClearButton();\nconst names1 = await resources.getResourceNameTag();\nassert.ok(names1.length > 4, `Expected length not found.`);",
              "err": {
                "message": "AssertionError: Expected length not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected length not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:241:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "b1246c98-3cd1-47a0-867a-c1b5eda6d2cd",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Add new resource",
              "fullTitle": "All Resources should able to Add new resource",
              "timedOut": false,
              "duration": 20490,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_skills\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `UPDATE employee_assets SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_resumes\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_timeLines\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"project_portfolio_employees\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM employees WHERE id = ${resourceId.rows[0].id};`,\n  ];\n  await utilFun.udpateDatabase(query);\n}\nawait addResources.clickAddResourceBtn();\n//   Form 1\nawait addResources.clickInputField('Employee Name *', 'Steve');\nawait addResources.clickInputField('Work Phone Number', '123456');\nawait addResources.clickInputField('Work Email *', 'steve@email.com');\nawait addResources.clickInputField('Work Shift\\nSelect Work Shift', 'morning');\nawait addResources.clickOption();\nawait addResources.clickInputField('Work Location\\nSelect Work Location', 'remote');\nawait addResources.clickOption();\nawait addResources.clickInputField('Primary Manager\\nPrimary Manager', 'bilal rafaqat');\nawait addResources.clickOption();\nawait addResources.clickInputField('Attendance Mode\\nSelect Attendance Mode', 'invodesk');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation *\\nSelect Designation', 'automation');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation Category*\\nSelect Designation Category', 'automation');\nawait addResources.clickOption();\nawait addResources.clickNextButton();\n//   Form 2\nawait addResources.clickInputField2('Father Name', 'James');\nawait addResources.clickInputField2('Personal Email', 'personal@email.com');\nawait addResources.clickInputField2('Personal Phone', '12345');\nawait addResources.clickInputField2('Address', 'xyz');\nawait addResources.clickInputField2('National ID Number', '1122');\nawait addResources.setDOB('01-01-2000');\nawait addResources.clickInputField2('Gender\\nSelect Gender', 'other');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Marital Status\\nSelect Marital Status', 'single');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Emergency Contact Name', 'James');\nawait addResources.clickInputField2('Emergency Contact Number', '54321');\nawait addResources.clickInputField2('Emergency Contact Relation', 'Father');\nawait addResources.clickNextButton2();\n//   Form 3\nawait addResources.clickInputField3('Bank Name', 'MyBank');\nawait addResources.clickInputField3('Account Title', 'current');\nawait addResources.clickInputField3('IBAN Number', '3344');\nawait addResources.clickInputField3('Bank Address', 'qwerty');\nawait addResources.clickNextButton3();\n//   Form 4\nawait addResources.clickInputField4('Certification Level\\nSelect Certification Level', 'graduation');\nawait addResources.clickOption4();\nawait addResources.clickInputField4('Field of Study', 'SE');\nawait addResources.clickInputField4('School/University', 'MIT');\nawait addResources.clickInputField4('Score/Percentage', '70');\nawait addResources.clickInputField4('Passing Year\\nSelect Degree Passing Year', '2020');\nawait addResources.clickOption4();\nawait addResources.clickNextButton4();\n//   Form 5\nawait addResources.clickInputFieldForm5('Department\\nDepartment', 'Engineering');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Sub Department\\nSub Department', 'DevOps Support');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Contract Type*\\nSelect Contract Type', 'Full Time');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Date of Joining*', '01-11-2023');\nawait addResources.selectJobStatus('Probation');\nawait addResources.selectEndOfProbation('2 Months');\nawait addResources.clickInputFieldForm5('Total Working Hours*\\nSelect Total Working Hours', '4 Hrs');\nawait addResources.clickOptionForm5();\nawait addResources.clickNextButton5();\n//   Form 6\nawait addResources.clickInputFieldForm6('Current Salary (PKR)', '50000');\nawait addResources.clickInputFieldForm6('Last Salary (PKR)', '30000');\nawait addResources.clickInputFieldForm6('Last Increment Date', '01-01-2023');\nawait addResources.clickSubmitButton();\nconst alertText = await addResources.checkAlert();\nassert.equal(alertText, 'Resource Created Successfully!');",
              "err": {
                "message": "TimeoutError: Waiting until element is visible\nWait timed out after 10162ms",
                "estack": "TimeoutError: Waiting until element is visible\nWait timed out after 10162ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "dfc92322-5f98-4efb-8e12-82e875c290f0",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if Resource is added.",
              "fullTitle": "All Resources should able to check if Resource is added.",
              "timedOut": false,
              "duration": 3080,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:336:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "7f2482eb-fdd8-4ea9-8066-6d6b08240e38",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Open Slack DM from options",
              "fullTitle": "All Resources should able to Open Slack DM from options",
              "timedOut": false,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "fba56634-33fb-4f2a-b980-2d3d3f7ef615",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to  copy email from options",
              "fullTitle": "All Resources should able to  copy email from options",
              "timedOut": false,
              "duration": 3177,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Copy Email');\nconst alertText = await utilFun.checkAlert();\nutilFun.assertEql(alertText, 'Email address is copied');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:361:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "58e32082-bf3d-49e0-ad0f-9b0bbbeab71a",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Send Email from options",
              "fullTitle": "All Resources should able to Send Email from options",
              "timedOut": false,
              "duration": 2938,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Send Email');\nawait utilFun.wait(1000);\nawait utilFun.switchWindow(1);\nawait utilFun.wait(3000);\nconst url = await utilFun.getUrl();\nassert.equal(url, 'https://mail.google.com/mail/u/0/?fs=1&tf=cm&to=steve@email.com');\nawait utilFun.closeCurrentTab();\nawait utilFun.switchWindow(0);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:372:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "6190a230-784d-4a42-980f-7b068e2beef0",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to see Email from options",
              "fullTitle": "All Resources should able to see Email from options",
              "timedOut": false,
              "duration": 3224,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('See Email');\nconst email = await resources.copyEmail();\nassert.equal(email, 'Email: steve@email.com');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:388:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "01a10287-4558-436b-8a85-9d2c06d108fa",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to copy Phone Number from options",
              "fullTitle": "All Resources should able to copy Phone Number from options",
              "timedOut": false,
              "duration": 3122,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Phone Number');\nconst phnNo = await resources.copyEmail();\nassert.equal(phnNo, 'Phone: 12345');\nawait resources.copyPhoneNumber();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Phone# is copied successfully');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:399:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "1e29d936-fec5-4c12-8385-75e228cb3ea6",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to update Resource from options",
              "fullTitle": "All Resources should able to update Resource from options",
              "timedOut": false,
              "duration": 4522,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Update Resource');\nawait addResources.clickInputField('Work Phone Number', '8');\nawait addResources.clickNextButton();\nawait addResources.clickNextButton2();\nawait addResources.clickNextButton3();\nawait addResources.clickNextButton4();\nawait addResources.clickNextButton5();\nawait addResources.clickSubmitButton();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource Job Status is updated Successfully!');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:413:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "fd5de29e-839f-4ca2-8067-3bd9fd6527fa",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to initiate a Performance Review from options",
              "fullTitle": "All Resources should able to initiate a Performance Review from options",
              "timedOut": false,
              "duration": 3104,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [`DELETE FROM employee_evaluations WHERE \"employeeId\" = ${resourceId.rows[0].id};`];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Initiate a Performance Review');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Review is initiated successfully.');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:436:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "83adfa6f-77a7-4d3d-bc7e-5dcc631451fe",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if Performance review is initiated or not",
              "fullTitle": "All Resources should able to check if Performance review is initiated or not",
              "timedOut": false,
              "duration": 13298,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/evaluation-performance');\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10029ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10029ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "c76fcd63-f50f-4e09-ae64-bd233f833576",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Initiate a Revised Designation from options",
              "fullTitle": "All Resources should able to Initiate a Revised Designation from options",
              "timedOut": false,
              "duration": 3102,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [`DELETE FROM employee_evaluations WHERE \"employeeId\" = ${resourceId.rows[0].id};`];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickOptionBtn();\nawait resources.selectOption('Initiate a Revised Designation');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Review is initiated successfully.');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:461:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "27b4a3af-0643-4fda-a8e1-5997b1fc455c",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if Performance review is initiated or not",
              "fullTitle": "All Resources should able to check if Performance review is initiated or not",
              "timedOut": false,
              "duration": 13346,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/evaluation');\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10190ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10190ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "a8ec6be7-3553-4610-a4c7-d0aded8b44f9",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to to add project from resource details",
              "fullTitle": "All Resources should able to to add project from resource details",
              "timedOut": false,
              "duration": 2975,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickAddproject();\nawait resources.selectAddProjectInputField('Projects', 'automation');\nawait resources.selectAddProjectInputField('Role in this project', 'Main Developer');\nawait resources.selectAddProjectInputField('Not Set', 'Fully Available');\nawait resources.selectAddProjectInputField('Engagement Mode', 'Billed');\nawait resources.selectAddProjectInputField('Add', '');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource added in project successfully.');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:481:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "825ee4f3-c4bb-43cf-9e42-f9eed1ee3be7",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to to delete project from resource details",
              "fullTitle": "All Resources should able to to delete project from resource details",
              "timedOut": false,
              "duration": 2980,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resources.clickDeleteProject();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource removed from project successfully.');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:496:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "defdecc1-703c-47e2-b2e9-c826ca3d266e",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Create Employee Resume",
              "fullTitle": "All Resources should able to Create Employee Resume",
              "timedOut": false,
              "duration": 3051,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [`DELETE FROM \"employee_resumes\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.waitForPageLoad();\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceResume.clickCreateResumeBtn();\nawait resourceResume.enterLable('Steve Resume');\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterSummary('testing');\nawait resourceResume.clickNextBtn();\nawait resourceResume.clickSkillDropdown();\nawait resourceResume.selectSkill('Automation');\nawait resourceResume.giveSkillRating(4);\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterTitle('Project1');\nawait resourceResume.enterDescription('Testing');\nawait resourceResume.enterResponsibilities('Testing');\nawait resourceResume.selectTechnologies('Automation1');\nawait resourceResume.selectTools('okokok');\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterDegree('BS Software Engineering');\nawait resourceResume.enterInstitution('UOL');\nawait resourceResume.clickCalendar();\nawait resourceResume.selectMonth('Sep');\nawait resourceResume.selectYear('2017');\nawait resourceResume.clickCalendar();\nawait resourceResume.selectMonth('Jan');\nawait resourceResume.selectYear('2022');\nawait resourceResume.clickNextBtn();\nawait resourceResume.enterTitle('Js Developer');\nawait resourceResume.enterOrganization('Invozone');\nawait resourceResume.clickIssueDateCalendar();\nawait resourceResume.selectDate('22');\nawait resourceResume.selectMonth('Jan');\nawait resourceResume.selectYear('2022');\nawait resourceResume.clickNextBtn();\nawait resourceResume.clickNextBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resume is created successfully.');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-1-all-resources.js:513:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "79e98e5d-cc44-4fd8-a971-9f63f644e8de",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Department Colum",
              "fullTitle": "All Resources should able to Hide Department Colum",
              "timedOut": false,
              "duration": 2162,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Department');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 12, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Department');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "dae176b4-5cf0-492a-9aee-6cc11aba3b9b",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Sub-Department Colum",
              "fullTitle": "All Resources should able to Hide Sub-Department Colum",
              "timedOut": false,
              "duration": 2121,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Sub-Department');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 11, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Sub-Department');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "637071e9-7bf4-4397-92a7-68bf6af133d4",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Skills Colum",
              "fullTitle": "All Resources should able to Hide Skills Colum",
              "timedOut": false,
              "duration": 2143,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Skills');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 10, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Skills');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "61cb7cbe-1236-4272-a523-e4219f3388d2",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Exp Years Colum",
              "fullTitle": "All Resources should able to Hide Exp Years Colum",
              "timedOut": false,
              "duration": 2109,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Exp Years');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 9, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Exp Years');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "0d5af42a-8bac-467d-b839-4da914b2326f",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Location Colum",
              "fullTitle": "All Resources should able to Hide Location Colum",
              "timedOut": false,
              "duration": 2278,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Location');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 8, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Location');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "b30f6fa1-8351-4606-bbec-47a376b3c936",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Projects Colum",
              "fullTitle": "All Resources should able to Hide Projects Colum",
              "timedOut": false,
              "duration": 2061,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Projects');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 7, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Projects');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "d9707207-2070-4971-a7fa-d887cd19e0c6",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Availablility Colum",
              "fullTitle": "All Resources should able to Hide Availablility Colum",
              "timedOut": false,
              "duration": 1921,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Availability');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 6, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Availablility');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "0dca7cec-4060-496f-a03e-30d70c0feb63",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Hide Resume Colum",
              "fullTitle": "All Resources should able to Hide Resume Colum",
              "timedOut": false,
              "duration": 1929,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await resources.clickHideColumnsBtn();\nawait resources.selectColumn('Resume');\nconst columnsCount = await resources.getTableColumnsCount();\nassert.equal(columnsCount, 5, `Colums count is not Correct.`);\nconst columnsText = await resources.getTableColumnsAndCheck('Resume');\nassert.equal(columnsText, -1, `Expected Colum is Not Hidden.`);",
              "err": {},
              "uuid": "be38393e-0e65-48aa-ae1b-f04e26cd0775",
              "parentUUID": "23730776-fe39-49aa-b7ba-f43fb2067c29",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "34a09844-06bc-45b4-b71e-d96ad84be3c3",
            "ee8fc63c-5630-4f31-b625-7d4895a7558c",
            "8c6d3a75-b7db-4638-9eec-a8533aa99ee9",
            "9ae0f4cb-18c8-4cb0-87f3-7fad17d0dfd0",
            "4758a41c-26dd-459b-a667-a5a69f3fddc6",
            "5d0e5ba8-53bb-432e-9a7d-de1a5699ae51",
            "5d438ae8-807d-4ed1-a21f-2bc98818d9dd",
            "93786748-3f9a-4e39-9f44-372234e5ba95",
            "03991a11-7d8d-4854-87b8-8e98d92e50c2",
            "7d86a1ed-cc5a-4e10-a69f-a2413dd81545",
            "31246402-839a-4701-9c67-2bdcade39816",
            "0510801d-b2fc-48d0-b914-7f9ca151bef8",
            "c6ed1df1-31a5-4087-95b6-1b173a1d261c",
            "6647ed47-4bb3-400d-9907-e24feabd067e",
            "bb5bfc46-46db-41d2-bebb-f1fc5bc6ef54",
            "04f1c0bd-6194-4fc6-a6f5-3b7e0499c1d5",
            "cbc05911-d8f6-47f5-ae9a-22f06816fb8b",
            "25469f87-28b3-4111-8701-c4215673e571",
            "dae176b4-5cf0-492a-9aee-6cc11aba3b9b",
            "637071e9-7bf4-4397-92a7-68bf6af133d4",
            "61cb7cbe-1236-4272-a523-e4219f3388d2",
            "0d5af42a-8bac-467d-b839-4da914b2326f",
            "b30f6fa1-8351-4606-bbec-47a376b3c936",
            "d9707207-2070-4971-a7fa-d887cd19e0c6",
            "0dca7cec-4060-496f-a03e-30d70c0feb63",
            "be38393e-0e65-48aa-ae1b-f04e26cd0775"
          ],
          "failures": [
            "6c6ef252-2926-4c2b-87ca-38a95ce47184",
            "228daf58-c1d8-41a7-a9ec-67ed00051a4b",
            "b1246c98-3cd1-47a0-867a-c1b5eda6d2cd",
            "dfc92322-5f98-4efb-8e12-82e875c290f0",
            "7f2482eb-fdd8-4ea9-8066-6d6b08240e38",
            "58e32082-bf3d-49e0-ad0f-9b0bbbeab71a",
            "6190a230-784d-4a42-980f-7b068e2beef0",
            "01a10287-4558-436b-8a85-9d2c06d108fa",
            "1e29d936-fec5-4c12-8385-75e228cb3ea6",
            "fd5de29e-839f-4ca2-8067-3bd9fd6527fa",
            "83adfa6f-77a7-4d3d-bc7e-5dcc631451fe",
            "c76fcd63-f50f-4e09-ae64-bd233f833576",
            "27b4a3af-0643-4fda-a8e1-5997b1fc455c",
            "a8ec6be7-3553-4610-a4c7-d0aded8b44f9",
            "825ee4f3-c4bb-43cf-9e42-f9eed1ee3be7",
            "defdecc1-703c-47e2-b2e9-c826ca3d266e",
            "79e98e5d-cc44-4fd8-a971-9f63f644e8de"
          ],
          "pending": [
            "fba56634-33fb-4f2a-b980-2d3d3f7ef615"
          ],
          "skipped": [],
          "duration": 215825,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "e78c5db4-e1cd-4319-80fb-67aff9e69254",
          "title": "Resource Offboarding",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/resources/spec-2-resource-offboarding.js",
          "file": "/test/e2e/resources/spec-2-resource-offboarding.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Resource Offboarding\"",
              "fullTitle": "Resource Offboarding \"before all\" hook in \"Resource Offboarding\"",
              "timedOut": false,
              "duration": 9877,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "e7de5593-eda2-4ad6-9a66-928efadead91",
              "parentUUID": "e78c5db4-e1cd-4319-80fb-67aff9e69254",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Resource Offboarding\"",
              "fullTitle": "Resource Offboarding \"before each\" hook in \"Resource Offboarding\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad()",
              "err": {},
              "uuid": "06e6bc39-59b9-456f-899c-d4eeb9b51c18",
              "parentUUID": "e78c5db4-e1cd-4319-80fb-67aff9e69254",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to OffBoard Resource by Resignation without Pending Discussion",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by Resignation without Pending Discussion",
              "timedOut": false,
              "duration": 4774,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('Resignation')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.clickPendingCheckbox()\nawait resourceOffBoarding.setConntractEndDate('14122024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource job status is updated and email has been sent to PM & HOD!!');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-2-resource-offboarding.js:42:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "5c1ef985-0c4a-4622-9e00-be255186fa97",
              "parentUUID": "e78c5db4-e1cd-4319-80fb-67aff9e69254",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 13468,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10024ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10024ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3554eb6f-f1cd-481d-aceb-c54fad75fe4d",
              "parentUUID": "e78c5db4-e1cd-4319-80fb-67aff9e69254",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to OffBoard Resource by Resignation Pending Discussion",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by Resignation Pending Discussion",
              "timedOut": false,
              "duration": 4824,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('Resignation')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource job status is updated and email has been sent to PM & HOD!!');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-2-resource-offboarding.js:81:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "cb725f20-568a-46c3-a29e-2e0557de72e6",
              "parentUUID": "e78c5db4-e1cd-4319-80fb-67aff9e69254",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 13558,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10036ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10036ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "624052b1-8a00-4822-a385-21c178d44013",
              "parentUUID": "e78c5db4-e1cd-4319-80fb-67aff9e69254",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should able to approve Pending resource offBoarding",
              "fullTitle": "Resource Offboarding Should able to approve Pending resource offBoarding",
              "timedOut": false,
              "duration": 13587,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);\nawait resourceOffBoarding.selectOffBoardingResponse('Approved')\nawait resourceOffBoarding.setLastDate('14122024')\nawait resourceOffBoarding.clickUpdateBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resignation request has been approved succesfully!');\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10011ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10011ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "02aa4161-f4cd-4bd0-92db-59772fd532b7",
              "parentUUID": "e78c5db4-e1cd-4319-80fb-67aff9e69254",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should able to Reject Pending resource offBoarding",
              "fullTitle": "Resource Offboarding Should able to Reject Pending resource offBoarding",
              "timedOut": false,
              "duration": 13544,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `UPDATE boarding_requests SET \"status\" = 'PENDING' WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE boarding_requests SET \"noticeEndDate\" = NULL WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE boarding_requests SET \"deletedAt\" = NULL WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Resignation'), `Expected text not found.`);\nawait resourceOffBoarding.selectOffBoardingResponse('Rejected')\nawait resourceOffBoarding.enterReason('testing')\nawait resourceOffBoarding.clickUpdateBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resignation request has been rejected succesfully!');\nawait resourceOffBoarding.confirmRejectStatus()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10044ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10044ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "67333574-44b6-4f0e-bd4a-aed7ac13d5a6",
              "parentUUID": "e78c5db4-e1cd-4319-80fb-67aff9e69254",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to OffBoard Resource by Termination",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by Termination",
              "timedOut": false,
              "duration": 4999,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('Termination')\nawait resourceOffBoarding.enterReason('testing')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.setConntractEndDate('14122024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Termination request has been approved succesfully!');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-2-resource-offboarding.js:161:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "e0c42f2c-77e3-44b8-9178-c2e0bb7c17fd",
              "parentUUID": "e78c5db4-e1cd-4319-80fb-67aff9e69254",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 13430,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Termination'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10023ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10023ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "ccbcf5bb-edbd-4f11-a44d-dafce8ea50df",
              "parentUUID": "e78c5db4-e1cd-4319-80fb-67aff9e69254",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource upcoming offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource upcoming offBoarding is showning or not",
              "timedOut": false,
              "duration": 13760,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('Termination'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10200ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10200ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "9d52767f-285b-440e-b6cc-c77bd0fc6005",
              "parentUUID": "e78c5db4-e1cd-4319-80fb-67aff9e69254",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to OffBoard Resource by End of Service",
              "fullTitle": "Resource Offboarding should able to OffBoard Resource by End of Service",
              "timedOut": false,
              "duration": 5024,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`)\nif(resourceId.rowCount !== 0){\nlet query = [\n  `DELETE FROM \"boarding_requests\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"noticeEndDate\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"jobStatus\" = 'Permanent' WHERE id = ${resourceId.rows[0].id};`,\n  `UPDATE employees SET \"reasonForDeactivation\" = NULL WHERE id = ${resourceId.rows[0].id};`,\n];\nawait utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nawait resourceOffBoarding.clickOptionBtn();\nawait resourceOffBoarding.selectOption('Offboard Resource');\nawait resourceOffBoarding.clickOkBtn()\nawait resourceOffBoarding.selectOffBoardingStatus('End of Service')\nawait resourceOffBoarding.enterReason('testing')\nawait resourceOffBoarding.setEffectiveDate('13112024')\nawait resourceOffBoarding.setConntractEndDate('14122024')\nawait resourceOffBoarding.clickOkBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'End of Service request has been approved succesfully!');",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-2-resource-offboarding.js:212:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "f0cebbec-eaef-4eb8-8470-46ccd52f2b8f",
              "parentUUID": "e78c5db4-e1cd-4319-80fb-67aff9e69254",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource offBoarding is showning or not",
              "timedOut": false,
              "duration": 13594,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resource-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('End of Service'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10076ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10076ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "23e19765-eaad-4d3f-b0a8-02dfd939f4ea",
              "parentUUID": "e78c5db4-e1cd-4319-80fb-67aff9e69254",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should verify if resource upcoming offBoarding is showning or not",
              "fullTitle": "Resource Offboarding Should verify if resource upcoming offBoarding is showning or not",
              "timedOut": false,
              "duration": 13707,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/upcoming-offboardings');\nawait utilFun.waitForPageLoad()\nawait resources.clickFilterBtn()\nawait resources.searchName('Steve')\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Steve'), `Expected text not found.`);\nconst row = await resourceOffBoarding.getRowText();\nassert.ok(row.includes('End of Service'), `Expected text not found.`);\nawait resourceOffBoarding.confirmApproveStatus()",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10070ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10070ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "2bba62a4-c3b8-4676-92ff-f4a418a9c65a",
              "parentUUID": "e78c5db4-e1cd-4319-80fb-67aff9e69254",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "5c1ef985-0c4a-4622-9e00-be255186fa97",
            "3554eb6f-f1cd-481d-aceb-c54fad75fe4d",
            "cb725f20-568a-46c3-a29e-2e0557de72e6",
            "624052b1-8a00-4822-a385-21c178d44013",
            "02aa4161-f4cd-4bd0-92db-59772fd532b7",
            "67333574-44b6-4f0e-bd4a-aed7ac13d5a6",
            "e0c42f2c-77e3-44b8-9178-c2e0bb7c17fd",
            "ccbcf5bb-edbd-4f11-a44d-dafce8ea50df",
            "9d52767f-285b-440e-b6cc-c77bd0fc6005",
            "f0cebbec-eaef-4eb8-8470-46ccd52f2b8f",
            "23e19765-eaad-4d3f-b0a8-02dfd939f4ea",
            "2bba62a4-c3b8-4676-92ff-f4a418a9c65a"
          ],
          "pending": [],
          "skipped": [],
          "duration": 128269,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "0544f0fc-5ac8-421b-ae11-63473fc1b8f5",
          "title": "Position Openings",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/resources/spec-3-position-opening.js",
          "file": "/test/e2e/resources/spec-3-position-opening.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Position Openings\"",
              "fullTitle": "Position Openings \"before all\" hook in \"Position Openings\"",
              "timedOut": false,
              "duration": 10834,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "b7e9f6f9-b976-4f60-b24d-aab178c6f0d4",
              "parentUUID": "0544f0fc-5ac8-421b-ae11-63473fc1b8f5",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Position Openings\"",
              "fullTitle": "Position Openings \"before each\" hook in \"Position Openings\"",
              "timedOut": false,
              "duration": 913,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/position-openings');\nawait utilFun.waitForPageLoad();",
              "err": {},
              "uuid": "10616c8c-cbad-4b61-8302-452144bb75ec",
              "parentUUID": "0544f0fc-5ac8-421b-ae11-63473fc1b8f5",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Position Openings\"",
              "fullTitle": "Position Openings \"after all\" hook in \"Position Openings\"",
              "timedOut": false,
              "duration": 28,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9171;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\n// await utilFun.quit()",
              "err": {},
              "uuid": "c7bdc2f0-1af6-424a-8a0d-1db9640ad217",
              "parentUUID": "0544f0fc-5ac8-421b-ae11-63473fc1b8f5",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should able to Apply Request For Position opening",
              "fullTitle": "Position Openings should able to Apply Request For Position opening",
              "timedOut": false,
              "duration": 19796,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9474;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9171;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9429;`,\n  `DELETE FROM \"position_openings\" WHERE \"employeeId\" = 9429;`,\n];\nawait utilFun.udpateDatabase(query);\nawait positionOpenings.clickAddBtn();\nawait positionOpenings.selectField1AndEnterValue('Department*\\nSelect Department', 'Engineering');\nawait positionOpenings.selectField1AndEnterValue('Name of Position*\\nSelect Position', 'Software Engineer');\nawait positionOpenings.selectField2AndEnterValue('Position Level*\\nSelect Level', 'Automation');\nawait positionOpenings.selectField2AndEnterValue('No. of Resources*', '3');\nawait positionOpenings.selectField2AndEnterValue(`Year's of Experience*\\nSelect Years`, '0 - 1');\nawait positionOpenings.selectField1AndEnterValue('Tech Stack*\\nSelect Tech Stack', 'Automation');\nawait positionOpenings.selectField1AndEnterValue('Minimum Education*\\nSelect Education', 'Matric');\nawait positionOpenings.selectField1AndEnterValue('Gender*\\nSelect Gender', 'Male');\nawait positionOpenings.selectField1AndEnterValue('Budget*\\nSelect Budget', '0 - 25');\nawait positionOpenings.selectField1AndEnterValue('Office Location*\\nSelect Location', 'Remote');\nawait positionOpenings.selectField1AndEnterValue('Priorty Level*\\nSelect Priorty', 'High');\nawait positionOpenings.uploadDescription();\nawait positionOpenings.enterInstructions('Testing');\nawait positionOpenings.clickConfirmAddBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position request is created successfully!');",
              "err": {},
              "uuid": "5792f7fa-364a-41f3-8bb0-3b7760bf24c2",
              "parentUUID": "0544f0fc-5ac8-421b-ae11-63473fc1b8f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if request id Added",
              "fullTitle": "Position Openings should able to check if request id Added",
              "timedOut": false,
              "duration": 1873,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {},
              "uuid": "3f8d5627-311b-4fa0-9b73-832594fd0fa6",
              "parentUUID": "0544f0fc-5ac8-421b-ae11-63473fc1b8f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to edit request",
              "fullTitle": "Position Openings should able to edit request",
              "timedOut": false,
              "duration": 3745,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickEditBtn();\nawait positionOpenings.enterInstructions(' Updated');\nawait positionOpenings.clickConfirmAddBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been updated successfully');",
              "err": {},
              "uuid": "921166a8-848d-48b5-bff5-8e0c08db096a",
              "parentUUID": "0544f0fc-5ac8-421b-ae11-63473fc1b8f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to Delete request",
              "fullTitle": "Position Openings should able to Delete request",
              "timedOut": false,
              "duration": 2958,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickDeleteBtn();\nawait positionOpenings.enterReason('testing');\nawait positionOpenings.clickYesBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been deleted successfully!');",
              "err": {},
              "uuid": "201475e1-fe51-4020-8d61-951a2c04e839",
              "parentUUID": "0544f0fc-5ac8-421b-ae11-63473fc1b8f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if request is visible by HOD",
              "fullTitle": "Position Openings should check if request is visible by HOD",
              "timedOut": false,
              "duration": 10149,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE \"position_openings\" SET \"deletedAt\" = NULL WHERE \"employeeId\" = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-body\"] .ant-table-row)\nWait timed out after 10122ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-body\"] .ant-table-row)\nWait timed out after 10122ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "d04edd69-98cc-4546-9c25-6798eabdbc1a",
              "parentUUID": "0544f0fc-5ac8-421b-ae11-63473fc1b8f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if HOD can edit request",
              "fullTitle": "Position Openings should able to check if HOD can edit request",
              "timedOut": false,
              "duration": 10042,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickEditBtn();\nawait positionOpenings.enterInstructions(' Updated By HOD');\nawait positionOpenings.clickConfirmAddBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been updated successfully');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Edit\"])\nWait timed out after 10042ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Edit\"])\nWait timed out after 10042ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "a0c4e445-3fea-40d1-8c1f-5d3c359c2b2b",
              "parentUUID": "0544f0fc-5ac8-421b-ae11-63473fc1b8f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to reject request by hod",
              "fullTitle": "Position Openings should able to reject request by hod",
              "timedOut": false,
              "duration": 10030,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickRejectBtn();\nawait positionOpenings.enterReason('testing');\nawait positionOpenings.clickYesBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been rejected successfully');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Reject\"])\nWait timed out after 10029ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Reject\"])\nWait timed out after 10029ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "3d4f8fdd-5ea8-43f5-a592-d17750c40090",
              "parentUUID": "0544f0fc-5ac8-421b-ae11-63473fc1b8f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in reject tab",
              "fullTitle": "Position Openings should verify the request is showing in reject tab",
              "timedOut": false,
              "duration": 11750,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.selectReqTblSubTab('Rejected');\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-body\"] .ant-table-row)\nWait timed out after 10038ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-body\"] .ant-table-row)\nWait timed out after 10038ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "2392065e-bb09-4c9f-96c6-202fb3a086af",
              "parentUUID": "0544f0fc-5ac8-421b-ae11-63473fc1b8f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to approve request by hod",
              "fullTitle": "Position Openings should able to approve request by hod",
              "timedOut": false,
              "duration": 10163,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [`UPDATE \"position_openings\" SET \"isApprovedByHod\" = 'PENDING' WHERE \"employeeId\" = 9429;`];\nawait utilFun.udpateDatabase(query);\nawait positionOpenings.clickApproveBtn();\nawait positionOpenings.enterReason('testing');\nawait positionOpenings.clickYesBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been approved successfully');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Approve\"])\nWait timed out after 10146ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [aria-label=\"Approve\"])\nWait timed out after 10146ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "889f6e0c-7f20-4bdd-8b92-f8373c74c231",
              "parentUUID": "0544f0fc-5ac8-421b-ae11-63473fc1b8f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in approve tab",
              "fullTitle": "Position Openings should verify the request is showing in approve tab",
              "timedOut": false,
              "duration": 11806,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.selectReqTblSubTab('Approved');\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-body\"] .ant-table-row)\nWait timed out after 10104ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-body\"] .ant-table-row)\nWait timed out after 10104ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "e86e7280-cb8d-45b5-9ab0-04041c52cd66",
              "parentUUID": "0544f0fc-5ac8-421b-ae11-63473fc1b8f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if request is visible by CEO",
              "fullTitle": "Position Openings should check if request is visible by CEO",
              "timedOut": false,
              "duration": 2137,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9474;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9171;`,\n];\nawait utilFun.udpateDatabase(query);\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {},
              "uuid": "504f7d44-d285-43cd-9961-7c1d7ec694f1",
              "parentUUID": "0544f0fc-5ac8-421b-ae11-63473fc1b8f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to check if CEO can edit request",
              "fullTitle": "Position Openings should able to check if CEO can edit request",
              "timedOut": false,
              "duration": 3805,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickEditBtn();\nawait positionOpenings.enterInstructions(' Updated By CEO');\nawait positionOpenings.clickConfirmAddBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been updated successfully');",
              "err": {},
              "uuid": "55c2343c-2e95-40f2-9c07-f37a53495591",
              "parentUUID": "0544f0fc-5ac8-421b-ae11-63473fc1b8f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to reject request by hod",
              "fullTitle": "Position Openings should able to reject request by hod",
              "timedOut": false,
              "duration": 2864,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.clickRejectBtn();\nawait positionOpenings.enterReason('testing');\nawait positionOpenings.clickYesBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been rejected successfully');",
              "err": {},
              "uuid": "d3ff5b66-070c-4809-8f6c-3946439014bc",
              "parentUUID": "0544f0fc-5ac8-421b-ae11-63473fc1b8f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in reject tab",
              "fullTitle": "Position Openings should verify the request is showing in reject tab",
              "timedOut": false,
              "duration": 1664,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.selectSubTab('Rejected');\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {},
              "uuid": "cabd568e-94ab-49ef-9f31-bd46f0498690",
              "parentUUID": "0544f0fc-5ac8-421b-ae11-63473fc1b8f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to approve request by hod",
              "fullTitle": "Position Openings should able to approve request by hod",
              "timedOut": false,
              "duration": 2328,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [`UPDATE \"position_openings\" SET \"requestStatus\" = 'PENDING' WHERE \"employeeId\" = 9429;`];\nawait utilFun.udpateDatabase(query);\nawait positionOpenings.clickApproveBtn();\nawait positionOpenings.enterReason('testing');\nawait positionOpenings.clickYesBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'The position opening request has been approved successfully');",
              "err": {},
              "uuid": "03559202-dd5b-443c-89b3-1f0a236417f0",
              "parentUUID": "0544f0fc-5ac8-421b-ae11-63473fc1b8f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in approve tab",
              "fullTitle": "Position Openings should verify the request is showing in approve tab",
              "timedOut": false,
              "duration": 11699,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await positionOpenings.selectSubTab('Approved');\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-body\"] .ant-table-row)\nWait timed out after 10027ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-body\"] .ant-table-row)\nWait timed out after 10027ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "26321600-640e-4b16-bd94-b6708ef9cc70",
              "parentUUID": "0544f0fc-5ac8-421b-ae11-63473fc1b8f5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify the request is showing in approve tab for Applicant",
              "fullTitle": "Position Openings should verify the request is showing in approve tab for Applicant",
              "timedOut": false,
              "duration": 11441,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9171;`,\n];\nawait utilFun.udpateDatabase(query);\nawait positionOpenings.selectSubTab('Approved');\nlet rowText = await positionOpenings.getPositionTblRow();\nassert.ok(rowText.includes('Software Engineer'), `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-body\"] .ant-table-row)\nWait timed out after 10082ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"ant-table-body\"] .ant-table-row)\nWait timed out after 10082ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "a3c24b74-aa75-4b63-998b-afe9dd9e095d",
              "parentUUID": "0544f0fc-5ac8-421b-ae11-63473fc1b8f5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5792f7fa-364a-41f3-8bb0-3b7760bf24c2",
            "3f8d5627-311b-4fa0-9b73-832594fd0fa6",
            "921166a8-848d-48b5-bff5-8e0c08db096a",
            "201475e1-fe51-4020-8d61-951a2c04e839",
            "504f7d44-d285-43cd-9961-7c1d7ec694f1",
            "55c2343c-2e95-40f2-9c07-f37a53495591",
            "d3ff5b66-070c-4809-8f6c-3946439014bc",
            "cabd568e-94ab-49ef-9f31-bd46f0498690",
            "03559202-dd5b-443c-89b3-1f0a236417f0"
          ],
          "failures": [
            "d04edd69-98cc-4546-9c25-6798eabdbc1a",
            "a0c4e445-3fea-40d1-8c1f-5d3c359c2b2b",
            "3d4f8fdd-5ea8-43f5-a592-d17750c40090",
            "2392065e-bb09-4c9f-96c6-202fb3a086af",
            "889f6e0c-7f20-4bdd-8b92-f8373c74c231",
            "e86e7280-cb8d-45b5-9ab0-04041c52cd66",
            "26321600-640e-4b16-bd94-b6708ef9cc70",
            "a3c24b74-aa75-4b63-998b-afe9dd9e095d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 128250,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        },
        {
          "uuid": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
          "title": "Resource Details",
          "fullFile": "/home/devops/invohub/resource-engagement/test/e2e/resources/spec-4-resourse-details.js",
          "file": "/test/e2e/resources/spec-4-resourse-details.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Resource Details\"",
              "fullTitle": "Resource Details \"before all\" hook in \"Resource Details\"",
              "timedOut": false,
              "duration": 11993,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let query = [\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.de' WHERE id = 9429;`,\n  `UPDATE employees SET \"email\" = 'bilal.rafaqat@invozone.dev' WHERE id = 9474;`,\n];\nawait utilFun.udpateDatabase(query);\nlet resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  detailsPageUrl = `/resource-detail/${resourceId.rows[0].id}?tab=Basic_Information`;\n  attendanceTabUrl = `/resource-detail/${resourceId.rows[0].id}?tab=Attendance`;\n  oldId = resourceId.rows[0].id;\n  newId = resourceId.rows[0].id;\n}\n// await utilFun.login(email, password);\nawait utilFun.loginAccount()\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + '/home');",
              "err": {},
              "uuid": "621fa601-fb95-4c14-a977-27f4d58b0788",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should able to Add new resource",
              "fullTitle": "Resource Details should able to Add new resource",
              "timedOut": false,
              "duration": 22267,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let resourceId = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId.rowCount !== 0) {\n  let query = [\n    `UPDATE employee_attendances SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_skills\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `UPDATE employee_assets SET \"employeeId\" = 9429 WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_resumes\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"employee_timeLines\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM \"project_portfolio_employees\" WHERE \"employeeId\" = ${resourceId.rows[0].id};`,\n    `DELETE FROM employees WHERE id = ${resourceId.rows[0].id};`,\n  ];\n  await utilFun.udpateDatabase(query);\n}\nawait utilFun.visit(baseUrl + '/resources');\nawait utilFun.wait(3000);\nawait utilFun.waitForPageLoad();\nawait addResources.clickAddResourceBtn();\n//   Form 1\nawait addResources.clickInputField('Employee Name *', 'Stevee');\nawait addResources.clickInputField('Work Phone Number', '123456');\nawait addResources.clickInputField('Work Email *', 'steve@email.com');\nawait addResources.clickInputField('Work Shift\\nSelect Work Shift', 'morning');\nawait addResources.clickOption();\nawait addResources.clickInputField('Work Location\\nSelect Work Location', 'remote');\nawait addResources.clickOption();\nawait addResources.clickInputField('Primary Manager\\nPrimary Manager', 'bilal rafaqat');\nawait addResources.clickOption();\nawait addResources.clickInputField('Attendance Mode\\nSelect Attendance Mode', 'invodesk');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation *\\nSelect Designation', 'automation');\nawait addResources.clickOption();\nawait addResources.clickInputField('Designation Category*\\nSelect Designation Category', 'automation');\nawait addResources.clickOption();\nawait addResources.clickNextButton();\n//   Form 2\nawait addResources.clickInputField2('Father Name', 'James');\nawait addResources.clickInputField2('Personal Email', 'personal@email.com');\nawait addResources.clickInputField2('Personal Phone', '12345');\nawait addResources.clickInputField2('Address', 'xyz');\nawait addResources.clickInputField2('National ID Number', '1122');\nawait addResources.setDOB('01-01-2000');\nawait addResources.clickInputField2('Gender\\nSelect Gender', 'other');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Marital Status\\nSelect Marital Status', 'single');\nawait addResources.clickOption2();\nawait addResources.clickInputField2('Emergency Contact Name', 'James');\nawait addResources.clickInputField2('Emergency Contact Number', '54321');\nawait addResources.clickInputField2('Emergency Contact Relation', 'Father');\nawait addResources.clickNextButton2();\n//   Form 3\nawait addResources.clickInputField3('Bank Name', 'MyBank');\nawait addResources.clickInputField3('Account Title', 'current');\nawait addResources.clickInputField3('IBAN Number', '3344');\nawait addResources.clickInputField3('Bank Address', 'qwerty');\nawait addResources.clickNextButton3();\n//   Form 4\nawait addResources.clickInputField4('Certification Level\\nSelect Certification Level', 'graduation');\nawait addResources.clickOption4();\nawait addResources.clickInputField4('Field of Study', 'SE');\nawait addResources.clickInputField4('School/University', 'MIT');\nawait addResources.clickInputField4('Score/Percentage', '70');\nawait addResources.clickInputField4('Passing Year\\nSelect Degree Passing Year', '2020');\nawait addResources.clickOption4();\nawait addResources.clickNextButton4();\n//   Form 5\nawait addResources.clickInputFieldForm5('Department\\nDepartment', 'HR');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Sub Department\\nSub Department', 'DevOps Support');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Contract Type*\\nSelect Contract Type', 'Full Time');\nawait addResources.clickOptionForm5();\nawait addResources.clickInputFieldForm5('Date of Joining*', '11-01-2023');\nawait addResources.selectJobStatus('Probation');\nawait addResources.selectEndOfProbation('2 Months');\nawait addResources.clickInputFieldForm5('Total Working Hours*\\nSelect Total Working Hours', '4 Hrs');\nawait addResources.clickOptionForm5();\nawait addResources.clickNextButton5();\n//   Form 6\nawait addResources.clickInputFieldForm6('Current Salary (PKR)', '50000');\nawait addResources.clickInputFieldForm6('Last Salary (PKR)', '30000');\nawait addResources.clickInputFieldForm6('Last Increment Date', '01-01-2024');\nawait addResources.clickSubmitButton();\nconst alertText = await addResources.checkAlert();\nassert.equal(alertText, 'Resource Created Successfully!');\nlet resourceId1 = await utilFun.getFromDatabase(`SELECT id FROM employees WHERE \"email\" = 'steve@email.com';`);\nif (resourceId1.rowCount !== 0) {\n  detailsPageUrl = `/resource-detail/${resourceId1.rows[0].id}?tab=Basic_Information`;\n  attendanceTabUrl = `/resource-detail/${resourceId1.rows[0].id}?tab=Attendance`;\n  newId = resourceId1.rows[0].id;\n}",
              "err": {
                "message": "TimeoutError: Waiting until element is visible\nWait timed out after 10155ms",
                "estack": "TimeoutError: Waiting until element is visible\nWait timed out after 10155ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "8eb148c0-bef5-4aff-a629-85ffe97becb3",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to to add project from resource details",
              "fullTitle": "Resource Details should able to to add project from resource details",
              "timedOut": false,
              "duration": 16475,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + '/resources');\nawait utilFun.wait(3000);\nawait resources.clickFilterBtn();\nawait resources.searchName('Stevee');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Stevee'), `Expected text not found.`);\nawait resources.clickAddproject();\nawait resources.selectAddProjectInputField('Projects', 'automation');\nawait resources.selectAddProjectInputField('Role in this project', 'Main Developer');\nawait resources.selectAddProjectInputField('Not Set', 'Fully Available');\nawait resources.selectAddProjectInputField('Engagement Mode', 'Billed');\nawait resources.selectAddProjectInputField('Add', '');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource added in project successfully.');",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10094ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10094ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "26ba5f71-81ab-4645-9e9a-ba98d3cb5f76",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource is showing.",
              "fullTitle": "Resource Details should check if Resource is showing.",
              "timedOut": false,
              "duration": 5150,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/resources');\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Stevee'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:151:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "06249f94-26da-4cbf-a219-4910ae5219c1",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if clicking on resource name redirecting to resoure details page.",
              "fullTitle": "Resource Details should check if clicking on resource name redirecting to resoure details page.",
              "timedOut": false,
              "duration": 4849,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + '/resources');\nawait resources.clickFilterBtn();\nawait resources.searchName('Steve');\nconst names = await resources.getResourceNameTag();\nassert.ok(names.includes('Stevee'), `Expected text not found.`);\nawait resources.ClickResourceNameTag();\nawait utilFun.switchWindow(1);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);",
              "err": {
                "message": "AssertionError: Expected text not found.",
                "estack": "AssertionError [ERR_ASSERTION]: Expected text not found.\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:159:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- false\n+ true\n"
              },
              "uuid": "4ae25e0f-5cda-4d95-84dd-85c7f10937b7",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource name is showing on Details page.",
              "fullTitle": "Resource Details should check if Resource name is showing on Details page.",
              "timedOut": false,
              "duration": 415,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nconst name = await resourceDetails.getResourceNameTxt();\nassert.equal(name, 'Stevee', `Expected text not found.`);",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:169:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "0edd1066-2b27-4963-9d77-d3e4b1cbb3de",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Avatar is showing on Details page.",
              "fullTitle": "Resource Details should check if Resource Avatar is showing on Details page.",
              "timedOut": false,
              "duration": 10552,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.waitForPageLoad();\nawait utilFun.visit(baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nconst name = await resourceDetails.checkAvatarIcon();\nassert.equal(name, 'S', `Expected text not found.`);",
              "err": {
                "message": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10012ms",
                "estack": "TimeoutError: Waiting for element to be located By(css selector, [class=\"capitalize\"])\nWait timed out after 10012ms\n    at /home/devops/invohub/resource-engagement/node_modules/selenium-webdriver/lib/webdriver.js:929:17\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "7067fc5d-bc5e-4cb0-b11e-fb3efc4ef730",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Father Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Father Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 460,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Father Name', 'James');\nawait resourceDetails.editValue('Father Name', 'James Salinas');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Father Name', 'James salinas');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:187:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "94b38c20-8077-4a0c-880b-02d5603a6d79",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Personal Email is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Personal Email is Shownig and is editable.",
              "timedOut": false,
              "duration": 394,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Personal Email', 'personal@email.com');\nawait resourceDetails.editValue('Personal Email', 'personalUpdated@email.com');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Personal Email', 'personalUpdated@email.com');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:198:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "6a130a66-d834-4c21-b7a1-2de18c7b0034",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Address is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Address is Shownig and is editable.",
              "timedOut": false,
              "duration": 436,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Address', 'xyz');\nawait resourceDetails.editValue('Address', 'xyzUpdated');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Address', 'xyzUpdated');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:209:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "a6df9695-ee2c-469c-a280-5c7f89198f26",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Nationality is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Nationality is Shownig and is editable.",
              "timedOut": false,
              "duration": 425,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Nationality', 'Pakistan');\nawait resourceDetails.editValue('Nationality', 'United arab emirates');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Nationality', 'United arab emirates');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:220:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "50044434-1656-4789-9255-e8892f8a1a04",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource National ID Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource National ID Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 381,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('National ID Number', '1122');\nawait resourceDetails.editValue('National ID Number', '2233');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('National ID Number', '2233');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:231:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "2d3c8b8c-1521-4259-8d50-3b30a565b67e",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Date of Birth is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Date of Birth is Shownig and is editable.",
              "timedOut": false,
              "duration": 393,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Date of Birth', '01-01-2000');\nawait resourceDetails.editValue('Date of Birth', '01-01-2001');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Date of Birth', '01-01-2001');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:242:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "e5622421-d154-434d-af91-892a5ca97005",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Gender is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Gender is Shownig and is editable.",
              "timedOut": false,
              "duration": 348,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Gender', 'Other');\nawait resourceDetails.editValue('Gender', 'Female');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Gender', 'Female');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:253:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "717e70fc-f68b-4ad5-a564-f568d8708d44",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Marital Status is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Marital Status is Shownig and is editable.",
              "timedOut": false,
              "duration": 397,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Marital Status', 'Single');\nawait resourceDetails.editValue('Marital Status', 'Married');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Marital Status', 'Married');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:264:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "8afd4907-4fdd-4553-9d3f-dc73649ebabd",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Emergency Contact Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Emergency Contact Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 346,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Emergency Contact Name', 'James');\nawait resourceDetails.editValue('Emergency Contact Name', 'James Salinas');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Emergency Contact Name', 'James Salinas');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:275:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "8c09dca2-906c-4296-a2e5-bb078dc7c107",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Emergency Contact Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Emergency Contact Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 367,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Emergency Contact Number', '54321');\nawait resourceDetails.editValue('Emergency Contact Number', '654321');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Emergency Contact Number', '654321');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:286:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "a9221f2d-09c0-4ea4-9fc6-51f5c050dcad",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Emergency Contact Relation is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Emergency Contact Relation is Shownig and is editable.",
              "timedOut": false,
              "duration": 369,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Emergency Contact Relation', 'Father');\nawait resourceDetails.editValue('Emergency Contact Relation', 'Brother');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Emergency Contact Relation', 'Brother');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:297:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "e6eb9e7c-ed84-4331-ab5f-3f18ea8e5497",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Bank Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Bank Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 359,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Bank Name', 'Mybank');\nawait resourceDetails.editValue('Bank Name', 'Bankname');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Bank Name', 'Bankname');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:308:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "dbb6dfbc-cefb-4049-9eb0-e1aca65e2da9",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Account Title is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Account Title is Shownig and is editable.",
              "timedOut": false,
              "duration": 390,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Account Title', 'Current');\nawait resourceDetails.editValue('Account Title', 'Saving');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Account Title', 'Saving');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:319:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "fec5a910-5daa-45e5-91ee-84b39c45cec4",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource IBAN Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource IBAN Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 375,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('IBAN Number', '3344');\nawait resourceDetails.editValue('IBAN Number', '4455');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('IBAN Number', '4455');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:330:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "be9675a2-999e-45a1-8cc6-c7a5f8b3d8fd",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Bank Address is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Bank Address is Shownig and is editable.",
              "timedOut": false,
              "duration": 369,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Bank Address', 'qwerty');\nawait resourceDetails.editValue('Bank Address', 'street14');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Bank Address', 'street14');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:341:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "4d401c23-121b-49d0-bc9c-0352f8a28af6",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Certification Level is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Certification Level is Shownig and is editable.",
              "timedOut": false,
              "duration": 411,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Certification Level', 'Graduation');\nawait resourceDetails.editValue('Certification Level', 'Master');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Certification Level', 'Master');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:352:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "85218acf-3948-4555-af96-60713b49f496",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Field of Study is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Field of Study is Shownig and is editable.",
              "timedOut": false,
              "duration": 781,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Field of Study', 'SE');\nawait resourceDetails.editValue('Field of Study', 'CS');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Field of Study', 'CS');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:363:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "1f15bcfe-aa71-44e1-99f5-3d8ee194c034",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource School/University is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource School/University is Shownig and is editable.",
              "timedOut": false,
              "duration": 538,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('School/University', 'Mit');\nawait resourceDetails.editValue('School/University', 'Uol');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('School/University', 'Uol');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:374:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "e8f9d8de-f03c-4f0a-aa5b-658bd3611461",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Score/Percentage is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Score/Percentage is Shownig and is editable.",
              "timedOut": false,
              "duration": 603,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Score/Percentage', '70');\nawait resourceDetails.editValue('Score/Percentage', '80');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Score/Percentage', '80');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:385:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "bc928199-57aa-4c27-9a71-815ae42dafd3",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Passing Year is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Passing Year is Shownig and is editable.",
              "timedOut": false,
              "duration": 619,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Passing Year', '2020');\nawait resourceDetails.editValue('Passing Year', '2022');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Passing Year', '2022');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:396:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "c5b2f7d4-05dc-4858-9e70-5eea896608f3",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Name is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Name is Shownig and is editable.",
              "timedOut": false,
              "duration": 617,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Employee Name', 'Stevee');\nawait resourceDetails.editValue('Employee Name', 'Steve');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Employee Name', 'Steve');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:409:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "76a3cab4-7111-4fed-90cf-8e2eb710ea20",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Work Phone Number is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Work Phone Number is Shownig and is editable.",
              "timedOut": false,
              "duration": 541,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Work Phone Number', '123456');\nawait resourceDetails.editValue('Work Phone Number', '1234');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Work Phone Number', '1234');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:420:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "0ce65cee-7ce7-4917-baa1-a36acecbd2ee",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Designation is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Designation is Shownig and is editable.",
              "timedOut": false,
              "duration": 717,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Designation', 'Automation Associate SQA Automation');\nawait resourceDetails.editValue('Designation', 'Associate Software Engineer');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Designation', 'Automation Software Engineer');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:431:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "58d47b1e-d618-462a-ba39-b7a1cb4dad7a",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Work Shift is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Work Shift is Shownig and is editable.",
              "timedOut": false,
              "duration": 561,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Work Shift', 'Morning (9am-6pm)');\nawait resourceDetails.editValue('Work Shift', 'Evening (3pm-12pm)');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Work Shift', 'Evening (3pm-12pm)');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:442:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "bf2009e5-10ee-4d0d-9a69-959f8a67c9ba",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Work Location is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Work Location is Shownig and is editable.",
              "timedOut": false,
              "duration": 621,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Work Location', 'Remote');\nawait resourceDetails.editValue('Work Location', 'Lahore');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Work Location', 'Lahore');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:453:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "4d9bb804-1328-4957-b262-8f6c53f08709",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Attendance Mode is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Attendance Mode is Shownig and is editable.",
              "timedOut": false,
              "duration": 598,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Attendance Mode', 'Invodesk');\nawait resourceDetails.editValue('Attendance Mode', 'Tahometer');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Attendance Mode', 'Tahometer');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:464:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "80ae2b14-6355-4736-bc4a-afad32880b32",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Employee Id is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Employee Id is Shownig and is editable.",
              "timedOut": false,
              "duration": 570,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Employee ID', 'IZ-2023-11-01');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:475:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "428776f4-94c5-48e2-b00d-429c24e7fc09",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Experience is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Experience is Shownig and is editable.",
              "timedOut": false,
              "duration": 570,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Experience', '0');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:482:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "58ec31c3-61fd-4eed-80e9-4d6bfafb9318",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availability is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availability is Shownig and is editable.",
              "timedOut": false,
              "duration": 580,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Availability', 'Fully Available');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:489:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "f119c4b0-b1cc-483c-ade2-6557ac9908e2",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Current Salary (PKR) is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Current Salary (PKR) is Shownig and is editable.",
              "timedOut": false,
              "duration": 568,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Current Salary (PKR)', '50000');\nawait resourceDetails.editValue('Current Salary (PKR)', '60000');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Current Salary (PKR)', '60000');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:496:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "12ce91b9-f873-4203-b67a-701ae12ec7bb",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Last Salary is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Last Salary is Shownig and is editable.",
              "timedOut": false,
              "duration": 578,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Last Salary', '30000');\nawait resourceDetails.editValue('Last Salary', '35000');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Last Salary', '35000');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:507:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "cd48086f-8ae3-4859-ac9e-934fc266d0b2",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Last Increment Date is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Last Increment Date is Shownig and is editable.",
              "timedOut": false,
              "duration": 777,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Last Increment Date', 'Jan 01, 2024');\nawait resourceDetails.editValue('Last Increment Date', '01-10-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Last Increment Date', 'Jan 10, 2024');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:518:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/\n+ http://localhost:3000\n"
              },
              "uuid": "5f668f6b-3594-4e2f-8405-4cfefea78aee",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Department is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Department is Shownig and is editable.",
              "timedOut": false,
              "duration": 975,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Department', 'HR');\nawait resourceDetails.editValue('Department', 'Engineering');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Department', 'Engineering');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:529:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "4fd79483-15d4-4c95-b8a8-e116aa6d5a21",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Sub Department is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Sub Department is Shownig and is editable.",
              "timedOut": false,
              "duration": 635,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Sub Department', 'N/A');\nawait resourceDetails.editValue('Sub Department', 'DevOps Support');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Sub Department', 'DevOps Support');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:540:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "ae423903-7347-4028-a268-db923734d681",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Contract Type is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Contract Type is Shownig and is editable.",
              "timedOut": false,
              "duration": 612,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Contract Type', 'Full Time');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:551:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "95fc7d53-2f50-4193-9dc6-43103434e7bb",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Job Status is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Job Status is Shownig and is editable.",
              "timedOut": false,
              "duration": 556,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Job Status', 'Probation');\nawait resourceDetails.editValue('Job Status', 'Permanent');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Job Status', 'Permanent');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:558:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "7cdf1962-d93a-402a-9268-1d03c2953859",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Date of Joining is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Date of Joining is Shownig and is editable.",
              "timedOut": false,
              "duration": 626,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Date of Joining', 'Nov 01, 2023');\nawait resourceDetails.editValue('Date of Joining', '11-10-2023');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Date of Joining', 'Nov 10, 2023');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:569:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "317db729-49b3-44b7-b850-1bcfe8a82b3f",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Expected End of Probation Date is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Expected End of Probation Date is Shownig and is editable.",
              "timedOut": false,
              "duration": 571,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.editValue('Expected End of Probation Date', '01-10-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Expected End of Probation Date', 'Jan 10, 2024');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:580:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "fc2c4037-7756-4c42-86e2-9be2805e07c6",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Probation Completed is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Probation Completed is Shownig and is editable.",
              "timedOut": false,
              "duration": 568,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.editValue('Probation Completed', '01-10-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Probation Completed', 'Jan 10, 2024');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:590:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "23ee4bfe-78d8-4918-a632-52d3edfd0a54",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Permanent Date is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Permanent Date is Shownig and is editable.",
              "timedOut": false,
              "duration": 580,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.editValue('Permanent Date', '01-11-2024');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Permanent Date', 'Jan 11, 2024');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:600:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "df8e8ea9-6de8-45eb-982a-f74265ea0d86",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Total Working Hours is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Working Hours is Shownig and is editable.",
              "timedOut": false,
              "duration": 664,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Working Hours', '4');\nawait resourceDetails.editValue('Total Working Hours', '6');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Updated Successfully!');\nawait resourceDetails.checkValue('Total Working Hours', '6');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:610:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "524445bd-739d-463b-ac04-a178875787ac",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Earned Casual Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Earned Casual Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 600,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Earned Casual Leaves', '13');\nawait resourceDetails.editValue('Earned Casual Leaves', '12');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Leave quota updated successfully');\nawait resourceDetails.checkValue('Earned Casual Leaves', '12');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:623:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "8443eb47-8979-4003-a2f5-9e5fda14ec5b",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Earned Sick Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Earned Sick Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 666,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Earned Sick Leaves', '5');\nawait resourceDetails.editValue('Earned Sick Leaves', '4');\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Leave quota updated successfully');\nawait resourceDetails.checkValue('Earned Sick Leaves', '4');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:634:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "7fcd4d24-de84-4a87-9e52-03abb39fa1c0",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Total Leaves Earned (Casual/Sick) is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Leaves Earned (Casual/Sick) is Shownig and is editable.",
              "timedOut": false,
              "duration": 573,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Leaves Earned (Casual/Sick)', '16');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:645:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "ec091cc1-fc8e-4cd3-ac8e-eee14c9d687c",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availed Casual Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Casual Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 587,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Availed Casual Leaves', '0');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:652:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "17d71709-c202-4c78-814b-9bf7f7f75b74",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availed Sick Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Sick Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 597,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Availed Sick Leaves', '0');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:659:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "4d058f12-6aa2-4e1f-944b-d0b7b017f0c6",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Total Leaves Availed (Casual/Sick) is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Leaves Availed (Casual/Sick) is Shownig and is editable.",
              "timedOut": false,
              "duration": 596,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Leaves Availed (Casual/Sick)', '0');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:666:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "7b6d532f-7993-4644-abba-4e1c81947a1d",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Total Remaining Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Total Remaining Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 578,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkValue('Total Remaining Leaves', '16');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:673:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "4e5680d8-9157-400d-b019-c8845798bd9c",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availed Paid Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Paid Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 589,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkOtherLeaves('Availed Paid Leaves', '0');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:680:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "8ab6960c-195d-42c8-8fec-4a4be62261df",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Availed Unpaid Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Availed Unpaid Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 576,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkOtherLeaves('Availed Unpaid Leaves', '0');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:687:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "5bfe26ed-444c-4fbe-adba-8c8fe4c95dac",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Carry Forward Leaves is Shownig and is editable.",
              "fullTitle": "Resource Details should check if Resource Carry Forward Leaves is Shownig and is editable.",
              "timedOut": false,
              "duration": 644,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.checkOtherLeaves('Carry Forward Leaves', '0');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:694:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "ce6648c6-fef8-4e82-82f6-522fa0c3a09c",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Resource Project is Showing.",
              "fullTitle": "Resource Details should check if Resource Project is Showing.",
              "timedOut": false,
              "duration": 758,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nconst projectData = await resourceDetails.checkProjectDetails();\nassert.ok(projectData.includes('automation'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:703:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "98fbbe47-3ef9-4a79-8614-faeb500a290a",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to delete project from details page.",
              "fullTitle": "Resource Details should able to delete project from details page.",
              "timedOut": false,
              "duration": 705,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickDelProjectBtn();\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Resource removed from project successfully.');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:711:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "b2e6ca06-892f-4379-b4c6-e06983ff5197",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if Hardware records are showing correctly.",
              "fullTitle": "Resource Details should check if Hardware records are showing correctly.",
              "timedOut": false,
              "duration": 656,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [`UPDATE employee_assets SET \"employeeId\" = ${newId} WHERE \"employeeId\" = 9429;`];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nlet records = await resourceDetails.getAssetRecords();\nassert.ok(records.includes('Steve'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:724:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "008f242a-bb1c-4627-9e7d-2c892bf4f071",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add skills from Resource details page.",
              "fullTitle": "Resource Details should add skills from Resource details page.",
              "timedOut": false,
              "duration": 672,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickEditSkillBtn()\nawait resourceDetails.searchSkill('automation')\nawait resourceDetails.clickAddIcon()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Skills updated successfully.');\nawait resourceDetails.clickDoneBtn()",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:734:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "6e382c3a-293c-4de2-a6c0-c334bb3b3de3",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if skills records are showing correctly.",
              "fullTitle": "Resource Details should check if skills records are showing correctly.",
              "timedOut": false,
              "duration": 654,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nlet records = await resourceDetails.getSkillRecords();\nassert.ok(records.includes('Automation'), `Expected text not found.`);",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:746:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "770e3cc3-3806-4d1f-b7fe-00cec8875bc7",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should able to remove skill by editing.",
              "fullTitle": "Resource Details should able to remove skill by editing.",
              "timedOut": false,
              "duration": 681,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "await utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickEditSkillBtn()\nawait resourceDetails.clickRemoveSkillBtn()\nawait resourceDetails.clickYesBtn()\nconst alertText = await utilFun.checkAlert();\nassert.equal(alertText, 'Skill is deleted successfully');\nawait resourceDetails.clickDoneBtn()\nlet records = await resourceDetails.getSkillRecordsEmpty();\nconsole.log(records);\nassert.equal(records, 'No Data');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:754:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "67ad62d0-425d-49c2-a9f1-4fc1e71073c1",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should check if attendence is showing correctly.",
              "fullTitle": "Resource Details should check if attendence is showing correctly.",
              "timedOut": false,
              "duration": 631,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let query = [`UPDATE employee_attendances SET \"employeeId\" = ${newId} WHERE \"employeeId\" = 9429;`];\nawait utilFun.udpateDatabase(query);\nawait utilFun.visit(baseUrl + detailsPageUrl);\nconst url = await utilFun.getUrl();\nassert.equal(url, baseUrl + detailsPageUrl);\nawait resourceDetails.waitForNametoVisible();\nawait resourceDetails.clickAttendanceTab();\nconst url1 = await utilFun.getUrl();\nassert.equal(url1, baseUrl + attendanceTabUrl);\nawait resourceDetails.selectAttendanceYear(2024);\nawait resourceDetails.selectAttendanceMonth('Jan');\nawait utilFun.wait(2000)\nlet time = await resourceDetails.getTimeByDate('2024-01-22');\nassert.equal(time, '08:00');\ntime = await resourceDetails.getTimeByDate('2024-01-23');\nassert.equal(time, '08:00');\ntime = await resourceDetails.getTimeByDate('2024-01-24');\nassert.equal(time, '08:20');\ntime = await resourceDetails.getTimeByDate('2024-01-25');\nassert.equal(time, '07:30');\ntime = await resourceDetails.getTimeByDate('2024-01-26');\nassert.equal(time, '06:40');\nlet weekTime = await resourceDetails.getWeekTime(4);\nassert.equal(weekTime, '38:30');",
              "err": {
                "message": "AssertionError: 'http://localhost:3000/home' == 'http://localhost:3000'",
                "estack": "AssertionError [ERR_ASSERTION]: 'http://localhost:3000/home' == 'http://localhost:3000'\n    at Context.<anonymous> (test/e2e/resources/spec-4-resourse-details.js:773:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- http://localhost:3000/home\n+ http://localhost:3000\n"
              },
              "uuid": "18cf6c8b-d334-48e5-bc26-3073a110e473",
              "parentUUID": "53e2dd2a-6f7c-4eb7-8a9e-0ef3f00a0f1e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "8eb148c0-bef5-4aff-a629-85ffe97becb3",
            "26ba5f71-81ab-4645-9e9a-ba98d3cb5f76",
            "06249f94-26da-4cbf-a219-4910ae5219c1",
            "4ae25e0f-5cda-4d95-84dd-85c7f10937b7",
            "0edd1066-2b27-4963-9d77-d3e4b1cbb3de",
            "7067fc5d-bc5e-4cb0-b11e-fb3efc4ef730",
            "94b38c20-8077-4a0c-880b-02d5603a6d79",
            "6a130a66-d834-4c21-b7a1-2de18c7b0034",
            "a6df9695-ee2c-469c-a280-5c7f89198f26",
            "50044434-1656-4789-9255-e8892f8a1a04",
            "2d3c8b8c-1521-4259-8d50-3b30a565b67e",
            "e5622421-d154-434d-af91-892a5ca97005",
            "717e70fc-f68b-4ad5-a564-f568d8708d44",
            "8afd4907-4fdd-4553-9d3f-dc73649ebabd",
            "8c09dca2-906c-4296-a2e5-bb078dc7c107",
            "a9221f2d-09c0-4ea4-9fc6-51f5c050dcad",
            "e6eb9e7c-ed84-4331-ab5f-3f18ea8e5497",
            "dbb6dfbc-cefb-4049-9eb0-e1aca65e2da9",
            "fec5a910-5daa-45e5-91ee-84b39c45cec4",
            "be9675a2-999e-45a1-8cc6-c7a5f8b3d8fd",
            "4d401c23-121b-49d0-bc9c-0352f8a28af6",
            "85218acf-3948-4555-af96-60713b49f496",
            "1f15bcfe-aa71-44e1-99f5-3d8ee194c034",
            "e8f9d8de-f03c-4f0a-aa5b-658bd3611461",
            "bc928199-57aa-4c27-9a71-815ae42dafd3",
            "c5b2f7d4-05dc-4858-9e70-5eea896608f3",
            "76a3cab4-7111-4fed-90cf-8e2eb710ea20",
            "0ce65cee-7ce7-4917-baa1-a36acecbd2ee",
            "58d47b1e-d618-462a-ba39-b7a1cb4dad7a",
            "bf2009e5-10ee-4d0d-9a69-959f8a67c9ba",
            "4d9bb804-1328-4957-b262-8f6c53f08709",
            "80ae2b14-6355-4736-bc4a-afad32880b32",
            "428776f4-94c5-48e2-b00d-429c24e7fc09",
            "58ec31c3-61fd-4eed-80e9-4d6bfafb9318",
            "f119c4b0-b1cc-483c-ade2-6557ac9908e2",
            "12ce91b9-f873-4203-b67a-701ae12ec7bb",
            "cd48086f-8ae3-4859-ac9e-934fc266d0b2",
            "5f668f6b-3594-4e2f-8405-4cfefea78aee",
            "4fd79483-15d4-4c95-b8a8-e116aa6d5a21",
            "ae423903-7347-4028-a268-db923734d681",
            "95fc7d53-2f50-4193-9dc6-43103434e7bb",
            "7cdf1962-d93a-402a-9268-1d03c2953859",
            "317db729-49b3-44b7-b850-1bcfe8a82b3f",
            "fc2c4037-7756-4c42-86e2-9be2805e07c6",
            "23ee4bfe-78d8-4918-a632-52d3edfd0a54",
            "df8e8ea9-6de8-45eb-982a-f74265ea0d86",
            "524445bd-739d-463b-ac04-a178875787ac",
            "8443eb47-8979-4003-a2f5-9e5fda14ec5b",
            "7fcd4d24-de84-4a87-9e52-03abb39fa1c0",
            "ec091cc1-fc8e-4cd3-ac8e-eee14c9d687c",
            "17d71709-c202-4c78-814b-9bf7f7f75b74",
            "4d058f12-6aa2-4e1f-944b-d0b7b017f0c6",
            "7b6d532f-7993-4644-abba-4e1c81947a1d",
            "4e5680d8-9157-400d-b019-c8845798bd9c",
            "8ab6960c-195d-42c8-8fec-4a4be62261df",
            "5bfe26ed-444c-4fbe-adba-8c8fe4c95dac",
            "ce6648c6-fef8-4e82-82f6-522fa0c3a09c",
            "98fbbe47-3ef9-4a79-8614-faeb500a290a",
            "b2e6ca06-892f-4379-b4c6-e06983ff5197",
            "008f242a-bb1c-4627-9e7d-2c892bf4f071",
            "6e382c3a-293c-4de2-a6c0-c334bb3b3de3",
            "770e3cc3-3806-4d1f-b7fe-00cec8875bc7",
            "67ad62d0-425d-49c2-a9f1-4fc1e71073c1",
            "18cf6c8b-d334-48e5-bc26-3073a110e473"
          ],
          "pending": [],
          "skipped": [],
          "duration": 92317,
          "root": false,
          "rootEmpty": false,
          "_timeout": 100000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 100000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "test/report"
      },
      "version": "6.2.0"
    }
  }
}